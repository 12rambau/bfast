import sys
import numpy as np
import ctypes as ct
# Stub code for OpenCL setup.

import pyopencl as cl
import numpy as np
import sys

if cl.version.VERSION < (2015,2):
    raise Exception('Futhark requires at least PyOpenCL version 2015.2.  Installed version is %s.' %
                    cl.version.VERSION_TEXT)

def parse_preferred_device(s):
    pref_num = 0
    if len(s) > 1 and s[0] == '#':
        i = 1
        while i < len(s):
            if not s[i].isdigit():
                break
            else:
                pref_num = pref_num * 10 + int(s[i])
            i += 1
        while i < len(s) and s[i].isspace():
            i += 1
        return (s[i:], pref_num)
    else:
        return (s, 0)

def get_prefered_context(interactive=False, platform_pref=None, device_pref=None):
    if device_pref != None:
        (device_pref, device_num) = parse_preferred_device(device_pref)
    else:
        device_num = 0

    if interactive:
        return cl.create_some_context(interactive=True)

    def blacklisted(p, d):
        return platform_pref == None and device_pref == None and \
            p.name == "Apple" and d.name.find("Intel(R) Core(TM)") >= 0
    def platform_ok(p):
        return not platform_pref or p.name.find(platform_pref) >= 0
    def device_ok(d):
        return not device_pref or d.name.find(device_pref) >= 0

    device_matches = 0

    for p in cl.get_platforms():
        if not platform_ok(p):
            continue
        for d in p.get_devices():
            if blacklisted(p,d) or not device_ok(d):
                continue
            if device_matches == device_num:
                return cl.Context(devices=[d])
            else:
                device_matches += 1
    raise Exception('No OpenCL platform and device matching constraints found.')

def size_assignment(s):
    name, value = s.split('=')
    return (name, int(value))

def check_types(self, required_types):
    if 'f64' in required_types:
        if self.device.get_info(cl.device_info.PREFERRED_VECTOR_WIDTH_DOUBLE) == 0:
            raise Exception('Program uses double-precision floats, but this is not supported on chosen device: %s' % self.device.name)

def apply_size_heuristics(self, size_heuristics, sizes):
    for (platform_name, device_type, size, valuef) in size_heuristics:
        if sizes[size] == None \
           and self.platform.name.find(platform_name) >= 0 \
           and (self.device.type & device_type) == device_type:
               sizes[size] = valuef(self.device)
    return sizes

def initialise_opencl_object(self,
                             program_src='',
                             command_queue=None,
                             interactive=False,
                             platform_pref=None,
                             device_pref=None,
                             default_group_size=None,
                             default_num_groups=None,
                             default_tile_size=None,
                             default_threshold=None,
                             size_heuristics=[],
                             required_types=[],
                             all_sizes={},
                             user_sizes={}):
    if command_queue is None:
        self.ctx = get_prefered_context(interactive, platform_pref, device_pref)
        self.queue = cl.CommandQueue(self.ctx)
    else:
        self.ctx = command_queue.context
        self.queue = command_queue
    self.device = self.queue.device
    self.platform = self.device.platform
    self.pool = cl.tools.MemoryPool(cl.tools.ImmediateAllocator(self.queue))
    device_type = self.device.type

    check_types(self, required_types)

    max_group_size = int(self.device.max_work_group_size)
    max_tile_size = int(np.sqrt(self.device.max_work_group_size))

    self.max_group_size = max_group_size
    self.max_tile_size = max_tile_size
    self.max_threshold = 0
    self.max_num_groups = 0

    self.max_local_memory = int(self.device.local_mem_size)

    # Futhark reserves 4 bytes of local memory for its own purposes.
    self.max_local_memory -= 4

    # See comment in rts/c/opencl.h.
    if self.platform.name.find('NVIDIA CUDA') >= 0:
        self.max_local_memory -= 12
    elif self.platform.name.find('AMD') >= 0:
        self.max_local_memory -= 16

    self.free_list = {}

    self.global_failure = self.pool.allocate(np.int32().itemsize)
    cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)
    self.global_failure_args = self.pool.allocate(np.int64().itemsize *
                                                  (self.global_failure_args_max+1))
    self.failure_is_an_option = np.int32(0)

    if 'default_group_size' in sizes:
        default_group_size = sizes['default_group_size']
        del sizes['default_group_size']

    if 'default_num_groups' in sizes:
        default_num_groups = sizes['default_num_groups']
        del sizes['default_num_groups']

    if 'default_tile_size' in sizes:
        default_tile_size = sizes['default_tile_size']
        del sizes['default_tile_size']

    if 'default_threshold' in sizes:
        default_threshold = sizes['default_threshold']
        del sizes['default_threshold']

    default_group_size_set = default_group_size != None
    default_tile_size_set = default_tile_size != None
    default_sizes = apply_size_heuristics(self, size_heuristics,
                                          {'group_size': default_group_size,
                                           'tile_size': default_tile_size,
                                           'num_groups': default_num_groups,
                                           'lockstep_width': None,
                                           'threshold': default_threshold})
    default_group_size = default_sizes['group_size']
    default_num_groups = default_sizes['num_groups']
    default_threshold = default_sizes['threshold']
    default_tile_size = default_sizes['tile_size']
    lockstep_width = default_sizes['lockstep_width']

    if default_group_size > max_group_size:
        if default_group_size_set:
            sys.stderr.write('Note: Device limits group size to {} (down from {})\n'.
                             format(max_tile_size, default_group_size))
        default_group_size = max_group_size

    if default_tile_size > max_tile_size:
        if default_tile_size_set:
            sys.stderr.write('Note: Device limits tile size to {} (down from {})\n'.
                             format(max_tile_size, default_tile_size))
        default_tile_size = max_tile_size

    for (k,v) in user_sizes.items():
        if k in all_sizes:
            all_sizes[k]['value'] = v
        else:
            raise Exception('Unknown size: {}\nKnown sizes: {}'.format(k, ' '.join(all_sizes.keys())))

    self.sizes = {}
    for (k,v) in all_sizes.items():
        if v['class'] == 'group_size':
            max_value = max_group_size
            default_value = default_group_size
        elif v['class'] == 'num_groups':
            max_value = max_group_size # Intentional!
            default_value = default_num_groups
        elif v['class'] == 'tile_size':
            max_value = max_tile_size
            default_value = default_tile_size
        elif v['class'].startswith('threshold'):
            max_value = None
            default_value = default_threshold
        else:
            # Bespoke sizes have no limit or default.
            max_value = None
        if v['value'] == None:
            self.sizes[k] = default_value
        elif max_value != None and v['value'] > max_value:
            sys.stderr.write('Note: Device limits {} to {} (down from {}\n'.
                             format(k, max_value, v['value']))
            self.sizes[k] = max_value
        else:
            self.sizes[k] = v['value']

    # XXX: we perform only a subset of z-encoding here.  Really, the
    # compiler should provide us with the variables to which
    # parameters are mapped.
    if (len(program_src) >= 0):
        return cl.Program(self.ctx, program_src).build(
            ["-DLOCKSTEP_WIDTH={}".format(lockstep_width)]
            + ["-D{}={}".format(s.replace('z', 'zz').replace('.', 'zi').replace('#', 'zh'),v) for (s,v) in self.sizes.items()])

def opencl_alloc(self, min_size, tag):
    min_size = 1 if min_size == 0 else min_size
    assert min_size > 0
    return self.pool.allocate(min_size)

def opencl_free_all(self):
    self.pool.free_held()

def sync(self):
    failure = np.empty(1, dtype=np.int32)
    cl.enqueue_copy(self.queue, failure, self.global_failure, is_blocking=True)
    self.failure_is_an_option = np.int32(0)
    if failure[0] >= 0:
        # Reset failure information.
        cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)

        # Read failure args.
        failure_args = np.empty(self.global_failure_args_max+1, dtype=np.int64)
        cl.enqueue_copy(self.queue, failure_args, self.global_failure_args, is_blocking=True)

        raise Exception(self.failure_msgs[failure[0]].format(*failure_args))
import pyopencl.array
import time
import argparse
sizes = {}
synchronous = False
preferred_platform = None
preferred_device = None
default_threshold = None
default_group_size = None
default_num_groups = None
default_tile_size = None
fut_opencl_src = """#ifdef cl_clang_storage_class_specifiers
#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
#endif
#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#ifdef cl_nv_pragma_unroll
static inline void mem_fence_global()
{
    asm("membar.gl;");
}
#else
static inline void mem_fence_global()
{
    mem_fence(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
}
#endif
static inline void mem_fence_local()
{
    mem_fence(CLK_LOCAL_MEM_FENCE);
}
static inline uint8_t add8(uint8_t x, uint8_t y)
{
    return x + y;
}
static inline uint16_t add16(uint16_t x, uint16_t y)
{
    return x + y;
}
static inline uint32_t add32(uint32_t x, uint32_t y)
{
    return x + y;
}
static inline uint64_t add64(uint64_t x, uint64_t y)
{
    return x + y;
}
static inline uint8_t sub8(uint8_t x, uint8_t y)
{
    return x - y;
}
static inline uint16_t sub16(uint16_t x, uint16_t y)
{
    return x - y;
}
static inline uint32_t sub32(uint32_t x, uint32_t y)
{
    return x - y;
}
static inline uint64_t sub64(uint64_t x, uint64_t y)
{
    return x - y;
}
static inline uint8_t mul8(uint8_t x, uint8_t y)
{
    return x * y;
}
static inline uint16_t mul16(uint16_t x, uint16_t y)
{
    return x * y;
}
static inline uint32_t mul32(uint32_t x, uint32_t y)
{
    return x * y;
}
static inline uint64_t mul64(uint64_t x, uint64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t udiv_up8(uint8_t x, uint8_t y)
{
    return (x + y - 1) / y;
}
static inline uint16_t udiv_up16(uint16_t x, uint16_t y)
{
    return (x + y - 1) / y;
}
static inline uint32_t udiv_up32(uint32_t x, uint32_t y)
{
    return (x + y - 1) / y;
}
static inline uint64_t udiv_up64(uint64_t x, uint64_t y)
{
    return (x + y - 1) / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline uint8_t udiv_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint16_t udiv_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint32_t udiv_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint64_t udiv_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint8_t umod_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint16_t umod_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint32_t umod_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint64_t umod_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t sdiv_up8(int8_t x, int8_t y)
{
    return sdiv8(x + y - 1, y);
}
static inline int16_t sdiv_up16(int16_t x, int16_t y)
{
    return sdiv16(x + y - 1, y);
}
static inline int32_t sdiv_up32(int32_t x, int32_t y)
{
    return sdiv32(x + y - 1, y);
}
static inline int64_t sdiv_up64(int64_t x, int64_t y)
{
    return sdiv64(x + y - 1, y);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t sdiv_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : sdiv8(x, y);
}
static inline int16_t sdiv_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : sdiv16(x, y);
}
static inline int32_t sdiv_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : sdiv32(x, y);
}
static inline int64_t sdiv_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : sdiv64(x, y);
}
static inline int8_t sdiv_up_safe8(int8_t x, int8_t y)
{
    return sdiv_safe8(x + y - 1, y);
}
static inline int16_t sdiv_up_safe16(int16_t x, int16_t y)
{
    return sdiv_safe16(x + y - 1, y);
}
static inline int32_t sdiv_up_safe32(int32_t x, int32_t y)
{
    return sdiv_safe32(x + y - 1, y);
}
static inline int64_t sdiv_up_safe64(int64_t x, int64_t y)
{
    return sdiv_safe64(x + y - 1, y);
}
static inline int8_t smod_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : smod8(x, y);
}
static inline int16_t smod_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : smod16(x, y);
}
static inline int32_t smod_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : smod32(x, y);
}
static inline int64_t smod_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : smod64(x, y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t squot_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int16_t squot_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int32_t squot_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int64_t squot_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int8_t srem_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int16_t srem_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int32_t srem_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int64_t srem_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline bool ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline bool ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline bool ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline bool ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline bool ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline bool ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline bool ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline bool ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline bool slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline bool slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline bool slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline bool slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline bool sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline bool sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline bool sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline bool sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
#define sext_i8_i8(x) ((int8_t) (int8_t) x)
#define sext_i8_i16(x) ((int16_t) (int8_t) x)
#define sext_i8_i32(x) ((int32_t) (int8_t) x)
#define sext_i8_i64(x) ((int64_t) (int8_t) x)
#define sext_i16_i8(x) ((int8_t) (int16_t) x)
#define sext_i16_i16(x) ((int16_t) (int16_t) x)
#define sext_i16_i32(x) ((int32_t) (int16_t) x)
#define sext_i16_i64(x) ((int64_t) (int16_t) x)
#define sext_i32_i8(x) ((int8_t) (int32_t) x)
#define sext_i32_i16(x) ((int16_t) (int32_t) x)
#define sext_i32_i32(x) ((int32_t) (int32_t) x)
#define sext_i32_i64(x) ((int64_t) (int32_t) x)
#define sext_i64_i8(x) ((int8_t) (int64_t) x)
#define sext_i64_i16(x) ((int16_t) (int64_t) x)
#define sext_i64_i32(x) ((int32_t) (int64_t) x)
#define sext_i64_i64(x) ((int64_t) (int64_t) x)
#define zext_i8_i8(x) ((int8_t) (uint8_t) x)
#define zext_i8_i16(x) ((int16_t) (uint8_t) x)
#define zext_i8_i32(x) ((int32_t) (uint8_t) x)
#define zext_i8_i64(x) ((int64_t) (uint8_t) x)
#define zext_i16_i8(x) ((int8_t) (uint16_t) x)
#define zext_i16_i16(x) ((int16_t) (uint16_t) x)
#define zext_i16_i32(x) ((int32_t) (uint16_t) x)
#define zext_i16_i64(x) ((int64_t) (uint16_t) x)
#define zext_i32_i8(x) ((int8_t) (uint32_t) x)
#define zext_i32_i16(x) ((int16_t) (uint32_t) x)
#define zext_i32_i32(x) ((int32_t) (uint32_t) x)
#define zext_i32_i64(x) ((int64_t) (uint32_t) x)
#define zext_i64_i8(x) ((int8_t) (uint64_t) x)
#define zext_i64_i16(x) ((int16_t) (uint64_t) x)
#define zext_i64_i32(x) ((int32_t) (uint64_t) x)
#define zext_i64_i64(x) ((int64_t) (uint64_t) x)
#if defined(__OPENCL_VERSION__)
static int32_t futrts_popc8(int8_t x)
{
    return popcount(x);
}
static int32_t futrts_popc16(int16_t x)
{
    return popcount(x);
}
static int32_t futrts_popc32(int32_t x)
{
    return popcount(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return popcount(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_popc8(int8_t x)
{
    return __popc(zext_i8_i32(x));
}
static int32_t futrts_popc16(int16_t x)
{
    return __popc(zext_i16_i32(x));
}
static int32_t futrts_popc32(int32_t x)
{
    return __popc(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return __popcll(x);
}
#else
static int32_t futrts_popc8(int8_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc16(int16_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc32(int32_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc64(int64_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    return mul_hi(a, b);
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    return mul_hi(a, b);
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mul_hi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul_hi(a, b);
}
#elif defined(__CUDA_ARCH__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mulhi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul64hi(a, b);
}
#else
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    uint64_t aa = a;
    uint64_t bb = b;
    
    return aa * bb >> 32;
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    __uint128_t aa = a;
    __uint128_t bb = b;
    
    return aa * bb >> 64;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return mad_hi(a, b, c);
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return mad_hi(a, b, c);
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return mad_hi(a, b, c);
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return mad_hi(a, b, c);
}
#else
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return futrts_mul_hi8(a, b) + c;
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return futrts_mul_hi16(a, b) + c;
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return futrts_mul_hi32(a, b) + c;
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return futrts_mul_hi64(a, b) + c;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_clzz8(int8_t x)
{
    return clz(x);
}
static int32_t futrts_clzz16(int16_t x)
{
    return clz(x);
}
static int32_t futrts_clzz32(int32_t x)
{
    return clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return clz(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_clzz8(int8_t x)
{
    return __clz(zext_i8_i32(x)) - 24;
}
static int32_t futrts_clzz16(int16_t x)
{
    return __clz(zext_i16_i32(x)) - 16;
}
static int32_t futrts_clzz32(int32_t x)
{
    return __clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return __clzll(x);
}
#else
static int32_t futrts_clzz8(int8_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz16(int16_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz32(int32_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz64(int64_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_ctzz8(int8_t x)
{
    int i = 0;
    
    for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int i = 0;
    
    for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int i = 0;
    
    for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int i = 0;
    
    for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_ctzz8(int8_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 8 : y - 1;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 16 : y - 1;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 32 : y - 1;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int y = __ffsll(x);
    
    return y == 0 ? 64 : y - 1;
}
#else
static int32_t futrts_ctzz8(int8_t x)
{
    return x == 0 ? 8 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz16(int16_t x)
{
    return x == 0 ? 16 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz32(int32_t x)
{
    return x == 0 ? 32 : __builtin_ctz(x);
}
static int32_t futrts_ctzz64(int64_t x)
{
    return x == 0 ? 64 : __builtin_ctzl(x);
}
#endif
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return fmin(x, y);
}
static inline float fmax32(float x, float y)
{
    return fmax(x, y);
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline bool cmplt32(float x, float y)
{
    return x < y;
}
static inline bool cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return (float) x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return (float) x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return (float) x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return (float) x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return (float) x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return (float) x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return (float) x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return (float) x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return (int8_t) x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return (int16_t) x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return (int32_t) x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return (int64_t) x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return (uint8_t) x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return (uint16_t) x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return (uint32_t) x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return (uint64_t) x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_cosh32(float x)
{
    return cosh(x);
}
static inline float futrts_sinh32(float x)
{
    return sinh(x);
}
static inline float futrts_tanh32(float x)
{
    return tanh(x);
}
static inline float futrts_acosh32(float x)
{
    return acosh(x);
}
static inline float futrts_asinh32(float x)
{
    return asinh(x);
}
static inline float futrts_atanh32(float x)
{
    return atanh(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_gamma32(float x)
{
    return tgamma(x);
}
static inline float futrts_lgamma32(float x)
{
    return lgamma(x);
}
static inline bool futrts_isnan32(float x)
{
    return isnan(x);
}
static inline bool futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#ifdef __OPENCL_VERSION__
static inline float fmod32(float x, float y)
{
    return fmod(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline float futrts_floor32(float x)
{
    return floor(x);
}
static inline float futrts_ceil32(float x)
{
    return ceil(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return mix(v0, v1, t);
}
static inline float futrts_mad32(float a, float b, float c)
{
    return mad(a, b, c);
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fma(a, b, c);
}
#else
static inline float fmod32(float x, float y)
{
    return fmodf(x, y);
}
static inline float futrts_round32(float x)
{
    return rintf(x);
}
static inline float futrts_floor32(float x)
{
    return floorf(x);
}
static inline float futrts_ceil32(float x)
{
    return ceilf(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return v0 + (v1 - v0) * t;
}
static inline float futrts_mad32(float a, float b, float c)
{
    return a * b + c;
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fmaf(a, b, c);
}
#endif
// Start of atomics.h

inline int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline int32_t atomic_add_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline float atomic_fadd_f32_global(volatile __global float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline float atomic_fadd_f32_local(volatile __local float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smax_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_smin_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umax_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umin_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_and_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_or_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xor_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_cmpxchg_i32_local(volatile __local int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

// End of atomics.h




__kernel void builtinzhreplicate_f32zireplicate_38292(__global
                                                      unsigned char *mem_38288,
                                                      int32_t num_elems_38289,
                                                      float val_38290)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_38292;
    int32_t replicate_ltid_38293;
    int32_t replicate_gid_38294;
    
    replicate_gtid_38292 = get_global_id(0);
    replicate_ltid_38293 = get_local_id(0);
    replicate_gid_38294 = get_group_id(0);
    if (slt64(replicate_gtid_38292, num_elems_38289)) {
        ((__global float *) mem_38288)[sext_i32_i64(replicate_gtid_38292)] =
            val_38290;
    }
    
  error_0:
    return;
}
__kernel void builtinzhreplicate_i32zireplicate_38301(__global
                                                      unsigned char *mem_38297,
                                                      int32_t num_elems_38298,
                                                      int32_t val_38299)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_38301;
    int32_t replicate_ltid_38302;
    int32_t replicate_gid_38303;
    
    replicate_gtid_38301 = get_global_id(0);
    replicate_ltid_38302 = get_local_id(0);
    replicate_gid_38303 = get_group_id(0);
    if (slt64(replicate_gtid_38301, num_elems_38298)) {
        ((__global int32_t *) mem_38297)[sext_i32_i64(replicate_gtid_38301)] =
            val_38299;
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32(__local volatile
                                    int64_t *block_9_backing_aligned_0,
                                    int32_t destoffset_1, int32_t srcoffset_3,
                                    int32_t num_arrays_4, int32_t x_elems_5,
                                    int32_t y_elems_6, int32_t mulx_7,
                                    int32_t muly_8, __global
                                    unsigned char *destmem_0, __global
                                    unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_global_id_0_37;
    int32_t y_index_32 = get_group_id_1_41 * 32 + get_local_id_1_39;
    
    if (slt32(x_index_31, x_elems_5)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_in_35 = (y_index_32 + j_43 * 8) * x_elems_5 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, y_elems_6)) {
                ((__local float *) block_9)[sext_i32_i64((get_local_id_1_39 +
                                                          j_43 * 8) * 33 +
                                            get_local_id_0_38)] = ((__global
                                                                    float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                                       index_in_35)];
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 32 + get_local_id_0_38;
    y_index_32 = get_group_id_0_40 * 32 + get_local_id_1_39;
    if (slt32(x_index_31, y_elems_6)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_out_36 = (y_index_32 + j_43 * 8) * y_elems_6 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, x_elems_5)) {
                ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                               index_out_36)] = ((__local
                                                                  float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                                    33 +
                                                                                    get_local_id_1_39 +
                                                                                    j_43 *
                                                                                    8)];
            }
        }
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_height(__local volatile
                                               int64_t *block_9_backing_aligned_0,
                                               int32_t destoffset_1,
                                               int32_t srcoffset_3,
                                               int32_t num_arrays_4,
                                               int32_t x_elems_5,
                                               int32_t y_elems_6,
                                               int32_t mulx_7, int32_t muly_8,
                                               __global
                                               unsigned char *destmem_0,
                                               __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_0_38 +
            srem32(get_local_id_1_39, mulx_7) * 16;
    int32_t y_index_32 = get_group_id_1_41 * 16 + squot32(get_local_id_1_39,
                                                          mulx_7);
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 + squot32(get_local_id_0_38, mulx_7);
    y_index_32 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_1_39 +
        srem32(get_local_id_0_38, mulx_7) * 16;
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_width(__local volatile
                                              int64_t *block_9_backing_aligned_0,
                                              int32_t destoffset_1,
                                              int32_t srcoffset_3,
                                              int32_t num_arrays_4,
                                              int32_t x_elems_5,
                                              int32_t y_elems_6, int32_t mulx_7,
                                              int32_t muly_8, __global
                                              unsigned char *destmem_0, __global
                                              unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 + squot32(get_local_id_0_38,
                                                          muly_8);
    int32_t y_index_32 = get_group_id_1_41 * 16 * muly_8 + get_local_id_1_39 +
            srem32(get_local_id_0_38, muly_8) * 16;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 * muly_8 + get_local_id_0_38 +
        srem32(get_local_id_1_39, muly_8) * 16;
    y_index_32 = get_group_id_0_40 * 16 + squot32(get_local_id_1_39, muly_8);
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_small(__local volatile
                                          int64_t *block_9_backing_aligned_0,
                                          int32_t destoffset_1,
                                          int32_t srcoffset_3,
                                          int32_t num_arrays_4,
                                          int32_t x_elems_5, int32_t y_elems_6,
                                          int32_t mulx_7, int32_t muly_8,
                                          __global unsigned char *destmem_0,
                                          __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = squot32(get_global_id_0_37, y_elems_6 *
                                          x_elems_5) * (y_elems_6 * x_elems_5);
    int32_t x_index_31 = squot32(srem32(get_global_id_0_37, y_elems_6 *
                                        x_elems_5), y_elems_6);
    int32_t y_index_32 = srem32(get_global_id_0_37, y_elems_6);
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    int32_t index_out_36 = x_index_31 * y_elems_6 + y_index_32;
    
    if (slt32(get_global_id_0_37, x_elems_5 * y_elems_6 * num_arrays_4)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__global
                                                          float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                             index_in_35)];
    }
    
  error_0:
    return;
}
__kernel void mainzicopy_37996(int64_t m_24797, int64_t nm_24948,
                               int64_t ctx_param_ext_36883,
                               int64_t ctx_param_ext_36884,
                               int64_t ctx_param_ext_36886, __global
                               unsigned char *mem_param_36888, __global
                               unsigned char *mem_36893)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_gtid_37996;
    int32_t copy_ltid_37997;
    int32_t copy_gid_37998;
    
    copy_gtid_37996 = get_global_id(0);
    copy_ltid_37997 = get_local_id(0);
    copy_gid_37998 = get_group_id(0);
    if (slt64(sext_i32_i64(copy_gtid_37996), m_24797 * nm_24948)) {
        ((__global float *) mem_36893)[(sext_i32_i64(copy_gtid_37996) -
                                        squot64(sext_i32_i64(copy_gtid_37996),
                                                nm_24948) * nm_24948) *
                                       m_24797 +
                                       squot64(sext_i32_i64(copy_gtid_37996),
                                               nm_24948)] = ((__global
                                                              float *) mem_param_36888)[ctx_param_ext_36883 +
                                                                                        (squot64(sext_i32_i64(copy_gtid_37996),
                                                                                                 nm_24948) *
                                                                                         ctx_param_ext_36884 +
                                                                                         (sext_i32_i64(copy_gtid_37996) -
                                                                                          squot64(sext_i32_i64(copy_gtid_37996),
                                                                                                  nm_24948) *
                                                                                          nm_24948) *
                                                                                         ctx_param_ext_36886)];
    }
    
  error_0:
    return;
}
__kernel void mainziscan_stage1_32870(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38331_backing_aligned_0,
                                      int64_t N_24796, int64_t m_24797,
                                      int64_t N_24798, __global
                                      unsigned char *images_mem_36738, __global
                                      unsigned char *res_mem_37159, __global
                                      unsigned char *mem_37188, __global
                                      unsigned char *mem_37191,
                                      int32_t num_threads_38325)
{
    #define segscan_group_sizze_32887 (mainzisegscan_group_sizze_32864)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38331_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38331_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38326;
    int32_t local_tid_38327;
    int64_t group_sizze_38330;
    int32_t wave_sizze_38329;
    int32_t group_tid_38328;
    
    global_tid_38326 = get_global_id(0);
    local_tid_38327 = get_local_id(0);
    group_sizze_38330 = get_local_size(0);
    wave_sizze_38329 = LOCKSTEP_WIDTH;
    group_tid_38328 = get_group_id(0);
    
    int32_t phys_tid_32870;
    
    phys_tid_32870 = global_tid_38326;
    
    __local char *scan_arr_mem_38331;
    
    scan_arr_mem_38331 = (__local char *) scan_arr_mem_38331_backing_0;
    
    int64_t x_32892;
    int64_t x_32893;
    
    x_32892 = 0;
    for (int64_t j_38333 = 0; j_38333 < sdiv_up64(m_24797 * N_24796,
                                                  sext_i32_i64(num_threads_38325));
         j_38333++) {
        int64_t chunk_offset_38334 = segscan_group_sizze_32887 * j_38333 +
                sext_i32_i64(group_tid_38328) * (segscan_group_sizze_32887 *
                                                 sdiv_up64(m_24797 * N_24796,
                                                           sext_i32_i64(num_threads_38325)));
        int64_t flat_idx_38335 = chunk_offset_38334 +
                sext_i32_i64(local_tid_38327);
        int64_t gtid_32861 = squot64(flat_idx_38335, N_24796);
        int64_t gtid_32869 = flat_idx_38335 - squot64(flat_idx_38335, N_24796) *
                N_24796;
        
        // threads in bounds read input
        {
            if (slt64(gtid_32861, m_24797) && slt64(gtid_32869, N_24796)) {
                float x_32897 = ((__global
                                  float *) images_mem_36738)[gtid_32861 *
                                                             N_24798 +
                                                             gtid_32869];
                bool res_32899;
                
                res_32899 = futrts_isnan32(x_32897);
                
                bool cond_32900 = !res_32899;
                float res_32901;
                
                if (cond_32900) {
                    float x_32898 = ((__global
                                      float *) res_mem_37159)[gtid_32861 *
                                                              N_24796 +
                                                              gtid_32869];
                    float res_32902 = x_32897 - x_32898;
                    
                    res_32901 = res_32902;
                } else {
                    res_32901 = NAN;
                }
                
                bool res_32903;
                
                res_32903 = futrts_isnan32(res_32901);
                
                bool res_32904 = !res_32903;
                int64_t res_32905 = btoi_bool_i64(res_32904);
                
                // write to-scan values to parameters
                {
                    x_32893 = res_32905;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_37191)[gtid_32861 * N_24796 +
                                                   gtid_32869] = res_32901;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_32861, m_24797) && slt64(gtid_32869,
                                                          N_24796))) {
                    x_32893 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_32894 = add64(x_32892, x_32893);
                
                ((__local
                  int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)] =
                    res_32894;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38336;
            int64_t x_38337;
            int64_t x_38339;
            int64_t x_38340;
            bool ltid_in_bounds_38342;
            
            ltid_in_bounds_38342 = slt64(sext_i32_i64(local_tid_38327),
                                         segscan_group_sizze_32887);
            
            int32_t skip_threads_38343;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38342) {
                    x_38337 = ((volatile __local
                                int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)];
                    if ((local_tid_38327 - squot32(local_tid_38327, 32) * 32) ==
                        0) {
                        x_38336 = x_38337;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38343 = 1;
                while (slt32(skip_threads_38343, 32)) {
                    if (sle32(skip_threads_38343, local_tid_38327 -
                              squot32(local_tid_38327, 32) * 32) &&
                        ltid_in_bounds_38342) {
                        // read operands
                        {
                            x_38336 = ((volatile __local
                                        int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327) -
                                                                       sext_i32_i64(skip_threads_38343)];
                        }
                        // perform operation
                        {
                            bool inactive_38344 =
                                 slt64(srem64(sext_i32_i64(local_tid_38327) +
                                              chunk_offset_38334, N_24796),
                                       sext_i32_i64(local_tid_38327) +
                                       chunk_offset_38334 -
                                       (sext_i32_i64(local_tid_38327 -
                                        skip_threads_38343) +
                                        chunk_offset_38334));
                            
                            if (inactive_38344) {
                                x_38336 = x_38337;
                            }
                            if (!inactive_38344) {
                                int64_t res_38338 = add64(x_38336, x_38337);
                                
                                x_38336 = res_38338;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38329, skip_threads_38343)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38343, local_tid_38327 -
                              squot32(local_tid_38327, 32) * 32) &&
                        ltid_in_bounds_38342) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)] =
                                x_38336;
                            x_38337 = x_38336;
                        }
                    }
                    if (sle32(wave_sizze_38329, skip_threads_38343)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38343 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38327 - squot32(local_tid_38327, 32) * 32) ==
                    31 && ltid_in_bounds_38342) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38331)[sext_i32_i64(squot32(local_tid_38327,
                                                                          32))] =
                        x_38336;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38345;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38327, 32) == 0 &&
                        ltid_in_bounds_38342) {
                        x_38340 = ((volatile __local
                                    int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)];
                        if ((local_tid_38327 - squot32(local_tid_38327, 32) *
                             32) == 0) {
                            x_38339 = x_38340;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38345 = 1;
                    while (slt32(skip_threads_38345, 32)) {
                        if (sle32(skip_threads_38345, local_tid_38327 -
                                  squot32(local_tid_38327, 32) * 32) &&
                            (squot32(local_tid_38327, 32) == 0 &&
                             ltid_in_bounds_38342)) {
                            // read operands
                            {
                                x_38339 = ((volatile __local
                                            int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327) -
                                                                           sext_i32_i64(skip_threads_38345)];
                            }
                            // perform operation
                            {
                                bool inactive_38346 =
                                     slt64(srem64(sext_i32_i64(local_tid_38327 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38334, N_24796),
                                           sext_i32_i64(local_tid_38327 * 32 +
                                           32 - 1) + chunk_offset_38334 -
                                           (sext_i32_i64((local_tid_38327 -
                                                          skip_threads_38345) *
                                            32 + 32 - 1) + chunk_offset_38334));
                                
                                if (inactive_38346) {
                                    x_38339 = x_38340;
                                }
                                if (!inactive_38346) {
                                    int64_t res_38341 = add64(x_38339, x_38340);
                                    
                                    x_38339 = res_38341;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38329, skip_threads_38345)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38345, local_tid_38327 -
                                  squot32(local_tid_38327, 32) * 32) &&
                            (squot32(local_tid_38327, 32) == 0 &&
                             ltid_in_bounds_38342)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)] =
                                    x_38339;
                                x_38340 = x_38339;
                            }
                        }
                        if (sle32(wave_sizze_38329, skip_threads_38345)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38345 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38327, 32) == 0 ||
                      !ltid_in_bounds_38342)) {
                    // read operands
                    {
                        x_38337 = x_38336;
                        x_38336 = ((__local
                                    int64_t *) scan_arr_mem_38331)[sext_i32_i64(squot32(local_tid_38327,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_38347 =
                             slt64(srem64(sext_i32_i64(local_tid_38327) +
                                          chunk_offset_38334, N_24796),
                                   sext_i32_i64(local_tid_38327) +
                                   chunk_offset_38334 -
                                   (sext_i32_i64(squot32(local_tid_38327, 32) *
                                    32 - 1) + chunk_offset_38334));
                        
                        if (inactive_38347) {
                            x_38336 = x_38337;
                        }
                        if (!inactive_38347) {
                            int64_t res_38338 = add64(x_38336, x_38337);
                            
                            x_38336 = res_38338;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)] =
                            x_38336;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38327, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)] =
                        x_38337;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_32861, m_24797) && slt64(gtid_32869, N_24796)) {
                    ((__global int64_t *) mem_37188)[gtid_32861 * N_24796 +
                                                     gtid_32869] = ((__local
                                                                     int64_t *) scan_arr_mem_38331)[sext_i32_i64(local_tid_38327)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38348 = slt64(srem64(chunk_offset_38334 +
                                                          segscan_group_sizze_32887,
                                                          N_24796),
                                                   chunk_offset_38334 +
                                                   segscan_group_sizze_32887 -
                                                   (chunk_offset_38334 +
                                                    segscan_group_sizze_32887 -
                                                    1));
                bool should_load_carry_38349 = local_tid_38327 == 0 &&
                     !crosses_segment_38348;
                
                if (should_load_carry_38349) {
                    x_32892 = ((__local
                                int64_t *) scan_arr_mem_38331)[segscan_group_sizze_32887 -
                                                               1];
                }
                if (!should_load_carry_38349) {
                    x_32892 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_32887
}
__kernel void mainziscan_stage1_34556(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38949_backing_aligned_0,
                                      __local volatile
                                      int64_t *scan_arr_mem_38947_backing_aligned_1,
                                      __local volatile
                                      int64_t *scan_arr_mem_38945_backing_aligned_2,
                                      __local volatile
                                      int64_t *scan_arr_mem_38943_backing_aligned_3,
                                      int64_t m_24797, int64_t iota32_arg_25183,
                                      int32_t lifted_2_radix_sort_step_arg_35122,
                                      int32_t lifted_0_get_bit_arg_35123,
                                      unsigned char res_35124,
                                      unsigned char res_35125, __global
                                      unsigned char *mem_param_37524, __global
                                      unsigned char *mem_37551, __global
                                      unsigned char *mem_37554, __global
                                      unsigned char *mem_37557, __global
                                      unsigned char *mem_37560, __global
                                      unsigned char *mem_37563,
                                      int32_t num_threads_38937)
{
    #define segscan_group_sizze_35217 (mainzisegscan_group_sizze_34550)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38949_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_38949_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_38947_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_38947_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_38945_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_38945_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_38943_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38943_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38938;
    int32_t local_tid_38939;
    int64_t group_sizze_38942;
    int32_t wave_sizze_38941;
    int32_t group_tid_38940;
    
    global_tid_38938 = get_global_id(0);
    local_tid_38939 = get_local_id(0);
    group_sizze_38942 = get_local_size(0);
    wave_sizze_38941 = LOCKSTEP_WIDTH;
    group_tid_38940 = get_group_id(0);
    
    int32_t phys_tid_34556;
    
    phys_tid_34556 = global_tid_38938;
    
    __local char *scan_arr_mem_38943;
    __local char *scan_arr_mem_38945;
    __local char *scan_arr_mem_38947;
    __local char *scan_arr_mem_38949;
    
    scan_arr_mem_38943 = (__local char *) scan_arr_mem_38943_backing_0;
    scan_arr_mem_38945 = (__local char *) scan_arr_mem_38945_backing_1;
    scan_arr_mem_38947 = (__local char *) scan_arr_mem_38947_backing_2;
    scan_arr_mem_38949 = (__local char *) scan_arr_mem_38949_backing_3;
    
    int64_t x_35225;
    int64_t x_35226;
    int64_t x_35227;
    int64_t x_35228;
    int64_t x_35229;
    int64_t x_35230;
    int64_t x_35231;
    int64_t x_35232;
    
    x_35225 = 0;
    x_35226 = 0;
    x_35227 = 0;
    x_35228 = 0;
    for (int64_t j_38951 = 0; j_38951 < sdiv_up64(m_24797 * iota32_arg_25183,
                                                  sext_i32_i64(num_threads_38937));
         j_38951++) {
        int64_t chunk_offset_38952 = segscan_group_sizze_35217 * j_38951 +
                sext_i32_i64(group_tid_38940) * (segscan_group_sizze_35217 *
                                                 sdiv_up64(m_24797 *
                                                           iota32_arg_25183,
                                                           sext_i32_i64(num_threads_38937)));
        int64_t flat_idx_38953 = chunk_offset_38952 +
                sext_i32_i64(local_tid_38939);
        int64_t gtid_34547 = squot64(flat_idx_38953, iota32_arg_25183);
        int64_t gtid_34555 = flat_idx_38953 - squot64(flat_idx_38953,
                                                      iota32_arg_25183) *
                iota32_arg_25183;
        
        // threads in bounds read input
        {
            if (slt64(gtid_34547, m_24797) && slt64(gtid_34555,
                                                    iota32_arg_25183)) {
                float x_35238 = ((__global
                                  float *) mem_param_37524)[gtid_34547 *
                                                            iota32_arg_25183 +
                                                            gtid_34555];
                int32_t i32_arg_35239;
                
                i32_arg_35239 = futrts_to_bits32(x_35238);
                
                int32_t unsign_arg_35240 = ashr32(i32_arg_35239,
                                                  lifted_0_get_bit_arg_35123);
                int32_t unsign_arg_35241 = 1 & unsign_arg_35240;
                int32_t unsign_arg_35242 = ashr32(i32_arg_35239, 31);
                int32_t unsign_arg_35243 = 1 & unsign_arg_35242;
                bool cond_35244 = unsign_arg_35243 == 1;
                bool x_35245 = !cond_35244;
                bool y_35246 = res_35124 && x_35245;
                bool cond_35247 = cond_35244 || y_35246;
                int32_t res_35248;
                
                if (cond_35247) {
                    int32_t res_35249 = 1 ^ unsign_arg_35241;
                    
                    res_35248 = res_35249;
                } else {
                    res_35248 = unsign_arg_35241;
                }
                
                int32_t x_35250 = mul32(2, res_35248);
                int32_t unsign_arg_35251 = ashr32(i32_arg_35239,
                                                  lifted_2_radix_sort_step_arg_35122);
                int32_t unsign_arg_35252 = 1 & unsign_arg_35251;
                bool y_35253 = res_35125 && x_35245;
                bool cond_35254 = cond_35244 || y_35253;
                int32_t res_35255;
                
                if (cond_35254) {
                    int32_t res_35256 = 1 ^ unsign_arg_35252;
                    
                    res_35255 = res_35256;
                } else {
                    res_35255 = unsign_arg_35252;
                }
                
                int32_t res_35257 = add32(x_35250, res_35255);
                bool cond_35258 = res_35257 == 0;
                int64_t res_35259 = btoi_bool_i64(cond_35258);
                int64_t res_35260;
                int64_t res_35261;
                int64_t res_35262;
                
                if (cond_35258) {
                    res_35260 = 0;
                    res_35261 = 0;
                    res_35262 = 0;
                } else {
                    bool cond_35263 = res_35257 == 1;
                    int64_t res_35264 = btoi_bool_i64(cond_35263);
                    int64_t res_35265;
                    int64_t res_35266;
                    
                    if (cond_35263) {
                        res_35265 = 0;
                        res_35266 = 0;
                    } else {
                        bool cond_35267 = res_35257 == 2;
                        int64_t res_35268 = btoi_bool_i64(cond_35267);
                        bool cond_neg_35269 = !cond_35267;
                        int64_t res_35270 = btoi_bool_i64(cond_neg_35269);
                        
                        res_35265 = res_35268;
                        res_35266 = res_35270;
                    }
                    res_35260 = res_35264;
                    res_35261 = res_35265;
                    res_35262 = res_35266;
                }
                // write to-scan values to parameters
                {
                    x_35229 = res_35259;
                    x_35230 = res_35260;
                    x_35231 = res_35261;
                    x_35232 = res_35262;
                }
                // write mapped values results to global memory
                {
                    ((__global int32_t *) mem_37563)[gtid_34547 *
                                                     iota32_arg_25183 +
                                                     gtid_34555] = res_35257;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_34547, m_24797) && slt64(gtid_34555,
                                                          iota32_arg_25183))) {
                    x_35229 = 0;
                    x_35230 = 0;
                    x_35231 = 0;
                    x_35232 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_35233 = add64(x_35225, x_35229);
                int64_t res_35234 = add64(x_35226, x_35230);
                int64_t res_35235 = add64(x_35227, x_35231);
                int64_t res_35236 = add64(x_35228, x_35232);
                
                ((__local
                  int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)] =
                    res_35233;
                ((__local
                  int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)] =
                    res_35234;
                ((__local
                  int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)] =
                    res_35235;
                ((__local
                  int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)] =
                    res_35236;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38954;
            int64_t x_38955;
            int64_t x_38956;
            int64_t x_38957;
            int64_t x_38958;
            int64_t x_38959;
            int64_t x_38960;
            int64_t x_38961;
            int64_t x_38966;
            int64_t x_38967;
            int64_t x_38968;
            int64_t x_38969;
            int64_t x_38970;
            int64_t x_38971;
            int64_t x_38972;
            int64_t x_38973;
            bool ltid_in_bounds_38978;
            
            ltid_in_bounds_38978 = slt64(sext_i32_i64(local_tid_38939),
                                         segscan_group_sizze_35217);
            
            int32_t skip_threads_38979;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38978) {
                    x_38958 = ((volatile __local
                                int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)];
                    x_38959 = ((volatile __local
                                int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)];
                    x_38960 = ((volatile __local
                                int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)];
                    x_38961 = ((volatile __local
                                int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)];
                    if ((local_tid_38939 - squot32(local_tid_38939, 32) * 32) ==
                        0) {
                        x_38954 = x_38958;
                        x_38955 = x_38959;
                        x_38956 = x_38960;
                        x_38957 = x_38961;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38979 = 1;
                while (slt32(skip_threads_38979, 32)) {
                    if (sle32(skip_threads_38979, local_tid_38939 -
                              squot32(local_tid_38939, 32) * 32) &&
                        ltid_in_bounds_38978) {
                        // read operands
                        {
                            x_38954 = ((volatile __local
                                        int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939) -
                                                                       sext_i32_i64(skip_threads_38979)];
                            x_38955 = ((volatile __local
                                        int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939) -
                                                                       sext_i32_i64(skip_threads_38979)];
                            x_38956 = ((volatile __local
                                        int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939) -
                                                                       sext_i32_i64(skip_threads_38979)];
                            x_38957 = ((volatile __local
                                        int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939) -
                                                                       sext_i32_i64(skip_threads_38979)];
                        }
                        // perform operation
                        {
                            bool inactive_38980 =
                                 slt64(srem64(sext_i32_i64(local_tid_38939) +
                                              chunk_offset_38952,
                                              iota32_arg_25183),
                                       sext_i32_i64(local_tid_38939) +
                                       chunk_offset_38952 -
                                       (sext_i32_i64(local_tid_38939 -
                                        skip_threads_38979) +
                                        chunk_offset_38952));
                            
                            if (inactive_38980) {
                                x_38954 = x_38958;
                                x_38955 = x_38959;
                                x_38956 = x_38960;
                                x_38957 = x_38961;
                            }
                            if (!inactive_38980) {
                                int64_t res_38962 = add64(x_38954, x_38958);
                                int64_t res_38963 = add64(x_38955, x_38959);
                                int64_t res_38964 = add64(x_38956, x_38960);
                                int64_t res_38965 = add64(x_38957, x_38961);
                                
                                x_38954 = res_38962;
                                x_38955 = res_38963;
                                x_38956 = res_38964;
                                x_38957 = res_38965;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38941, skip_threads_38979)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38979, local_tid_38939 -
                              squot32(local_tid_38939, 32) * 32) &&
                        ltid_in_bounds_38978) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)] =
                                x_38954;
                            x_38958 = x_38954;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)] =
                                x_38955;
                            x_38959 = x_38955;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)] =
                                x_38956;
                            x_38960 = x_38956;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)] =
                                x_38957;
                            x_38961 = x_38957;
                        }
                    }
                    if (sle32(wave_sizze_38941, skip_threads_38979)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38979 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38939 - squot32(local_tid_38939, 32) * 32) ==
                    31 && ltid_in_bounds_38978) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38943)[sext_i32_i64(squot32(local_tid_38939,
                                                                          32))] =
                        x_38954;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38945)[sext_i32_i64(squot32(local_tid_38939,
                                                                          32))] =
                        x_38955;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38947)[sext_i32_i64(squot32(local_tid_38939,
                                                                          32))] =
                        x_38956;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38949)[sext_i32_i64(squot32(local_tid_38939,
                                                                          32))] =
                        x_38957;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38981;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38939, 32) == 0 &&
                        ltid_in_bounds_38978) {
                        x_38970 = ((volatile __local
                                    int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)];
                        x_38971 = ((volatile __local
                                    int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)];
                        x_38972 = ((volatile __local
                                    int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)];
                        x_38973 = ((volatile __local
                                    int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)];
                        if ((local_tid_38939 - squot32(local_tid_38939, 32) *
                             32) == 0) {
                            x_38966 = x_38970;
                            x_38967 = x_38971;
                            x_38968 = x_38972;
                            x_38969 = x_38973;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38981 = 1;
                    while (slt32(skip_threads_38981, 32)) {
                        if (sle32(skip_threads_38981, local_tid_38939 -
                                  squot32(local_tid_38939, 32) * 32) &&
                            (squot32(local_tid_38939, 32) == 0 &&
                             ltid_in_bounds_38978)) {
                            // read operands
                            {
                                x_38966 = ((volatile __local
                                            int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939) -
                                                                           sext_i32_i64(skip_threads_38981)];
                                x_38967 = ((volatile __local
                                            int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939) -
                                                                           sext_i32_i64(skip_threads_38981)];
                                x_38968 = ((volatile __local
                                            int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939) -
                                                                           sext_i32_i64(skip_threads_38981)];
                                x_38969 = ((volatile __local
                                            int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939) -
                                                                           sext_i32_i64(skip_threads_38981)];
                            }
                            // perform operation
                            {
                                bool inactive_38982 =
                                     slt64(srem64(sext_i32_i64(local_tid_38939 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38952,
                                                  iota32_arg_25183),
                                           sext_i32_i64(local_tid_38939 * 32 +
                                           32 - 1) + chunk_offset_38952 -
                                           (sext_i32_i64((local_tid_38939 -
                                                          skip_threads_38981) *
                                            32 + 32 - 1) + chunk_offset_38952));
                                
                                if (inactive_38982) {
                                    x_38966 = x_38970;
                                    x_38967 = x_38971;
                                    x_38968 = x_38972;
                                    x_38969 = x_38973;
                                }
                                if (!inactive_38982) {
                                    int64_t res_38974 = add64(x_38966, x_38970);
                                    int64_t res_38975 = add64(x_38967, x_38971);
                                    int64_t res_38976 = add64(x_38968, x_38972);
                                    int64_t res_38977 = add64(x_38969, x_38973);
                                    
                                    x_38966 = res_38974;
                                    x_38967 = res_38975;
                                    x_38968 = res_38976;
                                    x_38969 = res_38977;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38941, skip_threads_38981)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38981, local_tid_38939 -
                                  squot32(local_tid_38939, 32) * 32) &&
                            (squot32(local_tid_38939, 32) == 0 &&
                             ltid_in_bounds_38978)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)] =
                                    x_38966;
                                x_38970 = x_38966;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)] =
                                    x_38967;
                                x_38971 = x_38967;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)] =
                                    x_38968;
                                x_38972 = x_38968;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)] =
                                    x_38969;
                                x_38973 = x_38969;
                            }
                        }
                        if (sle32(wave_sizze_38941, skip_threads_38981)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38981 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38939, 32) == 0 ||
                      !ltid_in_bounds_38978)) {
                    // read operands
                    {
                        x_38958 = x_38954;
                        x_38959 = x_38955;
                        x_38960 = x_38956;
                        x_38961 = x_38957;
                        x_38954 = ((__local
                                    int64_t *) scan_arr_mem_38943)[sext_i32_i64(squot32(local_tid_38939,
                                                                                        32)) -
                                                                   1];
                        x_38955 = ((__local
                                    int64_t *) scan_arr_mem_38945)[sext_i32_i64(squot32(local_tid_38939,
                                                                                        32)) -
                                                                   1];
                        x_38956 = ((__local
                                    int64_t *) scan_arr_mem_38947)[sext_i32_i64(squot32(local_tid_38939,
                                                                                        32)) -
                                                                   1];
                        x_38957 = ((__local
                                    int64_t *) scan_arr_mem_38949)[sext_i32_i64(squot32(local_tid_38939,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_38983 =
                             slt64(srem64(sext_i32_i64(local_tid_38939) +
                                          chunk_offset_38952, iota32_arg_25183),
                                   sext_i32_i64(local_tid_38939) +
                                   chunk_offset_38952 -
                                   (sext_i32_i64(squot32(local_tid_38939, 32) *
                                    32 - 1) + chunk_offset_38952));
                        
                        if (inactive_38983) {
                            x_38954 = x_38958;
                            x_38955 = x_38959;
                            x_38956 = x_38960;
                            x_38957 = x_38961;
                        }
                        if (!inactive_38983) {
                            int64_t res_38962 = add64(x_38954, x_38958);
                            int64_t res_38963 = add64(x_38955, x_38959);
                            int64_t res_38964 = add64(x_38956, x_38960);
                            int64_t res_38965 = add64(x_38957, x_38961);
                            
                            x_38954 = res_38962;
                            x_38955 = res_38963;
                            x_38956 = res_38964;
                            x_38957 = res_38965;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)] =
                            x_38954;
                        ((__local
                          int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)] =
                            x_38955;
                        ((__local
                          int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)] =
                            x_38956;
                        ((__local
                          int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)] =
                            x_38957;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38939, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)] =
                        x_38958;
                    ((__local
                      int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)] =
                        x_38959;
                    ((__local
                      int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)] =
                        x_38960;
                    ((__local
                      int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)] =
                        x_38961;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_34547, m_24797) && slt64(gtid_34555,
                                                        iota32_arg_25183)) {
                    ((__global int64_t *) mem_37551)[gtid_34547 *
                                                     iota32_arg_25183 +
                                                     gtid_34555] = ((__local
                                                                     int64_t *) scan_arr_mem_38943)[sext_i32_i64(local_tid_38939)];
                    ((__global int64_t *) mem_37554)[gtid_34547 *
                                                     iota32_arg_25183 +
                                                     gtid_34555] = ((__local
                                                                     int64_t *) scan_arr_mem_38945)[sext_i32_i64(local_tid_38939)];
                    ((__global int64_t *) mem_37557)[gtid_34547 *
                                                     iota32_arg_25183 +
                                                     gtid_34555] = ((__local
                                                                     int64_t *) scan_arr_mem_38947)[sext_i32_i64(local_tid_38939)];
                    ((__global int64_t *) mem_37560)[gtid_34547 *
                                                     iota32_arg_25183 +
                                                     gtid_34555] = ((__local
                                                                     int64_t *) scan_arr_mem_38949)[sext_i32_i64(local_tid_38939)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38984 = slt64(srem64(chunk_offset_38952 +
                                                          segscan_group_sizze_35217,
                                                          iota32_arg_25183),
                                                   chunk_offset_38952 +
                                                   segscan_group_sizze_35217 -
                                                   (chunk_offset_38952 +
                                                    segscan_group_sizze_35217 -
                                                    1));
                bool should_load_carry_38985 = local_tid_38939 == 0 &&
                     !crosses_segment_38984;
                
                if (should_load_carry_38985) {
                    x_35225 = ((__local
                                int64_t *) scan_arr_mem_38943)[segscan_group_sizze_35217 -
                                                               1];
                    x_35226 = ((__local
                                int64_t *) scan_arr_mem_38945)[segscan_group_sizze_35217 -
                                                               1];
                    x_35227 = ((__local
                                int64_t *) scan_arr_mem_38947)[segscan_group_sizze_35217 -
                                                               1];
                    x_35228 = ((__local
                                int64_t *) scan_arr_mem_38949)[segscan_group_sizze_35217 -
                                                               1];
                }
                if (!should_load_carry_38985) {
                    x_35225 = 0;
                    x_35226 = 0;
                    x_35227 = 0;
                    x_35228 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_35217
}
__kernel void mainziscan_stage1_34902(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38748_backing_aligned_0,
                                      int64_t N_24796, int64_t m_24797,
                                      int64_t iota32_arg_25183, __global
                                      unsigned char *res_mem_37197, __global
                                      unsigned char *res_mem_37276, __global
                                      unsigned char *res_mem_37277, __global
                                      unsigned char *res_mem_37327, __global
                                      unsigned char *mem_37494, __global
                                      unsigned char *mem_37498,
                                      int32_t num_threads_38742)
{
    #define segscan_group_sizze_34980 (mainzisegscan_group_sizze_34896)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38748_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38748_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38743;
    int32_t local_tid_38744;
    int64_t group_sizze_38747;
    int32_t wave_sizze_38746;
    int32_t group_tid_38745;
    
    global_tid_38743 = get_global_id(0);
    local_tid_38744 = get_local_id(0);
    group_sizze_38747 = get_local_size(0);
    wave_sizze_38746 = LOCKSTEP_WIDTH;
    group_tid_38745 = get_group_id(0);
    
    int32_t phys_tid_34902;
    
    phys_tid_34902 = global_tid_38743;
    
    __local char *scan_arr_mem_38748;
    
    scan_arr_mem_38748 = (__local char *) scan_arr_mem_38748_backing_0;
    
    float x_34984;
    float x_34985;
    
    x_34984 = 0.0F;
    for (int64_t j_38750 = 0; j_38750 < sdiv_up64(m_24797 * iota32_arg_25183,
                                                  sext_i32_i64(num_threads_38742));
         j_38750++) {
        int64_t chunk_offset_38751 = segscan_group_sizze_34980 * j_38750 +
                sext_i32_i64(group_tid_38745) * (segscan_group_sizze_34980 *
                                                 sdiv_up64(m_24797 *
                                                           iota32_arg_25183,
                                                           sext_i32_i64(num_threads_38742)));
        int64_t flat_idx_38752 = chunk_offset_38751 +
                sext_i32_i64(local_tid_38744);
        int64_t gtid_34893 = squot64(flat_idx_38752, iota32_arg_25183);
        int64_t gtid_34901 = flat_idx_38752 - squot64(flat_idx_38752,
                                                      iota32_arg_25183) *
                iota32_arg_25183;
        
        // threads in bounds read input
        {
            if (slt64(gtid_34893, m_24797) && slt64(gtid_34901,
                                                    iota32_arg_25183)) {
                int32_t y_34991 = ((__global int32_t *) mem_37494)[gtid_34893];
                int32_t index_primexp_35463 = sext_i64_i32(gtid_34901);
                bool cond_34994 = sle32(y_34991, index_primexp_35463);
                float res_34995;
                
                if (cond_34994) {
                    res_34995 = 0.0F;
                } else {
                    int32_t x_34987 = ((__global
                                        int32_t *) res_mem_37277)[gtid_34893];
                    int32_t x_34988 = ((__global
                                        int32_t *) res_mem_37276)[gtid_34893];
                    float x_34989 = ((__global
                                      float *) res_mem_37327)[gtid_34893];
                    bool cond_34996 = index_primexp_35463 == 0;
                    float res_34997;
                    
                    if (cond_34996) {
                        res_34997 = x_34989;
                    } else {
                        int32_t i_34998 = add32(x_34987, index_primexp_35463);
                        int64_t i_34999 = sext_i32_i64(i_34998);
                        float x_35000 = ((__global
                                          float *) res_mem_37197)[gtid_34893 *
                                                                  N_24796 +
                                                                  i_34999];
                        int32_t x_35001 = sub32(x_34987, x_34988);
                        int32_t i_35002 = add32(x_35001, index_primexp_35463);
                        int64_t i_35003 = sext_i32_i64(i_35002);
                        float y_35004 = ((__global
                                          float *) res_mem_37197)[gtid_34893 *
                                                                  N_24796 +
                                                                  i_35003];
                        float res_35005 = x_35000 - y_35004;
                        
                        res_34997 = res_35005;
                    }
                    res_34995 = res_34997;
                }
                // write to-scan values to parameters
                {
                    x_34985 = res_34995;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_34893, m_24797) && slt64(gtid_34901,
                                                          iota32_arg_25183))) {
                    x_34985 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float res_34986 = x_34984 + x_34985;
                
                ((__local
                  float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)] =
                    res_34986;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_38753;
            float x_38754;
            float x_38756;
            float x_38757;
            bool ltid_in_bounds_38759;
            
            ltid_in_bounds_38759 = slt64(sext_i32_i64(local_tid_38744),
                                         segscan_group_sizze_34980);
            
            int32_t skip_threads_38760;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38759) {
                    x_38754 = ((volatile __local
                                float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)];
                    if ((local_tid_38744 - squot32(local_tid_38744, 32) * 32) ==
                        0) {
                        x_38753 = x_38754;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38760 = 1;
                while (slt32(skip_threads_38760, 32)) {
                    if (sle32(skip_threads_38760, local_tid_38744 -
                              squot32(local_tid_38744, 32) * 32) &&
                        ltid_in_bounds_38759) {
                        // read operands
                        {
                            x_38753 = ((volatile __local
                                        float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744) -
                                                                     sext_i32_i64(skip_threads_38760)];
                        }
                        // perform operation
                        {
                            bool inactive_38761 =
                                 slt64(srem64(sext_i32_i64(local_tid_38744) +
                                              chunk_offset_38751,
                                              iota32_arg_25183),
                                       sext_i32_i64(local_tid_38744) +
                                       chunk_offset_38751 -
                                       (sext_i32_i64(local_tid_38744 -
                                        skip_threads_38760) +
                                        chunk_offset_38751));
                            
                            if (inactive_38761) {
                                x_38753 = x_38754;
                            }
                            if (!inactive_38761) {
                                float res_38755 = x_38753 + x_38754;
                                
                                x_38753 = res_38755;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38746, skip_threads_38760)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38760, local_tid_38744 -
                              squot32(local_tid_38744, 32) * 32) &&
                        ltid_in_bounds_38759) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)] =
                                x_38753;
                            x_38754 = x_38753;
                        }
                    }
                    if (sle32(wave_sizze_38746, skip_threads_38760)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38760 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38744 - squot32(local_tid_38744, 32) * 32) ==
                    31 && ltid_in_bounds_38759) {
                    ((volatile __local
                      float *) scan_arr_mem_38748)[sext_i32_i64(squot32(local_tid_38744,
                                                                        32))] =
                        x_38753;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38762;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38744, 32) == 0 &&
                        ltid_in_bounds_38759) {
                        x_38757 = ((volatile __local
                                    float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)];
                        if ((local_tid_38744 - squot32(local_tid_38744, 32) *
                             32) == 0) {
                            x_38756 = x_38757;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38762 = 1;
                    while (slt32(skip_threads_38762, 32)) {
                        if (sle32(skip_threads_38762, local_tid_38744 -
                                  squot32(local_tid_38744, 32) * 32) &&
                            (squot32(local_tid_38744, 32) == 0 &&
                             ltid_in_bounds_38759)) {
                            // read operands
                            {
                                x_38756 = ((volatile __local
                                            float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744) -
                                                                         sext_i32_i64(skip_threads_38762)];
                            }
                            // perform operation
                            {
                                bool inactive_38763 =
                                     slt64(srem64(sext_i32_i64(local_tid_38744 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38751,
                                                  iota32_arg_25183),
                                           sext_i32_i64(local_tid_38744 * 32 +
                                           32 - 1) + chunk_offset_38751 -
                                           (sext_i32_i64((local_tid_38744 -
                                                          skip_threads_38762) *
                                            32 + 32 - 1) + chunk_offset_38751));
                                
                                if (inactive_38763) {
                                    x_38756 = x_38757;
                                }
                                if (!inactive_38763) {
                                    float res_38758 = x_38756 + x_38757;
                                    
                                    x_38756 = res_38758;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38746, skip_threads_38762)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38762, local_tid_38744 -
                                  squot32(local_tid_38744, 32) * 32) &&
                            (squot32(local_tid_38744, 32) == 0 &&
                             ltid_in_bounds_38759)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)] =
                                    x_38756;
                                x_38757 = x_38756;
                            }
                        }
                        if (sle32(wave_sizze_38746, skip_threads_38762)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38762 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38744, 32) == 0 ||
                      !ltid_in_bounds_38759)) {
                    // read operands
                    {
                        x_38754 = x_38753;
                        x_38753 = ((__local
                                    float *) scan_arr_mem_38748)[sext_i32_i64(squot32(local_tid_38744,
                                                                                      32)) -
                                                                 1];
                    }
                    // perform operation
                    {
                        bool inactive_38764 =
                             slt64(srem64(sext_i32_i64(local_tid_38744) +
                                          chunk_offset_38751, iota32_arg_25183),
                                   sext_i32_i64(local_tid_38744) +
                                   chunk_offset_38751 -
                                   (sext_i32_i64(squot32(local_tid_38744, 32) *
                                    32 - 1) + chunk_offset_38751));
                        
                        if (inactive_38764) {
                            x_38753 = x_38754;
                        }
                        if (!inactive_38764) {
                            float res_38755 = x_38753 + x_38754;
                            
                            x_38753 = res_38755;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)] =
                            x_38753;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38744, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)] =
                        x_38754;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_34893, m_24797) && slt64(gtid_34901,
                                                        iota32_arg_25183)) {
                    ((__global float *) mem_37498)[gtid_34893 *
                                                   iota32_arg_25183 +
                                                   gtid_34901] = ((__local
                                                                   float *) scan_arr_mem_38748)[sext_i32_i64(local_tid_38744)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38765 = slt64(srem64(chunk_offset_38751 +
                                                          segscan_group_sizze_34980,
                                                          iota32_arg_25183),
                                                   chunk_offset_38751 +
                                                   segscan_group_sizze_34980 -
                                                   (chunk_offset_38751 +
                                                    segscan_group_sizze_34980 -
                                                    1));
                bool should_load_carry_38766 = local_tid_38744 == 0 &&
                     !crosses_segment_38765;
                
                if (should_load_carry_38766) {
                    x_34984 = ((__local
                                float *) scan_arr_mem_38748)[segscan_group_sizze_34980 -
                                                             1];
                }
                if (!should_load_carry_38766) {
                    x_34984 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_34980
}
__kernel void mainziscan_stage2_32870(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38355_backing_aligned_0,
                                      int64_t N_24796, int64_t m_24797, __global
                                      unsigned char *mem_37188,
                                      int64_t stage1_num_groups_38324,
                                      int32_t num_threads_38325)
{
    #define segscan_group_sizze_32887 (mainzisegscan_group_sizze_32864)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38355_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38355_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38350;
    int32_t local_tid_38351;
    int64_t group_sizze_38354;
    int32_t wave_sizze_38353;
    int32_t group_tid_38352;
    
    global_tid_38350 = get_global_id(0);
    local_tid_38351 = get_local_id(0);
    group_sizze_38354 = get_local_size(0);
    wave_sizze_38353 = LOCKSTEP_WIDTH;
    group_tid_38352 = get_group_id(0);
    
    int32_t phys_tid_32870;
    
    phys_tid_32870 = global_tid_38350;
    
    __local char *scan_arr_mem_38355;
    
    scan_arr_mem_38355 = (__local char *) scan_arr_mem_38355_backing_0;
    
    int64_t flat_idx_38357;
    
    flat_idx_38357 = (sext_i32_i64(local_tid_38351) + 1) *
        (segscan_group_sizze_32887 * sdiv_up64(m_24797 * N_24796,
                                               sext_i32_i64(num_threads_38325))) -
        1;
    
    int64_t gtid_32861;
    
    gtid_32861 = squot64(flat_idx_38357, N_24796);
    
    int64_t gtid_32869;
    
    gtid_32869 = flat_idx_38357 - squot64(flat_idx_38357, N_24796) * N_24796;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_32861, m_24797) && slt64(gtid_32869, N_24796)) {
            ((__local
              int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)] =
                ((__global int64_t *) mem_37188)[gtid_32861 * N_24796 +
                                                 gtid_32869];
        } else {
            ((__local
              int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_32892;
    int64_t x_32893;
    int64_t x_38358;
    int64_t x_38359;
    bool ltid_in_bounds_38361;
    
    ltid_in_bounds_38361 = slt64(sext_i32_i64(local_tid_38351),
                                 stage1_num_groups_38324);
    
    int32_t skip_threads_38362;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38361) {
            x_32893 = ((volatile __local
                        int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)];
            if ((local_tid_38351 - squot32(local_tid_38351, 32) * 32) == 0) {
                x_32892 = x_32893;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38362 = 1;
        while (slt32(skip_threads_38362, 32)) {
            if (sle32(skip_threads_38362, local_tid_38351 -
                      squot32(local_tid_38351, 32) * 32) &&
                ltid_in_bounds_38361) {
                // read operands
                {
                    x_32892 = ((volatile __local
                                int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351) -
                                                               sext_i32_i64(skip_threads_38362)];
                }
                // perform operation
                {
                    bool inactive_38363 =
                         slt64(srem64((sext_i32_i64(local_tid_38351) + 1) *
                                      (segscan_group_sizze_32887 *
                                       sdiv_up64(m_24797 * N_24796,
                                                 sext_i32_i64(num_threads_38325))) -
                                      1, N_24796),
                               (sext_i32_i64(local_tid_38351) + 1) *
                               (segscan_group_sizze_32887 * sdiv_up64(m_24797 *
                                                                      N_24796,
                                                                      sext_i32_i64(num_threads_38325))) -
                               1 - ((sext_i32_i64(local_tid_38351 -
                                     skip_threads_38362) + 1) *
                                    (segscan_group_sizze_32887 *
                                     sdiv_up64(m_24797 * N_24796,
                                               sext_i32_i64(num_threads_38325))) -
                                    1));
                    
                    if (inactive_38363) {
                        x_32892 = x_32893;
                    }
                    if (!inactive_38363) {
                        int64_t res_32894 = add64(x_32892, x_32893);
                        
                        x_32892 = res_32894;
                    }
                }
            }
            if (sle32(wave_sizze_38353, skip_threads_38362)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38362, local_tid_38351 -
                      squot32(local_tid_38351, 32) * 32) &&
                ltid_in_bounds_38361) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)] =
                        x_32892;
                    x_32893 = x_32892;
                }
            }
            if (sle32(wave_sizze_38353, skip_threads_38362)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38362 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38351 - squot32(local_tid_38351, 32) * 32) == 31 &&
            ltid_in_bounds_38361) {
            ((volatile __local
              int64_t *) scan_arr_mem_38355)[sext_i32_i64(squot32(local_tid_38351,
                                                                  32))] =
                x_32892;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38364;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38351, 32) == 0 && ltid_in_bounds_38361) {
                x_38359 = ((volatile __local
                            int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)];
                if ((local_tid_38351 - squot32(local_tid_38351, 32) * 32) ==
                    0) {
                    x_38358 = x_38359;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38364 = 1;
            while (slt32(skip_threads_38364, 32)) {
                if (sle32(skip_threads_38364, local_tid_38351 -
                          squot32(local_tid_38351, 32) * 32) &&
                    (squot32(local_tid_38351, 32) == 0 &&
                     ltid_in_bounds_38361)) {
                    // read operands
                    {
                        x_38358 = ((volatile __local
                                    int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351) -
                                                                   sext_i32_i64(skip_threads_38364)];
                    }
                    // perform operation
                    {
                        bool inactive_38365 =
                             slt64(srem64((sext_i32_i64(local_tid_38351 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_32887 *
                                           sdiv_up64(m_24797 * N_24796,
                                                     sext_i32_i64(num_threads_38325))) -
                                          1, N_24796),
                                   (sext_i32_i64(local_tid_38351 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_32887 *
                                               sdiv_up64(m_24797 * N_24796,
                                                         sext_i32_i64(num_threads_38325))) -
                                   1 - ((sext_i32_i64((local_tid_38351 -
                                                       skip_threads_38364) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_32887 *
                                         sdiv_up64(m_24797 * N_24796,
                                                   sext_i32_i64(num_threads_38325))) -
                                        1));
                        
                        if (inactive_38365) {
                            x_38358 = x_38359;
                        }
                        if (!inactive_38365) {
                            int64_t res_38360 = add64(x_38358, x_38359);
                            
                            x_38358 = res_38360;
                        }
                    }
                }
                if (sle32(wave_sizze_38353, skip_threads_38364)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38364, local_tid_38351 -
                          squot32(local_tid_38351, 32) * 32) &&
                    (squot32(local_tid_38351, 32) == 0 &&
                     ltid_in_bounds_38361)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)] =
                            x_38358;
                        x_38359 = x_38358;
                    }
                }
                if (sle32(wave_sizze_38353, skip_threads_38364)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38364 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38351, 32) == 0 || !ltid_in_bounds_38361)) {
            // read operands
            {
                x_32893 = x_32892;
                x_32892 = ((__local
                            int64_t *) scan_arr_mem_38355)[sext_i32_i64(squot32(local_tid_38351,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_38366 =
                     slt64(srem64((sext_i32_i64(local_tid_38351) + 1) *
                                  (segscan_group_sizze_32887 *
                                   sdiv_up64(m_24797 * N_24796,
                                             sext_i32_i64(num_threads_38325))) -
                                  1, N_24796), (sext_i32_i64(local_tid_38351) +
                                                1) *
                           (segscan_group_sizze_32887 * sdiv_up64(m_24797 *
                                                                  N_24796,
                                                                  sext_i32_i64(num_threads_38325))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38351, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_32887 *
                                                 sdiv_up64(m_24797 * N_24796,
                                                           sext_i32_i64(num_threads_38325))) -
                                1));
                
                if (inactive_38366) {
                    x_32892 = x_32893;
                }
                if (!inactive_38366) {
                    int64_t res_32894 = add64(x_32892, x_32893);
                    
                    x_32892 = res_32894;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)] =
                    x_32892;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38351, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)] =
                x_32893;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_32861, m_24797) && slt64(gtid_32869, N_24796)) {
            ((__global int64_t *) mem_37188)[gtid_32861 * N_24796 +
                                             gtid_32869] = ((__local
                                                             int64_t *) scan_arr_mem_38355)[sext_i32_i64(local_tid_38351)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_32887
}
__kernel void mainziscan_stage2_34556(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38997_backing_aligned_0,
                                      __local volatile
                                      int64_t *scan_arr_mem_38995_backing_aligned_1,
                                      __local volatile
                                      int64_t *scan_arr_mem_38993_backing_aligned_2,
                                      __local volatile
                                      int64_t *scan_arr_mem_38991_backing_aligned_3,
                                      int64_t m_24797, int64_t iota32_arg_25183,
                                      __global unsigned char *mem_37551,
                                      __global unsigned char *mem_37554,
                                      __global unsigned char *mem_37557,
                                      __global unsigned char *mem_37560,
                                      int64_t stage1_num_groups_38936,
                                      int32_t num_threads_38937)
{
    #define segscan_group_sizze_35217 (mainzisegscan_group_sizze_34550)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38997_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_38997_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_38995_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_38995_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_38993_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_38993_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_38991_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38991_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38986;
    int32_t local_tid_38987;
    int64_t group_sizze_38990;
    int32_t wave_sizze_38989;
    int32_t group_tid_38988;
    
    global_tid_38986 = get_global_id(0);
    local_tid_38987 = get_local_id(0);
    group_sizze_38990 = get_local_size(0);
    wave_sizze_38989 = LOCKSTEP_WIDTH;
    group_tid_38988 = get_group_id(0);
    
    int32_t phys_tid_34556;
    
    phys_tid_34556 = global_tid_38986;
    
    __local char *scan_arr_mem_38991;
    __local char *scan_arr_mem_38993;
    __local char *scan_arr_mem_38995;
    __local char *scan_arr_mem_38997;
    
    scan_arr_mem_38991 = (__local char *) scan_arr_mem_38991_backing_0;
    scan_arr_mem_38993 = (__local char *) scan_arr_mem_38993_backing_1;
    scan_arr_mem_38995 = (__local char *) scan_arr_mem_38995_backing_2;
    scan_arr_mem_38997 = (__local char *) scan_arr_mem_38997_backing_3;
    
    int64_t flat_idx_38999;
    
    flat_idx_38999 = (sext_i32_i64(local_tid_38987) + 1) *
        (segscan_group_sizze_35217 * sdiv_up64(m_24797 * iota32_arg_25183,
                                               sext_i32_i64(num_threads_38937))) -
        1;
    
    int64_t gtid_34547;
    
    gtid_34547 = squot64(flat_idx_38999, iota32_arg_25183);
    
    int64_t gtid_34555;
    
    gtid_34555 = flat_idx_38999 - squot64(flat_idx_38999, iota32_arg_25183) *
        iota32_arg_25183;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_34547, m_24797) && slt64(gtid_34555, iota32_arg_25183)) {
            ((__local
              int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)] =
                ((__global int64_t *) mem_37551)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555];
            ((__local
              int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)] =
                ((__global int64_t *) mem_37554)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555];
            ((__local
              int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)] =
                ((__global int64_t *) mem_37557)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555];
            ((__local
              int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)] =
                ((__global int64_t *) mem_37560)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555];
        } else {
            ((__local
              int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_35225;
    int64_t x_35226;
    int64_t x_35227;
    int64_t x_35228;
    int64_t x_35229;
    int64_t x_35230;
    int64_t x_35231;
    int64_t x_35232;
    int64_t x_39000;
    int64_t x_39001;
    int64_t x_39002;
    int64_t x_39003;
    int64_t x_39004;
    int64_t x_39005;
    int64_t x_39006;
    int64_t x_39007;
    bool ltid_in_bounds_39012;
    
    ltid_in_bounds_39012 = slt64(sext_i32_i64(local_tid_38987),
                                 stage1_num_groups_38936);
    
    int32_t skip_threads_39013;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_39012) {
            x_35229 = ((volatile __local
                        int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)];
            x_35230 = ((volatile __local
                        int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)];
            x_35231 = ((volatile __local
                        int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)];
            x_35232 = ((volatile __local
                        int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)];
            if ((local_tid_38987 - squot32(local_tid_38987, 32) * 32) == 0) {
                x_35225 = x_35229;
                x_35226 = x_35230;
                x_35227 = x_35231;
                x_35228 = x_35232;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_39013 = 1;
        while (slt32(skip_threads_39013, 32)) {
            if (sle32(skip_threads_39013, local_tid_38987 -
                      squot32(local_tid_38987, 32) * 32) &&
                ltid_in_bounds_39012) {
                // read operands
                {
                    x_35225 = ((volatile __local
                                int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987) -
                                                               sext_i32_i64(skip_threads_39013)];
                    x_35226 = ((volatile __local
                                int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987) -
                                                               sext_i32_i64(skip_threads_39013)];
                    x_35227 = ((volatile __local
                                int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987) -
                                                               sext_i32_i64(skip_threads_39013)];
                    x_35228 = ((volatile __local
                                int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987) -
                                                               sext_i32_i64(skip_threads_39013)];
                }
                // perform operation
                {
                    bool inactive_39014 =
                         slt64(srem64((sext_i32_i64(local_tid_38987) + 1) *
                                      (segscan_group_sizze_35217 *
                                       sdiv_up64(m_24797 * iota32_arg_25183,
                                                 sext_i32_i64(num_threads_38937))) -
                                      1, iota32_arg_25183),
                               (sext_i32_i64(local_tid_38987) + 1) *
                               (segscan_group_sizze_35217 * sdiv_up64(m_24797 *
                                                                      iota32_arg_25183,
                                                                      sext_i32_i64(num_threads_38937))) -
                               1 - ((sext_i32_i64(local_tid_38987 -
                                     skip_threads_39013) + 1) *
                                    (segscan_group_sizze_35217 *
                                     sdiv_up64(m_24797 * iota32_arg_25183,
                                               sext_i32_i64(num_threads_38937))) -
                                    1));
                    
                    if (inactive_39014) {
                        x_35225 = x_35229;
                        x_35226 = x_35230;
                        x_35227 = x_35231;
                        x_35228 = x_35232;
                    }
                    if (!inactive_39014) {
                        int64_t res_35233 = add64(x_35225, x_35229);
                        int64_t res_35234 = add64(x_35226, x_35230);
                        int64_t res_35235 = add64(x_35227, x_35231);
                        int64_t res_35236 = add64(x_35228, x_35232);
                        
                        x_35225 = res_35233;
                        x_35226 = res_35234;
                        x_35227 = res_35235;
                        x_35228 = res_35236;
                    }
                }
            }
            if (sle32(wave_sizze_38989, skip_threads_39013)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_39013, local_tid_38987 -
                      squot32(local_tid_38987, 32) * 32) &&
                ltid_in_bounds_39012) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)] =
                        x_35225;
                    x_35229 = x_35225;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)] =
                        x_35226;
                    x_35230 = x_35226;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)] =
                        x_35227;
                    x_35231 = x_35227;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)] =
                        x_35228;
                    x_35232 = x_35228;
                }
            }
            if (sle32(wave_sizze_38989, skip_threads_39013)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_39013 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38987 - squot32(local_tid_38987, 32) * 32) == 31 &&
            ltid_in_bounds_39012) {
            ((volatile __local
              int64_t *) scan_arr_mem_38991)[sext_i32_i64(squot32(local_tid_38987,
                                                                  32))] =
                x_35225;
            ((volatile __local
              int64_t *) scan_arr_mem_38993)[sext_i32_i64(squot32(local_tid_38987,
                                                                  32))] =
                x_35226;
            ((volatile __local
              int64_t *) scan_arr_mem_38995)[sext_i32_i64(squot32(local_tid_38987,
                                                                  32))] =
                x_35227;
            ((volatile __local
              int64_t *) scan_arr_mem_38997)[sext_i32_i64(squot32(local_tid_38987,
                                                                  32))] =
                x_35228;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_39015;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38987, 32) == 0 && ltid_in_bounds_39012) {
                x_39004 = ((volatile __local
                            int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)];
                x_39005 = ((volatile __local
                            int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)];
                x_39006 = ((volatile __local
                            int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)];
                x_39007 = ((volatile __local
                            int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)];
                if ((local_tid_38987 - squot32(local_tid_38987, 32) * 32) ==
                    0) {
                    x_39000 = x_39004;
                    x_39001 = x_39005;
                    x_39002 = x_39006;
                    x_39003 = x_39007;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_39015 = 1;
            while (slt32(skip_threads_39015, 32)) {
                if (sle32(skip_threads_39015, local_tid_38987 -
                          squot32(local_tid_38987, 32) * 32) &&
                    (squot32(local_tid_38987, 32) == 0 &&
                     ltid_in_bounds_39012)) {
                    // read operands
                    {
                        x_39000 = ((volatile __local
                                    int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987) -
                                                                   sext_i32_i64(skip_threads_39015)];
                        x_39001 = ((volatile __local
                                    int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987) -
                                                                   sext_i32_i64(skip_threads_39015)];
                        x_39002 = ((volatile __local
                                    int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987) -
                                                                   sext_i32_i64(skip_threads_39015)];
                        x_39003 = ((volatile __local
                                    int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987) -
                                                                   sext_i32_i64(skip_threads_39015)];
                    }
                    // perform operation
                    {
                        bool inactive_39016 =
                             slt64(srem64((sext_i32_i64(local_tid_38987 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_35217 *
                                           sdiv_up64(m_24797 * iota32_arg_25183,
                                                     sext_i32_i64(num_threads_38937))) -
                                          1, iota32_arg_25183),
                                   (sext_i32_i64(local_tid_38987 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_35217 *
                                               sdiv_up64(m_24797 *
                                                         iota32_arg_25183,
                                                         sext_i32_i64(num_threads_38937))) -
                                   1 - ((sext_i32_i64((local_tid_38987 -
                                                       skip_threads_39015) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_35217 *
                                         sdiv_up64(m_24797 * iota32_arg_25183,
                                                   sext_i32_i64(num_threads_38937))) -
                                        1));
                        
                        if (inactive_39016) {
                            x_39000 = x_39004;
                            x_39001 = x_39005;
                            x_39002 = x_39006;
                            x_39003 = x_39007;
                        }
                        if (!inactive_39016) {
                            int64_t res_39008 = add64(x_39000, x_39004);
                            int64_t res_39009 = add64(x_39001, x_39005);
                            int64_t res_39010 = add64(x_39002, x_39006);
                            int64_t res_39011 = add64(x_39003, x_39007);
                            
                            x_39000 = res_39008;
                            x_39001 = res_39009;
                            x_39002 = res_39010;
                            x_39003 = res_39011;
                        }
                    }
                }
                if (sle32(wave_sizze_38989, skip_threads_39015)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_39015, local_tid_38987 -
                          squot32(local_tid_38987, 32) * 32) &&
                    (squot32(local_tid_38987, 32) == 0 &&
                     ltid_in_bounds_39012)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)] =
                            x_39000;
                        x_39004 = x_39000;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)] =
                            x_39001;
                        x_39005 = x_39001;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)] =
                            x_39002;
                        x_39006 = x_39002;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)] =
                            x_39003;
                        x_39007 = x_39003;
                    }
                }
                if (sle32(wave_sizze_38989, skip_threads_39015)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_39015 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38987, 32) == 0 || !ltid_in_bounds_39012)) {
            // read operands
            {
                x_35229 = x_35225;
                x_35230 = x_35226;
                x_35231 = x_35227;
                x_35232 = x_35228;
                x_35225 = ((__local
                            int64_t *) scan_arr_mem_38991)[sext_i32_i64(squot32(local_tid_38987,
                                                                                32)) -
                                                           1];
                x_35226 = ((__local
                            int64_t *) scan_arr_mem_38993)[sext_i32_i64(squot32(local_tid_38987,
                                                                                32)) -
                                                           1];
                x_35227 = ((__local
                            int64_t *) scan_arr_mem_38995)[sext_i32_i64(squot32(local_tid_38987,
                                                                                32)) -
                                                           1];
                x_35228 = ((__local
                            int64_t *) scan_arr_mem_38997)[sext_i32_i64(squot32(local_tid_38987,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_39017 =
                     slt64(srem64((sext_i32_i64(local_tid_38987) + 1) *
                                  (segscan_group_sizze_35217 *
                                   sdiv_up64(m_24797 * iota32_arg_25183,
                                             sext_i32_i64(num_threads_38937))) -
                                  1, iota32_arg_25183),
                           (sext_i32_i64(local_tid_38987) + 1) *
                           (segscan_group_sizze_35217 * sdiv_up64(m_24797 *
                                                                  iota32_arg_25183,
                                                                  sext_i32_i64(num_threads_38937))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38987, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_35217 *
                                                 sdiv_up64(m_24797 *
                                                           iota32_arg_25183,
                                                           sext_i32_i64(num_threads_38937))) -
                                1));
                
                if (inactive_39017) {
                    x_35225 = x_35229;
                    x_35226 = x_35230;
                    x_35227 = x_35231;
                    x_35228 = x_35232;
                }
                if (!inactive_39017) {
                    int64_t res_35233 = add64(x_35225, x_35229);
                    int64_t res_35234 = add64(x_35226, x_35230);
                    int64_t res_35235 = add64(x_35227, x_35231);
                    int64_t res_35236 = add64(x_35228, x_35232);
                    
                    x_35225 = res_35233;
                    x_35226 = res_35234;
                    x_35227 = res_35235;
                    x_35228 = res_35236;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)] =
                    x_35225;
                ((__local
                  int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)] =
                    x_35226;
                ((__local
                  int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)] =
                    x_35227;
                ((__local
                  int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)] =
                    x_35228;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38987, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)] =
                x_35229;
            ((__local
              int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)] =
                x_35230;
            ((__local
              int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)] =
                x_35231;
            ((__local
              int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)] =
                x_35232;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_34547, m_24797) && slt64(gtid_34555, iota32_arg_25183)) {
            ((__global int64_t *) mem_37551)[gtid_34547 * iota32_arg_25183 +
                                             gtid_34555] = ((__local
                                                             int64_t *) scan_arr_mem_38991)[sext_i32_i64(local_tid_38987)];
            ((__global int64_t *) mem_37554)[gtid_34547 * iota32_arg_25183 +
                                             gtid_34555] = ((__local
                                                             int64_t *) scan_arr_mem_38993)[sext_i32_i64(local_tid_38987)];
            ((__global int64_t *) mem_37557)[gtid_34547 * iota32_arg_25183 +
                                             gtid_34555] = ((__local
                                                             int64_t *) scan_arr_mem_38995)[sext_i32_i64(local_tid_38987)];
            ((__global int64_t *) mem_37560)[gtid_34547 * iota32_arg_25183 +
                                             gtid_34555] = ((__local
                                                             int64_t *) scan_arr_mem_38997)[sext_i32_i64(local_tid_38987)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_35217
}
__kernel void mainziscan_stage2_34902(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38772_backing_aligned_0,
                                      int64_t m_24797, int64_t iota32_arg_25183,
                                      __global unsigned char *mem_37498,
                                      int64_t stage1_num_groups_38741,
                                      int32_t num_threads_38742)
{
    #define segscan_group_sizze_34980 (mainzisegscan_group_sizze_34896)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38772_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38772_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38767;
    int32_t local_tid_38768;
    int64_t group_sizze_38771;
    int32_t wave_sizze_38770;
    int32_t group_tid_38769;
    
    global_tid_38767 = get_global_id(0);
    local_tid_38768 = get_local_id(0);
    group_sizze_38771 = get_local_size(0);
    wave_sizze_38770 = LOCKSTEP_WIDTH;
    group_tid_38769 = get_group_id(0);
    
    int32_t phys_tid_34902;
    
    phys_tid_34902 = global_tid_38767;
    
    __local char *scan_arr_mem_38772;
    
    scan_arr_mem_38772 = (__local char *) scan_arr_mem_38772_backing_0;
    
    int64_t flat_idx_38774;
    
    flat_idx_38774 = (sext_i32_i64(local_tid_38768) + 1) *
        (segscan_group_sizze_34980 * sdiv_up64(m_24797 * iota32_arg_25183,
                                               sext_i32_i64(num_threads_38742))) -
        1;
    
    int64_t gtid_34893;
    
    gtid_34893 = squot64(flat_idx_38774, iota32_arg_25183);
    
    int64_t gtid_34901;
    
    gtid_34901 = flat_idx_38774 - squot64(flat_idx_38774, iota32_arg_25183) *
        iota32_arg_25183;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_34893, m_24797) && slt64(gtid_34901, iota32_arg_25183)) {
            ((__local
              float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)] =
                ((__global float *) mem_37498)[gtid_34893 * iota32_arg_25183 +
                                               gtid_34901];
        } else {
            ((__local
              float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_34984;
    float x_34985;
    float x_38775;
    float x_38776;
    bool ltid_in_bounds_38778;
    
    ltid_in_bounds_38778 = slt64(sext_i32_i64(local_tid_38768),
                                 stage1_num_groups_38741);
    
    int32_t skip_threads_38779;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38778) {
            x_34985 = ((volatile __local
                        float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)];
            if ((local_tid_38768 - squot32(local_tid_38768, 32) * 32) == 0) {
                x_34984 = x_34985;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38779 = 1;
        while (slt32(skip_threads_38779, 32)) {
            if (sle32(skip_threads_38779, local_tid_38768 -
                      squot32(local_tid_38768, 32) * 32) &&
                ltid_in_bounds_38778) {
                // read operands
                {
                    x_34984 = ((volatile __local
                                float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768) -
                                                             sext_i32_i64(skip_threads_38779)];
                }
                // perform operation
                {
                    bool inactive_38780 =
                         slt64(srem64((sext_i32_i64(local_tid_38768) + 1) *
                                      (segscan_group_sizze_34980 *
                                       sdiv_up64(m_24797 * iota32_arg_25183,
                                                 sext_i32_i64(num_threads_38742))) -
                                      1, iota32_arg_25183),
                               (sext_i32_i64(local_tid_38768) + 1) *
                               (segscan_group_sizze_34980 * sdiv_up64(m_24797 *
                                                                      iota32_arg_25183,
                                                                      sext_i32_i64(num_threads_38742))) -
                               1 - ((sext_i32_i64(local_tid_38768 -
                                     skip_threads_38779) + 1) *
                                    (segscan_group_sizze_34980 *
                                     sdiv_up64(m_24797 * iota32_arg_25183,
                                               sext_i32_i64(num_threads_38742))) -
                                    1));
                    
                    if (inactive_38780) {
                        x_34984 = x_34985;
                    }
                    if (!inactive_38780) {
                        float res_34986 = x_34984 + x_34985;
                        
                        x_34984 = res_34986;
                    }
                }
            }
            if (sle32(wave_sizze_38770, skip_threads_38779)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38779, local_tid_38768 -
                      squot32(local_tid_38768, 32) * 32) &&
                ltid_in_bounds_38778) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)] =
                        x_34984;
                    x_34985 = x_34984;
                }
            }
            if (sle32(wave_sizze_38770, skip_threads_38779)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38779 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38768 - squot32(local_tid_38768, 32) * 32) == 31 &&
            ltid_in_bounds_38778) {
            ((volatile __local
              float *) scan_arr_mem_38772)[sext_i32_i64(squot32(local_tid_38768,
                                                                32))] = x_34984;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38781;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38768, 32) == 0 && ltid_in_bounds_38778) {
                x_38776 = ((volatile __local
                            float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)];
                if ((local_tid_38768 - squot32(local_tid_38768, 32) * 32) ==
                    0) {
                    x_38775 = x_38776;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38781 = 1;
            while (slt32(skip_threads_38781, 32)) {
                if (sle32(skip_threads_38781, local_tid_38768 -
                          squot32(local_tid_38768, 32) * 32) &&
                    (squot32(local_tid_38768, 32) == 0 &&
                     ltid_in_bounds_38778)) {
                    // read operands
                    {
                        x_38775 = ((volatile __local
                                    float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768) -
                                                                 sext_i32_i64(skip_threads_38781)];
                    }
                    // perform operation
                    {
                        bool inactive_38782 =
                             slt64(srem64((sext_i32_i64(local_tid_38768 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_34980 *
                                           sdiv_up64(m_24797 * iota32_arg_25183,
                                                     sext_i32_i64(num_threads_38742))) -
                                          1, iota32_arg_25183),
                                   (sext_i32_i64(local_tid_38768 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_34980 *
                                               sdiv_up64(m_24797 *
                                                         iota32_arg_25183,
                                                         sext_i32_i64(num_threads_38742))) -
                                   1 - ((sext_i32_i64((local_tid_38768 -
                                                       skip_threads_38781) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_34980 *
                                         sdiv_up64(m_24797 * iota32_arg_25183,
                                                   sext_i32_i64(num_threads_38742))) -
                                        1));
                        
                        if (inactive_38782) {
                            x_38775 = x_38776;
                        }
                        if (!inactive_38782) {
                            float res_38777 = x_38775 + x_38776;
                            
                            x_38775 = res_38777;
                        }
                    }
                }
                if (sle32(wave_sizze_38770, skip_threads_38781)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38781, local_tid_38768 -
                          squot32(local_tid_38768, 32) * 32) &&
                    (squot32(local_tid_38768, 32) == 0 &&
                     ltid_in_bounds_38778)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)] =
                            x_38775;
                        x_38776 = x_38775;
                    }
                }
                if (sle32(wave_sizze_38770, skip_threads_38781)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38781 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38768, 32) == 0 || !ltid_in_bounds_38778)) {
            // read operands
            {
                x_34985 = x_34984;
                x_34984 = ((__local
                            float *) scan_arr_mem_38772)[sext_i32_i64(squot32(local_tid_38768,
                                                                              32)) -
                                                         1];
            }
            // perform operation
            {
                bool inactive_38783 =
                     slt64(srem64((sext_i32_i64(local_tid_38768) + 1) *
                                  (segscan_group_sizze_34980 *
                                   sdiv_up64(m_24797 * iota32_arg_25183,
                                             sext_i32_i64(num_threads_38742))) -
                                  1, iota32_arg_25183),
                           (sext_i32_i64(local_tid_38768) + 1) *
                           (segscan_group_sizze_34980 * sdiv_up64(m_24797 *
                                                                  iota32_arg_25183,
                                                                  sext_i32_i64(num_threads_38742))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38768, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_34980 *
                                                 sdiv_up64(m_24797 *
                                                           iota32_arg_25183,
                                                           sext_i32_i64(num_threads_38742))) -
                                1));
                
                if (inactive_38783) {
                    x_34984 = x_34985;
                }
                if (!inactive_38783) {
                    float res_34986 = x_34984 + x_34985;
                    
                    x_34984 = res_34986;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)] =
                    x_34984;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38768, 32) == 0) {
            ((__local
              float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)] =
                x_34985;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_34893, m_24797) && slt64(gtid_34901, iota32_arg_25183)) {
            ((__global float *) mem_37498)[gtid_34893 * iota32_arg_25183 +
                                           gtid_34901] = ((__local
                                                           float *) scan_arr_mem_38772)[sext_i32_i64(local_tid_38768)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_34980
}
__kernel void mainziscan_stage3_32870(__global int *global_failure,
                                      int64_t N_24796, int64_t m_24797,
                                      int64_t num_groups_32888, __global
                                      unsigned char *mem_37188,
                                      int32_t num_threads_38325,
                                      int32_t required_groups_38367)
{
    #define segscan_group_sizze_32887 (mainzisegscan_group_sizze_32864)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38368;
    int32_t local_tid_38369;
    int64_t group_sizze_38372;
    int32_t wave_sizze_38371;
    int32_t group_tid_38370;
    
    global_tid_38368 = get_global_id(0);
    local_tid_38369 = get_local_id(0);
    group_sizze_38372 = get_local_size(0);
    wave_sizze_38371 = LOCKSTEP_WIDTH;
    group_tid_38370 = get_group_id(0);
    
    int32_t phys_tid_32870;
    
    phys_tid_32870 = global_tid_38368;
    
    int32_t phys_group_id_38373;
    
    phys_group_id_38373 = get_group_id(0);
    for (int32_t i_38374 = 0; i_38374 < sdiv_up32(required_groups_38367 -
                                                  phys_group_id_38373,
                                                  sext_i64_i32(num_groups_32888));
         i_38374++) {
        int32_t virt_group_id_38375 = phys_group_id_38373 + i_38374 *
                sext_i64_i32(num_groups_32888);
        int64_t flat_idx_38376 = sext_i32_i64(virt_group_id_38375) *
                segscan_group_sizze_32887 + sext_i32_i64(local_tid_38369);
        int64_t gtid_32861 = squot64(flat_idx_38376, N_24796);
        int64_t gtid_32869 = flat_idx_38376 - squot64(flat_idx_38376, N_24796) *
                N_24796;
        int64_t orig_group_38377 = squot64(flat_idx_38376,
                                           segscan_group_sizze_32887 *
                                           sdiv_up64(m_24797 * N_24796,
                                                     sext_i32_i64(num_threads_38325)));
        int64_t carry_in_flat_idx_38378 = orig_group_38377 *
                (segscan_group_sizze_32887 * sdiv_up64(m_24797 * N_24796,
                                                       sext_i32_i64(num_threads_38325))) -
                1;
        
        if (slt64(gtid_32861, m_24797) && slt64(gtid_32869, N_24796)) {
            if (!(orig_group_38377 == 0 || (flat_idx_38376 ==
                                            (orig_group_38377 + 1) *
                                            (segscan_group_sizze_32887 *
                                             sdiv_up64(m_24797 * N_24796,
                                                       sext_i32_i64(num_threads_38325))) -
                                            1 || slt64(srem64(flat_idx_38376,
                                                              N_24796),
                                                       flat_idx_38376 -
                                                       carry_in_flat_idx_38378)))) {
                int64_t x_32892;
                int64_t x_32893;
                
                x_32892 = ((__global
                            int64_t *) mem_37188)[squot64(carry_in_flat_idx_38378,
                                                          N_24796) * N_24796 +
                                                  (carry_in_flat_idx_38378 -
                                                   squot64(carry_in_flat_idx_38378,
                                                           N_24796) * N_24796)];
                x_32893 = ((__global int64_t *) mem_37188)[gtid_32861 *
                                                           N_24796 +
                                                           gtid_32869];
                
                int64_t res_32894;
                
                res_32894 = add64(x_32892, x_32893);
                x_32892 = res_32894;
                ((__global int64_t *) mem_37188)[gtid_32861 * N_24796 +
                                                 gtid_32869] = x_32892;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_32887
}
__kernel void mainziscan_stage3_34556(__global int *global_failure,
                                      int64_t m_24797, int64_t iota32_arg_25183,
                                      int64_t num_groups_35218, __global
                                      unsigned char *mem_37551, __global
                                      unsigned char *mem_37554, __global
                                      unsigned char *mem_37557, __global
                                      unsigned char *mem_37560,
                                      int32_t num_threads_38937,
                                      int32_t required_groups_39018)
{
    #define segscan_group_sizze_35217 (mainzisegscan_group_sizze_34550)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39019;
    int32_t local_tid_39020;
    int64_t group_sizze_39023;
    int32_t wave_sizze_39022;
    int32_t group_tid_39021;
    
    global_tid_39019 = get_global_id(0);
    local_tid_39020 = get_local_id(0);
    group_sizze_39023 = get_local_size(0);
    wave_sizze_39022 = LOCKSTEP_WIDTH;
    group_tid_39021 = get_group_id(0);
    
    int32_t phys_tid_34556;
    
    phys_tid_34556 = global_tid_39019;
    
    int32_t phys_group_id_39024;
    
    phys_group_id_39024 = get_group_id(0);
    for (int32_t i_39025 = 0; i_39025 < sdiv_up32(required_groups_39018 -
                                                  phys_group_id_39024,
                                                  sext_i64_i32(num_groups_35218));
         i_39025++) {
        int32_t virt_group_id_39026 = phys_group_id_39024 + i_39025 *
                sext_i64_i32(num_groups_35218);
        int64_t flat_idx_39027 = sext_i32_i64(virt_group_id_39026) *
                segscan_group_sizze_35217 + sext_i32_i64(local_tid_39020);
        int64_t gtid_34547 = squot64(flat_idx_39027, iota32_arg_25183);
        int64_t gtid_34555 = flat_idx_39027 - squot64(flat_idx_39027,
                                                      iota32_arg_25183) *
                iota32_arg_25183;
        int64_t orig_group_39028 = squot64(flat_idx_39027,
                                           segscan_group_sizze_35217 *
                                           sdiv_up64(m_24797 * iota32_arg_25183,
                                                     sext_i32_i64(num_threads_38937)));
        int64_t carry_in_flat_idx_39029 = orig_group_39028 *
                (segscan_group_sizze_35217 * sdiv_up64(m_24797 *
                                                       iota32_arg_25183,
                                                       sext_i32_i64(num_threads_38937))) -
                1;
        
        if (slt64(gtid_34547, m_24797) && slt64(gtid_34555, iota32_arg_25183)) {
            if (!(orig_group_39028 == 0 || (flat_idx_39027 ==
                                            (orig_group_39028 + 1) *
                                            (segscan_group_sizze_35217 *
                                             sdiv_up64(m_24797 *
                                                       iota32_arg_25183,
                                                       sext_i32_i64(num_threads_38937))) -
                                            1 || slt64(srem64(flat_idx_39027,
                                                              iota32_arg_25183),
                                                       flat_idx_39027 -
                                                       carry_in_flat_idx_39029)))) {
                int64_t x_35225;
                int64_t x_35226;
                int64_t x_35227;
                int64_t x_35228;
                int64_t x_35229;
                int64_t x_35230;
                int64_t x_35231;
                int64_t x_35232;
                
                x_35225 = ((__global
                            int64_t *) mem_37551)[squot64(carry_in_flat_idx_39029,
                                                          iota32_arg_25183) *
                                                  iota32_arg_25183 +
                                                  (carry_in_flat_idx_39029 -
                                                   squot64(carry_in_flat_idx_39029,
                                                           iota32_arg_25183) *
                                                   iota32_arg_25183)];
                x_35226 = ((__global
                            int64_t *) mem_37554)[squot64(carry_in_flat_idx_39029,
                                                          iota32_arg_25183) *
                                                  iota32_arg_25183 +
                                                  (carry_in_flat_idx_39029 -
                                                   squot64(carry_in_flat_idx_39029,
                                                           iota32_arg_25183) *
                                                   iota32_arg_25183)];
                x_35227 = ((__global
                            int64_t *) mem_37557)[squot64(carry_in_flat_idx_39029,
                                                          iota32_arg_25183) *
                                                  iota32_arg_25183 +
                                                  (carry_in_flat_idx_39029 -
                                                   squot64(carry_in_flat_idx_39029,
                                                           iota32_arg_25183) *
                                                   iota32_arg_25183)];
                x_35228 = ((__global
                            int64_t *) mem_37560)[squot64(carry_in_flat_idx_39029,
                                                          iota32_arg_25183) *
                                                  iota32_arg_25183 +
                                                  (carry_in_flat_idx_39029 -
                                                   squot64(carry_in_flat_idx_39029,
                                                           iota32_arg_25183) *
                                                   iota32_arg_25183)];
                x_35229 = ((__global int64_t *) mem_37551)[gtid_34547 *
                                                           iota32_arg_25183 +
                                                           gtid_34555];
                x_35230 = ((__global int64_t *) mem_37554)[gtid_34547 *
                                                           iota32_arg_25183 +
                                                           gtid_34555];
                x_35231 = ((__global int64_t *) mem_37557)[gtid_34547 *
                                                           iota32_arg_25183 +
                                                           gtid_34555];
                x_35232 = ((__global int64_t *) mem_37560)[gtid_34547 *
                                                           iota32_arg_25183 +
                                                           gtid_34555];
                
                int64_t res_35233;
                
                res_35233 = add64(x_35225, x_35229);
                
                int64_t res_35234 = add64(x_35226, x_35230);
                int64_t res_35235 = add64(x_35227, x_35231);
                int64_t res_35236 = add64(x_35228, x_35232);
                
                x_35225 = res_35233;
                x_35226 = res_35234;
                x_35227 = res_35235;
                x_35228 = res_35236;
                ((__global int64_t *) mem_37551)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555] = x_35225;
                ((__global int64_t *) mem_37554)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555] = x_35226;
                ((__global int64_t *) mem_37557)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555] = x_35227;
                ((__global int64_t *) mem_37560)[gtid_34547 * iota32_arg_25183 +
                                                 gtid_34555] = x_35228;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_35217
}
__kernel void mainziscan_stage3_34902(__global int *global_failure,
                                      int64_t m_24797, int64_t iota32_arg_25183,
                                      int64_t num_groups_34981, __global
                                      unsigned char *mem_37498,
                                      int32_t num_threads_38742,
                                      int32_t required_groups_38784)
{
    #define segscan_group_sizze_34980 (mainzisegscan_group_sizze_34896)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38785;
    int32_t local_tid_38786;
    int64_t group_sizze_38789;
    int32_t wave_sizze_38788;
    int32_t group_tid_38787;
    
    global_tid_38785 = get_global_id(0);
    local_tid_38786 = get_local_id(0);
    group_sizze_38789 = get_local_size(0);
    wave_sizze_38788 = LOCKSTEP_WIDTH;
    group_tid_38787 = get_group_id(0);
    
    int32_t phys_tid_34902;
    
    phys_tid_34902 = global_tid_38785;
    
    int32_t phys_group_id_38790;
    
    phys_group_id_38790 = get_group_id(0);
    for (int32_t i_38791 = 0; i_38791 < sdiv_up32(required_groups_38784 -
                                                  phys_group_id_38790,
                                                  sext_i64_i32(num_groups_34981));
         i_38791++) {
        int32_t virt_group_id_38792 = phys_group_id_38790 + i_38791 *
                sext_i64_i32(num_groups_34981);
        int64_t flat_idx_38793 = sext_i32_i64(virt_group_id_38792) *
                segscan_group_sizze_34980 + sext_i32_i64(local_tid_38786);
        int64_t gtid_34893 = squot64(flat_idx_38793, iota32_arg_25183);
        int64_t gtid_34901 = flat_idx_38793 - squot64(flat_idx_38793,
                                                      iota32_arg_25183) *
                iota32_arg_25183;
        int64_t orig_group_38794 = squot64(flat_idx_38793,
                                           segscan_group_sizze_34980 *
                                           sdiv_up64(m_24797 * iota32_arg_25183,
                                                     sext_i32_i64(num_threads_38742)));
        int64_t carry_in_flat_idx_38795 = orig_group_38794 *
                (segscan_group_sizze_34980 * sdiv_up64(m_24797 *
                                                       iota32_arg_25183,
                                                       sext_i32_i64(num_threads_38742))) -
                1;
        
        if (slt64(gtid_34893, m_24797) && slt64(gtid_34901, iota32_arg_25183)) {
            if (!(orig_group_38794 == 0 || (flat_idx_38793 ==
                                            (orig_group_38794 + 1) *
                                            (segscan_group_sizze_34980 *
                                             sdiv_up64(m_24797 *
                                                       iota32_arg_25183,
                                                       sext_i32_i64(num_threads_38742))) -
                                            1 || slt64(srem64(flat_idx_38793,
                                                              iota32_arg_25183),
                                                       flat_idx_38793 -
                                                       carry_in_flat_idx_38795)))) {
                float x_34984;
                float x_34985;
                
                x_34984 = ((__global
                            float *) mem_37498)[squot64(carry_in_flat_idx_38795,
                                                        iota32_arg_25183) *
                                                iota32_arg_25183 +
                                                (carry_in_flat_idx_38795 -
                                                 squot64(carry_in_flat_idx_38795,
                                                         iota32_arg_25183) *
                                                 iota32_arg_25183)];
                x_34985 = ((__global float *) mem_37498)[gtid_34893 *
                                                         iota32_arg_25183 +
                                                         gtid_34901];
                
                float res_34986;
                
                res_34986 = x_34984 + x_34985;
                x_34984 = res_34986;
                ((__global float *) mem_37498)[gtid_34893 * iota32_arg_25183 +
                                               gtid_34901] = x_34984;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_34980
}
__kernel void mainzisegmap_30667(__global int *global_failure, int64_t N_24796,
                                 float freq_24802, int64_t res_24816, __global
                                 unsigned char *mappingindices_mem_36737,
                                 __global unsigned char *mem_36742)
{
    #define segmap_group_sizze_30740 (mainzisegmap_group_sizze_30670)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37854;
    int32_t local_tid_37855;
    int64_t group_sizze_37858;
    int32_t wave_sizze_37857;
    int32_t group_tid_37856;
    
    global_tid_37854 = get_global_id(0);
    local_tid_37855 = get_local_id(0);
    group_sizze_37858 = get_local_size(0);
    wave_sizze_37857 = LOCKSTEP_WIDTH;
    group_tid_37856 = get_group_id(0);
    
    int32_t phys_tid_30667;
    
    phys_tid_30667 = global_tid_37854;
    
    int64_t gtid_30665;
    
    gtid_30665 = squot64(sext_i32_i64(group_tid_37856) *
                         segmap_group_sizze_30740 +
                         sext_i32_i64(local_tid_37855), N_24796);
    
    int64_t gtid_30666;
    
    gtid_30666 = sext_i32_i64(group_tid_37856) * segmap_group_sizze_30740 +
        sext_i32_i64(local_tid_37855) - squot64(sext_i32_i64(group_tid_37856) *
                                                segmap_group_sizze_30740 +
                                                sext_i32_i64(local_tid_37855),
                                                N_24796) * N_24796;
    if (slt64(gtid_30665, res_24816) && slt64(gtid_30666, N_24796)) {
        int32_t index_primexp_35389 = sext_i64_i32(gtid_30665);
        bool index_primexp_35386 = index_primexp_35389 == 0;
        float res_30746;
        
        if (index_primexp_35386) {
            res_30746 = 1.0F;
        } else {
            int32_t x_30745 = ((__global
                                int32_t *) mappingindices_mem_36737)[gtid_30666];
            bool cond_30747 = index_primexp_35389 == 1;
            float res_30748;
            
            if (cond_30747) {
                float res_30749 = sitofp_i32_f32(x_30745);
                
                res_30748 = res_30749;
            } else {
                int32_t r32_arg_30750 = sdiv32(index_primexp_35389, 2);
                float res_30751 = sitofp_i32_f32(r32_arg_30750);
                float res_30752 = sitofp_i32_f32(x_30745);
                float x_30753 = 6.2831855F * res_30751;
                float x_30754 = res_30752 * x_30753;
                float angle_30755 = x_30754 / freq_24802;
                int32_t x_30756 = smod32(index_primexp_35389, 2);
                bool cond_30757 = x_30756 == 0;
                float res_30758;
                
                if (cond_30757) {
                    float res_30759;
                    
                    res_30759 = futrts_sin32(angle_30755);
                    res_30758 = res_30759;
                } else {
                    float res_30760;
                    
                    res_30760 = futrts_cos32(angle_30755);
                    res_30758 = res_30760;
                }
                res_30748 = res_30758;
            }
            res_30746 = res_30748;
        }
        ((__global float *) mem_36742)[gtid_30665 * N_24796 + gtid_30666] =
            res_30746;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30740
}
__kernel void mainzisegmap_30845(__global int *global_failure, int64_t N_24796,
                                 float freq_24802, int64_t res_24816, __global
                                 unsigned char *mappingindices_mem_36737,
                                 __global unsigned char *mem_36746)
{
    #define segmap_group_sizze_30914 (mainzisegmap_group_sizze_30848)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37859;
    int32_t local_tid_37860;
    int64_t group_sizze_37863;
    int32_t wave_sizze_37862;
    int32_t group_tid_37861;
    
    global_tid_37859 = get_global_id(0);
    local_tid_37860 = get_local_id(0);
    group_sizze_37863 = get_local_size(0);
    wave_sizze_37862 = LOCKSTEP_WIDTH;
    group_tid_37861 = get_group_id(0);
    
    int32_t phys_tid_30845;
    
    phys_tid_30845 = global_tid_37859;
    
    int64_t gtid_30843;
    
    gtid_30843 = squot64(sext_i32_i64(group_tid_37861) *
                         segmap_group_sizze_30914 +
                         sext_i32_i64(local_tid_37860), N_24796);
    
    int64_t gtid_30844;
    
    gtid_30844 = sext_i32_i64(group_tid_37861) * segmap_group_sizze_30914 +
        sext_i32_i64(local_tid_37860) - squot64(sext_i32_i64(group_tid_37861) *
                                                segmap_group_sizze_30914 +
                                                sext_i32_i64(local_tid_37860),
                                                N_24796) * N_24796;
    if (slt64(gtid_30843, res_24816) && slt64(gtid_30844, N_24796)) {
        int32_t index_primexp_35398 = sext_i64_i32(gtid_30843);
        bool index_primexp_35395 = index_primexp_35398 == 0;
        float res_30920;
        
        if (index_primexp_35395) {
            res_30920 = 1.0F;
        } else {
            int32_t x_30919 = ((__global
                                int32_t *) mappingindices_mem_36737)[gtid_30844];
            int32_t i_30921 = add32(1, index_primexp_35398);
            int32_t r32_arg_30922 = sdiv32(i_30921, 2);
            float res_30923 = sitofp_i32_f32(r32_arg_30922);
            float res_30924 = sitofp_i32_f32(x_30919);
            float x_30925 = 6.2831855F * res_30923;
            float x_30926 = res_30924 * x_30925;
            float angle_30927 = x_30926 / freq_24802;
            int32_t x_30928 = smod32(i_30921, 2);
            bool cond_30929 = x_30928 == 0;
            float res_30930;
            
            if (cond_30929) {
                float res_30931;
                
                res_30931 = futrts_sin32(angle_30927);
                res_30930 = res_30931;
            } else {
                float res_30932;
                
                res_30932 = futrts_cos32(angle_30927);
                res_30930 = res_30932;
            }
            res_30920 = res_30930;
        }
        ((__global float *) mem_36746)[gtid_30843 * N_24796 + gtid_30844] =
            res_30920;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30914
}
__kernel void mainzisegmap_30973(__global int *global_failure, int64_t N_24796,
                                 int64_t res_24816, float res_24881, __global
                                 unsigned char *mem_36750, __global
                                 unsigned char *mem_36754)
{
    #define segmap_group_sizze_30997 (mainzisegmap_group_sizze_30976)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37864;
    int32_t local_tid_37865;
    int64_t group_sizze_37868;
    int32_t wave_sizze_37867;
    int32_t group_tid_37866;
    
    global_tid_37864 = get_global_id(0);
    local_tid_37865 = get_local_id(0);
    group_sizze_37868 = get_local_size(0);
    wave_sizze_37867 = LOCKSTEP_WIDTH;
    group_tid_37866 = get_group_id(0);
    
    int32_t phys_tid_30973;
    
    phys_tid_30973 = global_tid_37864;
    
    int64_t gtid_30971;
    
    gtid_30971 = squot64(sext_i32_i64(group_tid_37866) *
                         segmap_group_sizze_30997 +
                         sext_i32_i64(local_tid_37865), res_24816);
    
    int64_t gtid_30972;
    
    gtid_30972 = sext_i32_i64(group_tid_37866) * segmap_group_sizze_30997 +
        sext_i32_i64(local_tid_37865) - squot64(sext_i32_i64(group_tid_37866) *
                                                segmap_group_sizze_30997 +
                                                sext_i32_i64(local_tid_37865),
                                                res_24816) * res_24816;
    if (slt64(gtid_30971, N_24796) && slt64(gtid_30972, res_24816)) {
        float x_31000 = ((__global float *) mem_36750)[gtid_30971 * res_24816 +
                                                       gtid_30972];
        float res_31001 = res_24881 + x_31000;
        
        ((__global float *) mem_36754)[gtid_30971 * res_24816 + gtid_30972] =
            res_31001;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30997
}
__kernel void mainzisegmap_31006(__global int *global_failure, int64_t N_24796,
                                 int64_t m_24797, int32_t n_24801,
                                 int32_t k2p2zq_24814, int64_t res_24816,
                                 int64_t num_groups_31031, __global
                                 unsigned char *binop_p_mem_36747, __global
                                 unsigned char *mem_36754, __global
                                 unsigned char *mem_36757, __global
                                 unsigned char *mem_36761, __global
                                 unsigned char *mem_36803)
{
    #define segmap_group_sizze_31030 (mainzisegmap_group_sizze_31008)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37872;
    int32_t local_tid_37873;
    int64_t group_sizze_37876;
    int32_t wave_sizze_37875;
    int32_t group_tid_37874;
    
    global_tid_37872 = get_global_id(0);
    local_tid_37873 = get_local_id(0);
    group_sizze_37876 = get_local_size(0);
    wave_sizze_37875 = LOCKSTEP_WIDTH;
    group_tid_37874 = get_group_id(0);
    
    int32_t phys_tid_31006;
    
    phys_tid_31006 = global_tid_37872;
    
    int32_t phys_group_id_37877;
    
    phys_group_id_37877 = get_group_id(0);
    for (int32_t i_37878 = 0; i_37878 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797, segmap_group_sizze_31030)) -
                   phys_group_id_37877, sext_i64_i32(num_groups_31031));
         i_37878++) {
        int32_t virt_group_id_37879 = phys_group_id_37877 + i_37878 *
                sext_i64_i32(num_groups_31031);
        int64_t gtid_31005 = sext_i32_i64(virt_group_id_37879) *
                segmap_group_sizze_31030 + sext_i32_i64(local_tid_37873);
        
        if (slt64(gtid_31005, m_24797)) {
            for (int32_t i_36715 = 0; i_36715 < k2p2zq_24814; i_36715++) {
                int64_t i_36603 = sext_i32_i64(i_36715);
                
                for (int32_t i_36714 = 0; i_36714 < k2p2zq_24814; i_36714++) {
                    int64_t i_36607 = sext_i32_i64(i_36714);
                    float res_31039;
                    float redout_36609 = 0.0F;
                    
                    for (int32_t i_36713 = 0; i_36713 < n_24801; i_36713++) {
                        int64_t i_36610 = sext_i32_i64(i_36713);
                        float x_31043 = ((__global float *) mem_36757)[i_36610 *
                                                                       m_24797 +
                                                                       gtid_31005];
                        float x_31044 = ((__global
                                          float *) binop_p_mem_36747)[i_36603 *
                                                                      N_24796 +
                                                                      i_36610];
                        float x_31045 = ((__global float *) mem_36754)[i_36610 *
                                                                       res_24816 +
                                                                       i_36607];
                        float x_31046 = x_31044 * x_31045;
                        bool res_31047;
                        
                        res_31047 = futrts_isnan32(x_31043);
                        
                        float y_31048;
                        
                        if (res_31047) {
                            y_31048 = 0.0F;
                        } else {
                            y_31048 = 1.0F;
                        }
                        
                        float res_31049 = x_31046 * y_31048;
                        float res_31042 = res_31049 + redout_36609;
                        float redout_tmp_37882 = res_31042;
                        
                        redout_36609 = redout_tmp_37882;
                    }
                    res_31039 = redout_36609;
                    ((__global float *) mem_36761)[phys_tid_31006 + (i_36603 *
                                                                     (num_groups_31031 *
                                                                      segmap_group_sizze_31030 *
                                                                      res_24816) +
                                                                     i_36607 *
                                                                     (num_groups_31031 *
                                                                      segmap_group_sizze_31030))] =
                        res_31039;
                }
            }
            for (int64_t i_37883 = 0; i_37883 < res_24816; i_37883++) {
                for (int64_t i_37884 = 0; i_37884 < res_24816; i_37884++) {
                    ((__global float *) mem_36803)[i_37883 * (m_24797 *
                                                              res_24816) +
                                                   i_37884 * m_24797 +
                                                   gtid_31005] = ((__global
                                                                   float *) mem_36761)[phys_tid_31006 +
                                                                                       (i_37883 *
                                                                                        (num_groups_31031 *
                                                                                         segmap_group_sizze_31030 *
                                                                                         res_24816) +
                                                                                        i_37884 *
                                                                                        (num_groups_31031 *
                                                                                         segmap_group_sizze_31030))];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31030
}
__kernel void mainzisegmap_31052(__global int *global_failure, int64_t m_24797,
                                 int64_t N_24798, int32_t n_24801,
                                 int32_t k2p2zq_24814, int64_t res_24816,
                                 int64_t num_groups_31208, __global
                                 unsigned char *images_mem_36738, __global
                                 unsigned char *mem_36750, __global
                                 unsigned char *mem_36754, __global
                                 unsigned char *mem_36806, __global
                                 unsigned char *mem_36822)
{
    #define segmap_group_sizze_31207 (mainzisegmap_group_sizze_31055)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37885;
    int32_t local_tid_37886;
    int64_t group_sizze_37889;
    int32_t wave_sizze_37888;
    int32_t group_tid_37887;
    
    global_tid_37885 = get_global_id(0);
    local_tid_37886 = get_local_id(0);
    group_sizze_37889 = get_local_size(0);
    wave_sizze_37888 = LOCKSTEP_WIDTH;
    group_tid_37887 = get_group_id(0);
    
    int32_t phys_tid_31052;
    
    phys_tid_31052 = global_tid_37885;
    
    int32_t phys_group_id_37890;
    
    phys_group_id_37890 = get_group_id(0);
    for (int32_t i_37891 = 0; i_37891 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797 * res_24816,
                                          segmap_group_sizze_31207)) -
                   phys_group_id_37890, sext_i64_i32(num_groups_31208));
         i_37891++) {
        int32_t virt_group_id_37892 = phys_group_id_37890 + i_37891 *
                sext_i64_i32(num_groups_31208);
        int64_t gtid_31050 = squot64(sext_i32_i64(virt_group_id_37892) *
                                     segmap_group_sizze_31207 +
                                     sext_i32_i64(local_tid_37886), res_24816);
        int64_t gtid_31051 = sext_i32_i64(virt_group_id_37892) *
                segmap_group_sizze_31207 + sext_i32_i64(local_tid_37886) -
                squot64(sext_i32_i64(virt_group_id_37892) *
                        segmap_group_sizze_31207 +
                        sext_i32_i64(local_tid_37886), res_24816) * res_24816;
        
        if (slt64(gtid_31050, m_24797) && slt64(gtid_31051, res_24816)) {
            for (int32_t i_36717 = 0; i_36717 < k2p2zq_24814; i_36717++) {
                int64_t i_36613 = sext_i32_i64(i_36717);
                float res_31219;
                float redout_36615 = 0.0F;
                
                for (int32_t i_36716 = 0; i_36716 < n_24801; i_36716++) {
                    int64_t i_36616 = sext_i32_i64(i_36716);
                    float x_31223 = ((__global
                                      float *) images_mem_36738)[gtid_31050 *
                                                                 N_24798 +
                                                                 i_36616];
                    float x_31224 = ((__global float *) mem_36750)[i_36616 *
                                                                   res_24816 +
                                                                   gtid_31051];
                    float x_31225 = ((__global float *) mem_36754)[i_36616 *
                                                                   res_24816 +
                                                                   i_36613];
                    float x_31226 = x_31224 * x_31225;
                    bool res_31227;
                    
                    res_31227 = futrts_isnan32(x_31223);
                    
                    float y_31228;
                    
                    if (res_31227) {
                        y_31228 = 0.0F;
                    } else {
                        y_31228 = 1.0F;
                    }
                    
                    float res_31229 = x_31226 * y_31228;
                    float res_31222 = res_31229 + redout_36615;
                    float redout_tmp_37894 = res_31222;
                    
                    redout_36615 = redout_tmp_37894;
                }
                res_31219 = redout_36615;
                ((__global float *) mem_36806)[phys_tid_31052 + i_36613 *
                                               (num_groups_31208 *
                                                segmap_group_sizze_31207)] =
                    res_31219;
            }
            for (int64_t i_37895 = 0; i_37895 < res_24816; i_37895++) {
                ((__global float *) mem_36822)[i_37895 * (res_24816 * m_24797) +
                                               gtid_31050 * res_24816 +
                                               gtid_31051] = ((__global
                                                               float *) mem_36806)[phys_tid_31052 +
                                                                                   i_37895 *
                                                                                   (num_groups_31208 *
                                                                                    segmap_group_sizze_31207)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31207
}
__kernel void mainzisegmap_31082(__global int *global_failure, int64_t m_24797,
                                 int64_t N_24798, int32_t n_24801,
                                 int64_t res_24816, __global
                                 unsigned char *images_mem_36738, __global
                                 unsigned char *mem_36750, __global
                                 unsigned char *mem_36754, __global
                                 unsigned char *mem_36827)
{
    #define segmap_group_sizze_31233 (mainzisegmap_group_sizze_31086)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37896;
    int32_t local_tid_37897;
    int64_t group_sizze_37900;
    int32_t wave_sizze_37899;
    int32_t group_tid_37898;
    
    global_tid_37896 = get_global_id(0);
    local_tid_37897 = get_local_id(0);
    group_sizze_37900 = get_local_size(0);
    wave_sizze_37899 = LOCKSTEP_WIDTH;
    group_tid_37898 = get_group_id(0);
    
    int32_t phys_tid_31082;
    
    phys_tid_31082 = global_tid_37896;
    
    int64_t gtid_31079;
    
    gtid_31079 = squot64(sext_i32_i64(group_tid_37898) *
                         segmap_group_sizze_31233 +
                         sext_i32_i64(local_tid_37897), res_24816 * res_24816);
    
    int64_t gtid_31080;
    
    gtid_31080 = squot64(sext_i32_i64(group_tid_37898) *
                         segmap_group_sizze_31233 +
                         sext_i32_i64(local_tid_37897) -
                         squot64(sext_i32_i64(group_tid_37898) *
                                 segmap_group_sizze_31233 +
                                 sext_i32_i64(local_tid_37897), res_24816 *
                                 res_24816) * (res_24816 * res_24816),
                         res_24816);
    
    int64_t gtid_31081;
    
    gtid_31081 = sext_i32_i64(group_tid_37898) * segmap_group_sizze_31233 +
        sext_i32_i64(local_tid_37897) - squot64(sext_i32_i64(group_tid_37898) *
                                                segmap_group_sizze_31233 +
                                                sext_i32_i64(local_tid_37897),
                                                res_24816 * res_24816) *
        (res_24816 * res_24816) - squot64(sext_i32_i64(group_tid_37898) *
                                          segmap_group_sizze_31233 +
                                          sext_i32_i64(local_tid_37897) -
                                          squot64(sext_i32_i64(group_tid_37898) *
                                                  segmap_group_sizze_31233 +
                                                  sext_i32_i64(local_tid_37897),
                                                  res_24816 * res_24816) *
                                          (res_24816 * res_24816), res_24816) *
        res_24816;
    if ((slt64(gtid_31079, m_24797) && slt64(gtid_31080, res_24816)) &&
        slt64(gtid_31081, res_24816)) {
        float res_31244;
        float redout_36617 = 0.0F;
        
        for (int32_t i_36718 = 0; i_36718 < n_24801; i_36718++) {
            int64_t i_36618 = sext_i32_i64(i_36718);
            float x_31248 = ((__global float *) images_mem_36738)[gtid_31079 *
                                                                  N_24798 +
                                                                  i_36618];
            float x_31249 = ((__global float *) mem_36750)[i_36618 * res_24816 +
                                                           gtid_31080];
            float x_31250 = ((__global float *) mem_36754)[i_36618 * res_24816 +
                                                           gtid_31081];
            float x_31251 = x_31249 * x_31250;
            bool res_31252;
            
            res_31252 = futrts_isnan32(x_31248);
            
            float y_31253;
            
            if (res_31252) {
                y_31253 = 0.0F;
            } else {
                y_31253 = 1.0F;
            }
            
            float res_31254 = x_31251 * y_31253;
            float res_31247 = res_31254 + redout_36617;
            float redout_tmp_37901 = res_31247;
            
            redout_36617 = redout_tmp_37901;
        }
        res_31244 = redout_36617;
        ((__global float *) mem_36827)[gtid_31079 * (res_24816 * res_24816) +
                                       gtid_31080 * res_24816 + gtid_31081] =
            res_31244;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31233
}
__kernel void mainzisegmap_31586(__global int *global_failure, int64_t m_24797,
                                 int64_t res_24816, int64_t m_24947,
                                 int64_t res_r_ixfn_36920,
                                 int64_t res_r_ixfn_36921,
                                 int64_t res_r_ixfn_36923, __global
                                 unsigned char *res_r_mem_36925, __global
                                 unsigned char *mem_36930)
{
    #define segmap_group_sizze_32209 (mainzisegmap_group_sizze_31590)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38024;
    int32_t local_tid_38025;
    int64_t group_sizze_38028;
    int32_t wave_sizze_38027;
    int32_t group_tid_38026;
    
    global_tid_38024 = get_global_id(0);
    local_tid_38025 = get_local_id(0);
    group_sizze_38028 = get_local_size(0);
    wave_sizze_38027 = LOCKSTEP_WIDTH;
    group_tid_38026 = get_group_id(0);
    
    int32_t phys_tid_31586;
    
    phys_tid_31586 = global_tid_38024;
    
    int64_t gtid_31583;
    
    gtid_31583 = squot64(sext_i32_i64(group_tid_38026) *
                         segmap_group_sizze_32209 +
                         sext_i32_i64(local_tid_38025), res_24816 * res_24816);
    
    int64_t gtid_31584;
    
    gtid_31584 = squot64(sext_i32_i64(group_tid_38026) *
                         segmap_group_sizze_32209 +
                         sext_i32_i64(local_tid_38025) -
                         squot64(sext_i32_i64(group_tid_38026) *
                                 segmap_group_sizze_32209 +
                                 sext_i32_i64(local_tid_38025), res_24816 *
                                 res_24816) * (res_24816 * res_24816),
                         res_24816);
    
    int64_t gtid_31585;
    
    gtid_31585 = sext_i32_i64(group_tid_38026) * segmap_group_sizze_32209 +
        sext_i32_i64(local_tid_38025) - squot64(sext_i32_i64(group_tid_38026) *
                                                segmap_group_sizze_32209 +
                                                sext_i32_i64(local_tid_38025),
                                                res_24816 * res_24816) *
        (res_24816 * res_24816) - squot64(sext_i32_i64(group_tid_38026) *
                                          segmap_group_sizze_32209 +
                                          sext_i32_i64(local_tid_38025) -
                                          squot64(sext_i32_i64(group_tid_38026) *
                                                  segmap_group_sizze_32209 +
                                                  sext_i32_i64(local_tid_38025),
                                                  res_24816 * res_24816) *
                                          (res_24816 * res_24816), res_24816) *
        res_24816;
    if ((slt64(gtid_31583, m_24797) && slt64(gtid_31584, res_24816)) &&
        slt64(gtid_31585, res_24816)) {
        int64_t index_primexp_35428 = m_24947 * gtid_31584;
        int64_t i_32215 = add64(res_24816, gtid_31585);
        int64_t new_index_32216 = i_32215 + index_primexp_35428;
        float res_32217 = ((__global
                            float *) res_r_mem_36925)[res_r_ixfn_36920 +
                                                      (gtid_31583 *
                                                       res_r_ixfn_36921 +
                                                       new_index_32216 *
                                                       res_r_ixfn_36923)];
        
        ((__global float *) mem_36930)[gtid_31583 * (res_24816 * res_24816) +
                                       gtid_31584 * res_24816 + gtid_31585] =
            res_32217;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32209
}
__kernel void mainzisegmap_31805(__global int *global_failure, int64_t m_24797,
                                 int64_t nm_24948, int64_t ctx_param_ext_36883,
                                 int64_t ctx_param_ext_36884,
                                 int64_t ctx_param_ext_36886, __global
                                 unsigned char *mem_param_36888, __global
                                 unsigned char *mem_36908)
{
    #define segmap_group_sizze_32174 (mainzisegmap_group_sizze_31808)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38018;
    int32_t local_tid_38019;
    int64_t group_sizze_38022;
    int32_t wave_sizze_38021;
    int32_t group_tid_38020;
    
    global_tid_38018 = get_global_id(0);
    local_tid_38019 = get_local_id(0);
    group_sizze_38022 = get_local_size(0);
    wave_sizze_38021 = LOCKSTEP_WIDTH;
    group_tid_38020 = get_group_id(0);
    
    int32_t phys_tid_31805;
    
    phys_tid_31805 = global_tid_38018;
    
    int64_t gtid_31803;
    
    gtid_31803 = squot64(sext_i32_i64(group_tid_38020) *
                         segmap_group_sizze_32174 +
                         sext_i32_i64(local_tid_38019), nm_24948);
    
    int64_t gtid_31804;
    
    gtid_31804 = sext_i32_i64(group_tid_38020) * segmap_group_sizze_32174 +
        sext_i32_i64(local_tid_38019) - squot64(sext_i32_i64(group_tid_38020) *
                                                segmap_group_sizze_32174 +
                                                sext_i32_i64(local_tid_38019),
                                                nm_24948) * nm_24948;
    if (slt64(gtid_31803, m_24797) && slt64(gtid_31804, nm_24948)) {
        float write_value_32180 = ((__global float *) mem_36908)[gtid_31803 *
                                                                 nm_24948 +
                                                                 gtid_31804];
        
        if ((sle64(0, gtid_31803) && slt64(gtid_31803, m_24797)) && (sle64(0,
                                                                           gtid_31804) &&
                                                                     slt64(gtid_31804,
                                                                           nm_24948))) {
            ((__global float *) mem_param_36888)[ctx_param_ext_36883 +
                                                 (gtid_31803 *
                                                  ctx_param_ext_36884 +
                                                  gtid_31804 *
                                                  ctx_param_ext_36886)] =
                write_value_32180;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32174
}
__kernel void mainzisegmap_31859(__global int *global_failure, int64_t m_24797,
                                 int32_t k2p2zq_24814, int64_t nm_24948,
                                 int32_t res_24956, int32_t i_32073,
                                 int64_t i_32075, int64_t ctx_param_ext_36883,
                                 int64_t ctx_param_ext_36884,
                                 int64_t ctx_param_ext_36886, __global
                                 unsigned char *mem_param_36888, __global
                                 unsigned char *mem_36904, __global
                                 unsigned char *mem_36908)
{
    #define segmap_group_sizze_32140 (mainzisegmap_group_sizze_31862)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38013;
    int32_t local_tid_38014;
    int64_t group_sizze_38017;
    int32_t wave_sizze_38016;
    int32_t group_tid_38015;
    
    global_tid_38013 = get_global_id(0);
    local_tid_38014 = get_local_id(0);
    group_sizze_38017 = get_local_size(0);
    wave_sizze_38016 = LOCKSTEP_WIDTH;
    group_tid_38015 = get_group_id(0);
    
    int32_t phys_tid_31859;
    
    phys_tid_31859 = global_tid_38013;
    
    int64_t gtid_31857;
    
    gtid_31857 = squot64(sext_i32_i64(group_tid_38015) *
                         segmap_group_sizze_32140 +
                         sext_i32_i64(local_tid_38014), nm_24948);
    
    int64_t gtid_31858;
    
    gtid_31858 = sext_i32_i64(group_tid_38015) * segmap_group_sizze_32140 +
        sext_i32_i64(local_tid_38014) - squot64(sext_i32_i64(group_tid_38015) *
                                                segmap_group_sizze_32140 +
                                                sext_i32_i64(local_tid_38014),
                                                nm_24948) * nm_24948;
    if (slt64(gtid_31857, m_24797) && slt64(gtid_31858, nm_24948)) {
        bool cond_32145 = ((__global bool *) mem_36904)[gtid_31857];
        int32_t res_32147 = sext_i64_i32(gtid_31858);
        int32_t res_32148 = sdiv32(res_32147, res_24956);
        int32_t res_32149 = smod32(res_32147, res_24956);
        float res_32150;
        
        if (cond_32145) {
            int32_t x_32151 = mul32(res_24956, res_32148);
            int32_t i_32152 = add32(res_32149, x_32151);
            int64_t i_32153 = sext_i32_i64(i_32152);
            float res_32154 = ((__global
                                float *) mem_param_36888)[ctx_param_ext_36883 +
                                                          (gtid_31857 *
                                                           ctx_param_ext_36884 +
                                                           i_32153 *
                                                           ctx_param_ext_36886)];
            
            res_32150 = res_32154;
        } else {
            float v1_32144 = ((__global
                               float *) mem_param_36888)[ctx_param_ext_36883 +
                                                         (gtid_31857 *
                                                          ctx_param_ext_36884 +
                                                          i_32075 *
                                                          ctx_param_ext_36886)];
            int64_t j_32155 = sext_i32_i64(res_32149);
            float x_32156 = ((__global
                              float *) mem_param_36888)[ctx_param_ext_36883 +
                                                        (gtid_31857 *
                                                         ctx_param_ext_36884 +
                                                         j_32155 *
                                                         ctx_param_ext_36886)];
            float x_32157 = x_32156 / v1_32144;
            int32_t y_32158 = sub32(k2p2zq_24814, 1);
            bool cond_32159 = slt32(res_32148, y_32158);
            float res_32160;
            
            if (cond_32159) {
                int32_t x_32161 = add32(1, res_32148);
                int32_t x_32162 = mul32(res_24956, x_32161);
                int32_t i_32163 = add32(res_32149, x_32162);
                int64_t i_32164 = sext_i32_i64(i_32163);
                float x_32165 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_31857 *
                                                             ctx_param_ext_36884 +
                                                             i_32164 *
                                                             ctx_param_ext_36886)];
                int32_t i_32166 = add32(i_32073, x_32162);
                int64_t i_32167 = sext_i32_i64(i_32166);
                float x_32168 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_31857 *
                                                             ctx_param_ext_36884 +
                                                             i_32167 *
                                                             ctx_param_ext_36886)];
                float y_32169 = x_32157 * x_32168;
                float res_32170 = x_32165 - y_32169;
                
                res_32160 = res_32170;
            } else {
                res_32160 = x_32157;
            }
            res_32150 = res_32160;
        }
        ((__global float *) mem_36908)[gtid_31857 * nm_24948 + gtid_31858] =
            res_32150;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32140
}
__kernel void mainzisegmap_31927(__global int *global_failure, int64_t m_24797,
                                 int64_t i_32075, int64_t ctx_param_ext_36883,
                                 int64_t ctx_param_ext_36884,
                                 int64_t ctx_param_ext_36886, __global
                                 unsigned char *mem_param_36888, __global
                                 unsigned char *mem_36904)
{
    #define segmap_group_sizze_32124 (mainzisegmap_group_sizze_31929)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38008;
    int32_t local_tid_38009;
    int64_t group_sizze_38012;
    int32_t wave_sizze_38011;
    int32_t group_tid_38010;
    
    global_tid_38008 = get_global_id(0);
    local_tid_38009 = get_local_id(0);
    group_sizze_38012 = get_local_size(0);
    wave_sizze_38011 = LOCKSTEP_WIDTH;
    group_tid_38010 = get_group_id(0);
    
    int32_t phys_tid_31927;
    
    phys_tid_31927 = global_tid_38008;
    
    int64_t gtid_31926;
    
    gtid_31926 = sext_i32_i64(group_tid_38010) * segmap_group_sizze_32124 +
        sext_i32_i64(local_tid_38009);
    if (slt64(gtid_31926, m_24797)) {
        float v1_32129 = ((__global
                           float *) mem_param_36888)[ctx_param_ext_36883 +
                                                     (gtid_31926 *
                                                      ctx_param_ext_36884 +
                                                      i_32075 *
                                                      ctx_param_ext_36886)];
        bool cond_32130 = v1_32129 == 0.0F;
        
        ((__global bool *) mem_36904)[gtid_31926] = cond_32130;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32124
}
__kernel void mainzisegmap_32018(__global int *global_failure, int64_t m_24797,
                                 int64_t res_24816, int64_t m_24947,
                                 int64_t nm_24948, __global
                                 unsigned char *res_mem_36848, __global
                                 unsigned char *mem_36880)
{
    #define segmap_group_sizze_32058 (mainzisegmap_group_sizze_32021)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37975;
    int32_t local_tid_37976;
    int64_t group_sizze_37979;
    int32_t wave_sizze_37978;
    int32_t group_tid_37977;
    
    global_tid_37975 = get_global_id(0);
    local_tid_37976 = get_local_id(0);
    group_sizze_37979 = get_local_size(0);
    wave_sizze_37978 = LOCKSTEP_WIDTH;
    group_tid_37977 = get_group_id(0);
    
    int32_t phys_tid_32018;
    
    phys_tid_32018 = global_tid_37975;
    
    int64_t gtid_32016;
    
    gtid_32016 = squot64(sext_i32_i64(group_tid_37977) *
                         segmap_group_sizze_32058 +
                         sext_i32_i64(local_tid_37976), nm_24948);
    
    int64_t gtid_32017;
    
    gtid_32017 = sext_i32_i64(group_tid_37977) * segmap_group_sizze_32058 +
        sext_i32_i64(local_tid_37976) - squot64(sext_i32_i64(group_tid_37977) *
                                                segmap_group_sizze_32058 +
                                                sext_i32_i64(local_tid_37976),
                                                nm_24948) * nm_24948;
    if (slt64(gtid_32016, m_24797) && slt64(gtid_32017, nm_24948)) {
        int64_t res_32063 = sdiv64(gtid_32017, m_24947);
        int64_t res_32064 = smod64(gtid_32017, m_24947);
        bool cond_32065 = slt64(res_32064, res_24816);
        float res_32066;
        
        if (cond_32065) {
            float res_32067 = ((__global float *) res_mem_36848)[gtid_32016 *
                                                                 (res_24816 *
                                                                  res_24816) +
                                                                 res_32063 *
                                                                 res_24816 +
                                                                 res_32064];
            
            res_32066 = res_32067;
        } else {
            int64_t y_32068 = add64(res_24816, res_32063);
            bool cond_32069 = res_32064 == y_32068;
            float res_32070;
            
            if (cond_32069) {
                res_32070 = 1.0F;
            } else {
                res_32070 = 0.0F;
            }
            res_32066 = res_32070;
        }
        ((__global float *) mem_36880)[gtid_32016 * nm_24948 + gtid_32017] =
            res_32066;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32058
}
__kernel void mainzisegmap_32224(__global int *global_failure, int64_t N_24796,
                                 int64_t m_24797, int32_t n_24801,
                                 int32_t k2p2zq_24814, int64_t res_24816,
                                 int64_t num_groups_32245, __global
                                 unsigned char *binop_p_mem_36747, __global
                                 unsigned char *mem_36934, __global
                                 unsigned char *mem_36937, __global
                                 unsigned char *mem_36952)
{
    #define segmap_group_sizze_32244 (mainzisegmap_group_sizze_32226)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38032;
    int32_t local_tid_38033;
    int64_t group_sizze_38036;
    int32_t wave_sizze_38035;
    int32_t group_tid_38034;
    
    global_tid_38032 = get_global_id(0);
    local_tid_38033 = get_local_id(0);
    group_sizze_38036 = get_local_size(0);
    wave_sizze_38035 = LOCKSTEP_WIDTH;
    group_tid_38034 = get_group_id(0);
    
    int32_t phys_tid_32224;
    
    phys_tid_32224 = global_tid_38032;
    
    int32_t phys_group_id_38037;
    
    phys_group_id_38037 = get_group_id(0);
    for (int32_t i_38038 = 0; i_38038 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797, segmap_group_sizze_32244)) -
                   phys_group_id_38037, sext_i64_i32(num_groups_32245));
         i_38038++) {
        int32_t virt_group_id_38039 = phys_group_id_38037 + i_38038 *
                sext_i64_i32(num_groups_32245);
        int64_t gtid_32223 = sext_i32_i64(virt_group_id_38039) *
                segmap_group_sizze_32244 + sext_i32_i64(local_tid_38033);
        
        if (slt64(gtid_32223, m_24797)) {
            for (int32_t i_36720 = 0; i_36720 < k2p2zq_24814; i_36720++) {
                int64_t i_36621 = sext_i32_i64(i_36720);
                float res_32251;
                float redout_36623 = 0.0F;
                
                for (int32_t i_36719 = 0; i_36719 < n_24801; i_36719++) {
                    int64_t i_36624 = sext_i32_i64(i_36719);
                    float x_32256 = ((__global float *) mem_36934)[i_36624 *
                                                                   m_24797 +
                                                                   gtid_32223];
                    bool res_32257;
                    
                    res_32257 = futrts_isnan32(x_32256);
                    
                    float res_32258;
                    
                    if (res_32257) {
                        res_32258 = 0.0F;
                    } else {
                        float x_32255 = ((__global
                                          float *) binop_p_mem_36747)[i_36621 *
                                                                      N_24796 +
                                                                      i_36624];
                        float res_32259 = x_32255 * x_32256;
                        
                        res_32258 = res_32259;
                    }
                    
                    float res_32254 = res_32258 + redout_36623;
                    float redout_tmp_38041 = res_32254;
                    
                    redout_36623 = redout_tmp_38041;
                }
                res_32251 = redout_36623;
                ((__global float *) mem_36937)[phys_tid_32224 + i_36621 *
                                               (num_groups_32245 *
                                                segmap_group_sizze_32244)] =
                    res_32251;
            }
            for (int64_t i_38042 = 0; i_38042 < res_24816; i_38042++) {
                ((__global float *) mem_36952)[i_38042 * m_24797 + gtid_32223] =
                    ((__global float *) mem_36937)[phys_tid_32224 + i_38042 *
                                                   (num_groups_32245 *
                                                    segmap_group_sizze_32244)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32244
}
__kernel void mainzisegmap_32365(__global int *global_failure, int64_t m_24797,
                                 int32_t k2p2zq_24814, int64_t res_24816,
                                 int64_t num_groups_32385, __global
                                 unsigned char *mem_37026, __global
                                 unsigned char *mem_37029, __global
                                 unsigned char *mem_37032, __global
                                 unsigned char *mem_37047)
{
    #define segmap_group_sizze_32384 (mainzisegmap_group_sizze_32367)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38120;
    int32_t local_tid_38121;
    int64_t group_sizze_38124;
    int32_t wave_sizze_38123;
    int32_t group_tid_38122;
    
    global_tid_38120 = get_global_id(0);
    local_tid_38121 = get_local_id(0);
    group_sizze_38124 = get_local_size(0);
    wave_sizze_38123 = LOCKSTEP_WIDTH;
    group_tid_38122 = get_group_id(0);
    
    int32_t phys_tid_32365;
    
    phys_tid_32365 = global_tid_38120;
    
    int32_t phys_group_id_38125;
    
    phys_group_id_38125 = get_group_id(0);
    for (int32_t i_38126 = 0; i_38126 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797, segmap_group_sizze_32384)) -
                   phys_group_id_38125, sext_i64_i32(num_groups_32385));
         i_38126++) {
        int32_t virt_group_id_38127 = phys_group_id_38125 + i_38126 *
                sext_i64_i32(num_groups_32385);
        int64_t gtid_32364 = sext_i32_i64(virt_group_id_38127) *
                segmap_group_sizze_32384 + sext_i32_i64(local_tid_38121);
        
        if (slt64(gtid_32364, m_24797)) {
            for (int32_t i_36722 = 0; i_36722 < k2p2zq_24814; i_36722++) {
                int64_t i_36631 = sext_i32_i64(i_36722);
                float res_32392;
                float redout_36633 = 0.0F;
                
                for (int32_t i_36721 = 0; i_36721 < k2p2zq_24814; i_36721++) {
                    int64_t i_36634 = sext_i32_i64(i_36721);
                    float x_32396 = ((__global float *) mem_37029)[i_36634 *
                                                                   m_24797 +
                                                                   gtid_32364];
                    float x_32397 = ((__global float *) mem_37026)[i_36631 *
                                                                   (m_24797 *
                                                                    res_24816) +
                                                                   i_36634 *
                                                                   m_24797 +
                                                                   gtid_32364];
                    float res_32398 = x_32396 * x_32397;
                    float res_32395 = res_32398 + redout_36633;
                    float redout_tmp_38129 = res_32395;
                    
                    redout_36633 = redout_tmp_38129;
                }
                res_32392 = redout_36633;
                ((__global float *) mem_37032)[phys_tid_32365 + i_36631 *
                                               (num_groups_32385 *
                                                segmap_group_sizze_32384)] =
                    res_32392;
            }
            for (int64_t i_38130 = 0; i_38130 < res_24816; i_38130++) {
                ((__global float *) mem_37047)[i_38130 * m_24797 + gtid_32364] =
                    ((__global float *) mem_37032)[phys_tid_32365 + i_38130 *
                                                   (num_groups_32385 *
                                                    segmap_group_sizze_32384)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32384
}
__kernel void mainzisegmap_32401(__global int *global_failure, int64_t m_24797,
                                 int32_t k2p2zq_24814, int64_t res_24816,
                                 __global unsigned char *res_mem_37022, __global
                                 unsigned char *mem_37051, __global
                                 unsigned char *mem_37055)
{
    #define segmap_group_sizze_32460 (mainzisegmap_group_sizze_32404)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38131;
    int32_t local_tid_38132;
    int64_t group_sizze_38135;
    int32_t wave_sizze_38134;
    int32_t group_tid_38133;
    
    global_tid_38131 = get_global_id(0);
    local_tid_38132 = get_local_id(0);
    group_sizze_38135 = get_local_size(0);
    wave_sizze_38134 = LOCKSTEP_WIDTH;
    group_tid_38133 = get_group_id(0);
    
    int32_t phys_tid_32401;
    
    phys_tid_32401 = global_tid_38131;
    
    int64_t gtid_32399;
    
    gtid_32399 = squot64(sext_i32_i64(group_tid_38133) *
                         segmap_group_sizze_32460 +
                         sext_i32_i64(local_tid_38132), res_24816);
    
    int64_t gtid_32400;
    
    gtid_32400 = sext_i32_i64(group_tid_38133) * segmap_group_sizze_32460 +
        sext_i32_i64(local_tid_38132) - squot64(sext_i32_i64(group_tid_38133) *
                                                segmap_group_sizze_32460 +
                                                sext_i32_i64(local_tid_38132),
                                                res_24816) * res_24816;
    if (slt64(gtid_32399, m_24797) && slt64(gtid_32400, res_24816)) {
        float res_32469;
        float redout_36635 = 0.0F;
        
        for (int32_t i_36723 = 0; i_36723 < k2p2zq_24814; i_36723++) {
            int64_t i_36636 = sext_i32_i64(i_36723);
            float x_32473 = ((__global float *) res_mem_37022)[gtid_32399 *
                                                               res_24816 +
                                                               i_36636];
            float x_32474 = ((__global float *) mem_37051)[i_36636 *
                                                           (res_24816 *
                                                            m_24797) +
                                                           gtid_32399 *
                                                           res_24816 +
                                                           gtid_32400];
            float res_32475 = x_32473 * x_32474;
            float res_32472 = res_32475 + redout_36635;
            float redout_tmp_38136 = res_32472;
            
            redout_36635 = redout_tmp_38136;
        }
        res_32469 = redout_36635;
        ((__global float *) mem_37055)[gtid_32399 * res_24816 + gtid_32400] =
            res_32469;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32460
}
__kernel void mainzisegmap_32497(__global int *global_failure, int64_t N_24796,
                                 int64_t m_24797, int32_t k2p2zq_24814,
                                 int64_t res_24816, int64_t num_groups_32516,
                                 __global unsigned char *mem_36754, __global
                                 unsigned char *mem_37068, __global
                                 unsigned char *mem_37071, __global
                                 unsigned char *mem_37086)
{
    #define segmap_group_sizze_32515 (mainzisegmap_group_sizze_32499)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38201;
    int32_t local_tid_38202;
    int64_t group_sizze_38205;
    int32_t wave_sizze_38204;
    int32_t group_tid_38203;
    
    global_tid_38201 = get_global_id(0);
    local_tid_38202 = get_local_id(0);
    group_sizze_38205 = get_local_size(0);
    wave_sizze_38204 = LOCKSTEP_WIDTH;
    group_tid_38203 = get_group_id(0);
    
    int32_t phys_tid_32497;
    
    phys_tid_32497 = global_tid_38201;
    
    int32_t phys_group_id_38206;
    
    phys_group_id_38206 = get_group_id(0);
    for (int32_t i_38207 = 0; i_38207 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797, segmap_group_sizze_32515)) -
                   phys_group_id_38206, sext_i64_i32(num_groups_32516));
         i_38207++) {
        int32_t virt_group_id_38208 = phys_group_id_38206 + i_38207 *
                sext_i64_i32(num_groups_32516);
        int64_t gtid_32496 = sext_i32_i64(virt_group_id_38208) *
                segmap_group_sizze_32515 + sext_i32_i64(local_tid_38202);
        
        if (slt64(gtid_32496, m_24797)) {
            for (int64_t i_36639 = 0; i_36639 < N_24796; i_36639++) {
                float res_32522;
                float redout_36641 = 0.0F;
                
                for (int32_t i_36724 = 0; i_36724 < k2p2zq_24814; i_36724++) {
                    int64_t i_36642 = sext_i32_i64(i_36724);
                    float x_32526 = ((__global float *) mem_37068)[i_36642 *
                                                                   m_24797 +
                                                                   gtid_32496];
                    float x_32527 = ((__global float *) mem_36754)[i_36639 *
                                                                   res_24816 +
                                                                   i_36642];
                    float res_32528 = x_32526 * x_32527;
                    float res_32525 = res_32528 + redout_36641;
                    float redout_tmp_38210 = res_32525;
                    
                    redout_36641 = redout_tmp_38210;
                }
                res_32522 = redout_36641;
                ((__global float *) mem_37071)[phys_tid_32497 + i_36639 *
                                               (num_groups_32516 *
                                                segmap_group_sizze_32515)] =
                    res_32522;
            }
            for (int64_t i_38211 = 0; i_38211 < N_24796; i_38211++) {
                ((__global float *) mem_37086)[i_38211 * m_24797 + gtid_32496] =
                    ((__global float *) mem_37071)[phys_tid_32497 + i_38211 *
                                                   (num_groups_32516 *
                                                    segmap_group_sizze_32515)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32515
}
__kernel void mainzisegmap_32777(__global int *global_failure, int64_t N_24796,
                                 int64_t m_24797, __global
                                 unsigned char *mem_37162, __global
                                 unsigned char *mem_37165, __global
                                 unsigned char *mem_37188, __global
                                 unsigned char *mem_37191)
{
    #define segmap_group_sizze_32943 (mainzisegmap_group_sizze_32780)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38384;
    int32_t local_tid_38385;
    int64_t group_sizze_38388;
    int32_t wave_sizze_38387;
    int32_t group_tid_38386;
    
    global_tid_38384 = get_global_id(0);
    local_tid_38385 = get_local_id(0);
    group_sizze_38388 = get_local_size(0);
    wave_sizze_38387 = LOCKSTEP_WIDTH;
    group_tid_38386 = get_group_id(0);
    
    int32_t phys_tid_32777;
    
    phys_tid_32777 = global_tid_38384;
    
    int64_t gtid_32775;
    
    gtid_32775 = squot64(sext_i32_i64(group_tid_38386) *
                         segmap_group_sizze_32943 +
                         sext_i32_i64(local_tid_38385), N_24796);
    
    int64_t gtid_32776;
    
    gtid_32776 = sext_i32_i64(group_tid_38386) * segmap_group_sizze_32943 +
        sext_i32_i64(local_tid_38385) - squot64(sext_i32_i64(group_tid_38386) *
                                                segmap_group_sizze_32943 +
                                                sext_i32_i64(local_tid_38385),
                                                N_24796) * N_24796;
    if (slt64(gtid_32775, m_24797) && slt64(gtid_32776, N_24796)) {
        float x_32951 = ((__global float *) mem_37191)[gtid_32775 * N_24796 +
                                                       gtid_32776];
        int32_t index_primexp_35436 = sext_i64_i32(gtid_32776);
        bool res_32954;
        
        res_32954 = futrts_isnan32(x_32951);
        
        bool res_32955 = !res_32954;
        int64_t res_32956;
        
        if (res_32955) {
            int64_t x_32952 = ((__global int64_t *) mem_37188)[gtid_32775 *
                                                               N_24796 +
                                                               gtid_32776];
            int64_t res_32957 = sub64(x_32952, 1);
            
            res_32956 = res_32957;
        } else {
            res_32956 = -1;
        }
        if ((sle64(0, gtid_32775) && slt64(gtid_32775, m_24797)) && (sle64(0,
                                                                           res_32956) &&
                                                                     slt64(res_32956,
                                                                           N_24796))) {
            ((__global int32_t *) mem_37165)[gtid_32775 * N_24796 + res_32956] =
                index_primexp_35436;
        }
        if ((sle64(0, gtid_32775) && slt64(gtid_32775, m_24797)) && (sle64(0,
                                                                           res_32956) &&
                                                                     slt64(res_32956,
                                                                           N_24796))) {
            ((__global float *) mem_37162)[gtid_32775 * N_24796 + res_32956] =
                x_32951;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32943
}
__kernel void mainzisegmap_32853(__global int *global_failure, int64_t N_24796,
                                 int64_t m_24797, int64_t i_25063, __global
                                 unsigned char *mem_37188, __global
                                 unsigned char *mem_37194)
{
    #define segmap_group_sizze_32907 (mainzisegmap_group_sizze_32855)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38379;
    int32_t local_tid_38380;
    int64_t group_sizze_38383;
    int32_t wave_sizze_38382;
    int32_t group_tid_38381;
    
    global_tid_38379 = get_global_id(0);
    local_tid_38380 = get_local_id(0);
    group_sizze_38383 = get_local_size(0);
    wave_sizze_38382 = LOCKSTEP_WIDTH;
    group_tid_38381 = get_group_id(0);
    
    int32_t phys_tid_32853;
    
    phys_tid_32853 = global_tid_38379;
    
    int64_t gtid_32852;
    
    gtid_32852 = sext_i32_i64(group_tid_38381) * segmap_group_sizze_32907 +
        sext_i32_i64(local_tid_38380);
    if (slt64(gtid_32852, m_24797)) {
        int64_t res_32911 = ((__global int64_t *) mem_37188)[gtid_32852 *
                                                             N_24796 + i_25063];
        int32_t res_32912 = sext_i64_i32(res_32911);
        
        ((__global int32_t *) mem_37194)[gtid_32852] = res_32912;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32907
}
__kernel void mainzisegmap_33104(__global int *global_failure, int64_t m_24797,
                                 float hfrac_24803, int32_t k2p2_24812, __global
                                 unsigned char *mem_37264, __global
                                 unsigned char *mem_37267, __global
                                 unsigned char *mem_37270, __global
                                 unsigned char *mem_37272)
{
    #define segmap_group_sizze_33189 (mainzisegmap_group_sizze_33106)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38539;
    int32_t local_tid_38540;
    int64_t group_sizze_38543;
    int32_t wave_sizze_38542;
    int32_t group_tid_38541;
    
    global_tid_38539 = get_global_id(0);
    local_tid_38540 = get_local_id(0);
    group_sizze_38543 = get_local_size(0);
    wave_sizze_38542 = LOCKSTEP_WIDTH;
    group_tid_38541 = get_group_id(0);
    
    int32_t phys_tid_33104;
    
    phys_tid_33104 = global_tid_38539;
    
    int64_t gtid_33103;
    
    gtid_33103 = sext_i32_i64(group_tid_38541) * segmap_group_sizze_33189 +
        sext_i32_i64(local_tid_38540);
    if (slt64(gtid_33103, m_24797)) {
        int32_t res_33193 = ((__global int32_t *) mem_37264)[gtid_33103];
        float res_33194 = ((__global float *) mem_37267)[gtid_33103];
        int32_t r32_arg_33195 = sub32(res_33193, k2p2_24812);
        float res_33196 = sitofp_i32_f32(r32_arg_33195);
        float sqrt_arg_33197 = res_33194 / res_33196;
        float res_33198;
        
        res_33198 = futrts_sqrt32(sqrt_arg_33197);
        
        float res_33199 = sitofp_i32_f32(res_33193);
        float t32_arg_33200 = hfrac_24803 * res_33199;
        int32_t res_33201 = fptosi_f32_i32(t32_arg_33200);
        
        ((__global int32_t *) mem_37270)[gtid_33103] = res_33201;
        ((__global float *) mem_37272)[gtid_33103] = res_33198;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33189
}
__kernel void mainzisegmap_33375(__global int *global_failure, float lam_24804,
                                 int64_t iota32_arg_25183, int32_t x_25188,
                                 float res_25191, __global
                                 unsigned char *mappingindices_mem_36737,
                                 __global unsigned char *mem_37330, __global
                                 unsigned char *mem_37332)
{
    #define segmap_group_sizze_33394 (mainzisegmap_group_sizze_33377)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38649;
    int32_t local_tid_38650;
    int64_t group_sizze_38653;
    int32_t wave_sizze_38652;
    int32_t group_tid_38651;
    
    global_tid_38649 = get_global_id(0);
    local_tid_38650 = get_local_id(0);
    group_sizze_38653 = get_local_size(0);
    wave_sizze_38652 = LOCKSTEP_WIDTH;
    group_tid_38651 = get_group_id(0);
    
    int32_t phys_tid_33375;
    
    phys_tid_33375 = global_tid_38649;
    
    int64_t gtid_33374;
    
    gtid_33374 = sext_i32_i64(group_tid_38651) * segmap_group_sizze_33394 +
        sext_i32_i64(local_tid_38650);
    if (slt64(gtid_33374, iota32_arg_25183)) {
        int32_t res_33399 = sext_i64_i32(gtid_33374);
        int32_t t_33400 = add32(x_25188, res_33399);
        int32_t i_33401 = sub32(t_33400, 1);
        int64_t i_33402 = sext_i32_i64(i_33401);
        int32_t time_33403 = ((__global
                               int32_t *) mappingindices_mem_36737)[i_33402];
        float res_33404 = sitofp_i32_f32(time_33403);
        float logplus_arg_33405 = res_33404 / res_25191;
        bool cond_33406 = 2.7182817F < logplus_arg_33405;
        float res_33407;
        
        if (cond_33406) {
            float res_33408;
            
            res_33408 = futrts_log32(logplus_arg_33405);
            res_33407 = res_33408;
        } else {
            res_33407 = 1.0F;
        }
        
        float res_33409;
        
        res_33409 = futrts_sqrt32(res_33407);
        
        float res_33410 = lam_24804 * res_33409;
        
        ((__global int32_t *) mem_37330)[gtid_33374] = res_33399;
        ((__global float *) mem_37332)[gtid_33374] = res_33410;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33394
}
__kernel void mainzisegmap_33448(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_24796,
                                 int64_t m_24797, int32_t n_24801,
                                 int64_t iota32_arg_25183, int32_t iters_25209,
                                 int64_t i_25211,
                                 int64_t segmap_usable_groups_33687, __global
                                 unsigned char *res_mem_37196, __global
                                 unsigned char *res_mem_37197, __global
                                 unsigned char *res_mem_37198, __global
                                 unsigned char *res_mem_37276, __global
                                 unsigned char *res_mem_37277, __global
                                 unsigned char *res_mem_37278, __global
                                 unsigned char *res_mem_37327, __global
                                 unsigned char *mem_37332, __global
                                 unsigned char *mem_37335, __global
                                 unsigned char *mem_37354, __global
                                 unsigned char *mem_37356, __global
                                 unsigned char *mem_37358, __global
                                 unsigned char *mem_37360, __global
                                 unsigned char *mem_37362, __global
                                 unsigned char *mem_37424, __global
                                 unsigned char *mem_37443, __global
                                 unsigned char *mem_37445, __global
                                 unsigned char *mem_37447, __global
                                 unsigned char *double_buffer_mem_37711)
{
    #define segmap_group_sizze_33686 (mainzisegmap_group_sizze_33450)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38658;
    int32_t local_tid_38659;
    int64_t group_sizze_38662;
    int32_t wave_sizze_38661;
    int32_t group_tid_38660;
    
    global_tid_38658 = get_global_id(0);
    local_tid_38659 = get_local_id(0);
    group_sizze_38662 = get_local_size(0);
    wave_sizze_38661 = LOCKSTEP_WIDTH;
    group_tid_38660 = get_group_id(0);
    
    int32_t phys_tid_33448;
    
    phys_tid_33448 = global_tid_38658;
    
    int64_t gtid_33447;
    
    gtid_33447 = sext_i32_i64(group_tid_38660) * segmap_group_sizze_33686 +
        sext_i32_i64(local_tid_38659);
    if (slt64(gtid_33447, m_24797)) {
        int32_t x_33691 = ((__global int32_t *) res_mem_37196)[gtid_33447];
        int32_t x_33692 = ((__global int32_t *) res_mem_37277)[gtid_33447];
        float x_33693 = ((__global float *) res_mem_37278)[gtid_33447];
        int32_t x_33694 = ((__global int32_t *) res_mem_37276)[gtid_33447];
        float x_33695 = ((__global float *) res_mem_37327)[gtid_33447];
        int32_t y_33698 = sub32(x_33691, x_33692);
        float res_33699 = sitofp_i32_f32(x_33692);
        float res_33700;
        
        res_33700 = futrts_sqrt32(res_33699);
        
        float y_33701 = x_33693 * res_33700;
        float inpacc_33702;
        bool res_33703;
        int32_t res_33704;
        float res_33705;
        float inpacc_33707;
        bool inpacc_33708;
        int32_t inpacc_33709;
        float inpacc_33710;
        
        inpacc_33707 = 0.0F;
        inpacc_33708 = 0;
        inpacc_33709 = -1;
        inpacc_33710 = 0.0F;
        for (int64_t i_36591 = 0; i_36591 < iota32_arg_25183; i_36591++) {
            int32_t index_primexp_36600 = sext_i64_i32(i_36591);
            bool cond_33718 = sle32(y_33698, index_primexp_36600);
            float res_33719;
            
            if (cond_33718) {
                res_33719 = 0.0F;
            } else {
                bool cond_33720 = index_primexp_36600 == 0;
                float res_33721;
                
                if (cond_33720) {
                    res_33721 = x_33695;
                } else {
                    int32_t i_33722 = add32(x_33692, index_primexp_36600);
                    int64_t i_33723 = sext_i32_i64(i_33722);
                    float x_33724 = ((__global
                                      float *) res_mem_37197)[gtid_33447 *
                                                              N_24796 +
                                                              i_33723];
                    int32_t x_33725 = sub32(x_33692, x_33694);
                    int32_t i_33726 = add32(x_33725, index_primexp_36600);
                    int64_t i_33727 = sext_i32_i64(i_33726);
                    float y_33728 = ((__global
                                      float *) res_mem_37197)[gtid_33447 *
                                                              N_24796 +
                                                              i_33727];
                    float res_33729 = x_33724 - y_33728;
                    
                    res_33721 = res_33729;
                }
                res_33719 = res_33721;
            }
            
            float res_33734 = inpacc_33707 + res_33719;
            float x_33753 = ((__global float *) mem_37332)[i_36591];
            float res_33756 = res_33734 / y_33701;
            bool cond_33757 = slt32(index_primexp_36600, y_33698);
            bool res_33758;
            
            res_33758 = futrts_isnan32(res_33756);
            
            bool res_33759 = !res_33758;
            bool x_33760 = cond_33757 && res_33759;
            float res_33761 = (float) fabs(res_33756);
            bool res_33762 = x_33753 < res_33761;
            bool x_33763 = x_33760 && res_33762;
            float res_33764;
            
            if (cond_33757) {
                res_33764 = res_33756;
            } else {
                res_33764 = 0.0F;
            }
            
            int32_t x_33742 = index_primexp_36600;
            bool x_33746 = x_33763 && x_33763;
            int32_t res_33750;
            
            if (x_33763) {
                res_33750 = x_33742;
            } else {
                res_33750 = -1;
            }
            
            bool res_33765;
            int32_t res_33766;
            
            if (inpacc_33708) {
                res_33765 = inpacc_33708;
                res_33766 = inpacc_33709;
            } else {
                bool x_33767 = x_33746 && x_33746;
                bool x_33768 = !x_33746;
                bool y_33769 = inpacc_33708 && x_33768;
                bool res_33770 = x_33767 || y_33769;
                int32_t res_33771;
                
                if (x_33746) {
                    res_33771 = res_33750;
                } else {
                    res_33771 = inpacc_33709;
                }
                res_33765 = res_33770;
                res_33766 = res_33771;
            }
            
            float res_33772 = inpacc_33710 + res_33764;
            float inpacc_tmp_38663 = res_33734;
            bool inpacc_tmp_38664 = res_33765;
            int32_t inpacc_tmp_38665 = res_33766;
            float inpacc_tmp_38666 = res_33772;
            
            inpacc_33707 = inpacc_tmp_38663;
            inpacc_33708 = inpacc_tmp_38664;
            inpacc_33709 = inpacc_tmp_38665;
            inpacc_33710 = inpacc_tmp_38666;
        }
        inpacc_33702 = inpacc_33707;
        res_33703 = inpacc_33708;
        res_33704 = inpacc_33709;
        res_33705 = inpacc_33710;
        
        bool cond_33773 = y_33698 == 0;
        float res_33774;
        
        if (cond_33773) {
            res_33774 = 0.0F;
        } else {
            float res_33775 = sitofp_i32_f32(y_33698);
            float res_33776 = res_33705 / res_33775;
            
            res_33774 = res_33776;
        }
        for (int64_t i_36663 = 0; i_36663 < iota32_arg_25183; i_36663++) {
            int32_t index_primexp_36728 = sext_i64_i32(i_36663);
            bool cond_33779 = slt32(index_primexp_36728, y_33698);
            bool cond_33780;
            
            if (cond_33779) {
                int32_t i_33781 = add32(x_33692, index_primexp_36728);
                int64_t i_33782 = sext_i32_i64(i_33781);
                bool x_33783 = sle64(0, i_33782);
                bool y_33784 = slt64(i_33782, N_24796);
                bool bounds_check_33785 = x_33783 && y_33784;
                bool index_certs_33786;
                
                if (!bounds_check_33785) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 1) ==
                            -1) {
                            global_failure_args[0] = i_33782;
                            global_failure_args[1] = N_24796;
                            ;
                        }
                        return;
                    }
                }
                
                float isnan_arg_33787 = ((__global
                                          float *) res_mem_37197)[gtid_33447 *
                                                                  N_24796 +
                                                                  i_33782];
                bool res_33788;
                
                res_33788 = futrts_isnan32(isnan_arg_33787);
                
                bool res_33789 = !res_33788;
                
                cond_33780 = res_33789;
            } else {
                cond_33780 = 0;
            }
            
            float res_33790;
            
            if (cond_33780) {
                int32_t i_33791 = add32(x_33692, index_primexp_36728);
                int64_t i_33792 = sext_i32_i64(i_33791);
                bool x_33793 = sle64(0, i_33792);
                bool y_33794 = slt64(i_33792, N_24796);
                bool bounds_check_33795 = x_33793 && y_33794;
                bool index_certs_33796;
                
                if (!bounds_check_33795) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 2) ==
                            -1) {
                            global_failure_args[0] = i_33792;
                            global_failure_args[1] = N_24796;
                            ;
                        }
                        return;
                    }
                }
                
                float res_33797 = ((__global
                                    float *) res_mem_37197)[gtid_33447 *
                                                            N_24796 + i_33792];
                
                res_33790 = res_33797;
            } else {
                res_33790 = INFINITY;
            }
            ((__global float *) mem_37335)[phys_tid_33448 + i_36663 *
                                           (segmap_usable_groups_33687 *
                                            segmap_group_sizze_33686)] =
                res_33790;
        }
        for (int64_t i_38668 = 0; i_38668 < iota32_arg_25183; i_38668++) {
            ((__global float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                         i_38668 *
                                                         (segmap_usable_groups_33687 *
                                                          segmap_group_sizze_33686)] =
                ((__global float *) mem_37335)[phys_tid_33448 + i_38668 *
                                               (segmap_usable_groups_33687 *
                                                segmap_group_sizze_33686)];
        }
        for (int32_t i_33799 = 0; i_33799 < iters_25209; i_33799++) {
            int32_t lifted_2_radix_sort_step_arg_33801 = mul32(2, i_33799);
            int32_t lifted_0_get_bit_arg_33802 = add32(1,
                                                       lifted_2_radix_sort_step_arg_33801);
            bool res_33803 = lifted_0_get_bit_arg_33802 == 31;
            bool res_33804 = lifted_2_radix_sort_step_arg_33801 == 31;
            int64_t discard_36685;
            int64_t discard_36686;
            int64_t discard_36687;
            int64_t discard_36688;
            int64_t scanacc_36670;
            int64_t scanacc_36671;
            int64_t scanacc_36672;
            int64_t scanacc_36673;
            
            scanacc_36670 = 0;
            scanacc_36671 = 0;
            scanacc_36672 = 0;
            scanacc_36673 = 0;
            for (int64_t i_36679 = 0; i_36679 < iota32_arg_25183; i_36679++) {
                float x_33822 = ((__global
                                  float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                                    i_36679 *
                                                                    (segmap_usable_groups_33687 *
                                                                     segmap_group_sizze_33686)];
                int32_t i32_arg_33823;
                
                i32_arg_33823 = futrts_to_bits32(x_33822);
                
                int32_t unsign_arg_33824 = ashr32(i32_arg_33823,
                                                  lifted_0_get_bit_arg_33802);
                int32_t unsign_arg_33825 = 1 & unsign_arg_33824;
                int32_t unsign_arg_33826 = ashr32(i32_arg_33823, 31);
                int32_t unsign_arg_33827 = 1 & unsign_arg_33826;
                bool cond_33828 = unsign_arg_33827 == 1;
                bool x_33829 = !cond_33828;
                bool y_33830 = res_33803 && x_33829;
                bool cond_33831 = cond_33828 || y_33830;
                int32_t res_33832;
                
                if (cond_33831) {
                    int32_t res_33833 = 1 ^ unsign_arg_33825;
                    
                    res_33832 = res_33833;
                } else {
                    res_33832 = unsign_arg_33825;
                }
                
                int32_t x_33834 = mul32(2, res_33832);
                int32_t unsign_arg_33835 = ashr32(i32_arg_33823,
                                                  lifted_2_radix_sort_step_arg_33801);
                int32_t unsign_arg_33836 = 1 & unsign_arg_33835;
                bool y_33837 = res_33804 && x_33829;
                bool cond_33838 = cond_33828 || y_33837;
                int32_t res_33839;
                
                if (cond_33838) {
                    int32_t res_33840 = 1 ^ unsign_arg_33836;
                    
                    res_33839 = res_33840;
                } else {
                    res_33839 = unsign_arg_33836;
                }
                
                int32_t res_33841 = add32(x_33834, res_33839);
                bool cond_33842 = res_33841 == 0;
                int64_t res_33843 = btoi_bool_i64(cond_33842);
                int64_t res_33844;
                int64_t res_33845;
                int64_t res_33846;
                
                if (cond_33842) {
                    res_33844 = 0;
                    res_33845 = 0;
                    res_33846 = 0;
                } else {
                    bool cond_33847 = res_33841 == 1;
                    int64_t res_33848 = btoi_bool_i64(cond_33847);
                    int64_t res_33849;
                    int64_t res_33850;
                    
                    if (cond_33847) {
                        res_33849 = 0;
                        res_33850 = 0;
                    } else {
                        bool cond_33851 = res_33841 == 2;
                        int64_t res_33852 = btoi_bool_i64(cond_33851);
                        bool cond_neg_33853 = !cond_33851;
                        int64_t res_33854 = btoi_bool_i64(cond_neg_33853);
                        
                        res_33849 = res_33852;
                        res_33850 = res_33854;
                    }
                    res_33844 = res_33848;
                    res_33845 = res_33849;
                    res_33846 = res_33850;
                }
                
                int64_t res_33818 = add64(res_33843, scanacc_36670);
                int64_t res_33819 = add64(res_33844, scanacc_36671);
                int64_t res_33820 = add64(res_33845, scanacc_36672);
                int64_t res_33821 = add64(res_33846, scanacc_36673);
                
                ((__global int64_t *) mem_37354)[phys_tid_33448 + i_36679 *
                                                 (segmap_usable_groups_33687 *
                                                  segmap_group_sizze_33686)] =
                    res_33818;
                ((__global int64_t *) mem_37356)[phys_tid_33448 + i_36679 *
                                                 (segmap_usable_groups_33687 *
                                                  segmap_group_sizze_33686)] =
                    res_33819;
                ((__global int64_t *) mem_37358)[phys_tid_33448 + i_36679 *
                                                 (segmap_usable_groups_33687 *
                                                  segmap_group_sizze_33686)] =
                    res_33820;
                ((__global int64_t *) mem_37360)[phys_tid_33448 + i_36679 *
                                                 (segmap_usable_groups_33687 *
                                                  segmap_group_sizze_33686)] =
                    res_33821;
                ((__global int32_t *) mem_37362)[phys_tid_33448 + i_36679 *
                                                 (segmap_usable_groups_33687 *
                                                  segmap_group_sizze_33686)] =
                    res_33841;
                
                int64_t scanacc_tmp_38670 = res_33818;
                int64_t scanacc_tmp_38671 = res_33819;
                int64_t scanacc_tmp_38672 = res_33820;
                int64_t scanacc_tmp_38673 = res_33821;
                
                scanacc_36670 = scanacc_tmp_38670;
                scanacc_36671 = scanacc_tmp_38671;
                scanacc_36672 = scanacc_tmp_38672;
                scanacc_36673 = scanacc_tmp_38673;
            }
            discard_36685 = scanacc_36670;
            discard_36686 = scanacc_36671;
            discard_36687 = scanacc_36672;
            discard_36688 = scanacc_36673;
            
            int64_t res_33855 = ((__global
                                  int64_t *) mem_37354)[phys_tid_33448 +
                                                        i_25211 *
                                                        (segmap_usable_groups_33687 *
                                                         segmap_group_sizze_33686)];
            int64_t res_33856 = ((__global
                                  int64_t *) mem_37356)[phys_tid_33448 +
                                                        i_25211 *
                                                        (segmap_usable_groups_33687 *
                                                         segmap_group_sizze_33686)];
            int64_t res_33857 = ((__global
                                  int64_t *) mem_37358)[phys_tid_33448 +
                                                        i_25211 *
                                                        (segmap_usable_groups_33687 *
                                                         segmap_group_sizze_33686)];
            
            for (int64_t i_38679 = 0; i_38679 < iota32_arg_25183; i_38679++) {
                ((__global float *) mem_37424)[phys_tid_33448 + i_38679 *
                                               (segmap_usable_groups_33687 *
                                                segmap_group_sizze_33686)] =
                    ((__global
                      float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                        i_38679 *
                                                        (segmap_usable_groups_33687 *
                                                         segmap_group_sizze_33686)];
            }
            for (int64_t write_iter_36689 = 0; write_iter_36689 <
                 iota32_arg_25183; write_iter_36689++) {
                int32_t write_iv_36691 = ((__global
                                           int32_t *) mem_37362)[phys_tid_33448 +
                                                                 write_iter_36689 *
                                                                 (segmap_usable_groups_33687 *
                                                                  segmap_group_sizze_33686)];
                bool match_lit_33866 = 0 == write_iv_36691;
                int64_t res_33867;
                
                if (match_lit_33866) {
                    int64_t write_iv_36692 = ((__global
                                               int64_t *) mem_37354)[phys_tid_33448 +
                                                                     write_iter_36689 *
                                                                     (segmap_usable_groups_33687 *
                                                                      segmap_group_sizze_33686)];
                    int64_t res_33868 = sub64(write_iv_36692, 1);
                    
                    res_33867 = res_33868;
                } else {
                    int64_t write_iv_36693 = ((__global
                                               int64_t *) mem_37356)[phys_tid_33448 +
                                                                     write_iter_36689 *
                                                                     (segmap_usable_groups_33687 *
                                                                      segmap_group_sizze_33686)];
                    int64_t write_iv_36694 = ((__global
                                               int64_t *) mem_37358)[phys_tid_33448 +
                                                                     write_iter_36689 *
                                                                     (segmap_usable_groups_33687 *
                                                                      segmap_group_sizze_33686)];
                    int64_t write_iv_36695 = ((__global
                                               int64_t *) mem_37360)[phys_tid_33448 +
                                                                     write_iter_36689 *
                                                                     (segmap_usable_groups_33687 *
                                                                      segmap_group_sizze_33686)];
                    bool match_lit_33869 = 1 == write_iv_36691;
                    int64_t x_33870;
                    
                    if (match_lit_33869) {
                        int64_t x_33871 = add64(res_33855, write_iv_36693);
                        int64_t res_33872 = sub64(x_33871, 1);
                        
                        x_33870 = res_33872;
                    } else {
                        bool match_lit_33873 = 2 == write_iv_36691;
                        int64_t x_33874;
                        
                        if (match_lit_33873) {
                            int64_t x_33875 = add64(res_33855, res_33856);
                            int64_t x_33876 = add64(x_33875, write_iv_36694);
                            int64_t res_33877 = sub64(x_33876, 1);
                            
                            x_33874 = res_33877;
                        } else {
                            int64_t x_33878 = add64(res_33855, res_33856);
                            int64_t x_33879 = add64(res_33857, x_33878);
                            int64_t x_33880 = add64(x_33879, write_iv_36695);
                            int64_t res_33881 = sub64(x_33880, 1);
                            
                            x_33874 = res_33881;
                        }
                        x_33870 = x_33874;
                    }
                    res_33867 = x_33870;
                }
                
                bool less_than_zzero_36697 = slt64(res_33867, 0);
                bool greater_than_sizze_36698 = sle64(iota32_arg_25183,
                                                      res_33867);
                bool outside_bounds_dim_36699 = less_than_zzero_36697 ||
                     greater_than_sizze_36698;
                
                if (!outside_bounds_dim_36699) {
                    for (int64_t i_38681 = 0; i_38681 < 1; i_38681++) {
                        ((__global float *) mem_37424)[phys_tid_33448 +
                                                       (res_33867 + i_38681) *
                                                       (segmap_usable_groups_33687 *
                                                        segmap_group_sizze_33686)] =
                            ((__global
                              float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                                segmap_usable_groups_33687 *
                                                                segmap_group_sizze_33686 *
                                                                write_iter_36689 +
                                                                i_38681 *
                                                                (segmap_usable_groups_33687 *
                                                                 segmap_group_sizze_33686)];
                    }
                }
            }
            for (int64_t i_38682 = 0; i_38682 < iota32_arg_25183; i_38682++) {
                ((__global float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                             i_38682 *
                                                             (segmap_usable_groups_33687 *
                                                              segmap_group_sizze_33686)] =
                    ((__global float *) mem_37424)[phys_tid_33448 + i_38682 *
                                                   (segmap_usable_groups_33687 *
                                                    segmap_group_sizze_33686)];
            }
        }
        
        int32_t i_33882 = sdiv32(y_33698, 2);
        int32_t j_33883 = sub32(i_33882, 1);
        bool cond_33884 = x_33691 == x_33692;
        float res_33885;
        
        if (cond_33884) {
            res_33885 = 0.0F;
        } else {
            int32_t x_33886 = smod32(y_33698, 2);
            bool cond_33887 = x_33886 == 0;
            float res_33888;
            
            if (cond_33887) {
                int64_t j_33889 = sext_i32_i64(j_33883);
                bool x_33890 = sle64(0, j_33889);
                bool y_33891 = slt64(j_33889, iota32_arg_25183);
                bool bounds_check_33892 = x_33890 && y_33891;
                bool index_certs_33893;
                
                if (!bounds_check_33892) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 3) ==
                            -1) {
                            global_failure_args[0] = j_33889;
                            global_failure_args[1] = iota32_arg_25183;
                            ;
                        }
                        return;
                    }
                }
                
                float x_33894 = ((__global
                                  float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                                    j_33889 *
                                                                    (segmap_usable_groups_33687 *
                                                                     segmap_group_sizze_33686)];
                int64_t i_33895 = sext_i32_i64(i_33882);
                bool x_33896 = sle64(0, i_33895);
                bool y_33897 = slt64(i_33895, iota32_arg_25183);
                bool bounds_check_33898 = x_33896 && y_33897;
                bool index_certs_33899;
                
                if (!bounds_check_33898) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 4) ==
                            -1) {
                            global_failure_args[0] = i_33895;
                            global_failure_args[1] = iota32_arg_25183;
                            ;
                        }
                        return;
                    }
                }
                
                float y_33900 = ((__global
                                  float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                                    i_33895 *
                                                                    (segmap_usable_groups_33687 *
                                                                     segmap_group_sizze_33686)];
                float x_33901 = x_33894 + y_33900;
                float res_33902 = x_33901 / 2.0F;
                
                res_33888 = res_33902;
            } else {
                int64_t i_33903 = sext_i32_i64(i_33882);
                bool x_33904 = sle64(0, i_33903);
                bool y_33905 = slt64(i_33903, iota32_arg_25183);
                bool bounds_check_33906 = x_33904 && y_33905;
                bool index_certs_33907;
                
                if (!bounds_check_33906) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 5) ==
                            -1) {
                            global_failure_args[0] = i_33903;
                            global_failure_args[1] = iota32_arg_25183;
                            ;
                        }
                        return;
                    }
                }
                
                float res_33908 = ((__global
                                    float *) double_buffer_mem_37711)[phys_tid_33448 +
                                                                      i_33903 *
                                                                      (segmap_usable_groups_33687 *
                                                                       segmap_group_sizze_33686)];
                
                res_33888 = res_33908;
            }
            res_33885 = res_33888;
        }
        
        bool cond_33909 = !res_33703;
        int32_t fst_breakzq_33910;
        
        if (cond_33909) {
            fst_breakzq_33910 = -1;
        } else {
            bool cond_33911 = slt32(res_33704, y_33698);
            int32_t res_33912;
            
            if (cond_33911) {
                int32_t i_33913 = add32(x_33692, res_33704);
                int64_t i_33914 = sext_i32_i64(i_33913);
                int32_t x_33915 = ((__global
                                    int32_t *) res_mem_37198)[gtid_33447 *
                                                              N_24796 +
                                                              i_33914];
                int32_t res_33916 = sub32(x_33915, n_24801);
                
                res_33912 = res_33916;
            } else {
                res_33912 = -1;
            }
            fst_breakzq_33910 = res_33912;
        }
        
        bool cond_33917 = sle32(x_33692, 5);
        bool res_33918 = sle32(y_33698, 5);
        bool x_33919 = !cond_33917;
        bool y_33920 = res_33918 && x_33919;
        bool cond_33921 = cond_33917 || y_33920;
        int32_t fst_breakzq_33922;
        
        if (cond_33921) {
            fst_breakzq_33922 = -2;
        } else {
            fst_breakzq_33922 = fst_breakzq_33910;
        }
        ((__global int32_t *) mem_37443)[gtid_33447] = fst_breakzq_33922;
        ((__global float *) mem_37445)[gtid_33447] = res_33774;
        ((__global float *) mem_37447)[gtid_33447] = res_33885;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33686
}
__kernel void mainzisegmap_34168(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_24796,
                                 int64_t m_24797, int32_t n_24801,
                                 int64_t iota32_arg_25183, __global
                                 unsigned char *res_mem_37196, __global
                                 unsigned char *res_mem_37198, __global
                                 unsigned char *res_mem_37277, __global
                                 unsigned char *mem_37494, __global
                                 unsigned char *mem_37508, __global
                                 unsigned char *mem_37510, __global
                                 unsigned char *res_r_mem_37578, __global
                                 unsigned char *mem_37581, __global
                                 unsigned char *mem_37583)
{
    #define segmap_group_sizze_35323 (mainzisegmap_group_sizze_34170)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39036;
    int32_t local_tid_39037;
    int64_t group_sizze_39040;
    int32_t wave_sizze_39039;
    int32_t group_tid_39038;
    
    global_tid_39036 = get_global_id(0);
    local_tid_39037 = get_local_id(0);
    group_sizze_39040 = get_local_size(0);
    wave_sizze_39039 = LOCKSTEP_WIDTH;
    group_tid_39038 = get_group_id(0);
    
    int32_t phys_tid_34168;
    
    phys_tid_34168 = global_tid_39036;
    
    int64_t gtid_34167;
    
    gtid_34167 = sext_i32_i64(group_tid_39038) * segmap_group_sizze_35323 +
        sext_i32_i64(local_tid_39037);
    if (slt64(gtid_34167, m_24797)) {
        int32_t x_35327 = ((__global int32_t *) res_mem_37196)[gtid_34167];
        int32_t x_35328 = ((__global int32_t *) res_mem_37277)[gtid_34167];
        int32_t y_35330 = ((__global int32_t *) mem_37494)[gtid_34167];
        bool res_35331 = ((__global bool *) mem_37508)[gtid_34167];
        int32_t i_35334 = sdiv32(y_35330, 2);
        int32_t j_35335 = sub32(i_35334, 1);
        bool cond_35336 = x_35327 == x_35328;
        float res_35337;
        
        if (cond_35336) {
            res_35337 = 0.0F;
        } else {
            int32_t x_35338 = smod32(y_35330, 2);
            bool cond_35339 = x_35338 == 0;
            float res_35340;
            
            if (cond_35339) {
                int64_t j_35341 = sext_i32_i64(j_35335);
                bool x_35342 = sle64(0, j_35341);
                bool y_35343 = slt64(j_35341, iota32_arg_25183);
                bool bounds_check_35344 = x_35342 && y_35343;
                bool index_certs_35345;
                
                if (!bounds_check_35344) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 13) ==
                            -1) {
                            global_failure_args[0] = j_35341;
                            global_failure_args[1] = iota32_arg_25183;
                            ;
                        }
                        return;
                    }
                }
                
                float x_35346 = ((__global
                                  float *) res_r_mem_37578)[gtid_34167 *
                                                            iota32_arg_25183 +
                                                            j_35341];
                int64_t i_35347 = sext_i32_i64(i_35334);
                bool x_35348 = sle64(0, i_35347);
                bool y_35349 = slt64(i_35347, iota32_arg_25183);
                bool bounds_check_35350 = x_35348 && y_35349;
                bool index_certs_35351;
                
                if (!bounds_check_35350) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 14) ==
                            -1) {
                            global_failure_args[0] = i_35347;
                            global_failure_args[1] = iota32_arg_25183;
                            ;
                        }
                        return;
                    }
                }
                
                float y_35352 = ((__global
                                  float *) res_r_mem_37578)[gtid_34167 *
                                                            iota32_arg_25183 +
                                                            i_35347];
                float x_35353 = x_35346 + y_35352;
                float res_35354 = x_35353 / 2.0F;
                
                res_35340 = res_35354;
            } else {
                int64_t i_35355 = sext_i32_i64(i_35334);
                bool x_35356 = sle64(0, i_35355);
                bool y_35357 = slt64(i_35355, iota32_arg_25183);
                bool bounds_check_35358 = x_35356 && y_35357;
                bool index_certs_35359;
                
                if (!bounds_check_35358) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 15) ==
                            -1) {
                            global_failure_args[0] = i_35355;
                            global_failure_args[1] = iota32_arg_25183;
                            ;
                        }
                        return;
                    }
                }
                
                float res_35360 = ((__global
                                    float *) res_r_mem_37578)[gtid_34167 *
                                                              iota32_arg_25183 +
                                                              i_35355];
                
                res_35340 = res_35360;
            }
            res_35337 = res_35340;
        }
        
        bool cond_35361 = !res_35331;
        int32_t fst_breakzq_35362;
        
        if (cond_35361) {
            fst_breakzq_35362 = -1;
        } else {
            int32_t res_35332 = ((__global int32_t *) mem_37510)[gtid_34167];
            bool cond_35363 = slt32(res_35332, y_35330);
            int32_t res_35364;
            
            if (cond_35363) {
                int32_t i_35365 = add32(x_35328, res_35332);
                int64_t i_35366 = sext_i32_i64(i_35365);
                int32_t x_35367 = ((__global
                                    int32_t *) res_mem_37198)[gtid_34167 *
                                                              N_24796 +
                                                              i_35366];
                int32_t res_35368 = sub32(x_35367, n_24801);
                
                res_35364 = res_35368;
            } else {
                res_35364 = -1;
            }
            fst_breakzq_35362 = res_35364;
        }
        
        bool cond_35369 = sle32(x_35328, 5);
        bool res_35370 = sle32(y_35330, 5);
        bool x_35371 = !cond_35369;
        bool y_35372 = res_35370 && x_35371;
        bool cond_35373 = cond_35369 || y_35372;
        int32_t fst_breakzq_35374;
        
        if (cond_35373) {
            fst_breakzq_35374 = -2;
        } else {
            fst_breakzq_35374 = fst_breakzq_35362;
        }
        ((__global int32_t *) mem_37581)[gtid_34167] = fst_breakzq_35374;
        ((__global float *) mem_37583)[gtid_34167] = res_35337;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35323
}
__kernel void mainzisegmap_34497(__global int *global_failure, int64_t m_24797,
                                 int64_t iota32_arg_25183, int64_t i_25211,
                                 __global unsigned char *mem_param_37524,
                                 __global unsigned char *mem_37551, __global
                                 unsigned char *mem_37554, __global
                                 unsigned char *mem_37557, __global
                                 unsigned char *mem_37560, __global
                                 unsigned char *mem_37563, __global
                                 unsigned char *mem_37566)
{
    #define segmap_group_sizze_35286 (mainzisegmap_group_sizze_34500)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39030;
    int32_t local_tid_39031;
    int64_t group_sizze_39034;
    int32_t wave_sizze_39033;
    int32_t group_tid_39032;
    
    global_tid_39030 = get_global_id(0);
    local_tid_39031 = get_local_id(0);
    group_sizze_39034 = get_local_size(0);
    wave_sizze_39033 = LOCKSTEP_WIDTH;
    group_tid_39032 = get_group_id(0);
    
    int32_t phys_tid_34497;
    
    phys_tid_34497 = global_tid_39030;
    
    int64_t gtid_34495;
    
    gtid_34495 = squot64(sext_i32_i64(group_tid_39032) *
                         segmap_group_sizze_35286 +
                         sext_i32_i64(local_tid_39031), iota32_arg_25183);
    
    int64_t gtid_34496;
    
    gtid_34496 = sext_i32_i64(group_tid_39032) * segmap_group_sizze_35286 +
        sext_i32_i64(local_tid_39031) - squot64(sext_i32_i64(group_tid_39032) *
                                                segmap_group_sizze_35286 +
                                                sext_i32_i64(local_tid_39031),
                                                iota32_arg_25183) *
        iota32_arg_25183;
    if (slt64(gtid_34495, m_24797) && slt64(gtid_34496, iota32_arg_25183)) {
        int32_t x_35299 = ((__global int32_t *) mem_37563)[gtid_34495 *
                                                           iota32_arg_25183 +
                                                           gtid_34496];
        float write_value_35304 = ((__global
                                    float *) mem_param_37524)[gtid_34495 *
                                                              iota32_arg_25183 +
                                                              gtid_34496];
        bool match_lit_35305 = 0 == x_35299;
        int64_t res_35306;
        
        if (match_lit_35305) {
            int64_t x_35300 = ((__global int64_t *) mem_37551)[gtid_34495 *
                                                               iota32_arg_25183 +
                                                               gtid_34496];
            int64_t res_35307 = sub64(x_35300, 1);
            
            res_35306 = res_35307;
        } else {
            int64_t res_35295 = ((__global int64_t *) mem_37551)[gtid_34495 *
                                                                 iota32_arg_25183 +
                                                                 i_25211];
            int64_t res_35296 = ((__global int64_t *) mem_37554)[gtid_34495 *
                                                                 iota32_arg_25183 +
                                                                 i_25211];
            int64_t res_35297 = ((__global int64_t *) mem_37557)[gtid_34495 *
                                                                 iota32_arg_25183 +
                                                                 i_25211];
            int64_t x_35301 = ((__global int64_t *) mem_37554)[gtid_34495 *
                                                               iota32_arg_25183 +
                                                               gtid_34496];
            int64_t x_35302 = ((__global int64_t *) mem_37557)[gtid_34495 *
                                                               iota32_arg_25183 +
                                                               gtid_34496];
            int64_t x_35303 = ((__global int64_t *) mem_37560)[gtid_34495 *
                                                               iota32_arg_25183 +
                                                               gtid_34496];
            bool match_lit_35308 = 1 == x_35299;
            int64_t x_35309;
            
            if (match_lit_35308) {
                int64_t x_35310 = add64(res_35295, x_35301);
                int64_t res_35311 = sub64(x_35310, 1);
                
                x_35309 = res_35311;
            } else {
                bool match_lit_35312 = 2 == x_35299;
                int64_t x_35313;
                
                if (match_lit_35312) {
                    int64_t x_35314 = add64(res_35295, res_35296);
                    int64_t x_35315 = add64(x_35302, x_35314);
                    int64_t res_35316 = sub64(x_35315, 1);
                    
                    x_35313 = res_35316;
                } else {
                    int64_t x_35317 = add64(res_35295, res_35296);
                    int64_t x_35318 = add64(res_35297, x_35317);
                    int64_t x_35319 = add64(x_35303, x_35318);
                    int64_t res_35320 = sub64(x_35319, 1);
                    
                    x_35313 = res_35320;
                }
                x_35309 = x_35313;
            }
            res_35306 = x_35309;
        }
        if ((sle64(0, gtid_34495) && slt64(gtid_34495, m_24797)) && (sle64(0,
                                                                           res_35306) &&
                                                                     slt64(res_35306,
                                                                           iota32_arg_25183))) {
            ((__global float *) mem_37566)[gtid_34495 * iota32_arg_25183 +
                                           res_35306] = write_value_35304;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35286
}
__kernel void mainzisegmap_34747(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_24796,
                                 int64_t m_24797, int64_t iota32_arg_25183,
                                 __global unsigned char *res_mem_37197, __global
                                 unsigned char *res_mem_37277, __global
                                 unsigned char *mem_37494, __global
                                 unsigned char *mem_37516)
{
    #define segmap_group_sizze_35092 (mainzisegmap_group_sizze_34750)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38899;
    int32_t local_tid_38900;
    int64_t group_sizze_38903;
    int32_t wave_sizze_38902;
    int32_t group_tid_38901;
    
    global_tid_38899 = get_global_id(0);
    local_tid_38900 = get_local_id(0);
    group_sizze_38903 = get_local_size(0);
    wave_sizze_38902 = LOCKSTEP_WIDTH;
    group_tid_38901 = get_group_id(0);
    
    int32_t phys_tid_34747;
    
    phys_tid_34747 = global_tid_38899;
    
    int64_t gtid_34745;
    
    gtid_34745 = squot64(sext_i32_i64(group_tid_38901) *
                         segmap_group_sizze_35092 +
                         sext_i32_i64(local_tid_38900), iota32_arg_25183);
    
    int64_t gtid_34746;
    
    gtid_34746 = sext_i32_i64(group_tid_38901) * segmap_group_sizze_35092 +
        sext_i32_i64(local_tid_38900) - squot64(sext_i32_i64(group_tid_38901) *
                                                segmap_group_sizze_35092 +
                                                sext_i32_i64(local_tid_38900),
                                                iota32_arg_25183) *
        iota32_arg_25183;
    if (slt64(gtid_34745, m_24797) && slt64(gtid_34746, iota32_arg_25183)) {
        int32_t x_35095 = ((__global int32_t *) res_mem_37277)[gtid_34745];
        int32_t y_35097 = ((__global int32_t *) mem_37494)[gtid_34745];
        int32_t index_primexp_35469 = sext_i64_i32(gtid_34746);
        bool cond_35099 = slt32(index_primexp_35469, y_35097);
        bool cond_35100;
        
        if (cond_35099) {
            int32_t i_35101 = add32(x_35095, index_primexp_35469);
            int64_t i_35102 = sext_i32_i64(i_35101);
            bool x_35103 = sle64(0, i_35102);
            bool y_35104 = slt64(i_35102, N_24796);
            bool bounds_check_35105 = x_35103 && y_35104;
            bool index_certs_35106;
            
            if (!bounds_check_35105) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 11) ==
                        -1) {
                        global_failure_args[0] = i_35102;
                        global_failure_args[1] = N_24796;
                        ;
                    }
                    return;
                }
            }
            
            float isnan_arg_35107 = ((__global
                                      float *) res_mem_37197)[gtid_34745 *
                                                              N_24796 +
                                                              i_35102];
            bool res_35108;
            
            res_35108 = futrts_isnan32(isnan_arg_35107);
            
            bool res_35109 = !res_35108;
            
            cond_35100 = res_35109;
        } else {
            cond_35100 = 0;
        }
        
        float res_35110;
        
        if (cond_35100) {
            int32_t i_35111 = add32(x_35095, index_primexp_35469);
            int64_t i_35112 = sext_i32_i64(i_35111);
            bool x_35113 = sle64(0, i_35112);
            bool y_35114 = slt64(i_35112, N_24796);
            bool bounds_check_35115 = x_35113 && y_35114;
            bool index_certs_35116;
            
            if (!bounds_check_35115) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 12) ==
                        -1) {
                        global_failure_args[0] = i_35112;
                        global_failure_args[1] = N_24796;
                        ;
                    }
                    return;
                }
            }
            
            float res_35117 = ((__global float *) res_mem_37197)[gtid_34745 *
                                                                 N_24796 +
                                                                 i_35112];
            
            res_35110 = res_35117;
        } else {
            res_35110 = INFINITY;
        }
        ((__global float *) mem_37516)[gtid_34745 * iota32_arg_25183 +
                                       gtid_34746] = res_35110;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35092
}
__kernel void mainzisegmap_34809(__global int *global_failure, int64_t m_24797,
                                 __global unsigned char *mem_37494, __global
                                 unsigned char *mem_37501, __global
                                 unsigned char *mem_37503, __global
                                 unsigned char *mem_37505, __global
                                 unsigned char *mem_37508, __global
                                 unsigned char *mem_37510, __global
                                 unsigned char *mem_37512)
{
    #define segmap_group_sizze_35057 (mainzisegmap_group_sizze_34811)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38894;
    int32_t local_tid_38895;
    int64_t group_sizze_38898;
    int32_t wave_sizze_38897;
    int32_t group_tid_38896;
    
    global_tid_38894 = get_global_id(0);
    local_tid_38895 = get_local_id(0);
    group_sizze_38898 = get_local_size(0);
    wave_sizze_38897 = LOCKSTEP_WIDTH;
    group_tid_38896 = get_group_id(0);
    
    int32_t phys_tid_34809;
    
    phys_tid_34809 = global_tid_38894;
    
    int64_t gtid_34808;
    
    gtid_34808 = sext_i32_i64(group_tid_38896) * segmap_group_sizze_35057 +
        sext_i32_i64(local_tid_38895);
    if (slt64(gtid_34808, m_24797)) {
        int32_t y_35062 = ((__global int32_t *) mem_37494)[gtid_34808];
        bool acc0_35064 = ((__global bool *) mem_37501)[gtid_34808];
        bool x_35069 = acc0_35064 && acc0_35064;
        int32_t res_35073;
        
        if (acc0_35064) {
            int32_t acc0_35065 = ((__global int32_t *) mem_37503)[gtid_34808];
            
            res_35073 = acc0_35065;
        } else {
            res_35073 = -1;
        }
        
        bool cond_35079 = y_35062 == 0;
        float res_35080;
        
        if (cond_35079) {
            res_35080 = 0.0F;
        } else {
            float acc0_35066 = ((__global float *) mem_37505)[gtid_34808];
            float res_35081 = sitofp_i32_f32(y_35062);
            float res_35082 = acc0_35066 / res_35081;
            
            res_35080 = res_35082;
        }
        ((__global bool *) mem_37508)[gtid_34808] = x_35069;
        ((__global int32_t *) mem_37510)[gtid_34808] = res_35073;
        ((__global float *) mem_37512)[gtid_34808] = res_35080;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35057
}
__kernel void mainzisegmap_34935(__global int *global_failure, int64_t m_24797,
                                 int64_t num_groups_34958, __global
                                 unsigned char *res_mem_37196, __global
                                 unsigned char *res_mem_37277, __global
                                 unsigned char *res_mem_37278, __global
                                 unsigned char *mem_37492, __global
                                 unsigned char *mem_37494)
{
    #define segmap_group_sizze_34957 (mainzisegmap_group_sizze_34937)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38732;
    int32_t local_tid_38733;
    int64_t group_sizze_38736;
    int32_t wave_sizze_38735;
    int32_t group_tid_38734;
    
    global_tid_38732 = get_global_id(0);
    local_tid_38733 = get_local_id(0);
    group_sizze_38736 = get_local_size(0);
    wave_sizze_38735 = LOCKSTEP_WIDTH;
    group_tid_38734 = get_group_id(0);
    
    int32_t phys_tid_34935;
    
    phys_tid_34935 = global_tid_38732;
    
    int32_t phys_group_id_38737;
    
    phys_group_id_38737 = get_group_id(0);
    for (int32_t i_38738 = 0; i_38738 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797, segmap_group_sizze_34957)) -
                   phys_group_id_38737, sext_i64_i32(num_groups_34958));
         i_38738++) {
        int32_t virt_group_id_38739 = phys_group_id_38737 + i_38738 *
                sext_i64_i32(num_groups_34958);
        int64_t gtid_34934 = sext_i32_i64(virt_group_id_38739) *
                segmap_group_sizze_34957 + sext_i32_i64(local_tid_38733);
        
        if (slt64(gtid_34934, m_24797)) {
            int32_t x_34964 = ((__global int32_t *) res_mem_37196)[gtid_34934];
            int32_t x_34965 = ((__global int32_t *) res_mem_37277)[gtid_34934];
            float x_34966 = ((__global float *) res_mem_37278)[gtid_34934];
            int32_t y_34967 = sub32(x_34964, x_34965);
            float res_34968 = sitofp_i32_f32(x_34965);
            float res_34969;
            
            res_34969 = futrts_sqrt32(res_34968);
            
            float y_34970 = x_34966 * res_34969;
            
            ((__global float *) mem_37492)[gtid_34934] = y_34970;
            ((__global int32_t *) mem_37494)[gtid_34934] = y_34967;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34957
}
__kernel void mainzisegmap_intragroup_31342(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *mem_36872_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_36862_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_36852_backing_aligned_2,
                                            int32_t k2p2zq_24814,
                                            int64_t res_24816, int64_t m_24947,
                                            int64_t nm_24948, int32_t res_24956,
                                            int64_t computed_group_sizze_31283,
                                            __global
                                            unsigned char *res_mem_36848,
                                            __global unsigned char *mem_36876)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36872_backing_2 = (__local volatile
                                                           char *) mem_36872_backing_aligned_0;
    __local volatile char *restrict mem_36862_backing_1 = (__local volatile
                                                           char *) mem_36862_backing_aligned_1;
    __local volatile char *restrict mem_36852_backing_0 = (__local volatile
                                                           char *) mem_36852_backing_aligned_2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_37965;
    int32_t local_tid_37966;
    int64_t group_sizze_37969;
    int32_t wave_sizze_37968;
    int32_t group_tid_37967;
    
    global_tid_37965 = get_global_id(0);
    local_tid_37966 = get_local_id(0);
    group_sizze_37969 = get_local_size(0);
    wave_sizze_37968 = LOCKSTEP_WIDTH;
    group_tid_37967 = get_group_id(0);
    
    int32_t phys_tid_31342;
    
    phys_tid_31342 = group_tid_37967;
    
    int32_t ltid_pre_37970;
    
    ltid_pre_37970 = squot32(local_tid_37966, sext_i64_i32(res_24816));
    
    int32_t ltid_pre_37971;
    
    ltid_pre_37971 = local_tid_37966 - squot32(local_tid_37966,
                                               sext_i64_i32(res_24816)) *
        sext_i64_i32(res_24816);
    
    int32_t ltid_pre_37972;
    
    ltid_pre_37972 = local_tid_37966;
    
    int64_t gtid_31281;
    
    gtid_31281 = sext_i32_i64(group_tid_37967);
    
    __local char *mem_36852;
    
    mem_36852 = (__local char *) mem_36852_backing_0;
    
    int64_t gtid_31284 = sext_i32_i64(ltid_pre_37972);
    int32_t phys_tid_31285 = local_tid_37966;
    
    if (slt64(gtid_31284, nm_24948)) {
        int64_t res_31481 = sdiv64(gtid_31284, m_24947);
        int64_t res_31482 = smod64(gtid_31284, m_24947);
        bool cond_31483 = slt64(res_31482, res_24816);
        float res_31484;
        
        if (cond_31483) {
            float res_31485 = ((__global float *) res_mem_36848)[gtid_31281 *
                                                                 (res_24816 *
                                                                  res_24816) +
                                                                 res_31481 *
                                                                 res_24816 +
                                                                 res_31482];
            
            res_31484 = res_31485;
        } else {
            int64_t y_31486 = add64(res_24816, res_31481);
            bool cond_31487 = res_31482 == y_31486;
            float res_31488;
            
            if (cond_31487) {
                res_31488 = 1.0F;
            } else {
                res_31488 = 0.0F;
            }
            res_31484 = res_31488;
        }
        ((__local float *) mem_36852)[gtid_31284] = res_31484;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_36862;
    
    mem_36862 = (__local char *) mem_36862_backing_1;
    for (int32_t i_31490 = 0; i_31490 < k2p2zq_24814; i_31490++) {
        int64_t i_31492 = sext_i32_i64(i_31490);
        bool x_31493 = sle64(0, i_31492);
        bool y_31494 = slt64(i_31492, nm_24948);
        bool bounds_check_31495 = x_31493 && y_31494;
        bool index_certs_31496;
        
        if (!bounds_check_31495) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                    global_failure_args[0] = i_31492;
                    global_failure_args[1] = nm_24948;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_31497 = ((__local float *) mem_36852)[i_31492];
        bool cond_31498 = v1_31497 == 0.0F;
        int64_t gtid_31295 = sext_i32_i64(ltid_pre_37972);
        int32_t phys_tid_31296 = local_tid_37966;
        
        if (slt64(gtid_31295, nm_24948)) {
            int32_t res_31501 = sext_i64_i32(gtid_31295);
            int32_t res_31502 = sdiv32(res_31501, res_24956);
            int32_t res_31503 = smod32(res_31501, res_24956);
            float res_31504;
            
            if (cond_31498) {
                int32_t x_31505 = mul32(res_24956, res_31502);
                int32_t i_31506 = add32(res_31503, x_31505);
                int64_t i_31507 = sext_i32_i64(i_31506);
                float res_31508 = ((__local float *) mem_36852)[i_31507];
                
                res_31504 = res_31508;
            } else {
                int64_t j_31509 = sext_i32_i64(res_31503);
                float x_31510 = ((__local float *) mem_36852)[j_31509];
                float x_31511 = x_31510 / v1_31497;
                int32_t y_31512 = sub32(k2p2zq_24814, 1);
                bool cond_31513 = slt32(res_31502, y_31512);
                float res_31514;
                
                if (cond_31513) {
                    int32_t x_31515 = add32(1, res_31502);
                    int32_t x_31516 = mul32(res_24956, x_31515);
                    int32_t i_31517 = add32(res_31503, x_31516);
                    int64_t i_31518 = sext_i32_i64(i_31517);
                    float x_31519 = ((__local float *) mem_36852)[i_31518];
                    int32_t i_31520 = add32(i_31490, x_31516);
                    int64_t i_31521 = sext_i32_i64(i_31520);
                    float x_31522 = ((__local float *) mem_36852)[i_31521];
                    float y_31523 = x_31511 * x_31522;
                    float res_31524 = x_31519 - y_31523;
                    
                    res_31514 = res_31524;
                } else {
                    res_31514 = x_31511;
                }
                res_31504 = res_31514;
            }
            ((__local float *) mem_36862)[gtid_31295] = res_31504;
        }
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_31322 = sext_i32_i64(ltid_pre_37972);
        int32_t phys_tid_31323 = local_tid_37966;
        
        if (slt64(write_i_31322, nm_24948)) {
            float write_value_31527 = ((__local
                                        float *) mem_36862)[write_i_31322];
            
            if (sle64(0, write_i_31322) && slt64(write_i_31322, nm_24948)) {
                ((__local float *) mem_36852)[write_i_31322] =
                    write_value_31527;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    __local char *mem_36872;
    
    mem_36872 = (__local char *) mem_36872_backing_2;
    
    int64_t gtid_31325 = sext_i32_i64(ltid_pre_37970);
    int64_t gtid_31326 = sext_i32_i64(ltid_pre_37971);
    int32_t phys_tid_31327 = local_tid_37966;
    
    if (slt64(gtid_31325, res_24816) && slt64(gtid_31326, res_24816)) {
        int64_t index_primexp_35411 = m_24947 * gtid_31325;
        int64_t i_31534 = add64(res_24816, gtid_31326);
        int64_t new_index_31535 = i_31534 + index_primexp_35411;
        float res_31536 = ((__local float *) mem_36852)[new_index_31535];
        
        ((__local float *) mem_36872)[gtid_31325 * res_24816 + gtid_31326] =
            res_31536;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_37974 = 0; i_37974 < sdiv_up64(res_24816 * res_24816 -
                                                  sext_i32_i64(local_tid_37966),
                                                  computed_group_sizze_31283);
         i_37974++) {
        ((__global float *) mem_36876)[gtid_31281 * (res_24816 * res_24816) +
                                       squot64(i_37974 *
                                               computed_group_sizze_31283 +
                                               sext_i32_i64(local_tid_37966),
                                               res_24816) * res_24816 +
                                       (i_37974 * computed_group_sizze_31283 +
                                        sext_i32_i64(local_tid_37966) -
                                        squot64(i_37974 *
                                                computed_group_sizze_31283 +
                                                sext_i32_i64(local_tid_37966),
                                                res_24816) * res_24816)] =
            ((__local float *) mem_36872)[squot64(i_37974 *
                                                  computed_group_sizze_31283 +
                                                  sext_i32_i64(local_tid_37966),
                                                  res_24816) * res_24816 +
                                          (i_37974 *
                                           computed_group_sizze_31283 +
                                           sext_i32_i64(local_tid_37966) -
                                           squot64(i_37974 *
                                                   computed_group_sizze_31283 +
                                                   sext_i32_i64(local_tid_37966),
                                                   res_24816) * res_24816)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_31686(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_36897_backing_aligned_0,
                                            int64_t m_24797,
                                            int32_t k2p2zq_24814,
                                            int64_t nm_24948, int32_t res_24956,
                                            int32_t i_32073, int64_t i_32075,
                                            int64_t ctx_param_ext_36883,
                                            int64_t ctx_param_ext_36884,
                                            int64_t ctx_param_ext_36886,
                                            __global
                                            unsigned char *mem_param_36888,
                                            __global unsigned char *mem_36893,
                                            __global unsigned char *mem_36901)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36897_backing_0 = (__local volatile
                                                           char *) mem_36897_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38001;
    int32_t local_tid_38002;
    int64_t group_sizze_38005;
    int32_t wave_sizze_38004;
    int32_t group_tid_38003;
    
    global_tid_38001 = get_global_id(0);
    local_tid_38002 = get_local_id(0);
    group_sizze_38005 = get_local_size(0);
    wave_sizze_38004 = LOCKSTEP_WIDTH;
    group_tid_38003 = get_group_id(0);
    
    int32_t phys_tid_31686;
    
    phys_tid_31686 = group_tid_38003;
    
    int32_t ltid_pre_38006;
    
    ltid_pre_38006 = local_tid_38002;
    
    int64_t gtid_31654;
    
    gtid_31654 = sext_i32_i64(group_tid_38003);
    
    float v1_32092 = ((__global float *) mem_param_36888)[ctx_param_ext_36883 +
                                                          (gtid_31654 *
                                                           ctx_param_ext_36884 +
                                                           i_32075 *
                                                           ctx_param_ext_36886)];
    bool cond_32093 = v1_32092 == 0.0F;
    __local char *mem_36897;
    
    mem_36897 = (__local char *) mem_36897_backing_0;
    
    int64_t gtid_31657 = sext_i32_i64(ltid_pre_38006);
    int32_t phys_tid_31658 = local_tid_38002;
    
    if (slt64(gtid_31657, nm_24948)) {
        int32_t res_32096 = sext_i64_i32(gtid_31657);
        int32_t res_32097 = sdiv32(res_32096, res_24956);
        int32_t res_32098 = smod32(res_32096, res_24956);
        float res_32099;
        
        if (cond_32093) {
            int32_t x_32100 = mul32(res_24956, res_32097);
            int32_t i_32101 = add32(res_32098, x_32100);
            int64_t i_32102 = sext_i32_i64(i_32101);
            float res_32103 = ((__global
                                float *) mem_param_36888)[ctx_param_ext_36883 +
                                                          (gtid_31654 *
                                                           ctx_param_ext_36884 +
                                                           i_32102 *
                                                           ctx_param_ext_36886)];
            
            res_32099 = res_32103;
        } else {
            int64_t j_32104 = sext_i32_i64(res_32098);
            float x_32105 = ((__global
                              float *) mem_param_36888)[ctx_param_ext_36883 +
                                                        (gtid_31654 *
                                                         ctx_param_ext_36884 +
                                                         j_32104 *
                                                         ctx_param_ext_36886)];
            float x_32106 = x_32105 / v1_32092;
            int32_t y_32107 = sub32(k2p2zq_24814, 1);
            bool cond_32108 = slt32(res_32097, y_32107);
            float res_32109;
            
            if (cond_32108) {
                int32_t x_32110 = add32(1, res_32097);
                int32_t x_32111 = mul32(res_24956, x_32110);
                int32_t i_32112 = add32(res_32098, x_32111);
                int64_t i_32113 = sext_i32_i64(i_32112);
                float x_32114 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_31654 *
                                                             ctx_param_ext_36884 +
                                                             i_32113 *
                                                             ctx_param_ext_36886)];
                int32_t i_32115 = add32(i_32073, x_32111);
                int64_t i_32116 = sext_i32_i64(i_32115);
                float x_32117 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_31654 *
                                                             ctx_param_ext_36884 +
                                                             i_32116 *
                                                             ctx_param_ext_36886)];
                float y_32118 = x_32106 * x_32117;
                float res_32119 = x_32114 - y_32118;
                
                res_32109 = res_32119;
            } else {
                res_32109 = x_32106;
            }
            res_32099 = res_32109;
        }
        ((__local float *) mem_36897)[gtid_31657] = res_32099;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_31684 = sext_i32_i64(ltid_pre_38006);
    int32_t phys_tid_31685 = local_tid_38002;
    
    if (slt64(write_i_31684, nm_24948)) {
        float write_value_32122 = ((__local float *) mem_36897)[write_i_31684];
        
        if (sle64(0, write_i_31684) && slt64(write_i_31684, nm_24948)) {
            ((__global float *) mem_36893)[gtid_31654 + write_i_31684 *
                                           m_24797] = write_value_32122;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38002 == 0) {
        for (int64_t i_38007 = 0; i_38007 < nm_24948; i_38007++) {
            ((__global float *) mem_36901)[gtid_31654 * nm_24948 + i_38007] =
                ((__global float *) mem_36893)[gtid_31654 + i_38007 * m_24797];
        }
    }
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_32660(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37175_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37173_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37171_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37169_backing_aligned_3,
                                            int64_t N_24796, int64_t N_24798,
                                            int64_t i_25063, __global
                                            unsigned char *images_mem_36738,
                                            __global
                                            unsigned char *res_mem_37159,
                                            __global unsigned char *mem_37178,
                                            __global unsigned char *mem_37181,
                                            __global unsigned char *mem_37184)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37175_backing_3 = (__local volatile
                                                           char *) mem_37175_backing_aligned_0;
    __local volatile char *restrict mem_37173_backing_2 = (__local volatile
                                                           char *) mem_37173_backing_aligned_1;
    __local volatile char *restrict mem_37171_backing_1 = (__local volatile
                                                           char *) mem_37171_backing_aligned_2;
    __local volatile char *restrict mem_37169_backing_0 = (__local volatile
                                                           char *) mem_37169_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38306;
    int32_t local_tid_38307;
    int64_t group_sizze_38310;
    int32_t wave_sizze_38309;
    int32_t group_tid_38308;
    
    global_tid_38306 = get_global_id(0);
    local_tid_38307 = get_local_id(0);
    group_sizze_38310 = get_local_size(0);
    wave_sizze_38309 = LOCKSTEP_WIDTH;
    group_tid_38308 = get_group_id(0);
    
    int32_t phys_tid_32660;
    
    phys_tid_32660 = group_tid_38308;
    
    int32_t ltid_pre_38311;
    
    ltid_pre_38311 = local_tid_38307;
    
    int64_t gtid_32653;
    
    gtid_32653 = sext_i32_i64(group_tid_38308);
    
    __local char *mem_37169;
    
    mem_37169 = (__local char *) mem_37169_backing_0;
    
    __local char *mem_37171;
    
    mem_37171 = (__local char *) mem_37171_backing_1;
    
    int64_t gtid_32656 = sext_i32_i64(ltid_pre_38311);
    int32_t phys_tid_32657 = local_tid_38307;
    
    if (slt64(gtid_32656, N_24796)) {
        float x_32749 = ((__global float *) images_mem_36738)[gtid_32653 *
                                                              N_24798 +
                                                              gtid_32656];
        bool res_32751;
        
        res_32751 = futrts_isnan32(x_32749);
        
        bool cond_32752 = !res_32751;
        float res_32753;
        
        if (cond_32752) {
            float x_32750 = ((__global float *) res_mem_37159)[gtid_32653 *
                                                               N_24796 +
                                                               gtid_32656];
            float res_32754 = x_32749 - x_32750;
            
            res_32753 = res_32754;
        } else {
            res_32753 = NAN;
        }
        
        bool res_32755;
        
        res_32755 = futrts_isnan32(res_32753);
        
        bool res_32756 = !res_32755;
        int64_t res_32757 = btoi_bool_i64(res_32756);
        
        ((__local int64_t *) mem_37169)[gtid_32656] = res_32757;
        ((__local float *) mem_37171)[gtid_32656] = res_32753;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38312;
    
    dims_flat_38312 = N_24796;
    
    int64_t x_32746;
    int64_t x_32747;
    int64_t x_38314;
    int64_t x_38315;
    bool ltid_in_bounds_38317;
    
    ltid_in_bounds_38317 = slt64(sext_i32_i64(local_tid_38307), N_24796);
    
    int32_t skip_threads_38318;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38317) {
            x_32747 = ((volatile __local
                        int64_t *) mem_37169)[sext_i32_i64(local_tid_38307)];
            if ((local_tid_38307 - squot32(local_tid_38307, 32) * 32) == 0) {
                x_32746 = x_32747;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38318 = 1;
        while (slt32(skip_threads_38318, 32)) {
            if (sle32(skip_threads_38318, local_tid_38307 -
                      squot32(local_tid_38307, 32) * 32) &&
                ltid_in_bounds_38317) {
                // read operands
                {
                    x_32746 = ((volatile __local
                                int64_t *) mem_37169)[sext_i32_i64(local_tid_38307) -
                                                      sext_i32_i64(skip_threads_38318)];
                }
                // perform operation
                {
                    bool inactive_38319 =
                         slt64(srem64(sext_i32_i64(local_tid_38307), N_24796),
                               sext_i32_i64(local_tid_38307) -
                               sext_i32_i64(local_tid_38307 -
                               skip_threads_38318));
                    
                    if (inactive_38319) {
                        x_32746 = x_32747;
                    }
                    if (!inactive_38319) {
                        int64_t res_32748 = add64(x_32746, x_32747);
                        
                        x_32746 = res_32748;
                    }
                }
            }
            if (sle32(wave_sizze_38309, skip_threads_38318)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38318, local_tid_38307 -
                      squot32(local_tid_38307, 32) * 32) &&
                ltid_in_bounds_38317) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37169)[sext_i32_i64(local_tid_38307)] =
                        x_32746;
                    x_32747 = x_32746;
                }
            }
            if (sle32(wave_sizze_38309, skip_threads_38318)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38318 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38307 - squot32(local_tid_38307, 32) * 32) == 31 &&
            ltid_in_bounds_38317) {
            ((volatile __local
              int64_t *) mem_37169)[sext_i32_i64(squot32(local_tid_38307,
                                                         32))] = x_32746;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38320;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38307, 32) == 0 && ltid_in_bounds_38317) {
                x_38315 = ((volatile __local
                            int64_t *) mem_37169)[sext_i32_i64(local_tid_38307)];
                if ((local_tid_38307 - squot32(local_tid_38307, 32) * 32) ==
                    0) {
                    x_38314 = x_38315;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38320 = 1;
            while (slt32(skip_threads_38320, 32)) {
                if (sle32(skip_threads_38320, local_tid_38307 -
                          squot32(local_tid_38307, 32) * 32) &&
                    (squot32(local_tid_38307, 32) == 0 &&
                     ltid_in_bounds_38317)) {
                    // read operands
                    {
                        x_38314 = ((volatile __local
                                    int64_t *) mem_37169)[sext_i32_i64(local_tid_38307) -
                                                          sext_i32_i64(skip_threads_38320)];
                    }
                    // perform operation
                    {
                        bool inactive_38321 =
                             slt64(srem64(sext_i32_i64(local_tid_38307 * 32 +
                                          32 - 1), N_24796),
                                   sext_i32_i64(local_tid_38307 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38307 -
                                                 skip_threads_38320) * 32 + 32 -
                                   1));
                        
                        if (inactive_38321) {
                            x_38314 = x_38315;
                        }
                        if (!inactive_38321) {
                            int64_t res_38316 = add64(x_38314, x_38315);
                            
                            x_38314 = res_38316;
                        }
                    }
                }
                if (sle32(wave_sizze_38309, skip_threads_38320)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38320, local_tid_38307 -
                          squot32(local_tid_38307, 32) * 32) &&
                    (squot32(local_tid_38307, 32) == 0 &&
                     ltid_in_bounds_38317)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37169)[sext_i32_i64(local_tid_38307)] =
                            x_38314;
                        x_38315 = x_38314;
                    }
                }
                if (sle32(wave_sizze_38309, skip_threads_38320)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38320 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38307, 32) == 0 || !ltid_in_bounds_38317)) {
            // read operands
            {
                x_32747 = x_32746;
                x_32746 = ((__local
                            int64_t *) mem_37169)[sext_i32_i64(squot32(local_tid_38307,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38322 =
                     slt64(srem64(sext_i32_i64(local_tid_38307), N_24796),
                           sext_i32_i64(local_tid_38307) -
                           sext_i32_i64(squot32(local_tid_38307, 32) * 32 - 1));
                
                if (inactive_38322) {
                    x_32746 = x_32747;
                }
                if (!inactive_38322) {
                    int64_t res_32748 = add64(x_32746, x_32747);
                    
                    x_32746 = res_32748;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37169)[sext_i32_i64(local_tid_38307)] =
                    x_32746;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38307, 32) == 0) {
            ((__local int64_t *) mem_37169)[sext_i32_i64(local_tid_38307)] =
                x_32747;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_32758 = ((__local int64_t *) mem_37169)[i_25063];
    int32_t res_32759 = sext_i64_i32(res_32758);
    __local char *mem_37173;
    
    mem_37173 = (__local char *) mem_37173_backing_2;
    ((__local float *) mem_37173)[sext_i32_i64(local_tid_38307)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37175;
    
    mem_37175 = (__local char *) mem_37175_backing_3;
    ((__local int32_t *) mem_37175)[sext_i32_i64(local_tid_38307)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_32658 = sext_i32_i64(ltid_pre_38311);
    int32_t phys_tid_32659 = local_tid_38307;
    
    if (slt64(write_i_32658, N_24796)) {
        float x_32764 = ((__local float *) mem_37171)[write_i_32658];
        int32_t index_primexp_35433 = sext_i64_i32(write_i_32658);
        bool res_32767;
        
        res_32767 = futrts_isnan32(x_32764);
        
        bool res_32768 = !res_32767;
        int64_t res_32769;
        
        if (res_32768) {
            int64_t x_32765 = ((__local int64_t *) mem_37169)[write_i_32658];
            int64_t res_32770 = sub64(x_32765, 1);
            
            res_32769 = res_32770;
        } else {
            res_32769 = -1;
        }
        if (sle64(0, res_32769) && slt64(res_32769, N_24796)) {
            ((__local int32_t *) mem_37175)[res_32769] = index_primexp_35433;
        }
        if (sle64(0, res_32769) && slt64(res_32769, N_24796)) {
            ((__local float *) mem_37173)[res_32769] = x_32764;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38307 == 0) {
        ((__global int32_t *) mem_37178)[gtid_32653] = res_32759;
    }
    ((__global float *) mem_37181)[gtid_32653 * N_24796 +
                                   sext_i32_i64(local_tid_38307)] = ((__local
                                                                      float *) mem_37173)[sext_i32_i64(local_tid_38307)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_37184)[gtid_32653 * N_24796 +
                                     sext_i32_i64(local_tid_38307)] = ((__local
                                                                        int32_t *) mem_37175)[sext_i32_i64(local_tid_38307)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_33000(__global int *global_failure,
                                            __local volatile
                                            int64_t *red_arr_mem_38415_backing_aligned_0,
                                            __local volatile
                                            int64_t *red_arr_mem_38411_backing_aligned_1,
                                            int64_t N_24796, int64_t N_24798,
                                            float hfrac_24803,
                                            int64_t res_24810,
                                            int32_t k2p2_24812, __global
                                            unsigned char *images_mem_36738,
                                            __global
                                            unsigned char *res_mem_37197,
                                            __global unsigned char *mem_37257,
                                            __global unsigned char *mem_37259,
                                            __global unsigned char *mem_37261)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38415_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38415_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38411_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38411_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38405;
    int32_t local_tid_38406;
    int64_t group_sizze_38409;
    int32_t wave_sizze_38408;
    int32_t group_tid_38407;
    
    global_tid_38405 = get_global_id(0);
    local_tid_38406 = get_local_id(0);
    group_sizze_38409 = get_local_size(0);
    wave_sizze_38408 = LOCKSTEP_WIDTH;
    group_tid_38407 = get_group_id(0);
    
    int32_t phys_tid_33000;
    
    phys_tid_33000 = group_tid_38407;
    
    int32_t ltid_pre_38410;
    
    ltid_pre_38410 = local_tid_38406;
    
    int64_t gtid_32993;
    
    gtid_32993 = sext_i32_i64(group_tid_38407);
    
    int32_t res_33077;
    int64_t gtid_32996 = sext_i32_i64(ltid_pre_38410);
    int32_t phys_tid_32997 = local_tid_38406;
    __local char *red_arr_mem_38411;
    
    red_arr_mem_38411 = (__local char *) red_arr_mem_38411_backing_0;
    if (slt64(gtid_32996, res_24810)) {
        float x_33081 = ((__global float *) images_mem_36738)[gtid_32993 *
                                                              N_24798 +
                                                              gtid_32996];
        bool res_33082;
        
        res_33082 = futrts_isnan32(x_33081);
        
        bool cond_33083 = !res_33082;
        int32_t res_33084 = btoi_bool_i32(cond_33083);
        
        ((__local int32_t *) red_arr_mem_38411)[gtid_32996] = res_33084;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38413;
    int32_t skip_waves_38414;
    
    skip_waves_38414 = 1;
    
    int32_t x_33078;
    int32_t x_33079;
    
    offset_38413 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38406, sext_i64_i32(res_24810))) {
            x_33078 = ((__local
                        int32_t *) red_arr_mem_38411)[sext_i32_i64(local_tid_38406 +
                                                      offset_38413)];
        }
    }
    offset_38413 = 1;
    while (slt32(offset_38413, wave_sizze_38408)) {
        if (slt32(local_tid_38406 + offset_38413, sext_i64_i32(res_24810)) &&
            ((local_tid_38406 - squot32(local_tid_38406, wave_sizze_38408) *
              wave_sizze_38408) & (2 * offset_38413 - 1)) == 0) {
            // read array element
            {
                x_33079 = ((volatile __local
                            int32_t *) red_arr_mem_38411)[sext_i32_i64(local_tid_38406 +
                                                          offset_38413)];
            }
            // apply reduction operation
            {
                int32_t res_33080 = add32(x_33078, x_33079);
                
                x_33078 = res_33080;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38411)[sext_i32_i64(local_tid_38406)] =
                    x_33078;
            }
        }
        offset_38413 *= 2;
    }
    while (slt32(skip_waves_38414, squot32(sext_i64_i32(res_24810) +
                                           wave_sizze_38408 - 1,
                                           wave_sizze_38408))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38413 = skip_waves_38414 * wave_sizze_38408;
        if (slt32(local_tid_38406 + offset_38413, sext_i64_i32(res_24810)) &&
            ((local_tid_38406 - squot32(local_tid_38406, wave_sizze_38408) *
              wave_sizze_38408) == 0 && (squot32(local_tid_38406,
                                                 wave_sizze_38408) & (2 *
                                                                      skip_waves_38414 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_33079 = ((__local
                            int32_t *) red_arr_mem_38411)[sext_i32_i64(local_tid_38406 +
                                                          offset_38413)];
            }
            // apply reduction operation
            {
                int32_t res_33080 = add32(x_33078, x_33079);
                
                x_33078 = res_33080;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38411)[sext_i32_i64(local_tid_38406)] =
                    x_33078;
            }
        }
        skip_waves_38414 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_33077 = ((__local int32_t *) red_arr_mem_38411)[0];
    
    float res_33085;
    int64_t gtid_32998 = sext_i32_i64(ltid_pre_38410);
    int32_t phys_tid_32999 = local_tid_38406;
    __local char *red_arr_mem_38415;
    
    red_arr_mem_38415 = (__local char *) red_arr_mem_38415_backing_1;
    if (slt64(gtid_32998, res_24810)) {
        int32_t index_primexp_35441 = sext_i64_i32(gtid_32998);
        bool cond_33090 = slt32(index_primexp_35441, res_33077);
        float res_33091;
        
        if (cond_33090) {
            int64_t i_33092 = sext_i32_i64(index_primexp_35441);
            float res_33093 = ((__global float *) res_mem_37197)[gtid_32993 *
                                                                 N_24796 +
                                                                 i_33092];
            
            res_33091 = res_33093;
        } else {
            res_33091 = 0.0F;
        }
        
        float res_33094 = res_33091 * res_33091;
        
        ((__local float *) red_arr_mem_38415)[gtid_32998] = res_33094;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38417;
    int32_t skip_waves_38418;
    
    skip_waves_38418 = 1;
    
    float x_33086;
    float x_33087;
    
    offset_38417 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38406, sext_i64_i32(res_24810))) {
            x_33086 = ((__local
                        float *) red_arr_mem_38415)[sext_i32_i64(local_tid_38406 +
                                                    offset_38417)];
        }
    }
    offset_38417 = 1;
    while (slt32(offset_38417, wave_sizze_38408)) {
        if (slt32(local_tid_38406 + offset_38417, sext_i64_i32(res_24810)) &&
            ((local_tid_38406 - squot32(local_tid_38406, wave_sizze_38408) *
              wave_sizze_38408) & (2 * offset_38417 - 1)) == 0) {
            // read array element
            {
                x_33087 = ((volatile __local
                            float *) red_arr_mem_38415)[sext_i32_i64(local_tid_38406 +
                                                        offset_38417)];
            }
            // apply reduction operation
            {
                float res_33088 = x_33086 + x_33087;
                
                x_33086 = res_33088;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_38415)[sext_i32_i64(local_tid_38406)] =
                    x_33086;
            }
        }
        offset_38417 *= 2;
    }
    while (slt32(skip_waves_38418, squot32(sext_i64_i32(res_24810) +
                                           wave_sizze_38408 - 1,
                                           wave_sizze_38408))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38417 = skip_waves_38418 * wave_sizze_38408;
        if (slt32(local_tid_38406 + offset_38417, sext_i64_i32(res_24810)) &&
            ((local_tid_38406 - squot32(local_tid_38406, wave_sizze_38408) *
              wave_sizze_38408) == 0 && (squot32(local_tid_38406,
                                                 wave_sizze_38408) & (2 *
                                                                      skip_waves_38418 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_33087 = ((__local
                            float *) red_arr_mem_38415)[sext_i32_i64(local_tid_38406 +
                                                        offset_38417)];
            }
            // apply reduction operation
            {
                float res_33088 = x_33086 + x_33087;
                
                x_33086 = res_33088;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_38415)[sext_i32_i64(local_tid_38406)] =
                    x_33086;
            }
        }
        skip_waves_38418 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_33085 = ((__local float *) red_arr_mem_38415)[0];
    
    int32_t r32_arg_33095 = sub32(res_33077, k2p2_24812);
    float res_33096 = sitofp_i32_f32(r32_arg_33095);
    float sqrt_arg_33097 = res_33085 / res_33096;
    float res_33098;
    
    res_33098 = futrts_sqrt32(sqrt_arg_33097);
    
    float res_33099 = sitofp_i32_f32(res_33077);
    float t32_arg_33100 = hfrac_24803 * res_33099;
    int32_t res_33101 = fptosi_f32_i32(t32_arg_33100);
    
    if (local_tid_38406 == 0) {
        ((__global int32_t *) mem_37257)[gtid_32993] = res_33101;
    }
    if (local_tid_38406 == 0) {
        ((__global int32_t *) mem_37259)[gtid_32993] = res_33077;
    }
    if (local_tid_38406 == 0) {
        ((__global float *) mem_37261)[gtid_32993] = res_33098;
    }
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_33446(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *mem_37475_backing_aligned_0,
                                            __local volatile
                                            int64_t *double_buffer_mem_37715_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37473_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37471_backing_aligned_3,
                                            __local volatile
                                            int64_t *mem_37469_backing_aligned_4,
                                            __local volatile
                                            int64_t *mem_37467_backing_aligned_5,
                                            __local volatile
                                            int64_t *mem_37465_backing_aligned_6,
                                            __local volatile
                                            int64_t *mem_37455_backing_aligned_7,
                                            __local volatile
                                            int64_t *red_arr_mem_38704_backing_aligned_8,
                                            __local volatile
                                            int64_t *red_arr_mem_38702_backing_aligned_9,
                                            __local volatile
                                            int64_t *red_arr_mem_38700_backing_aligned_10,
                                            __local volatile
                                            int64_t *mem_37451_backing_aligned_11,
                                            int64_t N_24796, int32_t n_24801,
                                            int64_t iota32_arg_25183,
                                            int32_t iters_25209,
                                            int64_t i_25211, __global
                                            unsigned char *res_mem_37196,
                                            __global
                                            unsigned char *res_mem_37197,
                                            __global
                                            unsigned char *res_mem_37198,
                                            __global
                                            unsigned char *res_mem_37276,
                                            __global
                                            unsigned char *res_mem_37277,
                                            __global
                                            unsigned char *res_mem_37278,
                                            __global
                                            unsigned char *res_mem_37327,
                                            __global unsigned char *mem_37332,
                                            __global unsigned char *mem_37485,
                                            __global unsigned char *mem_37487,
                                            __global unsigned char *mem_37489)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37475_backing_11 = (__local volatile
                                                            char *) mem_37475_backing_aligned_0;
    __local volatile char *restrict double_buffer_mem_37715_backing_10 =
                          (__local volatile
                           char *) double_buffer_mem_37715_backing_aligned_1;
    __local volatile char *restrict mem_37473_backing_9 = (__local volatile
                                                           char *) mem_37473_backing_aligned_2;
    __local volatile char *restrict mem_37471_backing_8 = (__local volatile
                                                           char *) mem_37471_backing_aligned_3;
    __local volatile char *restrict mem_37469_backing_7 = (__local volatile
                                                           char *) mem_37469_backing_aligned_4;
    __local volatile char *restrict mem_37467_backing_6 = (__local volatile
                                                           char *) mem_37467_backing_aligned_5;
    __local volatile char *restrict mem_37465_backing_5 = (__local volatile
                                                           char *) mem_37465_backing_aligned_6;
    __local volatile char *restrict mem_37455_backing_4 = (__local volatile
                                                           char *) mem_37455_backing_aligned_7;
    __local volatile char *restrict red_arr_mem_38704_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_38704_backing_aligned_8;
    __local volatile char *restrict red_arr_mem_38702_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38702_backing_aligned_9;
    __local volatile char *restrict red_arr_mem_38700_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38700_backing_aligned_10;
    __local volatile char *restrict mem_37451_backing_0 = (__local volatile
                                                           char *) mem_37451_backing_aligned_11;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_38683;
    int32_t local_tid_38684;
    int64_t group_sizze_38687;
    int32_t wave_sizze_38686;
    int32_t group_tid_38685;
    
    global_tid_38683 = get_global_id(0);
    local_tid_38684 = get_local_id(0);
    group_sizze_38687 = get_local_size(0);
    wave_sizze_38686 = LOCKSTEP_WIDTH;
    group_tid_38685 = get_group_id(0);
    
    int32_t phys_tid_33446;
    
    phys_tid_33446 = group_tid_38685;
    
    int32_t ltid_pre_38688;
    
    ltid_pre_38688 = local_tid_38684;
    
    int64_t gtid_33413;
    
    gtid_33413 = sext_i32_i64(group_tid_38685);
    
    int32_t x_33931;
    
    x_33931 = ((__global int32_t *) res_mem_37196)[gtid_33413];
    
    int32_t x_33932 = ((__global int32_t *) res_mem_37277)[gtid_33413];
    float x_33933 = ((__global float *) res_mem_37278)[gtid_33413];
    int32_t x_33934 = ((__global int32_t *) res_mem_37276)[gtid_33413];
    float x_33935 = ((__global float *) res_mem_37327)[gtid_33413];
    int32_t y_33938 = sub32(x_33931, x_33932);
    float res_33939 = sitofp_i32_f32(x_33932);
    float res_33940;
    
    res_33940 = futrts_sqrt32(res_33939);
    
    float y_33941 = x_33933 * res_33940;
    __local char *mem_37451;
    
    mem_37451 = (__local char *) mem_37451_backing_0;
    
    int64_t gtid_33416 = sext_i32_i64(ltid_pre_38688);
    int32_t phys_tid_33417 = local_tid_38684;
    
    if (slt64(gtid_33416, iota32_arg_25183)) {
        int32_t index_primexp_35454 = sext_i64_i32(gtid_33416);
        bool cond_33954 = sle32(y_33938, index_primexp_35454);
        float res_33955;
        
        if (cond_33954) {
            res_33955 = 0.0F;
        } else {
            bool cond_33956 = index_primexp_35454 == 0;
            float res_33957;
            
            if (cond_33956) {
                res_33957 = x_33935;
            } else {
                int32_t i_33958 = add32(x_33932, index_primexp_35454);
                int64_t i_33959 = sext_i32_i64(i_33958);
                float x_33960 = ((__global float *) res_mem_37197)[gtid_33413 *
                                                                   N_24796 +
                                                                   i_33959];
                int32_t x_33961 = sub32(x_33932, x_33934);
                int32_t i_33962 = add32(x_33961, index_primexp_35454);
                int64_t i_33963 = sext_i32_i64(i_33962);
                float y_33964 = ((__global float *) res_mem_37197)[gtid_33413 *
                                                                   N_24796 +
                                                                   i_33963];
                float res_33965 = x_33960 - y_33964;
                
                res_33957 = res_33965;
            }
            res_33955 = res_33957;
        }
        ((__local float *) mem_37451)[gtid_33416] = res_33955;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38689;
    
    dims_flat_38689 = iota32_arg_25183;
    
    float x_33950;
    float x_33951;
    float x_38691;
    float x_38692;
    bool ltid_in_bounds_38694;
    
    ltid_in_bounds_38694 = slt64(sext_i32_i64(local_tid_38684),
                                 iota32_arg_25183);
    
    int32_t skip_threads_38695;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38694) {
            x_33951 = ((volatile __local
                        float *) mem_37451)[sext_i32_i64(local_tid_38684)];
            if ((local_tid_38684 - squot32(local_tid_38684, 32) * 32) == 0) {
                x_33950 = x_33951;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38695 = 1;
        while (slt32(skip_threads_38695, 32)) {
            if (sle32(skip_threads_38695, local_tid_38684 -
                      squot32(local_tid_38684, 32) * 32) &&
                ltid_in_bounds_38694) {
                // read operands
                {
                    x_33950 = ((volatile __local
                                float *) mem_37451)[sext_i32_i64(local_tid_38684) -
                                                    sext_i32_i64(skip_threads_38695)];
                }
                // perform operation
                {
                    bool inactive_38696 =
                         slt64(srem64(sext_i32_i64(local_tid_38684),
                                      iota32_arg_25183),
                               sext_i32_i64(local_tid_38684) -
                               sext_i32_i64(local_tid_38684 -
                               skip_threads_38695));
                    
                    if (inactive_38696) {
                        x_33950 = x_33951;
                    }
                    if (!inactive_38696) {
                        float res_33952 = x_33950 + x_33951;
                        
                        x_33950 = res_33952;
                    }
                }
            }
            if (sle32(wave_sizze_38686, skip_threads_38695)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38695, local_tid_38684 -
                      squot32(local_tid_38684, 32) * 32) &&
                ltid_in_bounds_38694) {
                // write result
                {
                    ((volatile __local
                      float *) mem_37451)[sext_i32_i64(local_tid_38684)] =
                        x_33950;
                    x_33951 = x_33950;
                }
            }
            if (sle32(wave_sizze_38686, skip_threads_38695)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38695 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38684 - squot32(local_tid_38684, 32) * 32) == 31 &&
            ltid_in_bounds_38694) {
            ((volatile __local
              float *) mem_37451)[sext_i32_i64(squot32(local_tid_38684, 32))] =
                x_33950;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38697;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38684, 32) == 0 && ltid_in_bounds_38694) {
                x_38692 = ((volatile __local
                            float *) mem_37451)[sext_i32_i64(local_tid_38684)];
                if ((local_tid_38684 - squot32(local_tid_38684, 32) * 32) ==
                    0) {
                    x_38691 = x_38692;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38697 = 1;
            while (slt32(skip_threads_38697, 32)) {
                if (sle32(skip_threads_38697, local_tid_38684 -
                          squot32(local_tid_38684, 32) * 32) &&
                    (squot32(local_tid_38684, 32) == 0 &&
                     ltid_in_bounds_38694)) {
                    // read operands
                    {
                        x_38691 = ((volatile __local
                                    float *) mem_37451)[sext_i32_i64(local_tid_38684) -
                                                        sext_i32_i64(skip_threads_38697)];
                    }
                    // perform operation
                    {
                        bool inactive_38698 =
                             slt64(srem64(sext_i32_i64(local_tid_38684 * 32 +
                                          32 - 1), iota32_arg_25183),
                                   sext_i32_i64(local_tid_38684 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38684 -
                                                 skip_threads_38697) * 32 + 32 -
                                   1));
                        
                        if (inactive_38698) {
                            x_38691 = x_38692;
                        }
                        if (!inactive_38698) {
                            float res_38693 = x_38691 + x_38692;
                            
                            x_38691 = res_38693;
                        }
                    }
                }
                if (sle32(wave_sizze_38686, skip_threads_38697)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38697, local_tid_38684 -
                          squot32(local_tid_38684, 32) * 32) &&
                    (squot32(local_tid_38684, 32) == 0 &&
                     ltid_in_bounds_38694)) {
                    // write result
                    {
                        ((volatile __local
                          float *) mem_37451)[sext_i32_i64(local_tid_38684)] =
                            x_38691;
                        x_38692 = x_38691;
                    }
                }
                if (sle32(wave_sizze_38686, skip_threads_38697)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38697 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38684, 32) == 0 || !ltid_in_bounds_38694)) {
            // read operands
            {
                x_33951 = x_33950;
                x_33950 = ((__local
                            float *) mem_37451)[sext_i32_i64(squot32(local_tid_38684,
                                                                     32)) - 1];
            }
            // perform operation
            {
                bool inactive_38699 =
                     slt64(srem64(sext_i32_i64(local_tid_38684),
                                  iota32_arg_25183),
                           sext_i32_i64(local_tid_38684) -
                           sext_i32_i64(squot32(local_tid_38684, 32) * 32 - 1));
                
                if (inactive_38699) {
                    x_33950 = x_33951;
                }
                if (!inactive_38699) {
                    float res_33952 = x_33950 + x_33951;
                    
                    x_33950 = res_33952;
                }
            }
            // write final result
            {
                ((__local float *) mem_37451)[sext_i32_i64(local_tid_38684)] =
                    x_33950;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38684, 32) == 0) {
            ((__local float *) mem_37451)[sext_i32_i64(local_tid_38684)] =
                x_33951;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    bool acc0_33971;
    int32_t acc0_33972;
    float acc0_33973;
    int64_t gtid_33418 = sext_i32_i64(ltid_pre_38688);
    int32_t phys_tid_33419 = local_tid_38684;
    __local char *red_arr_mem_38700;
    
    red_arr_mem_38700 = (__local char *) red_arr_mem_38700_backing_1;
    
    __local char *red_arr_mem_38702;
    
    red_arr_mem_38702 = (__local char *) red_arr_mem_38702_backing_2;
    
    __local char *red_arr_mem_38704;
    
    red_arr_mem_38704 = (__local char *) red_arr_mem_38704_backing_3;
    if (slt64(gtid_33418, iota32_arg_25183)) {
        float x_33988 = ((__local float *) mem_37451)[gtid_33418];
        float x_33989 = ((__global float *) mem_37332)[gtid_33418];
        int32_t index_primexp_35457 = sext_i64_i32(gtid_33418);
        float res_33992 = x_33988 / y_33941;
        bool cond_33993 = slt32(index_primexp_35457, y_33938);
        bool res_33994;
        
        res_33994 = futrts_isnan32(res_33992);
        
        bool res_33995 = !res_33994;
        bool x_33996 = cond_33993 && res_33995;
        float res_33997 = (float) fabs(res_33992);
        bool res_33998 = x_33989 < res_33997;
        bool x_33999 = x_33996 && res_33998;
        float res_34000;
        
        if (cond_33993) {
            res_34000 = res_33992;
        } else {
            res_34000 = 0.0F;
        }
        ((__local bool *) red_arr_mem_38700)[gtid_33418] = x_33999;
        ((__local int32_t *) red_arr_mem_38702)[gtid_33418] =
            index_primexp_35457;
        ((__local float *) red_arr_mem_38704)[gtid_33418] = res_34000;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38706;
    int32_t skip_waves_38707;
    
    skip_waves_38707 = 1;
    
    bool x_33974;
    int32_t x_33975;
    float x_33976;
    bool x_33977;
    int32_t x_33978;
    float x_33979;
    
    offset_38706 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38684, sext_i64_i32(iota32_arg_25183))) {
            x_33974 = ((__local
                        bool *) red_arr_mem_38700)[sext_i32_i64(local_tid_38684 +
                                                   offset_38706)];
            x_33975 = ((__local
                        int32_t *) red_arr_mem_38702)[sext_i32_i64(local_tid_38684 +
                                                      offset_38706)];
            x_33976 = ((__local
                        float *) red_arr_mem_38704)[sext_i32_i64(local_tid_38684 +
                                                    offset_38706)];
        }
    }
    offset_38706 = 1;
    while (slt32(offset_38706, wave_sizze_38686)) {
        if (slt32(local_tid_38684 + offset_38706,
                  sext_i64_i32(iota32_arg_25183)) && ((local_tid_38684 -
                                                       squot32(local_tid_38684,
                                                               wave_sizze_38686) *
                                                       wave_sizze_38686) & (2 *
                                                                            offset_38706 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_33977 = ((volatile __local
                            bool *) red_arr_mem_38700)[sext_i32_i64(local_tid_38684 +
                                                       offset_38706)];
                x_33978 = ((volatile __local
                            int32_t *) red_arr_mem_38702)[sext_i32_i64(local_tid_38684 +
                                                          offset_38706)];
                x_33979 = ((volatile __local
                            float *) red_arr_mem_38704)[sext_i32_i64(local_tid_38684 +
                                                        offset_38706)];
            }
            // apply reduction operation
            {
                bool res_33980;
                int32_t res_33981;
                
                if (x_33974) {
                    res_33980 = x_33974;
                    res_33981 = x_33975;
                } else {
                    bool x_33982 = x_33977 && x_33977;
                    bool x_33983 = !x_33977;
                    bool y_33984 = x_33974 && x_33983;
                    bool res_33985 = x_33982 || y_33984;
                    int32_t res_33986;
                    
                    if (x_33977) {
                        res_33986 = x_33978;
                    } else {
                        res_33986 = x_33975;
                    }
                    res_33980 = res_33985;
                    res_33981 = res_33986;
                }
                
                float res_33987 = x_33976 + x_33979;
                
                x_33974 = res_33980;
                x_33975 = res_33981;
                x_33976 = res_33987;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_38700)[sext_i32_i64(local_tid_38684)] =
                    x_33974;
                ((volatile __local
                  int32_t *) red_arr_mem_38702)[sext_i32_i64(local_tid_38684)] =
                    x_33975;
                ((volatile __local
                  float *) red_arr_mem_38704)[sext_i32_i64(local_tid_38684)] =
                    x_33976;
            }
        }
        offset_38706 *= 2;
    }
    while (slt32(skip_waves_38707, squot32(sext_i64_i32(iota32_arg_25183) +
                                           wave_sizze_38686 - 1,
                                           wave_sizze_38686))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38706 = skip_waves_38707 * wave_sizze_38686;
        if (slt32(local_tid_38684 + offset_38706,
                  sext_i64_i32(iota32_arg_25183)) && ((local_tid_38684 -
                                                       squot32(local_tid_38684,
                                                               wave_sizze_38686) *
                                                       wave_sizze_38686) == 0 &&
                                                      (squot32(local_tid_38684,
                                                               wave_sizze_38686) &
                                                       (2 * skip_waves_38707 -
                                                        1)) == 0)) {
            // read array element
            {
                x_33977 = ((__local
                            bool *) red_arr_mem_38700)[sext_i32_i64(local_tid_38684 +
                                                       offset_38706)];
                x_33978 = ((__local
                            int32_t *) red_arr_mem_38702)[sext_i32_i64(local_tid_38684 +
                                                          offset_38706)];
                x_33979 = ((__local
                            float *) red_arr_mem_38704)[sext_i32_i64(local_tid_38684 +
                                                        offset_38706)];
            }
            // apply reduction operation
            {
                bool res_33980;
                int32_t res_33981;
                
                if (x_33974) {
                    res_33980 = x_33974;
                    res_33981 = x_33975;
                } else {
                    bool x_33982 = x_33977 && x_33977;
                    bool x_33983 = !x_33977;
                    bool y_33984 = x_33974 && x_33983;
                    bool res_33985 = x_33982 || y_33984;
                    int32_t res_33986;
                    
                    if (x_33977) {
                        res_33986 = x_33978;
                    } else {
                        res_33986 = x_33975;
                    }
                    res_33980 = res_33985;
                    res_33981 = res_33986;
                }
                
                float res_33987 = x_33976 + x_33979;
                
                x_33974 = res_33980;
                x_33975 = res_33981;
                x_33976 = res_33987;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_38700)[sext_i32_i64(local_tid_38684)] =
                    x_33974;
                ((__local
                  int32_t *) red_arr_mem_38702)[sext_i32_i64(local_tid_38684)] =
                    x_33975;
                ((__local
                  float *) red_arr_mem_38704)[sext_i32_i64(local_tid_38684)] =
                    x_33976;
            }
        }
        skip_waves_38707 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_33971 = ((__local bool *) red_arr_mem_38700)[0];
    acc0_33972 = ((__local int32_t *) red_arr_mem_38702)[0];
    acc0_33973 = ((__local float *) red_arr_mem_38704)[0];
    
    bool x_34003 = acc0_33971 && acc0_33971;
    int32_t res_34007;
    
    if (acc0_33971) {
        res_34007 = acc0_33972;
    } else {
        res_34007 = -1;
    }
    
    bool cond_34013 = y_33938 == 0;
    float res_34014;
    
    if (cond_34013) {
        res_34014 = 0.0F;
    } else {
        float res_34015 = sitofp_i32_f32(y_33938);
        float res_34016 = acc0_33973 / res_34015;
        
        res_34014 = res_34016;
    }
    
    __local char *mem_37455;
    
    mem_37455 = (__local char *) mem_37455_backing_4;
    
    int64_t gtid_33420 = sext_i32_i64(ltid_pre_38688);
    int32_t phys_tid_33421 = local_tid_38684;
    
    if (slt64(gtid_33420, iota32_arg_25183)) {
        int32_t index_primexp_35460 = sext_i64_i32(gtid_33420);
        bool cond_34019 = slt32(index_primexp_35460, y_33938);
        bool cond_34020;
        
        if (cond_34019) {
            int32_t i_34021 = add32(x_33932, index_primexp_35460);
            int64_t i_34022 = sext_i32_i64(i_34021);
            bool x_34023 = sle64(0, i_34022);
            bool y_34024 = slt64(i_34022, N_24796);
            bool bounds_check_34025 = x_34023 && y_34024;
            bool index_certs_34026;
            
            if (!bounds_check_34025) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 6) ==
                        -1) {
                        global_failure_args[0] = i_34022;
                        global_failure_args[1] = N_24796;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float isnan_arg_34027 = ((__global
                                      float *) res_mem_37197)[gtid_33413 *
                                                              N_24796 +
                                                              i_34022];
            bool res_34028;
            
            res_34028 = futrts_isnan32(isnan_arg_34027);
            
            bool res_34029 = !res_34028;
            
            cond_34020 = res_34029;
        } else {
            cond_34020 = 0;
        }
        
        float res_34030;
        
        if (cond_34020) {
            int32_t i_34031 = add32(x_33932, index_primexp_35460);
            int64_t i_34032 = sext_i32_i64(i_34031);
            bool x_34033 = sle64(0, i_34032);
            bool y_34034 = slt64(i_34032, N_24796);
            bool bounds_check_34035 = x_34033 && y_34034;
            bool index_certs_34036;
            
            if (!bounds_check_34035) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 7) ==
                        -1) {
                        global_failure_args[0] = i_34032;
                        global_failure_args[1] = N_24796;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float res_34037 = ((__global float *) res_mem_37197)[gtid_33413 *
                                                                 N_24796 +
                                                                 i_34032];
            
            res_34030 = res_34037;
        } else {
            res_34030 = INFINITY;
        }
        ((__local float *) mem_37455)[gtid_33420] = res_34030;
    }
    
  error_3:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37465;
    
    mem_37465 = (__local char *) mem_37465_backing_5;
    
    __local char *mem_37467;
    
    mem_37467 = (__local char *) mem_37467_backing_6;
    
    __local char *mem_37469;
    
    mem_37469 = (__local char *) mem_37469_backing_7;
    
    __local char *mem_37471;
    
    mem_37471 = (__local char *) mem_37471_backing_8;
    
    __local char *mem_37473;
    
    mem_37473 = (__local char *) mem_37473_backing_9;
    
    __local char *double_buffer_mem_37715;
    
    double_buffer_mem_37715 = (__local
                               char *) double_buffer_mem_37715_backing_10;
    ((__local float *) double_buffer_mem_37715)[sext_i32_i64(local_tid_38684)] =
        ((__local float *) mem_37455)[sext_i32_i64(local_tid_38684)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37475;
    
    mem_37475 = (__local char *) mem_37475_backing_11;
    for (int32_t i_34039 = 0; i_34039 < iters_25209; i_34039++) {
        int32_t lifted_2_radix_sort_step_arg_34041 = mul32(2, i_34039);
        int32_t lifted_0_get_bit_arg_34042 = add32(1,
                                                   lifted_2_radix_sort_step_arg_34041);
        bool res_34043 = lifted_0_get_bit_arg_34042 == 31;
        bool res_34044 = lifted_2_radix_sort_step_arg_34041 == 31;
        int64_t gtid_33442 = sext_i32_i64(ltid_pre_38688);
        int32_t phys_tid_33443 = local_tid_38684;
        
        if (slt64(gtid_33442, iota32_arg_25183)) {
            float x_34062 = ((__local
                              float *) double_buffer_mem_37715)[gtid_33442];
            int32_t i32_arg_34063;
            
            i32_arg_34063 = futrts_to_bits32(x_34062);
            
            int32_t unsign_arg_34064 = ashr32(i32_arg_34063,
                                              lifted_0_get_bit_arg_34042);
            int32_t unsign_arg_34065 = 1 & unsign_arg_34064;
            int32_t unsign_arg_34066 = ashr32(i32_arg_34063, 31);
            int32_t unsign_arg_34067 = 1 & unsign_arg_34066;
            bool cond_34068 = unsign_arg_34067 == 1;
            bool x_34069 = !cond_34068;
            bool y_34070 = res_34043 && x_34069;
            bool cond_34071 = cond_34068 || y_34070;
            int32_t res_34072;
            
            if (cond_34071) {
                int32_t res_34073 = 1 ^ unsign_arg_34065;
                
                res_34072 = res_34073;
            } else {
                res_34072 = unsign_arg_34065;
            }
            
            int32_t x_34074 = mul32(2, res_34072);
            int32_t unsign_arg_34075 = ashr32(i32_arg_34063,
                                              lifted_2_radix_sort_step_arg_34041);
            int32_t unsign_arg_34076 = 1 & unsign_arg_34075;
            bool y_34077 = res_34044 && x_34069;
            bool cond_34078 = cond_34068 || y_34077;
            int32_t res_34079;
            
            if (cond_34078) {
                int32_t res_34080 = 1 ^ unsign_arg_34076;
                
                res_34079 = res_34080;
            } else {
                res_34079 = unsign_arg_34076;
            }
            
            int32_t res_34081 = add32(x_34074, res_34079);
            bool cond_34082 = res_34081 == 0;
            int64_t res_34083 = btoi_bool_i64(cond_34082);
            int64_t res_34084;
            int64_t res_34085;
            int64_t res_34086;
            
            if (cond_34082) {
                res_34084 = 0;
                res_34085 = 0;
                res_34086 = 0;
            } else {
                bool cond_34087 = res_34081 == 1;
                int64_t res_34088 = btoi_bool_i64(cond_34087);
                int64_t res_34089;
                int64_t res_34090;
                
                if (cond_34087) {
                    res_34089 = 0;
                    res_34090 = 0;
                } else {
                    bool cond_34091 = res_34081 == 2;
                    int64_t res_34092 = btoi_bool_i64(cond_34091);
                    bool cond_neg_34093 = !cond_34091;
                    int64_t res_34094 = btoi_bool_i64(cond_neg_34093);
                    
                    res_34089 = res_34092;
                    res_34090 = res_34094;
                }
                res_34084 = res_34088;
                res_34085 = res_34089;
                res_34086 = res_34090;
            }
            ((__local int64_t *) mem_37465)[gtid_33442] = res_34083;
            ((__local int64_t *) mem_37467)[gtid_33442] = res_34084;
            ((__local int64_t *) mem_37469)[gtid_33442] = res_34085;
            ((__local int64_t *) mem_37471)[gtid_33442] = res_34086;
            ((__local int32_t *) mem_37473)[gtid_33442] = res_34081;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t dims_flat_38709;
        
        dims_flat_38709 = iota32_arg_25183;
        
        int64_t x_34050;
        int64_t x_34051;
        int64_t x_34052;
        int64_t x_34053;
        int64_t x_34054;
        int64_t x_34055;
        int64_t x_34056;
        int64_t x_34057;
        int64_t x_38714;
        int64_t x_38715;
        int64_t x_38716;
        int64_t x_38717;
        int64_t x_38718;
        int64_t x_38719;
        int64_t x_38720;
        int64_t x_38721;
        bool ltid_in_bounds_38726;
        
        ltid_in_bounds_38726 = slt64(sext_i32_i64(local_tid_38684),
                                     iota32_arg_25183);
        
        int32_t skip_threads_38727;
        
        // read input for in-block scan
        {
            if (ltid_in_bounds_38726) {
                x_34054 = ((volatile __local
                            int64_t *) mem_37465)[sext_i32_i64(local_tid_38684)];
                x_34055 = ((volatile __local
                            int64_t *) mem_37467)[sext_i32_i64(local_tid_38684)];
                x_34056 = ((volatile __local
                            int64_t *) mem_37469)[sext_i32_i64(local_tid_38684)];
                x_34057 = ((volatile __local
                            int64_t *) mem_37471)[sext_i32_i64(local_tid_38684)];
                if ((local_tid_38684 - squot32(local_tid_38684, 32) * 32) ==
                    0) {
                    x_34050 = x_34054;
                    x_34051 = x_34055;
                    x_34052 = x_34056;
                    x_34053 = x_34057;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38727 = 1;
            while (slt32(skip_threads_38727, 32)) {
                if (sle32(skip_threads_38727, local_tid_38684 -
                          squot32(local_tid_38684, 32) * 32) &&
                    ltid_in_bounds_38726) {
                    // read operands
                    {
                        x_34050 = ((volatile __local
                                    int64_t *) mem_37465)[sext_i32_i64(local_tid_38684) -
                                                          sext_i32_i64(skip_threads_38727)];
                        x_34051 = ((volatile __local
                                    int64_t *) mem_37467)[sext_i32_i64(local_tid_38684) -
                                                          sext_i32_i64(skip_threads_38727)];
                        x_34052 = ((volatile __local
                                    int64_t *) mem_37469)[sext_i32_i64(local_tid_38684) -
                                                          sext_i32_i64(skip_threads_38727)];
                        x_34053 = ((volatile __local
                                    int64_t *) mem_37471)[sext_i32_i64(local_tid_38684) -
                                                          sext_i32_i64(skip_threads_38727)];
                    }
                    // perform operation
                    {
                        bool inactive_38728 =
                             slt64(srem64(sext_i32_i64(local_tid_38684),
                                          iota32_arg_25183),
                                   sext_i32_i64(local_tid_38684) -
                                   sext_i32_i64(local_tid_38684 -
                                   skip_threads_38727));
                        
                        if (inactive_38728) {
                            x_34050 = x_34054;
                            x_34051 = x_34055;
                            x_34052 = x_34056;
                            x_34053 = x_34057;
                        }
                        if (!inactive_38728) {
                            int64_t res_34058 = add64(x_34050, x_34054);
                            int64_t res_34059 = add64(x_34051, x_34055);
                            int64_t res_34060 = add64(x_34052, x_34056);
                            int64_t res_34061 = add64(x_34053, x_34057);
                            
                            x_34050 = res_34058;
                            x_34051 = res_34059;
                            x_34052 = res_34060;
                            x_34053 = res_34061;
                        }
                    }
                }
                if (sle32(wave_sizze_38686, skip_threads_38727)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38727, local_tid_38684 -
                          squot32(local_tid_38684, 32) * 32) &&
                    ltid_in_bounds_38726) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37465)[sext_i32_i64(local_tid_38684)] =
                            x_34050;
                        x_34054 = x_34050;
                        ((volatile __local
                          int64_t *) mem_37467)[sext_i32_i64(local_tid_38684)] =
                            x_34051;
                        x_34055 = x_34051;
                        ((volatile __local
                          int64_t *) mem_37469)[sext_i32_i64(local_tid_38684)] =
                            x_34052;
                        x_34056 = x_34052;
                        ((volatile __local
                          int64_t *) mem_37471)[sext_i32_i64(local_tid_38684)] =
                            x_34053;
                        x_34057 = x_34053;
                    }
                }
                if (sle32(wave_sizze_38686, skip_threads_38727)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38727 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_38684 - squot32(local_tid_38684, 32) * 32) == 31 &&
                ltid_in_bounds_38726) {
                ((volatile __local
                  int64_t *) mem_37465)[sext_i32_i64(squot32(local_tid_38684,
                                                             32))] = x_34050;
                ((volatile __local
                  int64_t *) mem_37467)[sext_i32_i64(squot32(local_tid_38684,
                                                             32))] = x_34051;
                ((volatile __local
                  int64_t *) mem_37469)[sext_i32_i64(squot32(local_tid_38684,
                                                             32))] = x_34052;
                ((volatile __local
                  int64_t *) mem_37471)[sext_i32_i64(squot32(local_tid_38684,
                                                             32))] = x_34053;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_38729;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_38684, 32) == 0 && ltid_in_bounds_38726) {
                    x_38718 = ((volatile __local
                                int64_t *) mem_37465)[sext_i32_i64(local_tid_38684)];
                    x_38719 = ((volatile __local
                                int64_t *) mem_37467)[sext_i32_i64(local_tid_38684)];
                    x_38720 = ((volatile __local
                                int64_t *) mem_37469)[sext_i32_i64(local_tid_38684)];
                    x_38721 = ((volatile __local
                                int64_t *) mem_37471)[sext_i32_i64(local_tid_38684)];
                    if ((local_tid_38684 - squot32(local_tid_38684, 32) * 32) ==
                        0) {
                        x_38714 = x_38718;
                        x_38715 = x_38719;
                        x_38716 = x_38720;
                        x_38717 = x_38721;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38729 = 1;
                while (slt32(skip_threads_38729, 32)) {
                    if (sle32(skip_threads_38729, local_tid_38684 -
                              squot32(local_tid_38684, 32) * 32) &&
                        (squot32(local_tid_38684, 32) == 0 &&
                         ltid_in_bounds_38726)) {
                        // read operands
                        {
                            x_38714 = ((volatile __local
                                        int64_t *) mem_37465)[sext_i32_i64(local_tid_38684) -
                                                              sext_i32_i64(skip_threads_38729)];
                            x_38715 = ((volatile __local
                                        int64_t *) mem_37467)[sext_i32_i64(local_tid_38684) -
                                                              sext_i32_i64(skip_threads_38729)];
                            x_38716 = ((volatile __local
                                        int64_t *) mem_37469)[sext_i32_i64(local_tid_38684) -
                                                              sext_i32_i64(skip_threads_38729)];
                            x_38717 = ((volatile __local
                                        int64_t *) mem_37471)[sext_i32_i64(local_tid_38684) -
                                                              sext_i32_i64(skip_threads_38729)];
                        }
                        // perform operation
                        {
                            bool inactive_38730 =
                                 slt64(srem64(sext_i32_i64(local_tid_38684 *
                                              32 + 32 - 1), iota32_arg_25183),
                                       sext_i32_i64(local_tid_38684 * 32 + 32 -
                                       1) - sext_i32_i64((local_tid_38684 -
                                                          skip_threads_38729) *
                                       32 + 32 - 1));
                            
                            if (inactive_38730) {
                                x_38714 = x_38718;
                                x_38715 = x_38719;
                                x_38716 = x_38720;
                                x_38717 = x_38721;
                            }
                            if (!inactive_38730) {
                                int64_t res_38722 = add64(x_38714, x_38718);
                                int64_t res_38723 = add64(x_38715, x_38719);
                                int64_t res_38724 = add64(x_38716, x_38720);
                                int64_t res_38725 = add64(x_38717, x_38721);
                                
                                x_38714 = res_38722;
                                x_38715 = res_38723;
                                x_38716 = res_38724;
                                x_38717 = res_38725;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38686, skip_threads_38729)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38729, local_tid_38684 -
                              squot32(local_tid_38684, 32) * 32) &&
                        (squot32(local_tid_38684, 32) == 0 &&
                         ltid_in_bounds_38726)) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) mem_37465)[sext_i32_i64(local_tid_38684)] =
                                x_38714;
                            x_38718 = x_38714;
                            ((volatile __local
                              int64_t *) mem_37467)[sext_i32_i64(local_tid_38684)] =
                                x_38715;
                            x_38719 = x_38715;
                            ((volatile __local
                              int64_t *) mem_37469)[sext_i32_i64(local_tid_38684)] =
                                x_38716;
                            x_38720 = x_38716;
                            ((volatile __local
                              int64_t *) mem_37471)[sext_i32_i64(local_tid_38684)] =
                                x_38717;
                            x_38721 = x_38717;
                        }
                    }
                    if (sle32(wave_sizze_38686, skip_threads_38729)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38729 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // carry-in for every block except the first
        {
            if (!(squot32(local_tid_38684, 32) == 0 || !ltid_in_bounds_38726)) {
                // read operands
                {
                    x_34054 = x_34050;
                    x_34055 = x_34051;
                    x_34056 = x_34052;
                    x_34057 = x_34053;
                    x_34050 = ((__local
                                int64_t *) mem_37465)[sext_i32_i64(squot32(local_tid_38684,
                                                                           32)) -
                                                      1];
                    x_34051 = ((__local
                                int64_t *) mem_37467)[sext_i32_i64(squot32(local_tid_38684,
                                                                           32)) -
                                                      1];
                    x_34052 = ((__local
                                int64_t *) mem_37469)[sext_i32_i64(squot32(local_tid_38684,
                                                                           32)) -
                                                      1];
                    x_34053 = ((__local
                                int64_t *) mem_37471)[sext_i32_i64(squot32(local_tid_38684,
                                                                           32)) -
                                                      1];
                }
                // perform operation
                {
                    bool inactive_38731 =
                         slt64(srem64(sext_i32_i64(local_tid_38684),
                                      iota32_arg_25183),
                               sext_i32_i64(local_tid_38684) -
                               sext_i32_i64(squot32(local_tid_38684, 32) * 32 -
                               1));
                    
                    if (inactive_38731) {
                        x_34050 = x_34054;
                        x_34051 = x_34055;
                        x_34052 = x_34056;
                        x_34053 = x_34057;
                    }
                    if (!inactive_38731) {
                        int64_t res_34058 = add64(x_34050, x_34054);
                        int64_t res_34059 = add64(x_34051, x_34055);
                        int64_t res_34060 = add64(x_34052, x_34056);
                        int64_t res_34061 = add64(x_34053, x_34057);
                        
                        x_34050 = res_34058;
                        x_34051 = res_34059;
                        x_34052 = res_34060;
                        x_34053 = res_34061;
                    }
                }
                // write final result
                {
                    ((__local
                      int64_t *) mem_37465)[sext_i32_i64(local_tid_38684)] =
                        x_34050;
                    ((__local
                      int64_t *) mem_37467)[sext_i32_i64(local_tid_38684)] =
                        x_34051;
                    ((__local
                      int64_t *) mem_37469)[sext_i32_i64(local_tid_38684)] =
                        x_34052;
                    ((__local
                      int64_t *) mem_37471)[sext_i32_i64(local_tid_38684)] =
                        x_34053;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_38684, 32) == 0) {
                ((__local int64_t *) mem_37465)[sext_i32_i64(local_tid_38684)] =
                    x_34054;
                ((__local int64_t *) mem_37467)[sext_i32_i64(local_tid_38684)] =
                    x_34055;
                ((__local int64_t *) mem_37469)[sext_i32_i64(local_tid_38684)] =
                    x_34056;
                ((__local int64_t *) mem_37471)[sext_i32_i64(local_tid_38684)] =
                    x_34057;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t res_34095 = ((__local int64_t *) mem_37465)[i_25211];
        int64_t res_34096 = ((__local int64_t *) mem_37467)[i_25211];
        int64_t res_34097 = ((__local int64_t *) mem_37469)[i_25211];
        
        ((__local float *) mem_37475)[sext_i32_i64(local_tid_38684)] = ((__local
                                                                         float *) double_buffer_mem_37715)[sext_i32_i64(local_tid_38684)];
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_33444 = sext_i32_i64(ltid_pre_38688);
        int32_t phys_tid_33445 = local_tid_38684;
        
        if (slt64(write_i_33444, iota32_arg_25183)) {
            int32_t x_34100 = ((__local int32_t *) mem_37473)[write_i_33444];
            float write_value_34105 = ((__local
                                        float *) double_buffer_mem_37715)[write_i_33444];
            bool match_lit_34106 = 0 == x_34100;
            int64_t res_34107;
            
            if (match_lit_34106) {
                int64_t x_34101 = ((__local
                                    int64_t *) mem_37465)[write_i_33444];
                int64_t res_34108 = sub64(x_34101, 1);
                
                res_34107 = res_34108;
            } else {
                int64_t x_34102 = ((__local
                                    int64_t *) mem_37467)[write_i_33444];
                int64_t x_34103 = ((__local
                                    int64_t *) mem_37469)[write_i_33444];
                int64_t x_34104 = ((__local
                                    int64_t *) mem_37471)[write_i_33444];
                bool match_lit_34109 = 1 == x_34100;
                int64_t x_34110;
                
                if (match_lit_34109) {
                    int64_t x_34111 = add64(res_34095, x_34102);
                    int64_t res_34112 = sub64(x_34111, 1);
                    
                    x_34110 = res_34112;
                } else {
                    bool match_lit_34113 = 2 == x_34100;
                    int64_t x_34114;
                    
                    if (match_lit_34113) {
                        int64_t x_34115 = add64(res_34095, res_34096);
                        int64_t x_34116 = add64(x_34103, x_34115);
                        int64_t res_34117 = sub64(x_34116, 1);
                        
                        x_34114 = res_34117;
                    } else {
                        int64_t x_34118 = add64(res_34095, res_34096);
                        int64_t x_34119 = add64(res_34097, x_34118);
                        int64_t x_34120 = add64(x_34104, x_34119);
                        int64_t res_34121 = sub64(x_34120, 1);
                        
                        x_34114 = res_34121;
                    }
                    x_34110 = x_34114;
                }
                res_34107 = x_34110;
            }
            if (sle64(0, res_34107) && slt64(res_34107, iota32_arg_25183)) {
                ((__local float *) mem_37475)[res_34107] = write_value_34105;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ((__local
          float *) double_buffer_mem_37715)[sext_i32_i64(local_tid_38684)] =
            ((__local float *) mem_37475)[sext_i32_i64(local_tid_38684)];
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    int32_t i_34122 = sdiv32(y_33938, 2);
    int32_t j_34123 = sub32(i_34122, 1);
    bool cond_34124 = x_33931 == x_33932;
    float res_34125;
    
    if (cond_34124) {
        res_34125 = 0.0F;
    } else {
        int32_t x_34126 = smod32(y_33938, 2);
        bool cond_34127 = x_34126 == 0;
        float res_34128;
        
        if (cond_34127) {
            int64_t j_34129 = sext_i32_i64(j_34123);
            bool x_34130 = sle64(0, j_34129);
            bool y_34131 = slt64(j_34129, iota32_arg_25183);
            bool bounds_check_34132 = x_34130 && y_34131;
            bool index_certs_34133;
            
            if (!bounds_check_34132) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 8) ==
                        -1) {
                        global_failure_args[0] = j_34129;
                        global_failure_args[1] = iota32_arg_25183;
                        ;
                    }
                    local_failure = true;
                    goto error_6;
                }
            }
            
            float x_34134 = ((__local
                              float *) double_buffer_mem_37715)[j_34129];
            int64_t i_34135 = sext_i32_i64(i_34122);
            bool x_34136 = sle64(0, i_34135);
            bool y_34137 = slt64(i_34135, iota32_arg_25183);
            bool bounds_check_34138 = x_34136 && y_34137;
            bool index_certs_34139;
            
            if (!bounds_check_34138) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 9) ==
                        -1) {
                        global_failure_args[0] = i_34135;
                        global_failure_args[1] = iota32_arg_25183;
                        ;
                    }
                    local_failure = true;
                    goto error_6;
                }
            }
            
            float y_34140 = ((__local
                              float *) double_buffer_mem_37715)[i_34135];
            float x_34141 = x_34134 + y_34140;
            float res_34142 = x_34141 / 2.0F;
            
            res_34128 = res_34142;
        } else {
            int64_t i_34143 = sext_i32_i64(i_34122);
            bool x_34144 = sle64(0, i_34143);
            bool y_34145 = slt64(i_34143, iota32_arg_25183);
            bool bounds_check_34146 = x_34144 && y_34145;
            bool index_certs_34147;
            
            if (!bounds_check_34146) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 10) ==
                        -1) {
                        global_failure_args[0] = i_34143;
                        global_failure_args[1] = iota32_arg_25183;
                        ;
                    }
                    local_failure = true;
                    goto error_6;
                }
            }
            
            float res_34148 = ((__local
                                float *) double_buffer_mem_37715)[i_34143];
            
            res_34128 = res_34148;
        }
        res_34125 = res_34128;
    }
    
    bool cond_34149 = !x_34003;
    int32_t fst_breakzq_34150;
    
    if (cond_34149) {
        fst_breakzq_34150 = -1;
    } else {
        bool cond_34151 = slt32(res_34007, y_33938);
        int32_t res_34152;
        
        if (cond_34151) {
            int32_t i_34153 = add32(x_33932, res_34007);
            int64_t i_34154 = sext_i32_i64(i_34153);
            int32_t x_34155 = ((__global int32_t *) res_mem_37198)[gtid_33413 *
                                                                   N_24796 +
                                                                   i_34154];
            int32_t res_34156 = sub32(x_34155, n_24801);
            
            res_34152 = res_34156;
        } else {
            res_34152 = -1;
        }
        fst_breakzq_34150 = res_34152;
    }
    
    bool cond_34157 = sle32(x_33932, 5);
    bool res_34158 = sle32(y_33938, 5);
    bool x_34159 = !cond_34157;
    bool y_34160 = res_34158 && x_34159;
    bool cond_34161 = cond_34157 || y_34160;
    int32_t fst_breakzq_34162;
    
    if (cond_34161) {
        fst_breakzq_34162 = -2;
    } else {
        fst_breakzq_34162 = fst_breakzq_34150;
    }
    if (local_tid_38684 == 0) {
        ((__global int32_t *) mem_37485)[gtid_33413] = fst_breakzq_34162;
    }
    if (local_tid_38684 == 0) {
        ((__global float *) mem_37487)[gtid_33413] = res_34014;
    }
    if (local_tid_38684 == 0) {
        ((__global float *) mem_37489)[gtid_33413] = res_34125;
    }
    
  error_6:
    return;
}
__kernel void mainzisegmap_intragroup_34232(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37543_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37541_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37539_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37537_backing_aligned_3,
                                            __local volatile
                                            int64_t *mem_37535_backing_aligned_4,
                                            __local volatile
                                            int64_t *mem_37533_backing_aligned_5,
                                            int64_t m_24797,
                                            int64_t iota32_arg_25183,
                                            int64_t i_25211,
                                            int32_t lifted_2_radix_sort_step_arg_35122,
                                            int32_t lifted_0_get_bit_arg_35123,
                                            unsigned char res_35124,
                                            unsigned char res_35125, __global
                                            unsigned char *mem_param_37524,
                                            __global unsigned char *mem_37529,
                                            __global unsigned char *mem_37547)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37543_backing_5 = (__local volatile
                                                           char *) mem_37543_backing_aligned_0;
    __local volatile char *restrict mem_37541_backing_4 = (__local volatile
                                                           char *) mem_37541_backing_aligned_1;
    __local volatile char *restrict mem_37539_backing_3 = (__local volatile
                                                           char *) mem_37539_backing_aligned_2;
    __local volatile char *restrict mem_37537_backing_2 = (__local volatile
                                                           char *) mem_37537_backing_aligned_3;
    __local volatile char *restrict mem_37535_backing_1 = (__local volatile
                                                           char *) mem_37535_backing_aligned_4;
    __local volatile char *restrict mem_37533_backing_0 = (__local volatile
                                                           char *) mem_37533_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38906;
    int32_t local_tid_38907;
    int64_t group_sizze_38910;
    int32_t wave_sizze_38909;
    int32_t group_tid_38908;
    
    global_tid_38906 = get_global_id(0);
    local_tid_38907 = get_local_id(0);
    group_sizze_38910 = get_local_size(0);
    wave_sizze_38909 = LOCKSTEP_WIDTH;
    group_tid_38908 = get_group_id(0);
    
    int32_t phys_tid_34232;
    
    phys_tid_34232 = group_tid_38908;
    
    int32_t ltid_pre_38911;
    
    ltid_pre_38911 = local_tid_38907;
    
    int64_t gtid_34225;
    
    gtid_34225 = sext_i32_i64(group_tid_38908);
    
    __local char *mem_37533;
    
    mem_37533 = (__local char *) mem_37533_backing_0;
    
    __local char *mem_37535;
    
    mem_37535 = (__local char *) mem_37535_backing_1;
    
    __local char *mem_37537;
    
    mem_37537 = (__local char *) mem_37537_backing_2;
    
    __local char *mem_37539;
    
    mem_37539 = (__local char *) mem_37539_backing_3;
    
    __local char *mem_37541;
    
    mem_37541 = (__local char *) mem_37541_backing_4;
    
    int64_t gtid_34228 = sext_i32_i64(ltid_pre_38911);
    int32_t phys_tid_34229 = local_tid_38907;
    
    if (slt64(gtid_34228, iota32_arg_25183)) {
        float x_35155 = ((__global float *) mem_param_37524)[gtid_34225 *
                                                             iota32_arg_25183 +
                                                             gtid_34228];
        int32_t i32_arg_35156;
        
        i32_arg_35156 = futrts_to_bits32(x_35155);
        
        int32_t unsign_arg_35157 = ashr32(i32_arg_35156,
                                          lifted_0_get_bit_arg_35123);
        int32_t unsign_arg_35158 = 1 & unsign_arg_35157;
        int32_t unsign_arg_35159 = ashr32(i32_arg_35156, 31);
        int32_t unsign_arg_35160 = 1 & unsign_arg_35159;
        bool cond_35161 = unsign_arg_35160 == 1;
        bool x_35162 = !cond_35161;
        bool y_35163 = res_35124 && x_35162;
        bool cond_35164 = cond_35161 || y_35163;
        int32_t res_35165;
        
        if (cond_35164) {
            int32_t res_35166 = 1 ^ unsign_arg_35158;
            
            res_35165 = res_35166;
        } else {
            res_35165 = unsign_arg_35158;
        }
        
        int32_t x_35167 = mul32(2, res_35165);
        int32_t unsign_arg_35168 = ashr32(i32_arg_35156,
                                          lifted_2_radix_sort_step_arg_35122);
        int32_t unsign_arg_35169 = 1 & unsign_arg_35168;
        bool y_35170 = res_35125 && x_35162;
        bool cond_35171 = cond_35161 || y_35170;
        int32_t res_35172;
        
        if (cond_35171) {
            int32_t res_35173 = 1 ^ unsign_arg_35169;
            
            res_35172 = res_35173;
        } else {
            res_35172 = unsign_arg_35169;
        }
        
        int32_t res_35174 = add32(x_35167, res_35172);
        bool cond_35175 = res_35174 == 0;
        int64_t res_35176 = btoi_bool_i64(cond_35175);
        int64_t res_35177;
        int64_t res_35178;
        int64_t res_35179;
        
        if (cond_35175) {
            res_35177 = 0;
            res_35178 = 0;
            res_35179 = 0;
        } else {
            bool cond_35180 = res_35174 == 1;
            int64_t res_35181 = btoi_bool_i64(cond_35180);
            int64_t res_35182;
            int64_t res_35183;
            
            if (cond_35180) {
                res_35182 = 0;
                res_35183 = 0;
            } else {
                bool cond_35184 = res_35174 == 2;
                int64_t res_35185 = btoi_bool_i64(cond_35184);
                bool cond_neg_35186 = !cond_35184;
                int64_t res_35187 = btoi_bool_i64(cond_neg_35186);
                
                res_35182 = res_35185;
                res_35183 = res_35187;
            }
            res_35177 = res_35181;
            res_35178 = res_35182;
            res_35179 = res_35183;
        }
        ((__local int64_t *) mem_37533)[gtid_34228] = res_35176;
        ((__local int64_t *) mem_37535)[gtid_34228] = res_35177;
        ((__local int64_t *) mem_37537)[gtid_34228] = res_35178;
        ((__local int64_t *) mem_37539)[gtid_34228] = res_35179;
        ((__local int32_t *) mem_37541)[gtid_34228] = res_35174;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38912;
    
    dims_flat_38912 = iota32_arg_25183;
    
    int64_t x_35143;
    int64_t x_35144;
    int64_t x_35145;
    int64_t x_35146;
    int64_t x_35147;
    int64_t x_35148;
    int64_t x_35149;
    int64_t x_35150;
    int64_t x_38917;
    int64_t x_38918;
    int64_t x_38919;
    int64_t x_38920;
    int64_t x_38921;
    int64_t x_38922;
    int64_t x_38923;
    int64_t x_38924;
    bool ltid_in_bounds_38929;
    
    ltid_in_bounds_38929 = slt64(sext_i32_i64(local_tid_38907),
                                 iota32_arg_25183);
    
    int32_t skip_threads_38930;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38929) {
            x_35147 = ((volatile __local
                        int64_t *) mem_37533)[sext_i32_i64(local_tid_38907)];
            x_35148 = ((volatile __local
                        int64_t *) mem_37535)[sext_i32_i64(local_tid_38907)];
            x_35149 = ((volatile __local
                        int64_t *) mem_37537)[sext_i32_i64(local_tid_38907)];
            x_35150 = ((volatile __local
                        int64_t *) mem_37539)[sext_i32_i64(local_tid_38907)];
            if ((local_tid_38907 - squot32(local_tid_38907, 32) * 32) == 0) {
                x_35143 = x_35147;
                x_35144 = x_35148;
                x_35145 = x_35149;
                x_35146 = x_35150;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38930 = 1;
        while (slt32(skip_threads_38930, 32)) {
            if (sle32(skip_threads_38930, local_tid_38907 -
                      squot32(local_tid_38907, 32) * 32) &&
                ltid_in_bounds_38929) {
                // read operands
                {
                    x_35143 = ((volatile __local
                                int64_t *) mem_37533)[sext_i32_i64(local_tid_38907) -
                                                      sext_i32_i64(skip_threads_38930)];
                    x_35144 = ((volatile __local
                                int64_t *) mem_37535)[sext_i32_i64(local_tid_38907) -
                                                      sext_i32_i64(skip_threads_38930)];
                    x_35145 = ((volatile __local
                                int64_t *) mem_37537)[sext_i32_i64(local_tid_38907) -
                                                      sext_i32_i64(skip_threads_38930)];
                    x_35146 = ((volatile __local
                                int64_t *) mem_37539)[sext_i32_i64(local_tid_38907) -
                                                      sext_i32_i64(skip_threads_38930)];
                }
                // perform operation
                {
                    bool inactive_38931 =
                         slt64(srem64(sext_i32_i64(local_tid_38907),
                                      iota32_arg_25183),
                               sext_i32_i64(local_tid_38907) -
                               sext_i32_i64(local_tid_38907 -
                               skip_threads_38930));
                    
                    if (inactive_38931) {
                        x_35143 = x_35147;
                        x_35144 = x_35148;
                        x_35145 = x_35149;
                        x_35146 = x_35150;
                    }
                    if (!inactive_38931) {
                        int64_t res_35151 = add64(x_35143, x_35147);
                        int64_t res_35152 = add64(x_35144, x_35148);
                        int64_t res_35153 = add64(x_35145, x_35149);
                        int64_t res_35154 = add64(x_35146, x_35150);
                        
                        x_35143 = res_35151;
                        x_35144 = res_35152;
                        x_35145 = res_35153;
                        x_35146 = res_35154;
                    }
                }
            }
            if (sle32(wave_sizze_38909, skip_threads_38930)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38930, local_tid_38907 -
                      squot32(local_tid_38907, 32) * 32) &&
                ltid_in_bounds_38929) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37533)[sext_i32_i64(local_tid_38907)] =
                        x_35143;
                    x_35147 = x_35143;
                    ((volatile __local
                      int64_t *) mem_37535)[sext_i32_i64(local_tid_38907)] =
                        x_35144;
                    x_35148 = x_35144;
                    ((volatile __local
                      int64_t *) mem_37537)[sext_i32_i64(local_tid_38907)] =
                        x_35145;
                    x_35149 = x_35145;
                    ((volatile __local
                      int64_t *) mem_37539)[sext_i32_i64(local_tid_38907)] =
                        x_35146;
                    x_35150 = x_35146;
                }
            }
            if (sle32(wave_sizze_38909, skip_threads_38930)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38930 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38907 - squot32(local_tid_38907, 32) * 32) == 31 &&
            ltid_in_bounds_38929) {
            ((volatile __local
              int64_t *) mem_37533)[sext_i32_i64(squot32(local_tid_38907,
                                                         32))] = x_35143;
            ((volatile __local
              int64_t *) mem_37535)[sext_i32_i64(squot32(local_tid_38907,
                                                         32))] = x_35144;
            ((volatile __local
              int64_t *) mem_37537)[sext_i32_i64(squot32(local_tid_38907,
                                                         32))] = x_35145;
            ((volatile __local
              int64_t *) mem_37539)[sext_i32_i64(squot32(local_tid_38907,
                                                         32))] = x_35146;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38932;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38907, 32) == 0 && ltid_in_bounds_38929) {
                x_38921 = ((volatile __local
                            int64_t *) mem_37533)[sext_i32_i64(local_tid_38907)];
                x_38922 = ((volatile __local
                            int64_t *) mem_37535)[sext_i32_i64(local_tid_38907)];
                x_38923 = ((volatile __local
                            int64_t *) mem_37537)[sext_i32_i64(local_tid_38907)];
                x_38924 = ((volatile __local
                            int64_t *) mem_37539)[sext_i32_i64(local_tid_38907)];
                if ((local_tid_38907 - squot32(local_tid_38907, 32) * 32) ==
                    0) {
                    x_38917 = x_38921;
                    x_38918 = x_38922;
                    x_38919 = x_38923;
                    x_38920 = x_38924;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38932 = 1;
            while (slt32(skip_threads_38932, 32)) {
                if (sle32(skip_threads_38932, local_tid_38907 -
                          squot32(local_tid_38907, 32) * 32) &&
                    (squot32(local_tid_38907, 32) == 0 &&
                     ltid_in_bounds_38929)) {
                    // read operands
                    {
                        x_38917 = ((volatile __local
                                    int64_t *) mem_37533)[sext_i32_i64(local_tid_38907) -
                                                          sext_i32_i64(skip_threads_38932)];
                        x_38918 = ((volatile __local
                                    int64_t *) mem_37535)[sext_i32_i64(local_tid_38907) -
                                                          sext_i32_i64(skip_threads_38932)];
                        x_38919 = ((volatile __local
                                    int64_t *) mem_37537)[sext_i32_i64(local_tid_38907) -
                                                          sext_i32_i64(skip_threads_38932)];
                        x_38920 = ((volatile __local
                                    int64_t *) mem_37539)[sext_i32_i64(local_tid_38907) -
                                                          sext_i32_i64(skip_threads_38932)];
                    }
                    // perform operation
                    {
                        bool inactive_38933 =
                             slt64(srem64(sext_i32_i64(local_tid_38907 * 32 +
                                          32 - 1), iota32_arg_25183),
                                   sext_i32_i64(local_tid_38907 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38907 -
                                                 skip_threads_38932) * 32 + 32 -
                                   1));
                        
                        if (inactive_38933) {
                            x_38917 = x_38921;
                            x_38918 = x_38922;
                            x_38919 = x_38923;
                            x_38920 = x_38924;
                        }
                        if (!inactive_38933) {
                            int64_t res_38925 = add64(x_38917, x_38921);
                            int64_t res_38926 = add64(x_38918, x_38922);
                            int64_t res_38927 = add64(x_38919, x_38923);
                            int64_t res_38928 = add64(x_38920, x_38924);
                            
                            x_38917 = res_38925;
                            x_38918 = res_38926;
                            x_38919 = res_38927;
                            x_38920 = res_38928;
                        }
                    }
                }
                if (sle32(wave_sizze_38909, skip_threads_38932)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38932, local_tid_38907 -
                          squot32(local_tid_38907, 32) * 32) &&
                    (squot32(local_tid_38907, 32) == 0 &&
                     ltid_in_bounds_38929)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37533)[sext_i32_i64(local_tid_38907)] =
                            x_38917;
                        x_38921 = x_38917;
                        ((volatile __local
                          int64_t *) mem_37535)[sext_i32_i64(local_tid_38907)] =
                            x_38918;
                        x_38922 = x_38918;
                        ((volatile __local
                          int64_t *) mem_37537)[sext_i32_i64(local_tid_38907)] =
                            x_38919;
                        x_38923 = x_38919;
                        ((volatile __local
                          int64_t *) mem_37539)[sext_i32_i64(local_tid_38907)] =
                            x_38920;
                        x_38924 = x_38920;
                    }
                }
                if (sle32(wave_sizze_38909, skip_threads_38932)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38932 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38907, 32) == 0 || !ltid_in_bounds_38929)) {
            // read operands
            {
                x_35147 = x_35143;
                x_35148 = x_35144;
                x_35149 = x_35145;
                x_35150 = x_35146;
                x_35143 = ((__local
                            int64_t *) mem_37533)[sext_i32_i64(squot32(local_tid_38907,
                                                                       32)) -
                                                  1];
                x_35144 = ((__local
                            int64_t *) mem_37535)[sext_i32_i64(squot32(local_tid_38907,
                                                                       32)) -
                                                  1];
                x_35145 = ((__local
                            int64_t *) mem_37537)[sext_i32_i64(squot32(local_tid_38907,
                                                                       32)) -
                                                  1];
                x_35146 = ((__local
                            int64_t *) mem_37539)[sext_i32_i64(squot32(local_tid_38907,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38934 =
                     slt64(srem64(sext_i32_i64(local_tid_38907),
                                  iota32_arg_25183),
                           sext_i32_i64(local_tid_38907) -
                           sext_i32_i64(squot32(local_tid_38907, 32) * 32 - 1));
                
                if (inactive_38934) {
                    x_35143 = x_35147;
                    x_35144 = x_35148;
                    x_35145 = x_35149;
                    x_35146 = x_35150;
                }
                if (!inactive_38934) {
                    int64_t res_35151 = add64(x_35143, x_35147);
                    int64_t res_35152 = add64(x_35144, x_35148);
                    int64_t res_35153 = add64(x_35145, x_35149);
                    int64_t res_35154 = add64(x_35146, x_35150);
                    
                    x_35143 = res_35151;
                    x_35144 = res_35152;
                    x_35145 = res_35153;
                    x_35146 = res_35154;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37533)[sext_i32_i64(local_tid_38907)] =
                    x_35143;
                ((__local int64_t *) mem_37535)[sext_i32_i64(local_tid_38907)] =
                    x_35144;
                ((__local int64_t *) mem_37537)[sext_i32_i64(local_tid_38907)] =
                    x_35145;
                ((__local int64_t *) mem_37539)[sext_i32_i64(local_tid_38907)] =
                    x_35146;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38907, 32) == 0) {
            ((__local int64_t *) mem_37533)[sext_i32_i64(local_tid_38907)] =
                x_35147;
            ((__local int64_t *) mem_37535)[sext_i32_i64(local_tid_38907)] =
                x_35148;
            ((__local int64_t *) mem_37537)[sext_i32_i64(local_tid_38907)] =
                x_35149;
            ((__local int64_t *) mem_37539)[sext_i32_i64(local_tid_38907)] =
                x_35150;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_35188 = ((__local int64_t *) mem_37533)[i_25211];
    int64_t res_35189 = ((__local int64_t *) mem_37535)[i_25211];
    int64_t res_35190 = ((__local int64_t *) mem_37537)[i_25211];
    __local char *mem_37543;
    
    mem_37543 = (__local char *) mem_37543_backing_5;
    ((__local float *) mem_37543)[sext_i32_i64(local_tid_38907)] = ((__global
                                                                     float *) mem_37529)[gtid_34225 +
                                                                                         sext_i32_i64(local_tid_38907) *
                                                                                         m_24797];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_34230 = sext_i32_i64(ltid_pre_38911);
    int32_t phys_tid_34231 = local_tid_38907;
    
    if (slt64(write_i_34230, iota32_arg_25183)) {
        int32_t x_35193 = ((__local int32_t *) mem_37541)[write_i_34230];
        float write_value_35198 = ((__global
                                    float *) mem_param_37524)[gtid_34225 *
                                                              iota32_arg_25183 +
                                                              write_i_34230];
        bool match_lit_35199 = 0 == x_35193;
        int64_t res_35200;
        
        if (match_lit_35199) {
            int64_t x_35194 = ((__local int64_t *) mem_37533)[write_i_34230];
            int64_t res_35201 = sub64(x_35194, 1);
            
            res_35200 = res_35201;
        } else {
            int64_t x_35195 = ((__local int64_t *) mem_37535)[write_i_34230];
            int64_t x_35196 = ((__local int64_t *) mem_37537)[write_i_34230];
            int64_t x_35197 = ((__local int64_t *) mem_37539)[write_i_34230];
            bool match_lit_35202 = 1 == x_35193;
            int64_t x_35203;
            
            if (match_lit_35202) {
                int64_t x_35204 = add64(res_35188, x_35195);
                int64_t res_35205 = sub64(x_35204, 1);
                
                x_35203 = res_35205;
            } else {
                bool match_lit_35206 = 2 == x_35193;
                int64_t x_35207;
                
                if (match_lit_35206) {
                    int64_t x_35208 = add64(res_35188, res_35189);
                    int64_t x_35209 = add64(x_35196, x_35208);
                    int64_t res_35210 = sub64(x_35209, 1);
                    
                    x_35207 = res_35210;
                } else {
                    int64_t x_35211 = add64(res_35188, res_35189);
                    int64_t x_35212 = add64(res_35190, x_35211);
                    int64_t x_35213 = add64(x_35197, x_35212);
                    int64_t res_35214 = sub64(x_35213, 1);
                    
                    x_35207 = res_35214;
                }
                x_35203 = x_35207;
            }
            res_35200 = x_35203;
        }
        if (sle64(0, res_35200) && slt64(res_35200, iota32_arg_25183)) {
            ((__local float *) mem_37543)[res_35200] = write_value_35198;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37547)[gtid_34225 * iota32_arg_25183 +
                                   sext_i32_i64(local_tid_38907)] = ((__local
                                                                      float *) mem_37543)[sext_i32_i64(local_tid_38907)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_35553(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_36997_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_36994_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_36975_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_36972_backing_aligned_3,
                                            int64_t m_24797, int64_t N_24798,
                                            int64_t res_24810,
                                            int64_t res_24816,
                                            int64_t num_groups_y_35551,
                                            int64_t num_whole_tiles_35569,
                                            int64_t residual_input_35719,
                                            unsigned char cond_35720, __global
                                            unsigned char *images_mem_36738,
                                            __global unsigned char *mem_36750,
                                            __global unsigned char *mem_37012)
{
    #define tile_sizze_35548 (mainzitile_sizze_35547)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36997_backing_7 = (__local volatile
                                                           char *) mem_36997_backing_aligned_0;
    __local volatile char *restrict mem_36994_backing_6 = (__local volatile
                                                           char *) mem_36994_backing_aligned_1;
    __local volatile char *restrict mem_36975_backing_1 = (__local volatile
                                                           char *) mem_36975_backing_aligned_2;
    __local volatile char *restrict mem_36972_backing_0 = (__local volatile
                                                           char *) mem_36972_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38043;
    int32_t local_tid_38044;
    int64_t group_sizze_38047;
    int32_t wave_sizze_38046;
    int32_t group_tid_38045;
    
    global_tid_38043 = get_global_id(0);
    local_tid_38044 = get_local_id(0);
    group_sizze_38047 = get_local_size(0);
    wave_sizze_38046 = LOCKSTEP_WIDTH;
    group_tid_38045 = get_group_id(0);
    
    int32_t gid_flat_35553;
    
    gid_flat_35553 = group_tid_38045;
    
    int32_t ltid_pre_38048;
    
    ltid_pre_38048 = squot32(local_tid_38044, sext_i64_i32(tile_sizze_35548));
    
    int32_t ltid_pre_38049;
    
    ltid_pre_38049 = local_tid_38044 - squot32(local_tid_38044,
                                               sext_i64_i32(tile_sizze_35548)) *
        sext_i64_i32(tile_sizze_35548);
    
    int64_t gid_x_35545;
    
    gid_x_35545 = squot64(sext_i32_i64(group_tid_38045), num_groups_y_35551);
    
    int64_t gid_y_35546;
    
    gid_y_35546 = sext_i32_i64(group_tid_38045) -
        squot64(sext_i32_i64(group_tid_38045), num_groups_y_35551) *
        num_groups_y_35551;
    
    float mem_36957[1];
    int64_t ltid_x_35570 = sext_i32_i64(ltid_pre_38048);
    int64_t ltid_y_35571 = sext_i32_i64(ltid_pre_38049);
    int32_t ltid_flat_35572 = local_tid_38044;
    
    if (slt64(ltid_x_35570, tile_sizze_35548) && slt64(ltid_y_35571,
                                                       tile_sizze_35548)) {
        mem_36957[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35669 = gid_x_35545 * tile_sizze_35548;
    int64_t binop_x_35671 = gid_y_35546 * tile_sizze_35548;
    __local char *mem_36972;
    
    mem_36972 = (__local char *) mem_36972_backing_0;
    
    __local char *mem_36975;
    
    mem_36975 = (__local char *) mem_36975_backing_1;
    
    float accs_mem_36990[1];
    float mem_param_36965[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_36965[i_2] = mem_36957[i_2];
    for (int64_t tile_id_35581 = 0; tile_id_35581 < num_whole_tiles_35569;
         tile_id_35581++) {
        int64_t binop_x_35665 = tile_sizze_35548 * tile_id_35581;
        int64_t ltid_x_35582 = sext_i32_i64(ltid_pre_38048);
        int64_t ltid_y_35583 = sext_i32_i64(ltid_pre_38049);
        int32_t ltid_flat_35584 = local_tid_38044;
        int64_t i_35666 = ltid_x_35582 + binop_x_35665;
        int64_t j_35668 = ltid_y_35583 + binop_x_35665;
        int64_t gtid_35670 = ltid_x_35582 + binop_x_35669;
        int64_t gtid_35672 = ltid_y_35583 + binop_x_35671;
        bool binop_x_35675 = slt64(i_35666, res_24810);
        bool binop_y_35676 = slt64(gtid_35672, res_24816);
        bool cond_35677 = binop_x_35675 && binop_y_35676;
        float pre_35678;
        
        if (cond_35677) {
            float x_35679 = ((__global float *) mem_36750)[i_35666 * res_24816 +
                                                           gtid_35672];
            
            pre_35678 = x_35679;
        } else {
            pre_35678 = 0.0F;
        }
        
        bool binop_x_35681 = slt64(j_35668, res_24810);
        bool binop_y_35682 = slt64(gtid_35670, m_24797);
        bool cond_35683 = binop_x_35681 && binop_y_35682;
        float pre_35684;
        
        if (cond_35683) {
            float x_35685 = ((__global float *) images_mem_36738)[gtid_35670 *
                                                                  N_24798 +
                                                                  j_35668];
            
            pre_35684 = x_35685;
        } else {
            pre_35684 = 0.0F;
        }
        ((__local float *) mem_36972)[ltid_x_35582 * tile_sizze_35548 +
                                      ltid_y_35583] = pre_35678;
        ((__local float *) mem_36975)[ltid_x_35582 * tile_sizze_35548 +
                                      ltid_y_35583] = pre_35684;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_36979[1];
        int64_t ltid_x_35627 = sext_i32_i64(ltid_pre_38048);
        int64_t ltid_y_35628 = sext_i32_i64(ltid_pre_38049);
        int32_t ltid_flat_35629 = local_tid_38044;
        int64_t gtid_35689 = ltid_x_35627 + binop_x_35669;
        int64_t gtid_35691 = ltid_y_35628 + binop_x_35671;
        float acc_35694 = mem_param_36965[0];
        bool binop_x_35697 = slt64(gtid_35689, m_24797);
        bool binop_y_35698 = slt64(gtid_35691, res_24816);
        bool cond_35699 = binop_x_35697 && binop_y_35698;
        float acc_35700;
        
        if (cond_35699) {
            float x_35701;
            float redout_36625 = acc_35694;
            
            for (int64_t i_36626 = 0; i_36626 < tile_sizze_35548; i_36626++) {
                float x_35706 = ((__local float *) mem_36975)[ltid_x_35627 *
                                                              tile_sizze_35548 +
                                                              i_36626];
                bool res_35707;
                
                res_35707 = futrts_isnan32(x_35706);
                
                float res_35708;
                
                if (res_35707) {
                    res_35708 = 0.0F;
                } else {
                    float x_35705 = ((__local float *) mem_36972)[i_36626 *
                                                                  tile_sizze_35548 +
                                                                  ltid_y_35628];
                    float res_35709 = x_35705 * x_35706;
                    
                    res_35708 = res_35709;
                }
                
                float res_35704 = res_35708 + redout_36625;
                float redout_tmp_38052 = res_35704;
                
                redout_36625 = redout_tmp_38052;
            }
            x_35701 = redout_36625;
            acc_35700 = x_35701;
        } else {
            acc_35700 = acc_35694;
        }
        mem_36979[0] = acc_35700;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38050[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_38050[i_3] = mem_36979[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_36965[i_4] = mem_param_tmp_38050[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_36990[i_5] = mem_param_36965[i_5];
    
    __local char *mem_36994;
    
    mem_36994 = (__local char *) mem_36994_backing_6;
    
    __local char *mem_36997;
    
    mem_36997 = (__local char *) mem_36997_backing_7;
    
    float mem_37001[1];
    float mem_37666[1];
    
    if (cond_35720) {
        mem_37666[0] = accs_mem_36990[0];
    } else {
        int64_t binop_x_35806 = tile_sizze_35548 * num_whole_tiles_35569;
        int64_t ltid_x_35721 = sext_i32_i64(ltid_pre_38048);
        int64_t ltid_y_35722 = sext_i32_i64(ltid_pre_38049);
        int32_t ltid_flat_35723 = local_tid_38044;
        int64_t i_35807 = ltid_x_35721 + binop_x_35806;
        int64_t j_35809 = ltid_y_35722 + binop_x_35806;
        int64_t gtid_35811 = binop_x_35669 + ltid_x_35721;
        int64_t gtid_35813 = binop_x_35671 + ltid_y_35722;
        bool binop_x_35816 = slt64(i_35807, res_24810);
        bool binop_y_35817 = slt64(gtid_35813, res_24816);
        bool cond_35818 = binop_x_35816 && binop_y_35817;
        float pre_35819;
        
        if (cond_35818) {
            float x_35820 = ((__global float *) mem_36750)[i_35807 * res_24816 +
                                                           gtid_35813];
            
            pre_35819 = x_35820;
        } else {
            pre_35819 = 0.0F;
        }
        
        bool binop_x_35822 = slt64(j_35809, res_24810);
        bool binop_y_35823 = slt64(gtid_35811, m_24797);
        bool cond_35824 = binop_x_35822 && binop_y_35823;
        float pre_35825;
        
        if (cond_35824) {
            float x_35826 = ((__global float *) images_mem_36738)[gtid_35811 *
                                                                  N_24798 +
                                                                  j_35809];
            
            pre_35825 = x_35826;
        } else {
            pre_35825 = 0.0F;
        }
        ((__local float *) mem_36994)[ltid_x_35721 * tile_sizze_35548 +
                                      ltid_y_35722] = pre_35819;
        ((__local float *) mem_36997)[ltid_x_35721 * tile_sizze_35548 +
                                      ltid_y_35722] = pre_35825;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_35768 = sext_i32_i64(ltid_pre_38048);
        int64_t ltid_y_35769 = sext_i32_i64(ltid_pre_38049);
        int32_t ltid_flat_35770 = local_tid_38044;
        int64_t gtid_35832 = binop_x_35669 + ltid_x_35768;
        int64_t gtid_35834 = binop_x_35671 + ltid_y_35769;
        float acc_35837 = accs_mem_36990[0];
        bool binop_x_35840 = slt64(gtid_35832, m_24797);
        bool binop_y_35841 = slt64(gtid_35834, res_24816);
        bool cond_35842 = binop_x_35840 && binop_y_35841;
        float acc_35843;
        
        if (cond_35842) {
            float x_35844;
            float redout_36627 = acc_35837;
            
            for (int64_t i_36628 = 0; i_36628 < residual_input_35719;
                 i_36628++) {
                float x_35849 = ((__local float *) mem_36997)[ltid_x_35768 *
                                                              tile_sizze_35548 +
                                                              i_36628];
                bool res_35850;
                
                res_35850 = futrts_isnan32(x_35849);
                
                float res_35851;
                
                if (res_35850) {
                    res_35851 = 0.0F;
                } else {
                    float x_35848 = ((__local float *) mem_36994)[i_36628 *
                                                                  tile_sizze_35548 +
                                                                  ltid_y_35769];
                    float res_35852 = x_35848 * x_35849;
                    
                    res_35851 = res_35852;
                }
                
                float res_35847 = res_35851 + redout_36627;
                float redout_tmp_38053 = res_35847;
                
                redout_36627 = redout_tmp_38053;
            }
            x_35844 = redout_36627;
            acc_35843 = x_35844;
        } else {
            acc_35843 = acc_35837;
        }
        mem_37001[0] = acc_35843;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37666[0] = mem_37001[0];
    }
    
    int64_t thread_out_index_38054 = gid_x_35545 * tile_sizze_35548 +
            sext_i32_i64(ltid_pre_38048);
    int64_t thread_out_index_38055 = gid_y_35546 * tile_sizze_35548 +
            sext_i32_i64(ltid_pre_38049);
    
    if (slt64(thread_out_index_38054, m_24797) && slt64(thread_out_index_38055,
                                                        res_24816)) {
        ((__global float *) mem_37012)[thread_out_index_38054 * res_24816 +
                                       thread_out_index_38055] = mem_37666[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35548
}
__kernel void mainzisegmap_intragroup_35875(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37134_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37131_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37112_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37109_backing_aligned_3,
                                            int64_t N_24796, int64_t m_24797,
                                            int64_t res_24816,
                                            int64_t num_groups_y_35873,
                                            int64_t num_whole_tiles_35891,
                                            int64_t residual_input_36035,
                                            unsigned char cond_36036, __global
                                            unsigned char *res_mem_37065,
                                            __global unsigned char *mem_37089,
                                            __global unsigned char *mem_37149)
{
    #define tile_sizze_35870 (mainzitile_sizze_35869)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37134_backing_7 = (__local volatile
                                                           char *) mem_37134_backing_aligned_0;
    __local volatile char *restrict mem_37131_backing_6 = (__local volatile
                                                           char *) mem_37131_backing_aligned_1;
    __local volatile char *restrict mem_37112_backing_1 = (__local volatile
                                                           char *) mem_37112_backing_aligned_2;
    __local volatile char *restrict mem_37109_backing_0 = (__local volatile
                                                           char *) mem_37109_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38212;
    int32_t local_tid_38213;
    int64_t group_sizze_38216;
    int32_t wave_sizze_38215;
    int32_t group_tid_38214;
    
    global_tid_38212 = get_global_id(0);
    local_tid_38213 = get_local_id(0);
    group_sizze_38216 = get_local_size(0);
    wave_sizze_38215 = LOCKSTEP_WIDTH;
    group_tid_38214 = get_group_id(0);
    
    int32_t gid_flat_35875;
    
    gid_flat_35875 = group_tid_38214;
    
    int32_t ltid_pre_38217;
    
    ltid_pre_38217 = squot32(local_tid_38213, sext_i64_i32(tile_sizze_35870));
    
    int32_t ltid_pre_38218;
    
    ltid_pre_38218 = local_tid_38213 - squot32(local_tid_38213,
                                               sext_i64_i32(tile_sizze_35870)) *
        sext_i64_i32(tile_sizze_35870);
    
    int64_t gid_x_35867;
    
    gid_x_35867 = squot64(sext_i32_i64(group_tid_38214), num_groups_y_35873);
    
    int64_t gid_y_35868;
    
    gid_y_35868 = sext_i32_i64(group_tid_38214) -
        squot64(sext_i32_i64(group_tid_38214), num_groups_y_35873) *
        num_groups_y_35873;
    
    float mem_37094[1];
    int64_t ltid_x_35892 = sext_i32_i64(ltid_pre_38217);
    int64_t ltid_y_35893 = sext_i32_i64(ltid_pre_38218);
    int32_t ltid_flat_35894 = local_tid_38213;
    
    if (slt64(ltid_x_35892, tile_sizze_35870) && slt64(ltid_y_35893,
                                                       tile_sizze_35870)) {
        mem_37094[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35989 = gid_x_35867 * tile_sizze_35870;
    int64_t binop_x_35991 = gid_y_35868 * tile_sizze_35870;
    __local char *mem_37109;
    
    mem_37109 = (__local char *) mem_37109_backing_0;
    
    __local char *mem_37112;
    
    mem_37112 = (__local char *) mem_37112_backing_1;
    
    float accs_mem_37127[1];
    float mem_param_37102[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_37102[i_2] = mem_37094[i_2];
    for (int64_t tile_id_35903 = 0; tile_id_35903 < num_whole_tiles_35891;
         tile_id_35903++) {
        int64_t binop_x_35985 = tile_sizze_35870 * tile_id_35903;
        int64_t ltid_x_35904 = sext_i32_i64(ltid_pre_38217);
        int64_t ltid_y_35905 = sext_i32_i64(ltid_pre_38218);
        int32_t ltid_flat_35906 = local_tid_38213;
        int64_t i_35986 = ltid_x_35904 + binop_x_35985;
        int64_t j_35988 = ltid_y_35905 + binop_x_35985;
        int64_t gtid_35990 = ltid_x_35904 + binop_x_35989;
        int64_t gtid_35992 = ltid_y_35905 + binop_x_35991;
        bool binop_x_35995 = slt64(j_35988, res_24816);
        bool binop_y_35996 = slt64(gtid_35990, m_24797);
        bool cond_35997 = binop_x_35995 && binop_y_35996;
        float pre_35998;
        
        if (cond_35997) {
            float x_35999 = ((__global float *) res_mem_37065)[gtid_35990 *
                                                               res_24816 +
                                                               j_35988];
            
            pre_35998 = x_35999;
        } else {
            pre_35998 = 0.0F;
        }
        
        bool binop_x_36001 = slt64(i_35986, res_24816);
        bool binop_y_36002 = slt64(gtid_35992, N_24796);
        bool cond_36003 = binop_x_36001 && binop_y_36002;
        float pre_36004;
        
        if (cond_36003) {
            float x_36005 = ((__global float *) mem_37089)[i_35986 * N_24796 +
                                                           gtid_35992];
            
            pre_36004 = x_36005;
        } else {
            pre_36004 = 0.0F;
        }
        ((__local float *) mem_37109)[ltid_x_35904 * tile_sizze_35870 +
                                      ltid_y_35905] = pre_35998;
        ((__local float *) mem_37112)[ltid_x_35904 * tile_sizze_35870 +
                                      ltid_y_35905] = pre_36004;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37116[1];
        int64_t ltid_x_35949 = sext_i32_i64(ltid_pre_38217);
        int64_t ltid_y_35950 = sext_i32_i64(ltid_pre_38218);
        int32_t ltid_flat_35951 = local_tid_38213;
        int64_t gtid_36009 = ltid_x_35949 + binop_x_35989;
        int64_t gtid_36011 = ltid_y_35950 + binop_x_35991;
        float acc_36014 = mem_param_37102[0];
        bool binop_x_36017 = slt64(gtid_36009, m_24797);
        bool binop_y_36018 = slt64(gtid_36011, N_24796);
        bool cond_36019 = binop_x_36017 && binop_y_36018;
        float acc_36020;
        
        if (cond_36019) {
            float x_36021;
            float redout_36643 = acc_36014;
            
            for (int64_t i_36644 = 0; i_36644 < tile_sizze_35870; i_36644++) {
                float x_36025 = ((__local float *) mem_37109)[ltid_x_35949 *
                                                              tile_sizze_35870 +
                                                              i_36644];
                float x_36026 = ((__local float *) mem_37112)[i_36644 *
                                                              tile_sizze_35870 +
                                                              ltid_y_35950];
                float res_36027 = x_36025 * x_36026;
                float res_36024 = res_36027 + redout_36643;
                float redout_tmp_38221 = res_36024;
                
                redout_36643 = redout_tmp_38221;
            }
            x_36021 = redout_36643;
            acc_36020 = x_36021;
        } else {
            acc_36020 = acc_36014;
        }
        mem_37116[0] = acc_36020;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38219[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_38219[i_3] = mem_37116[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_37102[i_4] = mem_param_tmp_38219[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_37127[i_5] = mem_param_37102[i_5];
    
    __local char *mem_37131;
    
    mem_37131 = (__local char *) mem_37131_backing_6;
    
    __local char *mem_37134;
    
    mem_37134 = (__local char *) mem_37134_backing_7;
    
    float mem_37138[1];
    float mem_37678[1];
    
    if (cond_36036) {
        mem_37678[0] = accs_mem_37127[0];
    } else {
        int64_t binop_x_36120 = tile_sizze_35870 * num_whole_tiles_35891;
        int64_t ltid_x_36037 = sext_i32_i64(ltid_pre_38217);
        int64_t ltid_y_36038 = sext_i32_i64(ltid_pre_38218);
        int32_t ltid_flat_36039 = local_tid_38213;
        int64_t i_36121 = ltid_x_36037 + binop_x_36120;
        int64_t j_36123 = ltid_y_36038 + binop_x_36120;
        int64_t gtid_36125 = binop_x_35989 + ltid_x_36037;
        int64_t gtid_36127 = binop_x_35991 + ltid_y_36038;
        bool binop_x_36130 = slt64(j_36123, res_24816);
        bool binop_y_36131 = slt64(gtid_36125, m_24797);
        bool cond_36132 = binop_x_36130 && binop_y_36131;
        float pre_36133;
        
        if (cond_36132) {
            float x_36134 = ((__global float *) res_mem_37065)[gtid_36125 *
                                                               res_24816 +
                                                               j_36123];
            
            pre_36133 = x_36134;
        } else {
            pre_36133 = 0.0F;
        }
        
        bool binop_x_36136 = slt64(i_36121, res_24816);
        bool binop_y_36137 = slt64(gtid_36127, N_24796);
        bool cond_36138 = binop_x_36136 && binop_y_36137;
        float pre_36139;
        
        if (cond_36138) {
            float x_36140 = ((__global float *) mem_37089)[i_36121 * N_24796 +
                                                           gtid_36127];
            
            pre_36139 = x_36140;
        } else {
            pre_36139 = 0.0F;
        }
        ((__local float *) mem_37131)[ltid_x_36037 * tile_sizze_35870 +
                                      ltid_y_36038] = pre_36133;
        ((__local float *) mem_37134)[ltid_x_36037 * tile_sizze_35870 +
                                      ltid_y_36038] = pre_36139;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_36084 = sext_i32_i64(ltid_pre_38217);
        int64_t ltid_y_36085 = sext_i32_i64(ltid_pre_38218);
        int32_t ltid_flat_36086 = local_tid_38213;
        int64_t gtid_36146 = binop_x_35989 + ltid_x_36084;
        int64_t gtid_36148 = binop_x_35991 + ltid_y_36085;
        float acc_36151 = accs_mem_37127[0];
        bool binop_x_36154 = slt64(gtid_36146, m_24797);
        bool binop_y_36155 = slt64(gtid_36148, N_24796);
        bool cond_36156 = binop_x_36154 && binop_y_36155;
        float acc_36157;
        
        if (cond_36156) {
            float x_36158;
            float redout_36645 = acc_36151;
            
            for (int64_t i_36646 = 0; i_36646 < residual_input_36035;
                 i_36646++) {
                float x_36162 = ((__local float *) mem_37131)[ltid_x_36084 *
                                                              tile_sizze_35870 +
                                                              i_36646];
                float x_36163 = ((__local float *) mem_37134)[i_36646 *
                                                              tile_sizze_35870 +
                                                              ltid_y_36085];
                float res_36164 = x_36162 * x_36163;
                float res_36161 = res_36164 + redout_36645;
                float redout_tmp_38222 = res_36161;
                
                redout_36645 = redout_tmp_38222;
            }
            x_36158 = redout_36645;
            acc_36157 = x_36158;
        } else {
            acc_36157 = acc_36151;
        }
        mem_37138[0] = acc_36157;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37678[0] = mem_37138[0];
    }
    
    int64_t thread_out_index_38223 = gid_x_35867 * tile_sizze_35870 +
            sext_i32_i64(ltid_pre_38217);
    int64_t thread_out_index_38224 = gid_y_35868 * tile_sizze_35870 +
            sext_i32_i64(ltid_pre_38218);
    
    if (slt64(thread_out_index_38223, m_24797) && slt64(thread_out_index_38224,
                                                        N_24796)) {
        ((__global float *) mem_37149)[thread_out_index_38223 * N_24796 +
                                       thread_out_index_38224] = mem_37678[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35870
}
__kernel void mainzisegmap_intragroup_36180(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37231_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37218_backing_aligned_1,
                                            int64_t m_24797, int32_t n_24801,
                                            float hfrac_24803,
                                            int64_t res_24810,
                                            int32_t k2p2_24812,
                                            int64_t num_whole_tiles_36188,
                                            int64_t residual_input_36309,
                                            unsigned char cond_36310, __global
                                            unsigned char *mem_37201, __global
                                            unsigned char *mem_37204, __global
                                            unsigned char *mem_37248, __global
                                            unsigned char *mem_37250, __global
                                            unsigned char *mem_37252)
{
    #define segmap_group_sizze_33035 (mainzisegmap_group_sizze_33004)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37231_backing_5 = (__local volatile
                                                           char *) mem_37231_backing_aligned_0;
    __local volatile char *restrict mem_37218_backing_0 = (__local volatile
                                                           char *) mem_37218_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38392;
    int32_t local_tid_38393;
    int64_t group_sizze_38396;
    int32_t wave_sizze_38395;
    int32_t group_tid_38394;
    
    global_tid_38392 = get_global_id(0);
    local_tid_38393 = get_local_id(0);
    group_sizze_38396 = get_local_size(0);
    wave_sizze_38395 = LOCKSTEP_WIDTH;
    group_tid_38394 = get_group_id(0);
    
    int32_t gid_flat_36180;
    
    gid_flat_36180 = group_tid_38394;
    
    int32_t ltid_pre_38397;
    
    ltid_pre_38397 = local_tid_38393;
    
    int64_t gid_36179;
    
    gid_36179 = sext_i32_i64(group_tid_38394);
    
    float mem_37208[1];
    int64_t ltid_36189 = sext_i32_i64(ltid_pre_38397);
    int32_t ltid_flat_36190 = local_tid_38393;
    
    if (slt64(ltid_36189, segmap_group_sizze_33035)) {
        mem_37208[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_36275 = segmap_group_sizze_33035 * gid_36179;
    __local char *mem_37218;
    
    mem_37218 = (__local char *) mem_37218_backing_0;
    
    float accs_mem_37228[1];
    float mem_param_37213[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37213[i_1] = mem_37208[i_1];
    for (int64_t tile_id_36196 = 0; tile_id_36196 < num_whole_tiles_36188;
         tile_id_36196++) {
        int64_t binop_x_36257 = segmap_group_sizze_33035 * tile_id_36196;
        int64_t ltid_36197 = sext_i32_i64(ltid_pre_38397);
        int32_t ltid_flat_36198 = local_tid_38393;
        
        if (slt64(ltid_36197, segmap_group_sizze_33035)) {
            int64_t j_36258 = ltid_36197 + binop_x_36257;
            bool cond_36270 = slt64(j_36258, res_24810);
            int32_t pre_36271;
            
            if (cond_36270) {
                int32_t index_primexp_36595 = sext_i64_i32(j_36258);
                
                pre_36271 = index_primexp_36595;
            } else {
                pre_36271 = 0;
            }
            ((__local int32_t *) mem_37218)[ltid_36197] = pre_36271;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37221[1];
        int64_t ltid_36224 = sext_i32_i64(ltid_pre_38397);
        int32_t ltid_flat_36225 = local_tid_38393;
        
        if (slt64(ltid_36224, segmap_group_sizze_33035)) {
            int64_t gtid_36276 = ltid_36224 + binop_x_36275;
            int32_t res_36278;
            int32_t redout_36647 = 0;
            
            for (int32_t i_36725 = 0; i_36725 < n_24801; i_36725++) {
                int64_t i_36648 = sext_i32_i64(i_36725);
                float x_36282 = ((__global float *) mem_37201)[i_36648 *
                                                               m_24797 +
                                                               gtid_36276];
                bool res_36283;
                
                res_36283 = futrts_isnan32(x_36282);
                
                bool cond_36284 = !res_36283;
                int32_t res_36285 = btoi_bool_i32(cond_36284);
                int32_t res_36281 = add32(res_36285, redout_36647);
                int32_t redout_tmp_38400 = res_36281;
                
                redout_36647 = redout_tmp_38400;
            }
            res_36278 = redout_36647;
            
            float acc_36286 = mem_param_37213[0];
            bool cond_36287 = slt64(gtid_36276, m_24797);
            float acc_36288;
            
            if (cond_36287) {
                float x_36289;
                float redout_36649 = acc_36286;
                
                for (int64_t i_36650 = 0; i_36650 < segmap_group_sizze_33035;
                     i_36650++) {
                    int32_t x_36293 = ((__local int32_t *) mem_37218)[i_36650];
                    bool cond_36294 = slt32(x_36293, res_36278);
                    float res_36295;
                    
                    if (cond_36294) {
                        int64_t i_36296 = sext_i32_i64(x_36293);
                        float res_36297 = ((__global
                                            float *) mem_37204)[i_36296 *
                                                                m_24797 +
                                                                gtid_36276];
                        
                        res_36295 = res_36297;
                    } else {
                        res_36295 = 0.0F;
                    }
                    
                    float res_36298 = res_36295 * res_36295;
                    float res_36292 = res_36298 + redout_36649;
                    float redout_tmp_38401 = res_36292;
                    
                    redout_36649 = redout_tmp_38401;
                }
                x_36289 = redout_36649;
                acc_36288 = x_36289;
            } else {
                acc_36288 = acc_36286;
            }
            mem_37221[0] = acc_36288;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38398[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38398[i_2] = mem_37221[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37213[i_3] = mem_param_tmp_38398[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37228[i_4] = mem_param_37213[i_4];
    
    __local char *mem_37231;
    
    mem_37231 = (__local char *) mem_37231_backing_5;
    
    float mem_37234[1];
    float mem_37687[1];
    
    if (cond_36310) {
        mem_37687[0] = accs_mem_37228[0];
    } else {
        int64_t binop_x_36320 = segmap_group_sizze_33035 *
                num_whole_tiles_36188;
        int64_t ltid_36311 = sext_i32_i64(ltid_pre_38397);
        int32_t ltid_flat_36312 = local_tid_38393;
        
        if (slt64(ltid_36311, segmap_group_sizze_33035)) {
            int64_t j_36321 = ltid_36311 + binop_x_36320;
            bool cond_36333 = slt64(j_36321, res_24810);
            int32_t pre_36334;
            
            if (cond_36333) {
                int32_t index_primexp_36596 = sext_i64_i32(j_36321);
                
                pre_36334 = index_primexp_36596;
            } else {
                pre_36334 = 0;
            }
            ((__local int32_t *) mem_37231)[ltid_36311] = pre_36334;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36339 = sext_i32_i64(ltid_pre_38397);
        int32_t ltid_flat_36340 = local_tid_38393;
        
        if (slt64(ltid_36339, segmap_group_sizze_33035)) {
            int64_t gtid_36347 = binop_x_36275 + ltid_36339;
            int32_t res_36349;
            int32_t redout_36651 = 0;
            
            for (int32_t i_36726 = 0; i_36726 < n_24801; i_36726++) {
                int64_t i_36652 = sext_i32_i64(i_36726);
                float x_36353 = ((__global float *) mem_37201)[i_36652 *
                                                               m_24797 +
                                                               gtid_36347];
                bool res_36354;
                
                res_36354 = futrts_isnan32(x_36353);
                
                bool cond_36355 = !res_36354;
                int32_t res_36356 = btoi_bool_i32(cond_36355);
                int32_t res_36352 = add32(res_36356, redout_36651);
                int32_t redout_tmp_38402 = res_36352;
                
                redout_36651 = redout_tmp_38402;
            }
            res_36349 = redout_36651;
            
            float acc_36357 = accs_mem_37228[0];
            bool cond_36358 = slt64(gtid_36347, m_24797);
            float acc_36359;
            
            if (cond_36358) {
                float x_36360;
                float redout_36653 = acc_36357;
                
                for (int64_t i_36654 = 0; i_36654 < residual_input_36309;
                     i_36654++) {
                    int32_t x_36364 = ((__local int32_t *) mem_37231)[i_36654];
                    bool cond_36365 = slt32(x_36364, res_36349);
                    float res_36366;
                    
                    if (cond_36365) {
                        int64_t i_36367 = sext_i32_i64(x_36364);
                        float res_36368 = ((__global
                                            float *) mem_37204)[i_36367 *
                                                                m_24797 +
                                                                gtid_36347];
                        
                        res_36366 = res_36368;
                    } else {
                        res_36366 = 0.0F;
                    }
                    
                    float res_36369 = res_36366 * res_36366;
                    float res_36363 = res_36369 + redout_36653;
                    float redout_tmp_38403 = res_36363;
                    
                    redout_36653 = redout_tmp_38403;
                }
                x_36360 = redout_36653;
                acc_36359 = x_36360;
            } else {
                acc_36359 = acc_36357;
            }
            mem_37234[0] = acc_36359;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37687[0] = mem_37234[0];
    }
    
    int32_t mem_37242[1];
    int32_t mem_37244[1];
    float mem_37246[1];
    int64_t ltid_36372 = sext_i32_i64(ltid_pre_38397);
    int32_t ltid_flat_36373 = local_tid_38393;
    
    if (slt64(ltid_36372, segmap_group_sizze_33035)) {
        int64_t gtid_36383 = binop_x_36275 + ltid_36372;
        bool cond_36385 = slt64(gtid_36383, m_24797);
        int32_t postlude_36386;
        int32_t postlude_36387;
        float postlude_36388;
        
        if (cond_36385) {
            float res_36384 = mem_37687[0];
            int32_t res_36390;
            int32_t redout_36655 = 0;
            
            for (int32_t i_36727 = 0; i_36727 < n_24801; i_36727++) {
                int64_t i_36656 = sext_i32_i64(i_36727);
                float x_36394 = ((__global float *) mem_37201)[i_36656 *
                                                               m_24797 +
                                                               gtid_36383];
                bool res_36395;
                
                res_36395 = futrts_isnan32(x_36394);
                
                bool cond_36396 = !res_36395;
                int32_t res_36397 = btoi_bool_i32(cond_36396);
                int32_t res_36393 = add32(res_36397, redout_36655);
                int32_t redout_tmp_38404 = res_36393;
                
                redout_36655 = redout_tmp_38404;
            }
            res_36390 = redout_36655;
            
            int32_t r32_arg_36398 = sub32(res_36390, k2p2_24812);
            float res_36399 = sitofp_i32_f32(r32_arg_36398);
            float sqrt_arg_36400 = res_36384 / res_36399;
            float res_36401;
            
            res_36401 = futrts_sqrt32(sqrt_arg_36400);
            
            float res_36402 = sitofp_i32_f32(res_36390);
            float t32_arg_36403 = hfrac_24803 * res_36402;
            int32_t res_36404 = fptosi_f32_i32(t32_arg_36403);
            
            postlude_36386 = res_36404;
            postlude_36387 = res_36390;
            postlude_36388 = res_36401;
        } else {
            postlude_36386 = 0;
            postlude_36387 = 0;
            postlude_36388 = 0.0F;
        }
        mem_37242[0] = postlude_36386;
        mem_37244[0] = postlude_36387;
        mem_37246[0] = postlude_36388;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_38393) + segmap_group_sizze_33035 *
              sext_i32_i64(group_tid_38394), m_24797)) {
        ((__global int32_t *) mem_37248)[sext_i32_i64(local_tid_38393) +
                                         segmap_group_sizze_33035 *
                                         sext_i32_i64(group_tid_38394)] =
            mem_37242[0];
    }
    if (slt64(sext_i32_i64(local_tid_38393) + segmap_group_sizze_33035 *
              sext_i32_i64(group_tid_38394), m_24797)) {
        ((__global int32_t *) mem_37250)[sext_i32_i64(local_tid_38393) +
                                         segmap_group_sizze_33035 *
                                         sext_i32_i64(group_tid_38394)] =
            mem_37244[0];
    }
    if (slt64(sext_i32_i64(local_tid_38393) + segmap_group_sizze_33035 *
              sext_i32_i64(group_tid_38394), m_24797)) {
        ((__global float *) mem_37252)[sext_i32_i64(local_tid_38393) +
                                       segmap_group_sizze_33035 *
                                       sext_i32_i64(group_tid_38394)] =
            mem_37246[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_33035
}
__kernel void mainzisegmap_intragroup_36412(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37313_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37300_backing_aligned_1,
                                            int64_t N_24796, int64_t m_24797,
                                            int64_t res_25158,
                                            int64_t num_whole_tiles_36432,
                                            int64_t residual_input_36531,
                                            unsigned char cond_36532, __global
                                            unsigned char *res_mem_37197,
                                            __global
                                            unsigned char *res_mem_37276,
                                            __global
                                            unsigned char *res_mem_37277,
                                            __global unsigned char *mem_37323)
{
    #define segmap_group_sizze_33272 (mainzisegmap_group_sizze_33253)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37313_backing_5 = (__local volatile
                                                           char *) mem_37313_backing_aligned_0;
    __local volatile char *restrict mem_37300_backing_0 = (__local volatile
                                                           char *) mem_37300_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38578;
    int32_t local_tid_38579;
    int64_t group_sizze_38582;
    int32_t wave_sizze_38581;
    int32_t group_tid_38580;
    
    global_tid_38578 = get_global_id(0);
    local_tid_38579 = get_local_id(0);
    group_sizze_38582 = get_local_size(0);
    wave_sizze_38581 = LOCKSTEP_WIDTH;
    group_tid_38580 = get_group_id(0);
    
    int32_t gid_flat_36412;
    
    gid_flat_36412 = group_tid_38580;
    
    int32_t ltid_pre_38583;
    
    ltid_pre_38583 = local_tid_38579;
    
    int64_t gid_36411;
    
    gid_36411 = sext_i32_i64(group_tid_38580);
    
    int64_t binop_x_36421;
    
    binop_x_36421 = segmap_group_sizze_33272 * gid_36411;
    
    int32_t mem_37285[1];
    int32_t mem_37287[1];
    int64_t ltid_36413 = sext_i32_i64(ltid_pre_38583);
    int32_t ltid_flat_36414 = local_tid_38579;
    
    if (slt64(ltid_36413, segmap_group_sizze_33272)) {
        int64_t gtid_36422 = ltid_36413 + binop_x_36421;
        bool cond_36423 = slt64(gtid_36422, m_24797);
        int32_t pre_36424;
        int32_t pre_36425;
        
        if (cond_36423) {
            int32_t x_36426 = ((__global int32_t *) res_mem_37277)[gtid_36422];
            int32_t x_36427 = ((__global int32_t *) res_mem_37276)[gtid_36422];
            
            pre_36424 = x_36426;
            pre_36425 = x_36427;
        } else {
            pre_36424 = 0;
            pre_36425 = 0;
        }
        mem_37285[0] = pre_36424;
        mem_37287[0] = pre_36425;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float mem_37290[1];
    int64_t ltid_36433 = sext_i32_i64(ltid_pre_38583);
    int32_t ltid_flat_36434 = local_tid_38579;
    
    if (slt64(ltid_36433, segmap_group_sizze_33272)) {
        mem_37290[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37300;
    
    mem_37300 = (__local char *) mem_37300_backing_0;
    
    float accs_mem_37310[1];
    float mem_param_37295[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37295[i_1] = mem_37290[i_1];
    for (int64_t tile_id_36440 = 0; tile_id_36440 < num_whole_tiles_36432;
         tile_id_36440++) {
        int64_t binop_x_36489 = segmap_group_sizze_33272 * tile_id_36440;
        int64_t ltid_36441 = sext_i32_i64(ltid_pre_38583);
        int32_t ltid_flat_36442 = local_tid_38579;
        
        if (slt64(ltid_36441, segmap_group_sizze_33272)) {
            int64_t j_36490 = ltid_36441 + binop_x_36489;
            bool cond_36495 = slt64(j_36490, res_25158);
            int32_t pre_36496;
            
            if (cond_36495) {
                int32_t index_primexp_36597 = sext_i64_i32(j_36490);
                int32_t tile_elem_36497 = index_primexp_36597;
                
                pre_36496 = tile_elem_36497;
            } else {
                pre_36496 = 0;
            }
            ((__local int32_t *) mem_37300)[ltid_36441] = pre_36496;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37303[1];
        int64_t ltid_36461 = sext_i32_i64(ltid_pre_38583);
        int32_t ltid_flat_36462 = local_tid_38579;
        
        if (slt64(ltid_36461, segmap_group_sizze_33272)) {
            int64_t gtid_36501 = binop_x_36421 + ltid_36461;
            float acc_36504 = mem_param_37295[0];
            bool cond_36505 = slt64(gtid_36501, m_24797);
            float acc_36506;
            
            if (cond_36505) {
                int32_t x_36502 = mem_37285[0];
                int32_t x_36503 = mem_37287[0];
                float x_36507;
                float redout_36657 = acc_36504;
                
                for (int64_t i_36658 = 0; i_36658 < segmap_group_sizze_33272;
                     i_36658++) {
                    int32_t x_36511 = ((__local int32_t *) mem_37300)[i_36658];
                    bool cond_36512 = slt32(x_36511, x_36503);
                    float res_36513;
                    
                    if (cond_36512) {
                        int32_t x_36514 = add32(x_36502, x_36511);
                        int32_t x_36515 = sub32(x_36514, x_36503);
                        int32_t i_36516 = add32(1, x_36515);
                        int64_t i_36517 = sext_i32_i64(i_36516);
                        float res_36518 = ((__global
                                            float *) res_mem_37197)[gtid_36501 *
                                                                    N_24796 +
                                                                    i_36517];
                        
                        res_36513 = res_36518;
                    } else {
                        res_36513 = 0.0F;
                    }
                    
                    float res_36510 = res_36513 + redout_36657;
                    float redout_tmp_38586 = res_36510;
                    
                    redout_36657 = redout_tmp_38586;
                }
                x_36507 = redout_36657;
                acc_36506 = x_36507;
            } else {
                acc_36506 = acc_36504;
            }
            mem_37303[0] = acc_36506;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38584[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38584[i_2] = mem_37303[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37295[i_3] = mem_param_tmp_38584[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37310[i_4] = mem_param_37295[i_4];
    
    __local char *mem_37313;
    
    mem_37313 = (__local char *) mem_37313_backing_5;
    
    float mem_37316[1];
    float mem_37696[1];
    
    if (cond_36532) {
        mem_37696[0] = accs_mem_37310[0];
    } else {
        int64_t binop_x_36542 = segmap_group_sizze_33272 *
                num_whole_tiles_36432;
        int64_t ltid_36533 = sext_i32_i64(ltid_pre_38583);
        int32_t ltid_flat_36534 = local_tid_38579;
        
        if (slt64(ltid_36533, segmap_group_sizze_33272)) {
            int64_t j_36543 = ltid_36533 + binop_x_36542;
            bool cond_36548 = slt64(j_36543, res_25158);
            int32_t pre_36549;
            
            if (cond_36548) {
                int32_t index_primexp_36598 = sext_i64_i32(j_36543);
                int32_t tile_elem_36550 = index_primexp_36598;
                
                pre_36549 = tile_elem_36550;
            } else {
                pre_36549 = 0;
            }
            ((__local int32_t *) mem_37313)[ltid_36533] = pre_36549;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36554 = sext_i32_i64(ltid_pre_38583);
        int32_t ltid_flat_36555 = local_tid_38579;
        
        if (slt64(ltid_36554, segmap_group_sizze_33272)) {
            int64_t gtid_36562 = binop_x_36421 + ltid_36554;
            float acc_36565 = accs_mem_37310[0];
            bool cond_36566 = slt64(gtid_36562, m_24797);
            float acc_36567;
            
            if (cond_36566) {
                int32_t x_36563 = mem_37285[0];
                int32_t x_36564 = mem_37287[0];
                float x_36568;
                float redout_36659 = acc_36565;
                
                for (int64_t i_36660 = 0; i_36660 < residual_input_36531;
                     i_36660++) {
                    int32_t x_36572 = ((__local int32_t *) mem_37313)[i_36660];
                    bool cond_36573 = slt32(x_36572, x_36564);
                    float res_36574;
                    
                    if (cond_36573) {
                        int32_t x_36575 = add32(x_36563, x_36572);
                        int32_t x_36576 = sub32(x_36575, x_36564);
                        int32_t i_36577 = add32(1, x_36576);
                        int64_t i_36578 = sext_i32_i64(i_36577);
                        float res_36579 = ((__global
                                            float *) res_mem_37197)[gtid_36562 *
                                                                    N_24796 +
                                                                    i_36578];
                        
                        res_36574 = res_36579;
                    } else {
                        res_36574 = 0.0F;
                    }
                    
                    float res_36571 = res_36574 + redout_36659;
                    float redout_tmp_38587 = res_36571;
                    
                    redout_36659 = redout_tmp_38587;
                }
                x_36568 = redout_36659;
                acc_36567 = x_36568;
            } else {
                acc_36567 = acc_36565;
            }
            mem_37316[0] = acc_36567;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37696[0] = mem_37316[0];
    }
    if (slt64(sext_i32_i64(local_tid_38579) + segmap_group_sizze_33272 *
              sext_i32_i64(group_tid_38580), m_24797)) {
        ((__global float *) mem_37323)[sext_i32_i64(local_tid_38579) +
                                       segmap_group_sizze_33272 *
                                       sext_i32_i64(group_tid_38580)] =
            mem_37696[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_33272
}
__kernel void mainzisegred_large_31121(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_37939_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_37937_backing_aligned_1,
                                       int64_t N_24796, int64_t N_24798,
                                       int64_t res_24810, int64_t res_24816,
                                       int64_t num_groups_31260, __global
                                       unsigned char *images_mem_36738, __global
                                       unsigned char *binop_p_mem_36747,
                                       __global unsigned char *mem_36830,
                                       __global unsigned char *mem_36835,
                                       int64_t groups_per_segment_37923,
                                       int64_t elements_per_thread_37924,
                                       int64_t virt_num_groups_37925,
                                       int64_t threads_per_segment_37927,
                                       __global
                                       unsigned char *group_res_arr_mem_37928,
                                       __global
                                       unsigned char *mainzicounter_mem_37930)
{
    #define segred_group_sizze_31259 (mainzisegred_group_sizze_31115)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_37939_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_37939_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_37937_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37937_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37932;
    int32_t local_tid_37933;
    int64_t group_sizze_37936;
    int32_t wave_sizze_37935;
    int32_t group_tid_37934;
    
    global_tid_37932 = get_global_id(0);
    local_tid_37933 = get_local_id(0);
    group_sizze_37936 = get_local_size(0);
    wave_sizze_37935 = LOCKSTEP_WIDTH;
    group_tid_37934 = get_group_id(0);
    
    int32_t phys_tid_31121;
    
    phys_tid_31121 = global_tid_37932;
    
    __local char *red_arr_mem_37937;
    
    red_arr_mem_37937 = (__local char *) red_arr_mem_37937_backing_0;
    
    __local char *sync_arr_mem_37939;
    
    sync_arr_mem_37939 = (__local char *) sync_arr_mem_37939_backing_1;
    
    int32_t phys_group_id_37941;
    
    phys_group_id_37941 = get_group_id(0);
    for (int32_t i_37942 = 0; i_37942 <
         sdiv_up32(sext_i64_i32(virt_num_groups_37925) - phys_group_id_37941,
                   sext_i64_i32(num_groups_31260)); i_37942++) {
        int32_t virt_group_id_37943 = phys_group_id_37941 + i_37942 *
                sext_i64_i32(num_groups_31260);
        int32_t flat_segment_id_37944 = squot32(virt_group_id_37943,
                                                sext_i64_i32(groups_per_segment_37923));
        int64_t global_tid_37945 = srem64(sext_i32_i64(virt_group_id_37943) *
                                          segred_group_sizze_31259 +
                                          sext_i32_i64(local_tid_37933),
                                          segred_group_sizze_31259 *
                                          groups_per_segment_37923);
        int64_t gtid_31108 = squot64(sext_i32_i64(flat_segment_id_37944),
                                     res_24816 * res_24816);
        int64_t gtid_31109 = squot64(sext_i32_i64(flat_segment_id_37944) -
                                     squot64(sext_i32_i64(flat_segment_id_37944),
                                             res_24816 * res_24816) *
                                     (res_24816 * res_24816), res_24816);
        int64_t gtid_31110 = sext_i32_i64(flat_segment_id_37944) -
                squot64(sext_i32_i64(flat_segment_id_37944), res_24816 *
                        res_24816) * (res_24816 * res_24816) -
                squot64(sext_i32_i64(flat_segment_id_37944) -
                        squot64(sext_i32_i64(flat_segment_id_37944), res_24816 *
                                res_24816) * (res_24816 * res_24816),
                        res_24816) * res_24816;
        int64_t gtid_31120;
        float x_acc_37946;
        int64_t chunk_sizze_37947;
        
        chunk_sizze_37947 = smin64(elements_per_thread_37924,
                                   sdiv_up64(res_24810 -
                                             sext_i32_i64(sext_i64_i32(global_tid_37945)),
                                             threads_per_segment_37927));
        
        float x_31263;
        float x_31264;
        
        // neutral-initialise the accumulators
        {
            x_acc_37946 = 0.0F;
        }
        for (int64_t i_37951 = 0; i_37951 < chunk_sizze_37947; i_37951++) {
            gtid_31120 = sext_i32_i64(sext_i64_i32(global_tid_37945)) +
                threads_per_segment_37927 * i_37951;
            // apply map function
            {
                float x_31269 = ((__global
                                  float *) images_mem_36738)[gtid_31108 *
                                                             N_24798 +
                                                             gtid_31120];
                float x_31270 = ((__global
                                  float *) binop_p_mem_36747)[gtid_31109 *
                                                              N_24796 +
                                                              gtid_31120];
                float x_31271 = ((__global float *) mem_36830)[gtid_31110 *
                                                               N_24796 +
                                                               gtid_31120];
                float x_31272 = x_31270 * x_31271;
                bool res_31273;
                
                res_31273 = futrts_isnan32(x_31269);
                
                float y_31274;
                
                if (res_31273) {
                    y_31274 = 0.0F;
                } else {
                    y_31274 = 1.0F;
                }
                
                float res_31275 = x_31272 * y_31274;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_31263 = x_acc_37946;
                }
                // load new values
                {
                    x_31264 = res_31275;
                }
                // apply reduction operator
                {
                    float res_31265 = x_31263 + x_31264;
                    
                    // store in accumulator
                    {
                        x_acc_37946 = res_31265;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_31263 = x_acc_37946;
            ((__local
              float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933)] =
                x_31263;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_37952;
        int32_t skip_waves_37953;
        
        skip_waves_37953 = 1;
        
        float x_37948;
        float x_37949;
        
        offset_37952 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_37933,
                      sext_i64_i32(segred_group_sizze_31259))) {
                x_37948 = ((__local
                            float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933 +
                                                        offset_37952)];
            }
        }
        offset_37952 = 1;
        while (slt32(offset_37952, wave_sizze_37935)) {
            if (slt32(local_tid_37933 + offset_37952,
                      sext_i64_i32(segred_group_sizze_31259)) &&
                ((local_tid_37933 - squot32(local_tid_37933, wave_sizze_37935) *
                  wave_sizze_37935) & (2 * offset_37952 - 1)) == 0) {
                // read array element
                {
                    x_37949 = ((volatile __local
                                float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933 +
                                                            offset_37952)];
                }
                // apply reduction operation
                {
                    float res_37950 = x_37948 + x_37949;
                    
                    x_37948 = res_37950;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933)] =
                        x_37948;
                }
            }
            offset_37952 *= 2;
        }
        while (slt32(skip_waves_37953,
                     squot32(sext_i64_i32(segred_group_sizze_31259) +
                             wave_sizze_37935 - 1, wave_sizze_37935))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_37952 = skip_waves_37953 * wave_sizze_37935;
            if (slt32(local_tid_37933 + offset_37952,
                      sext_i64_i32(segred_group_sizze_31259)) &&
                ((local_tid_37933 - squot32(local_tid_37933, wave_sizze_37935) *
                  wave_sizze_37935) == 0 && (squot32(local_tid_37933,
                                                     wave_sizze_37935) & (2 *
                                                                          skip_waves_37953 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_37949 = ((__local
                                float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933 +
                                                            offset_37952)];
                }
                // apply reduction operation
                {
                    float res_37950 = x_37948 + x_37949;
                    
                    x_37948 = res_37950;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933)] =
                        x_37948;
                }
            }
            skip_waves_37953 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_37933) == 0) {
                x_acc_37946 = x_37948;
            }
        }
        if (groups_per_segment_37923 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_37933 == 0) {
                    ((__global float *) mem_36835)[gtid_31108 * (res_24816 *
                                                                 res_24816) +
                                                   gtid_31109 * res_24816 +
                                                   gtid_31110] = x_acc_37946;
                }
            }
        } else {
            int32_t old_counter_37954;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_37933 == 0) {
                    ((__global
                      float *) group_res_arr_mem_37928)[sext_i32_i64(virt_group_id_37943) *
                                                        segred_group_sizze_31259] =
                        x_acc_37946;
                    mem_fence_global();
                    old_counter_37954 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_37930)[sext_i32_i64(srem32(flat_segment_id_37944,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_37939)[0] =
                        old_counter_37954 == groups_per_segment_37923 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_37955;
            
            is_last_group_37955 = ((__local bool *) sync_arr_mem_37939)[0];
            if (is_last_group_37955) {
                if (local_tid_37933 == 0) {
                    old_counter_37954 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_37930)[sext_i32_i64(srem32(flat_segment_id_37944,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_37923));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_37956 =
                            sdiv_up64(groups_per_segment_37923,
                                      segred_group_sizze_31259);
                    
                    x_31263 = 0.0F;
                    for (int64_t i_37957 = 0; i_37957 < read_per_thread_37956;
                         i_37957++) {
                        int64_t group_res_id_37958 =
                                sext_i32_i64(local_tid_37933) *
                                read_per_thread_37956 + i_37957;
                        int64_t index_of_group_res_37959 =
                                sext_i32_i64(flat_segment_id_37944) *
                                groups_per_segment_37923 + group_res_id_37958;
                        
                        if (slt64(group_res_id_37958,
                                  groups_per_segment_37923)) {
                            x_31264 = ((__global
                                        float *) group_res_arr_mem_37928)[index_of_group_res_37959 *
                                                                          segred_group_sizze_31259];
                            
                            float res_31265;
                            
                            res_31265 = x_31263 + x_31264;
                            x_31263 = res_31265;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933)] =
                    x_31263;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_37960;
                    int32_t skip_waves_37961;
                    
                    skip_waves_37961 = 1;
                    
                    float x_37948;
                    float x_37949;
                    
                    offset_37960 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_37933,
                                  sext_i64_i32(segred_group_sizze_31259))) {
                            x_37948 = ((__local
                                        float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933 +
                                                                    offset_37960)];
                        }
                    }
                    offset_37960 = 1;
                    while (slt32(offset_37960, wave_sizze_37935)) {
                        if (slt32(local_tid_37933 + offset_37960,
                                  sext_i64_i32(segred_group_sizze_31259)) &&
                            ((local_tid_37933 - squot32(local_tid_37933,
                                                        wave_sizze_37935) *
                              wave_sizze_37935) & (2 * offset_37960 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_37949 = ((volatile __local
                                            float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933 +
                                                                        offset_37960)];
                            }
                            // apply reduction operation
                            {
                                float res_37950 = x_37948 + x_37949;
                                
                                x_37948 = res_37950;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933)] =
                                    x_37948;
                            }
                        }
                        offset_37960 *= 2;
                    }
                    while (slt32(skip_waves_37961,
                                 squot32(sext_i64_i32(segred_group_sizze_31259) +
                                         wave_sizze_37935 - 1,
                                         wave_sizze_37935))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_37960 = skip_waves_37961 * wave_sizze_37935;
                        if (slt32(local_tid_37933 + offset_37960,
                                  sext_i64_i32(segred_group_sizze_31259)) &&
                            ((local_tid_37933 - squot32(local_tid_37933,
                                                        wave_sizze_37935) *
                              wave_sizze_37935) == 0 &&
                             (squot32(local_tid_37933, wave_sizze_37935) & (2 *
                                                                            skip_waves_37961 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_37949 = ((__local
                                            float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933 +
                                                                        offset_37960)];
                            }
                            // apply reduction operation
                            {
                                float res_37950 = x_37948 + x_37949;
                                
                                x_37948 = res_37950;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_37937)[sext_i32_i64(local_tid_37933)] =
                                    x_37948;
                            }
                        }
                        skip_waves_37961 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_37933 == 0) {
                            ((__global float *) mem_36835)[gtid_31108 *
                                                           (res_24816 *
                                                            res_24816) +
                                                           gtid_31109 *
                                                           res_24816 +
                                                           gtid_31110] =
                                x_37948;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31259
}
__kernel void mainzisegred_large_32294(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38093_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38091_backing_aligned_1,
                                       int64_t N_24796, int64_t N_24798,
                                       int64_t res_24810, int64_t res_24816,
                                       int64_t num_groups_32347, __global
                                       unsigned char *images_mem_36738, __global
                                       unsigned char *binop_p_mem_36747,
                                       __global unsigned char *mem_37016,
                                       int64_t groups_per_segment_38077,
                                       int64_t elements_per_thread_38078,
                                       int64_t virt_num_groups_38079,
                                       int64_t threads_per_segment_38081,
                                       __global
                                       unsigned char *group_res_arr_mem_38082,
                                       __global
                                       unsigned char *mainzicounter_mem_38084)
{
    #define segred_group_sizze_32346 (mainzisegred_group_sizze_32288)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38093_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38093_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38091_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38091_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38086;
    int32_t local_tid_38087;
    int64_t group_sizze_38090;
    int32_t wave_sizze_38089;
    int32_t group_tid_38088;
    
    global_tid_38086 = get_global_id(0);
    local_tid_38087 = get_local_id(0);
    group_sizze_38090 = get_local_size(0);
    wave_sizze_38089 = LOCKSTEP_WIDTH;
    group_tid_38088 = get_group_id(0);
    
    int32_t phys_tid_32294;
    
    phys_tid_32294 = global_tid_38086;
    
    __local char *red_arr_mem_38091;
    
    red_arr_mem_38091 = (__local char *) red_arr_mem_38091_backing_0;
    
    __local char *sync_arr_mem_38093;
    
    sync_arr_mem_38093 = (__local char *) sync_arr_mem_38093_backing_1;
    
    int32_t phys_group_id_38095;
    
    phys_group_id_38095 = get_group_id(0);
    for (int32_t i_38096 = 0; i_38096 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38079) - phys_group_id_38095,
                   sext_i64_i32(num_groups_32347)); i_38096++) {
        int32_t virt_group_id_38097 = phys_group_id_38095 + i_38096 *
                sext_i64_i32(num_groups_32347);
        int32_t flat_segment_id_38098 = squot32(virt_group_id_38097,
                                                sext_i64_i32(groups_per_segment_38077));
        int64_t global_tid_38099 = srem64(sext_i32_i64(virt_group_id_38097) *
                                          segred_group_sizze_32346 +
                                          sext_i32_i64(local_tid_38087),
                                          segred_group_sizze_32346 *
                                          groups_per_segment_38077);
        int64_t gtid_32283 = squot64(sext_i32_i64(flat_segment_id_38098),
                                     res_24816);
        int64_t gtid_32284 = sext_i32_i64(flat_segment_id_38098) -
                squot64(sext_i32_i64(flat_segment_id_38098), res_24816) *
                res_24816;
        int64_t gtid_32293;
        float x_acc_38100;
        int64_t chunk_sizze_38101;
        
        chunk_sizze_38101 = smin64(elements_per_thread_38078,
                                   sdiv_up64(res_24810 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38099)),
                                             threads_per_segment_38081));
        
        float x_32350;
        float x_32351;
        
        // neutral-initialise the accumulators
        {
            x_acc_38100 = 0.0F;
        }
        for (int64_t i_38105 = 0; i_38105 < chunk_sizze_38101; i_38105++) {
            gtid_32293 = sext_i32_i64(sext_i64_i32(global_tid_38099)) +
                threads_per_segment_38081 * i_38105;
            // apply map function
            {
                float x_32356 = ((__global
                                  float *) images_mem_36738)[gtid_32283 *
                                                             N_24798 +
                                                             gtid_32293];
                bool res_32357;
                
                res_32357 = futrts_isnan32(x_32356);
                
                float res_32358;
                
                if (res_32357) {
                    res_32358 = 0.0F;
                } else {
                    float x_32355 = ((__global
                                      float *) binop_p_mem_36747)[gtid_32284 *
                                                                  N_24796 +
                                                                  gtid_32293];
                    float res_32359 = x_32355 * x_32356;
                    
                    res_32358 = res_32359;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_32350 = x_acc_38100;
                }
                // load new values
                {
                    x_32351 = res_32358;
                }
                // apply reduction operator
                {
                    float res_32352 = x_32350 + x_32351;
                    
                    // store in accumulator
                    {
                        x_acc_38100 = res_32352;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32350 = x_acc_38100;
            ((__local
              float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087)] =
                x_32350;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38106;
        int32_t skip_waves_38107;
        
        skip_waves_38107 = 1;
        
        float x_38102;
        float x_38103;
        
        offset_38106 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38087,
                      sext_i64_i32(segred_group_sizze_32346))) {
                x_38102 = ((__local
                            float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087 +
                                                        offset_38106)];
            }
        }
        offset_38106 = 1;
        while (slt32(offset_38106, wave_sizze_38089)) {
            if (slt32(local_tid_38087 + offset_38106,
                      sext_i64_i32(segred_group_sizze_32346)) &&
                ((local_tid_38087 - squot32(local_tid_38087, wave_sizze_38089) *
                  wave_sizze_38089) & (2 * offset_38106 - 1)) == 0) {
                // read array element
                {
                    x_38103 = ((volatile __local
                                float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087 +
                                                            offset_38106)];
                }
                // apply reduction operation
                {
                    float res_38104 = x_38102 + x_38103;
                    
                    x_38102 = res_38104;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087)] =
                        x_38102;
                }
            }
            offset_38106 *= 2;
        }
        while (slt32(skip_waves_38107,
                     squot32(sext_i64_i32(segred_group_sizze_32346) +
                             wave_sizze_38089 - 1, wave_sizze_38089))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38106 = skip_waves_38107 * wave_sizze_38089;
            if (slt32(local_tid_38087 + offset_38106,
                      sext_i64_i32(segred_group_sizze_32346)) &&
                ((local_tid_38087 - squot32(local_tid_38087, wave_sizze_38089) *
                  wave_sizze_38089) == 0 && (squot32(local_tid_38087,
                                                     wave_sizze_38089) & (2 *
                                                                          skip_waves_38107 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38103 = ((__local
                                float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087 +
                                                            offset_38106)];
                }
                // apply reduction operation
                {
                    float res_38104 = x_38102 + x_38103;
                    
                    x_38102 = res_38104;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087)] =
                        x_38102;
                }
            }
            skip_waves_38107 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38087) == 0) {
                x_acc_38100 = x_38102;
            }
        }
        if (groups_per_segment_38077 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38087 == 0) {
                    ((__global float *) mem_37016)[gtid_32283 * res_24816 +
                                                   gtid_32284] = x_acc_38100;
                }
            }
        } else {
            int32_t old_counter_38108;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38087 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38082)[sext_i32_i64(virt_group_id_38097) *
                                                        segred_group_sizze_32346] =
                        x_acc_38100;
                    mem_fence_global();
                    old_counter_38108 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38084)[sext_i32_i64(srem32(flat_segment_id_38098,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38093)[0] =
                        old_counter_38108 == groups_per_segment_38077 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38109;
            
            is_last_group_38109 = ((__local bool *) sync_arr_mem_38093)[0];
            if (is_last_group_38109) {
                if (local_tid_38087 == 0) {
                    old_counter_38108 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38084)[sext_i32_i64(srem32(flat_segment_id_38098,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38077));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38110 =
                            sdiv_up64(groups_per_segment_38077,
                                      segred_group_sizze_32346);
                    
                    x_32350 = 0.0F;
                    for (int64_t i_38111 = 0; i_38111 < read_per_thread_38110;
                         i_38111++) {
                        int64_t group_res_id_38112 =
                                sext_i32_i64(local_tid_38087) *
                                read_per_thread_38110 + i_38111;
                        int64_t index_of_group_res_38113 =
                                sext_i32_i64(flat_segment_id_38098) *
                                groups_per_segment_38077 + group_res_id_38112;
                        
                        if (slt64(group_res_id_38112,
                                  groups_per_segment_38077)) {
                            x_32351 = ((__global
                                        float *) group_res_arr_mem_38082)[index_of_group_res_38113 *
                                                                          segred_group_sizze_32346];
                            
                            float res_32352;
                            
                            res_32352 = x_32350 + x_32351;
                            x_32350 = res_32352;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087)] =
                    x_32350;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38114;
                    int32_t skip_waves_38115;
                    
                    skip_waves_38115 = 1;
                    
                    float x_38102;
                    float x_38103;
                    
                    offset_38114 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38087,
                                  sext_i64_i32(segred_group_sizze_32346))) {
                            x_38102 = ((__local
                                        float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087 +
                                                                    offset_38114)];
                        }
                    }
                    offset_38114 = 1;
                    while (slt32(offset_38114, wave_sizze_38089)) {
                        if (slt32(local_tid_38087 + offset_38114,
                                  sext_i64_i32(segred_group_sizze_32346)) &&
                            ((local_tid_38087 - squot32(local_tid_38087,
                                                        wave_sizze_38089) *
                              wave_sizze_38089) & (2 * offset_38114 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38103 = ((volatile __local
                                            float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087 +
                                                                        offset_38114)];
                            }
                            // apply reduction operation
                            {
                                float res_38104 = x_38102 + x_38103;
                                
                                x_38102 = res_38104;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087)] =
                                    x_38102;
                            }
                        }
                        offset_38114 *= 2;
                    }
                    while (slt32(skip_waves_38115,
                                 squot32(sext_i64_i32(segred_group_sizze_32346) +
                                         wave_sizze_38089 - 1,
                                         wave_sizze_38089))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38114 = skip_waves_38115 * wave_sizze_38089;
                        if (slt32(local_tid_38087 + offset_38114,
                                  sext_i64_i32(segred_group_sizze_32346)) &&
                            ((local_tid_38087 - squot32(local_tid_38087,
                                                        wave_sizze_38089) *
                              wave_sizze_38089) == 0 &&
                             (squot32(local_tid_38087, wave_sizze_38089) & (2 *
                                                                            skip_waves_38115 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38103 = ((__local
                                            float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087 +
                                                                        offset_38114)];
                            }
                            // apply reduction operation
                            {
                                float res_38104 = x_38102 + x_38103;
                                
                                x_38102 = res_38104;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38091)[sext_i32_i64(local_tid_38087)] =
                                    x_38102;
                            }
                        }
                        skip_waves_38115 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38087 == 0) {
                            ((__global float *) mem_37016)[gtid_32283 *
                                                           res_24816 +
                                                           gtid_32284] =
                                x_38102;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32346
}
__kernel void mainzisegred_large_32431(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38174_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38172_backing_aligned_1,
                                       int64_t res_24816,
                                       int64_t num_groups_32480, __global
                                       unsigned char *res_mem_36931, __global
                                       unsigned char *res_mem_37022, __global
                                       unsigned char *mem_37059,
                                       int64_t groups_per_segment_38158,
                                       int64_t elements_per_thread_38159,
                                       int64_t virt_num_groups_38160,
                                       int64_t threads_per_segment_38162,
                                       __global
                                       unsigned char *group_res_arr_mem_38163,
                                       __global
                                       unsigned char *mainzicounter_mem_38165)
{
    #define segred_group_sizze_32479 (mainzisegred_group_sizze_32425)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38174_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38174_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38172_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38172_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38167;
    int32_t local_tid_38168;
    int64_t group_sizze_38171;
    int32_t wave_sizze_38170;
    int32_t group_tid_38169;
    
    global_tid_38167 = get_global_id(0);
    local_tid_38168 = get_local_id(0);
    group_sizze_38171 = get_local_size(0);
    wave_sizze_38170 = LOCKSTEP_WIDTH;
    group_tid_38169 = get_group_id(0);
    
    int32_t phys_tid_32431;
    
    phys_tid_32431 = global_tid_38167;
    
    __local char *red_arr_mem_38172;
    
    red_arr_mem_38172 = (__local char *) red_arr_mem_38172_backing_0;
    
    __local char *sync_arr_mem_38174;
    
    sync_arr_mem_38174 = (__local char *) sync_arr_mem_38174_backing_1;
    
    int32_t phys_group_id_38176;
    
    phys_group_id_38176 = get_group_id(0);
    for (int32_t i_38177 = 0; i_38177 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38160) - phys_group_id_38176,
                   sext_i64_i32(num_groups_32480)); i_38177++) {
        int32_t virt_group_id_38178 = phys_group_id_38176 + i_38177 *
                sext_i64_i32(num_groups_32480);
        int32_t flat_segment_id_38179 = squot32(virt_group_id_38178,
                                                sext_i64_i32(groups_per_segment_38158));
        int64_t global_tid_38180 = srem64(sext_i32_i64(virt_group_id_38178) *
                                          segred_group_sizze_32479 +
                                          sext_i32_i64(local_tid_38168),
                                          segred_group_sizze_32479 *
                                          groups_per_segment_38158);
        int64_t gtid_32420 = squot64(sext_i32_i64(flat_segment_id_38179),
                                     res_24816);
        int64_t gtid_32421 = sext_i32_i64(flat_segment_id_38179) -
                squot64(sext_i32_i64(flat_segment_id_38179), res_24816) *
                res_24816;
        int64_t gtid_32430;
        float x_acc_38181;
        int64_t chunk_sizze_38182;
        
        chunk_sizze_38182 = smin64(elements_per_thread_38159,
                                   sdiv_up64(res_24816 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38180)),
                                             threads_per_segment_38162));
        
        float x_32483;
        float x_32484;
        
        // neutral-initialise the accumulators
        {
            x_acc_38181 = 0.0F;
        }
        for (int64_t i_38186 = 0; i_38186 < chunk_sizze_38182; i_38186++) {
            gtid_32430 = sext_i32_i64(sext_i64_i32(global_tid_38180)) +
                threads_per_segment_38162 * i_38186;
            // apply map function
            {
                float x_32489 = ((__global float *) res_mem_37022)[gtid_32420 *
                                                                   res_24816 +
                                                                   gtid_32430];
                float x_32490 = ((__global float *) res_mem_36931)[gtid_32420 *
                                                                   (res_24816 *
                                                                    res_24816) +
                                                                   gtid_32421 *
                                                                   res_24816 +
                                                                   gtid_32430];
                float res_32491 = x_32489 * x_32490;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_32483 = x_acc_38181;
                }
                // load new values
                {
                    x_32484 = res_32491;
                }
                // apply reduction operator
                {
                    float res_32485 = x_32483 + x_32484;
                    
                    // store in accumulator
                    {
                        x_acc_38181 = res_32485;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32483 = x_acc_38181;
            ((__local
              float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168)] =
                x_32483;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38187;
        int32_t skip_waves_38188;
        
        skip_waves_38188 = 1;
        
        float x_38183;
        float x_38184;
        
        offset_38187 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38168,
                      sext_i64_i32(segred_group_sizze_32479))) {
                x_38183 = ((__local
                            float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168 +
                                                        offset_38187)];
            }
        }
        offset_38187 = 1;
        while (slt32(offset_38187, wave_sizze_38170)) {
            if (slt32(local_tid_38168 + offset_38187,
                      sext_i64_i32(segred_group_sizze_32479)) &&
                ((local_tid_38168 - squot32(local_tid_38168, wave_sizze_38170) *
                  wave_sizze_38170) & (2 * offset_38187 - 1)) == 0) {
                // read array element
                {
                    x_38184 = ((volatile __local
                                float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168 +
                                                            offset_38187)];
                }
                // apply reduction operation
                {
                    float res_38185 = x_38183 + x_38184;
                    
                    x_38183 = res_38185;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168)] =
                        x_38183;
                }
            }
            offset_38187 *= 2;
        }
        while (slt32(skip_waves_38188,
                     squot32(sext_i64_i32(segred_group_sizze_32479) +
                             wave_sizze_38170 - 1, wave_sizze_38170))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38187 = skip_waves_38188 * wave_sizze_38170;
            if (slt32(local_tid_38168 + offset_38187,
                      sext_i64_i32(segred_group_sizze_32479)) &&
                ((local_tid_38168 - squot32(local_tid_38168, wave_sizze_38170) *
                  wave_sizze_38170) == 0 && (squot32(local_tid_38168,
                                                     wave_sizze_38170) & (2 *
                                                                          skip_waves_38188 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38184 = ((__local
                                float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168 +
                                                            offset_38187)];
                }
                // apply reduction operation
                {
                    float res_38185 = x_38183 + x_38184;
                    
                    x_38183 = res_38185;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168)] =
                        x_38183;
                }
            }
            skip_waves_38188 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38168) == 0) {
                x_acc_38181 = x_38183;
            }
        }
        if (groups_per_segment_38158 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38168 == 0) {
                    ((__global float *) mem_37059)[gtid_32420 * res_24816 +
                                                   gtid_32421] = x_acc_38181;
                }
            }
        } else {
            int32_t old_counter_38189;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38168 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38163)[sext_i32_i64(virt_group_id_38178) *
                                                        segred_group_sizze_32479] =
                        x_acc_38181;
                    mem_fence_global();
                    old_counter_38189 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38165)[sext_i32_i64(srem32(flat_segment_id_38179,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38174)[0] =
                        old_counter_38189 == groups_per_segment_38158 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38190;
            
            is_last_group_38190 = ((__local bool *) sync_arr_mem_38174)[0];
            if (is_last_group_38190) {
                if (local_tid_38168 == 0) {
                    old_counter_38189 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38165)[sext_i32_i64(srem32(flat_segment_id_38179,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38158));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38191 =
                            sdiv_up64(groups_per_segment_38158,
                                      segred_group_sizze_32479);
                    
                    x_32483 = 0.0F;
                    for (int64_t i_38192 = 0; i_38192 < read_per_thread_38191;
                         i_38192++) {
                        int64_t group_res_id_38193 =
                                sext_i32_i64(local_tid_38168) *
                                read_per_thread_38191 + i_38192;
                        int64_t index_of_group_res_38194 =
                                sext_i32_i64(flat_segment_id_38179) *
                                groups_per_segment_38158 + group_res_id_38193;
                        
                        if (slt64(group_res_id_38193,
                                  groups_per_segment_38158)) {
                            x_32484 = ((__global
                                        float *) group_res_arr_mem_38163)[index_of_group_res_38194 *
                                                                          segred_group_sizze_32479];
                            
                            float res_32485;
                            
                            res_32485 = x_32483 + x_32484;
                            x_32483 = res_32485;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168)] =
                    x_32483;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38195;
                    int32_t skip_waves_38196;
                    
                    skip_waves_38196 = 1;
                    
                    float x_38183;
                    float x_38184;
                    
                    offset_38195 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38168,
                                  sext_i64_i32(segred_group_sizze_32479))) {
                            x_38183 = ((__local
                                        float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168 +
                                                                    offset_38195)];
                        }
                    }
                    offset_38195 = 1;
                    while (slt32(offset_38195, wave_sizze_38170)) {
                        if (slt32(local_tid_38168 + offset_38195,
                                  sext_i64_i32(segred_group_sizze_32479)) &&
                            ((local_tid_38168 - squot32(local_tid_38168,
                                                        wave_sizze_38170) *
                              wave_sizze_38170) & (2 * offset_38195 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38184 = ((volatile __local
                                            float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168 +
                                                                        offset_38195)];
                            }
                            // apply reduction operation
                            {
                                float res_38185 = x_38183 + x_38184;
                                
                                x_38183 = res_38185;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168)] =
                                    x_38183;
                            }
                        }
                        offset_38195 *= 2;
                    }
                    while (slt32(skip_waves_38196,
                                 squot32(sext_i64_i32(segred_group_sizze_32479) +
                                         wave_sizze_38170 - 1,
                                         wave_sizze_38170))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38195 = skip_waves_38196 * wave_sizze_38170;
                        if (slt32(local_tid_38168 + offset_38195,
                                  sext_i64_i32(segred_group_sizze_32479)) &&
                            ((local_tid_38168 - squot32(local_tid_38168,
                                                        wave_sizze_38170) *
                              wave_sizze_38170) == 0 &&
                             (squot32(local_tid_38168, wave_sizze_38170) & (2 *
                                                                            skip_waves_38196 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38184 = ((__local
                                            float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168 +
                                                                        offset_38195)];
                            }
                            // apply reduction operation
                            {
                                float res_38185 = x_38183 + x_38184;
                                
                                x_38183 = res_38185;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38172)[sext_i32_i64(local_tid_38168)] =
                                    x_38183;
                            }
                        }
                        skip_waves_38196 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38168 == 0) {
                            ((__global float *) mem_37059)[gtid_32420 *
                                                           res_24816 +
                                                           gtid_32421] =
                                x_38183;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32479
}
__kernel void mainzisegred_large_32561(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38262_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38260_backing_aligned_1,
                                       int64_t N_24796, int64_t res_24816,
                                       int64_t num_groups_32608, __global
                                       unsigned char *mem_36754, __global
                                       unsigned char *res_mem_37065, __global
                                       unsigned char *mem_37153,
                                       int64_t groups_per_segment_38246,
                                       int64_t elements_per_thread_38247,
                                       int64_t virt_num_groups_38248,
                                       int64_t threads_per_segment_38250,
                                       __global
                                       unsigned char *group_res_arr_mem_38251,
                                       __global
                                       unsigned char *mainzicounter_mem_38253)
{
    #define segred_group_sizze_32607 (mainzisegred_group_sizze_32555)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38262_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38262_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38260_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38260_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38255;
    int32_t local_tid_38256;
    int64_t group_sizze_38259;
    int32_t wave_sizze_38258;
    int32_t group_tid_38257;
    
    global_tid_38255 = get_global_id(0);
    local_tid_38256 = get_local_id(0);
    group_sizze_38259 = get_local_size(0);
    wave_sizze_38258 = LOCKSTEP_WIDTH;
    group_tid_38257 = get_group_id(0);
    
    int32_t phys_tid_32561;
    
    phys_tid_32561 = global_tid_38255;
    
    __local char *red_arr_mem_38260;
    
    red_arr_mem_38260 = (__local char *) red_arr_mem_38260_backing_0;
    
    __local char *sync_arr_mem_38262;
    
    sync_arr_mem_38262 = (__local char *) sync_arr_mem_38262_backing_1;
    
    int32_t phys_group_id_38264;
    
    phys_group_id_38264 = get_group_id(0);
    for (int32_t i_38265 = 0; i_38265 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38248) - phys_group_id_38264,
                   sext_i64_i32(num_groups_32608)); i_38265++) {
        int32_t virt_group_id_38266 = phys_group_id_38264 + i_38265 *
                sext_i64_i32(num_groups_32608);
        int32_t flat_segment_id_38267 = squot32(virt_group_id_38266,
                                                sext_i64_i32(groups_per_segment_38246));
        int64_t global_tid_38268 = srem64(sext_i32_i64(virt_group_id_38266) *
                                          segred_group_sizze_32607 +
                                          sext_i32_i64(local_tid_38256),
                                          segred_group_sizze_32607 *
                                          groups_per_segment_38246);
        int64_t gtid_32550 = squot64(sext_i32_i64(flat_segment_id_38267),
                                     N_24796);
        int64_t gtid_32551 = sext_i32_i64(flat_segment_id_38267) -
                squot64(sext_i32_i64(flat_segment_id_38267), N_24796) * N_24796;
        int64_t gtid_32560;
        float x_acc_38269;
        int64_t chunk_sizze_38270;
        
        chunk_sizze_38270 = smin64(elements_per_thread_38247,
                                   sdiv_up64(res_24816 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38268)),
                                             threads_per_segment_38250));
        
        float x_32611;
        float x_32612;
        
        // neutral-initialise the accumulators
        {
            x_acc_38269 = 0.0F;
        }
        for (int64_t i_38274 = 0; i_38274 < chunk_sizze_38270; i_38274++) {
            gtid_32560 = sext_i32_i64(sext_i64_i32(global_tid_38268)) +
                threads_per_segment_38250 * i_38274;
            // apply map function
            {
                float x_32616 = ((__global float *) res_mem_37065)[gtid_32550 *
                                                                   res_24816 +
                                                                   gtid_32560];
                float x_32617 = ((__global float *) mem_36754)[gtid_32551 *
                                                               res_24816 +
                                                               gtid_32560];
                float res_32618 = x_32616 * x_32617;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_32611 = x_acc_38269;
                }
                // load new values
                {
                    x_32612 = res_32618;
                }
                // apply reduction operator
                {
                    float res_32613 = x_32611 + x_32612;
                    
                    // store in accumulator
                    {
                        x_acc_38269 = res_32613;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32611 = x_acc_38269;
            ((__local
              float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256)] =
                x_32611;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38275;
        int32_t skip_waves_38276;
        
        skip_waves_38276 = 1;
        
        float x_38271;
        float x_38272;
        
        offset_38275 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38256,
                      sext_i64_i32(segred_group_sizze_32607))) {
                x_38271 = ((__local
                            float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256 +
                                                        offset_38275)];
            }
        }
        offset_38275 = 1;
        while (slt32(offset_38275, wave_sizze_38258)) {
            if (slt32(local_tid_38256 + offset_38275,
                      sext_i64_i32(segred_group_sizze_32607)) &&
                ((local_tid_38256 - squot32(local_tid_38256, wave_sizze_38258) *
                  wave_sizze_38258) & (2 * offset_38275 - 1)) == 0) {
                // read array element
                {
                    x_38272 = ((volatile __local
                                float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256 +
                                                            offset_38275)];
                }
                // apply reduction operation
                {
                    float res_38273 = x_38271 + x_38272;
                    
                    x_38271 = res_38273;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256)] =
                        x_38271;
                }
            }
            offset_38275 *= 2;
        }
        while (slt32(skip_waves_38276,
                     squot32(sext_i64_i32(segred_group_sizze_32607) +
                             wave_sizze_38258 - 1, wave_sizze_38258))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38275 = skip_waves_38276 * wave_sizze_38258;
            if (slt32(local_tid_38256 + offset_38275,
                      sext_i64_i32(segred_group_sizze_32607)) &&
                ((local_tid_38256 - squot32(local_tid_38256, wave_sizze_38258) *
                  wave_sizze_38258) == 0 && (squot32(local_tid_38256,
                                                     wave_sizze_38258) & (2 *
                                                                          skip_waves_38276 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38272 = ((__local
                                float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256 +
                                                            offset_38275)];
                }
                // apply reduction operation
                {
                    float res_38273 = x_38271 + x_38272;
                    
                    x_38271 = res_38273;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256)] =
                        x_38271;
                }
            }
            skip_waves_38276 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38256) == 0) {
                x_acc_38269 = x_38271;
            }
        }
        if (groups_per_segment_38246 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38256 == 0) {
                    ((__global float *) mem_37153)[gtid_32550 * N_24796 +
                                                   gtid_32551] = x_acc_38269;
                }
            }
        } else {
            int32_t old_counter_38277;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38256 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38251)[sext_i32_i64(virt_group_id_38266) *
                                                        segred_group_sizze_32607] =
                        x_acc_38269;
                    mem_fence_global();
                    old_counter_38277 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38253)[sext_i32_i64(srem32(flat_segment_id_38267,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38262)[0] =
                        old_counter_38277 == groups_per_segment_38246 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38278;
            
            is_last_group_38278 = ((__local bool *) sync_arr_mem_38262)[0];
            if (is_last_group_38278) {
                if (local_tid_38256 == 0) {
                    old_counter_38277 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38253)[sext_i32_i64(srem32(flat_segment_id_38267,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38246));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38279 =
                            sdiv_up64(groups_per_segment_38246,
                                      segred_group_sizze_32607);
                    
                    x_32611 = 0.0F;
                    for (int64_t i_38280 = 0; i_38280 < read_per_thread_38279;
                         i_38280++) {
                        int64_t group_res_id_38281 =
                                sext_i32_i64(local_tid_38256) *
                                read_per_thread_38279 + i_38280;
                        int64_t index_of_group_res_38282 =
                                sext_i32_i64(flat_segment_id_38267) *
                                groups_per_segment_38246 + group_res_id_38281;
                        
                        if (slt64(group_res_id_38281,
                                  groups_per_segment_38246)) {
                            x_32612 = ((__global
                                        float *) group_res_arr_mem_38251)[index_of_group_res_38282 *
                                                                          segred_group_sizze_32607];
                            
                            float res_32613;
                            
                            res_32613 = x_32611 + x_32612;
                            x_32611 = res_32613;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256)] =
                    x_32611;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38283;
                    int32_t skip_waves_38284;
                    
                    skip_waves_38284 = 1;
                    
                    float x_38271;
                    float x_38272;
                    
                    offset_38283 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38256,
                                  sext_i64_i32(segred_group_sizze_32607))) {
                            x_38271 = ((__local
                                        float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256 +
                                                                    offset_38283)];
                        }
                    }
                    offset_38283 = 1;
                    while (slt32(offset_38283, wave_sizze_38258)) {
                        if (slt32(local_tid_38256 + offset_38283,
                                  sext_i64_i32(segred_group_sizze_32607)) &&
                            ((local_tid_38256 - squot32(local_tid_38256,
                                                        wave_sizze_38258) *
                              wave_sizze_38258) & (2 * offset_38283 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38272 = ((volatile __local
                                            float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256 +
                                                                        offset_38283)];
                            }
                            // apply reduction operation
                            {
                                float res_38273 = x_38271 + x_38272;
                                
                                x_38271 = res_38273;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256)] =
                                    x_38271;
                            }
                        }
                        offset_38283 *= 2;
                    }
                    while (slt32(skip_waves_38284,
                                 squot32(sext_i64_i32(segred_group_sizze_32607) +
                                         wave_sizze_38258 - 1,
                                         wave_sizze_38258))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38283 = skip_waves_38284 * wave_sizze_38258;
                        if (slt32(local_tid_38256 + offset_38283,
                                  sext_i64_i32(segred_group_sizze_32607)) &&
                            ((local_tid_38256 - squot32(local_tid_38256,
                                                        wave_sizze_38258) *
                              wave_sizze_38258) == 0 &&
                             (squot32(local_tid_38256, wave_sizze_38258) & (2 *
                                                                            skip_waves_38284 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38272 = ((__local
                                            float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256 +
                                                                        offset_38283)];
                            }
                            // apply reduction operation
                            {
                                float res_38273 = x_38271 + x_38272;
                                
                                x_38271 = res_38273;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38260)[sext_i32_i64(local_tid_38256)] =
                                    x_38271;
                            }
                        }
                        skip_waves_38284 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38256 == 0) {
                            ((__global float *) mem_37153)[gtid_32550 *
                                                           N_24796 +
                                                           gtid_32551] =
                                x_38271;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32607
}
__kernel void mainzisegred_large_33127(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38516_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38514_backing_aligned_1,
                                       int64_t N_24796, int64_t res_24810,
                                       int64_t num_groups_33174, __global
                                       unsigned char *res_mem_37197, __global
                                       unsigned char *mem_37264, __global
                                       unsigned char *mem_37267,
                                       int64_t groups_per_segment_38500,
                                       int64_t elements_per_thread_38501,
                                       int64_t virt_num_groups_38502,
                                       int64_t threads_per_segment_38504,
                                       __global
                                       unsigned char *group_res_arr_mem_38505,
                                       __global
                                       unsigned char *mainzicounter_mem_38507)
{
    #define segred_group_sizze_33173 (mainzisegred_group_sizze_33121)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38516_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38516_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38514_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38514_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38509;
    int32_t local_tid_38510;
    int64_t group_sizze_38513;
    int32_t wave_sizze_38512;
    int32_t group_tid_38511;
    
    global_tid_38509 = get_global_id(0);
    local_tid_38510 = get_local_id(0);
    group_sizze_38513 = get_local_size(0);
    wave_sizze_38512 = LOCKSTEP_WIDTH;
    group_tid_38511 = get_group_id(0);
    
    int32_t phys_tid_33127;
    
    phys_tid_33127 = global_tid_38509;
    
    __local char *red_arr_mem_38514;
    
    red_arr_mem_38514 = (__local char *) red_arr_mem_38514_backing_0;
    
    __local char *sync_arr_mem_38516;
    
    sync_arr_mem_38516 = (__local char *) sync_arr_mem_38516_backing_1;
    
    int32_t phys_group_id_38518;
    
    phys_group_id_38518 = get_group_id(0);
    for (int32_t i_38519 = 0; i_38519 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38502) - phys_group_id_38518,
                   sext_i64_i32(num_groups_33174)); i_38519++) {
        int32_t virt_group_id_38520 = phys_group_id_38518 + i_38519 *
                sext_i64_i32(num_groups_33174);
        int32_t flat_segment_id_38521 = squot32(virt_group_id_38520,
                                                sext_i64_i32(groups_per_segment_38500));
        int64_t global_tid_38522 = srem64(sext_i32_i64(virt_group_id_38520) *
                                          segred_group_sizze_33173 +
                                          sext_i32_i64(local_tid_38510),
                                          segred_group_sizze_33173 *
                                          groups_per_segment_38500);
        int64_t gtid_33118 = sext_i32_i64(flat_segment_id_38521);
        int64_t gtid_33126;
        float x_acc_38523;
        int64_t chunk_sizze_38524;
        
        chunk_sizze_38524 = smin64(elements_per_thread_38501,
                                   sdiv_up64(res_24810 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38522)),
                                             threads_per_segment_38504));
        
        float x_33177;
        float x_33178;
        
        // neutral-initialise the accumulators
        {
            x_acc_38523 = 0.0F;
        }
        for (int64_t i_38528 = 0; i_38528 < chunk_sizze_38524; i_38528++) {
            gtid_33126 = sext_i32_i64(sext_i64_i32(global_tid_38522)) +
                threads_per_segment_38504 * i_38528;
            // apply map function
            {
                int32_t res_33181 = ((__global
                                      int32_t *) mem_37264)[gtid_33118];
                int32_t index_primexp_35444 = sext_i64_i32(gtid_33126);
                bool cond_33183 = slt32(index_primexp_35444, res_33181);
                float res_33184;
                
                if (cond_33183) {
                    int64_t i_33185 = sext_i32_i64(index_primexp_35444);
                    float res_33186 = ((__global
                                        float *) res_mem_37197)[gtid_33118 *
                                                                N_24796 +
                                                                i_33185];
                    
                    res_33184 = res_33186;
                } else {
                    res_33184 = 0.0F;
                }
                
                float res_33187 = res_33184 * res_33184;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_33177 = x_acc_38523;
                }
                // load new values
                {
                    x_33178 = res_33187;
                }
                // apply reduction operator
                {
                    float res_33179 = x_33177 + x_33178;
                    
                    // store in accumulator
                    {
                        x_acc_38523 = res_33179;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_33177 = x_acc_38523;
            ((__local
              float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510)] =
                x_33177;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38529;
        int32_t skip_waves_38530;
        
        skip_waves_38530 = 1;
        
        float x_38525;
        float x_38526;
        
        offset_38529 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38510,
                      sext_i64_i32(segred_group_sizze_33173))) {
                x_38525 = ((__local
                            float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510 +
                                                        offset_38529)];
            }
        }
        offset_38529 = 1;
        while (slt32(offset_38529, wave_sizze_38512)) {
            if (slt32(local_tid_38510 + offset_38529,
                      sext_i64_i32(segred_group_sizze_33173)) &&
                ((local_tid_38510 - squot32(local_tid_38510, wave_sizze_38512) *
                  wave_sizze_38512) & (2 * offset_38529 - 1)) == 0) {
                // read array element
                {
                    x_38526 = ((volatile __local
                                float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510 +
                                                            offset_38529)];
                }
                // apply reduction operation
                {
                    float res_38527 = x_38525 + x_38526;
                    
                    x_38525 = res_38527;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510)] =
                        x_38525;
                }
            }
            offset_38529 *= 2;
        }
        while (slt32(skip_waves_38530,
                     squot32(sext_i64_i32(segred_group_sizze_33173) +
                             wave_sizze_38512 - 1, wave_sizze_38512))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38529 = skip_waves_38530 * wave_sizze_38512;
            if (slt32(local_tid_38510 + offset_38529,
                      sext_i64_i32(segred_group_sizze_33173)) &&
                ((local_tid_38510 - squot32(local_tid_38510, wave_sizze_38512) *
                  wave_sizze_38512) == 0 && (squot32(local_tid_38510,
                                                     wave_sizze_38512) & (2 *
                                                                          skip_waves_38530 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38526 = ((__local
                                float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510 +
                                                            offset_38529)];
                }
                // apply reduction operation
                {
                    float res_38527 = x_38525 + x_38526;
                    
                    x_38525 = res_38527;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510)] =
                        x_38525;
                }
            }
            skip_waves_38530 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38510) == 0) {
                x_acc_38523 = x_38525;
            }
        }
        if (groups_per_segment_38500 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38510 == 0) {
                    ((__global float *) mem_37267)[gtid_33118] = x_acc_38523;
                }
            }
        } else {
            int32_t old_counter_38531;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38510 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38505)[sext_i32_i64(virt_group_id_38520) *
                                                        segred_group_sizze_33173] =
                        x_acc_38523;
                    mem_fence_global();
                    old_counter_38531 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38507)[sext_i32_i64(srem32(flat_segment_id_38521,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38516)[0] =
                        old_counter_38531 == groups_per_segment_38500 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38532;
            
            is_last_group_38532 = ((__local bool *) sync_arr_mem_38516)[0];
            if (is_last_group_38532) {
                if (local_tid_38510 == 0) {
                    old_counter_38531 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38507)[sext_i32_i64(srem32(flat_segment_id_38521,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38500));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38533 =
                            sdiv_up64(groups_per_segment_38500,
                                      segred_group_sizze_33173);
                    
                    x_33177 = 0.0F;
                    for (int64_t i_38534 = 0; i_38534 < read_per_thread_38533;
                         i_38534++) {
                        int64_t group_res_id_38535 =
                                sext_i32_i64(local_tid_38510) *
                                read_per_thread_38533 + i_38534;
                        int64_t index_of_group_res_38536 =
                                sext_i32_i64(flat_segment_id_38521) *
                                groups_per_segment_38500 + group_res_id_38535;
                        
                        if (slt64(group_res_id_38535,
                                  groups_per_segment_38500)) {
                            x_33178 = ((__global
                                        float *) group_res_arr_mem_38505)[index_of_group_res_38536 *
                                                                          segred_group_sizze_33173];
                            
                            float res_33179;
                            
                            res_33179 = x_33177 + x_33178;
                            x_33177 = res_33179;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510)] =
                    x_33177;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38537;
                    int32_t skip_waves_38538;
                    
                    skip_waves_38538 = 1;
                    
                    float x_38525;
                    float x_38526;
                    
                    offset_38537 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38510,
                                  sext_i64_i32(segred_group_sizze_33173))) {
                            x_38525 = ((__local
                                        float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510 +
                                                                    offset_38537)];
                        }
                    }
                    offset_38537 = 1;
                    while (slt32(offset_38537, wave_sizze_38512)) {
                        if (slt32(local_tid_38510 + offset_38537,
                                  sext_i64_i32(segred_group_sizze_33173)) &&
                            ((local_tid_38510 - squot32(local_tid_38510,
                                                        wave_sizze_38512) *
                              wave_sizze_38512) & (2 * offset_38537 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38526 = ((volatile __local
                                            float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510 +
                                                                        offset_38537)];
                            }
                            // apply reduction operation
                            {
                                float res_38527 = x_38525 + x_38526;
                                
                                x_38525 = res_38527;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510)] =
                                    x_38525;
                            }
                        }
                        offset_38537 *= 2;
                    }
                    while (slt32(skip_waves_38538,
                                 squot32(sext_i64_i32(segred_group_sizze_33173) +
                                         wave_sizze_38512 - 1,
                                         wave_sizze_38512))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38537 = skip_waves_38538 * wave_sizze_38512;
                        if (slt32(local_tid_38510 + offset_38537,
                                  sext_i64_i32(segred_group_sizze_33173)) &&
                            ((local_tid_38510 - squot32(local_tid_38510,
                                                        wave_sizze_38512) *
                              wave_sizze_38512) == 0 &&
                             (squot32(local_tid_38510, wave_sizze_38512) & (2 *
                                                                            skip_waves_38538 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38526 = ((__local
                                            float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510 +
                                                                        offset_38537)];
                            }
                            // apply reduction operation
                            {
                                float res_38527 = x_38525 + x_38526;
                                
                                x_38525 = res_38527;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38514)[sext_i32_i64(local_tid_38510)] =
                                    x_38525;
                            }
                        }
                        skip_waves_38538 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38510 == 0) {
                            ((__global float *) mem_37267)[gtid_33118] =
                                x_38525;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33173
}
__kernel void mainzisegred_large_33148(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38456_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38454_backing_aligned_1,
                                       int64_t N_24798, int64_t res_24810,
                                       int64_t num_groups_33160, __global
                                       unsigned char *images_mem_36738, __global
                                       unsigned char *mem_37264,
                                       int64_t groups_per_segment_38440,
                                       int64_t elements_per_thread_38441,
                                       int64_t virt_num_groups_38442,
                                       int64_t threads_per_segment_38444,
                                       __global
                                       unsigned char *group_res_arr_mem_38445,
                                       __global
                                       unsigned char *mainzicounter_mem_38447)
{
    #define segred_group_sizze_33159 (mainzisegred_group_sizze_33142)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38456_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38456_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38454_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38454_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38449;
    int32_t local_tid_38450;
    int64_t group_sizze_38453;
    int32_t wave_sizze_38452;
    int32_t group_tid_38451;
    
    global_tid_38449 = get_global_id(0);
    local_tid_38450 = get_local_id(0);
    group_sizze_38453 = get_local_size(0);
    wave_sizze_38452 = LOCKSTEP_WIDTH;
    group_tid_38451 = get_group_id(0);
    
    int32_t phys_tid_33148;
    
    phys_tid_33148 = global_tid_38449;
    
    __local char *red_arr_mem_38454;
    
    red_arr_mem_38454 = (__local char *) red_arr_mem_38454_backing_0;
    
    __local char *sync_arr_mem_38456;
    
    sync_arr_mem_38456 = (__local char *) sync_arr_mem_38456_backing_1;
    
    int32_t phys_group_id_38458;
    
    phys_group_id_38458 = get_group_id(0);
    for (int32_t i_38459 = 0; i_38459 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38442) - phys_group_id_38458,
                   sext_i64_i32(num_groups_33160)); i_38459++) {
        int32_t virt_group_id_38460 = phys_group_id_38458 + i_38459 *
                sext_i64_i32(num_groups_33160);
        int32_t flat_segment_id_38461 = squot32(virt_group_id_38460,
                                                sext_i64_i32(groups_per_segment_38440));
        int64_t global_tid_38462 = srem64(sext_i32_i64(virt_group_id_38460) *
                                          segred_group_sizze_33159 +
                                          sext_i32_i64(local_tid_38450),
                                          segred_group_sizze_33159 *
                                          groups_per_segment_38440);
        int64_t gtid_33139 = sext_i32_i64(flat_segment_id_38461);
        int64_t gtid_33147;
        int32_t x_acc_38463;
        int64_t chunk_sizze_38464;
        
        chunk_sizze_38464 = smin64(elements_per_thread_38441,
                                   sdiv_up64(res_24810 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38462)),
                                             threads_per_segment_38444));
        
        int32_t x_33163;
        int32_t x_33164;
        
        // neutral-initialise the accumulators
        {
            x_acc_38463 = 0;
        }
        for (int64_t i_38468 = 0; i_38468 < chunk_sizze_38464; i_38468++) {
            gtid_33147 = sext_i32_i64(sext_i64_i32(global_tid_38462)) +
                threads_per_segment_38444 * i_38468;
            // apply map function
            {
                float x_33167 = ((__global
                                  float *) images_mem_36738)[gtid_33139 *
                                                             N_24798 +
                                                             gtid_33147];
                bool res_33168;
                
                res_33168 = futrts_isnan32(x_33167);
                
                bool cond_33169 = !res_33168;
                int32_t res_33170 = btoi_bool_i32(cond_33169);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_33163 = x_acc_38463;
                }
                // load new values
                {
                    x_33164 = res_33170;
                }
                // apply reduction operator
                {
                    int32_t res_33165 = add32(x_33163, x_33164);
                    
                    // store in accumulator
                    {
                        x_acc_38463 = res_33165;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_33163 = x_acc_38463;
            ((__local
              int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450)] =
                x_33163;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38469;
        int32_t skip_waves_38470;
        
        skip_waves_38470 = 1;
        
        int32_t x_38465;
        int32_t x_38466;
        
        offset_38469 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38450,
                      sext_i64_i32(segred_group_sizze_33159))) {
                x_38465 = ((__local
                            int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450 +
                                                          offset_38469)];
            }
        }
        offset_38469 = 1;
        while (slt32(offset_38469, wave_sizze_38452)) {
            if (slt32(local_tid_38450 + offset_38469,
                      sext_i64_i32(segred_group_sizze_33159)) &&
                ((local_tid_38450 - squot32(local_tid_38450, wave_sizze_38452) *
                  wave_sizze_38452) & (2 * offset_38469 - 1)) == 0) {
                // read array element
                {
                    x_38466 = ((volatile __local
                                int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450 +
                                                              offset_38469)];
                }
                // apply reduction operation
                {
                    int32_t res_38467 = add32(x_38465, x_38466);
                    
                    x_38465 = res_38467;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450)] =
                        x_38465;
                }
            }
            offset_38469 *= 2;
        }
        while (slt32(skip_waves_38470,
                     squot32(sext_i64_i32(segred_group_sizze_33159) +
                             wave_sizze_38452 - 1, wave_sizze_38452))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38469 = skip_waves_38470 * wave_sizze_38452;
            if (slt32(local_tid_38450 + offset_38469,
                      sext_i64_i32(segred_group_sizze_33159)) &&
                ((local_tid_38450 - squot32(local_tid_38450, wave_sizze_38452) *
                  wave_sizze_38452) == 0 && (squot32(local_tid_38450,
                                                     wave_sizze_38452) & (2 *
                                                                          skip_waves_38470 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38466 = ((__local
                                int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450 +
                                                              offset_38469)];
                }
                // apply reduction operation
                {
                    int32_t res_38467 = add32(x_38465, x_38466);
                    
                    x_38465 = res_38467;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450)] =
                        x_38465;
                }
            }
            skip_waves_38470 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38450) == 0) {
                x_acc_38463 = x_38465;
            }
        }
        if (groups_per_segment_38440 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38450 == 0) {
                    ((__global int32_t *) mem_37264)[gtid_33139] = x_acc_38463;
                }
            }
        } else {
            int32_t old_counter_38471;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38450 == 0) {
                    ((__global
                      int32_t *) group_res_arr_mem_38445)[sext_i32_i64(virt_group_id_38460) *
                                                          segred_group_sizze_33159] =
                        x_acc_38463;
                    mem_fence_global();
                    old_counter_38471 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38447)[sext_i32_i64(srem32(flat_segment_id_38461,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38456)[0] =
                        old_counter_38471 == groups_per_segment_38440 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38472;
            
            is_last_group_38472 = ((__local bool *) sync_arr_mem_38456)[0];
            if (is_last_group_38472) {
                if (local_tid_38450 == 0) {
                    old_counter_38471 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38447)[sext_i32_i64(srem32(flat_segment_id_38461,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38440));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38473 =
                            sdiv_up64(groups_per_segment_38440,
                                      segred_group_sizze_33159);
                    
                    x_33163 = 0;
                    for (int64_t i_38474 = 0; i_38474 < read_per_thread_38473;
                         i_38474++) {
                        int64_t group_res_id_38475 =
                                sext_i32_i64(local_tid_38450) *
                                read_per_thread_38473 + i_38474;
                        int64_t index_of_group_res_38476 =
                                sext_i32_i64(flat_segment_id_38461) *
                                groups_per_segment_38440 + group_res_id_38475;
                        
                        if (slt64(group_res_id_38475,
                                  groups_per_segment_38440)) {
                            x_33164 = ((__global
                                        int32_t *) group_res_arr_mem_38445)[index_of_group_res_38476 *
                                                                            segred_group_sizze_33159];
                            
                            int32_t res_33165;
                            
                            res_33165 = add32(x_33163, x_33164);
                            x_33163 = res_33165;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450)] =
                    x_33163;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38477;
                    int32_t skip_waves_38478;
                    
                    skip_waves_38478 = 1;
                    
                    int32_t x_38465;
                    int32_t x_38466;
                    
                    offset_38477 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38450,
                                  sext_i64_i32(segred_group_sizze_33159))) {
                            x_38465 = ((__local
                                        int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450 +
                                                                      offset_38477)];
                        }
                    }
                    offset_38477 = 1;
                    while (slt32(offset_38477, wave_sizze_38452)) {
                        if (slt32(local_tid_38450 + offset_38477,
                                  sext_i64_i32(segred_group_sizze_33159)) &&
                            ((local_tid_38450 - squot32(local_tid_38450,
                                                        wave_sizze_38452) *
                              wave_sizze_38452) & (2 * offset_38477 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38466 = ((volatile __local
                                            int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450 +
                                                                          offset_38477)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38467 = add32(x_38465, x_38466);
                                
                                x_38465 = res_38467;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450)] =
                                    x_38465;
                            }
                        }
                        offset_38477 *= 2;
                    }
                    while (slt32(skip_waves_38478,
                                 squot32(sext_i64_i32(segred_group_sizze_33159) +
                                         wave_sizze_38452 - 1,
                                         wave_sizze_38452))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38477 = skip_waves_38478 * wave_sizze_38452;
                        if (slt32(local_tid_38450 + offset_38477,
                                  sext_i64_i32(segred_group_sizze_33159)) &&
                            ((local_tid_38450 - squot32(local_tid_38450,
                                                        wave_sizze_38452) *
                              wave_sizze_38452) == 0 &&
                             (squot32(local_tid_38450, wave_sizze_38452) & (2 *
                                                                            skip_waves_38478 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38466 = ((__local
                                            int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450 +
                                                                          offset_38477)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38467 = add32(x_38465, x_38466);
                                
                                x_38465 = res_38467;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_38454)[sext_i32_i64(local_tid_38450)] =
                                    x_38465;
                            }
                        }
                        skip_waves_38478 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38450 == 0) {
                            ((__global int32_t *) mem_37264)[gtid_33139] =
                                x_38465;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33159
}
__kernel void mainzisegred_large_33299(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38625_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38623_backing_aligned_1,
                                       int64_t N_24796, int64_t res_25158,
                                       int64_t num_groups_33317, __global
                                       unsigned char *res_mem_37197, __global
                                       unsigned char *res_mem_37276, __global
                                       unsigned char *res_mem_37277, __global
                                       unsigned char *mem_37326,
                                       int64_t groups_per_segment_38609,
                                       int64_t elements_per_thread_38610,
                                       int64_t virt_num_groups_38611,
                                       int64_t threads_per_segment_38613,
                                       __global
                                       unsigned char *group_res_arr_mem_38614,
                                       __global
                                       unsigned char *mainzicounter_mem_38616)
{
    #define segred_group_sizze_33316 (mainzisegred_group_sizze_33293)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38625_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38625_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38623_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38623_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38618;
    int32_t local_tid_38619;
    int64_t group_sizze_38622;
    int32_t wave_sizze_38621;
    int32_t group_tid_38620;
    
    global_tid_38618 = get_global_id(0);
    local_tid_38619 = get_local_id(0);
    group_sizze_38622 = get_local_size(0);
    wave_sizze_38621 = LOCKSTEP_WIDTH;
    group_tid_38620 = get_group_id(0);
    
    int32_t phys_tid_33299;
    
    phys_tid_33299 = global_tid_38618;
    
    __local char *red_arr_mem_38623;
    
    red_arr_mem_38623 = (__local char *) red_arr_mem_38623_backing_0;
    
    __local char *sync_arr_mem_38625;
    
    sync_arr_mem_38625 = (__local char *) sync_arr_mem_38625_backing_1;
    
    int32_t phys_group_id_38627;
    
    phys_group_id_38627 = get_group_id(0);
    for (int32_t i_38628 = 0; i_38628 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38611) - phys_group_id_38627,
                   sext_i64_i32(num_groups_33317)); i_38628++) {
        int32_t virt_group_id_38629 = phys_group_id_38627 + i_38628 *
                sext_i64_i32(num_groups_33317);
        int32_t flat_segment_id_38630 = squot32(virt_group_id_38629,
                                                sext_i64_i32(groups_per_segment_38609));
        int64_t global_tid_38631 = srem64(sext_i32_i64(virt_group_id_38629) *
                                          segred_group_sizze_33316 +
                                          sext_i32_i64(local_tid_38619),
                                          segred_group_sizze_33316 *
                                          groups_per_segment_38609);
        int64_t gtid_33290 = sext_i32_i64(flat_segment_id_38630);
        int64_t gtid_33298;
        float x_acc_38632;
        int64_t chunk_sizze_38633;
        
        chunk_sizze_38633 = smin64(elements_per_thread_38610,
                                   sdiv_up64(res_25158 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38631)),
                                             threads_per_segment_38613));
        
        float x_33320;
        float x_33321;
        
        // neutral-initialise the accumulators
        {
            x_acc_38632 = 0.0F;
        }
        for (int64_t i_38637 = 0; i_38637 < chunk_sizze_38633; i_38637++) {
            gtid_33298 = sext_i32_i64(sext_i64_i32(global_tid_38631)) +
                threads_per_segment_38613 * i_38637;
            // apply map function
            {
                int32_t x_33325 = ((__global
                                    int32_t *) res_mem_37276)[gtid_33290];
                int32_t index_primexp_35449 = sext_i64_i32(gtid_33298);
                bool cond_33327 = slt32(index_primexp_35449, x_33325);
                float res_33328;
                
                if (cond_33327) {
                    int32_t x_33324 = ((__global
                                        int32_t *) res_mem_37277)[gtid_33290];
                    int32_t x_33329 = add32(x_33324, index_primexp_35449);
                    int32_t x_33330 = sub32(x_33329, x_33325);
                    int32_t i_33331 = add32(1, x_33330);
                    int64_t i_33332 = sext_i32_i64(i_33331);
                    float res_33333 = ((__global
                                        float *) res_mem_37197)[gtid_33290 *
                                                                N_24796 +
                                                                i_33332];
                    
                    res_33328 = res_33333;
                } else {
                    res_33328 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_33320 = x_acc_38632;
                }
                // load new values
                {
                    x_33321 = res_33328;
                }
                // apply reduction operator
                {
                    float res_33322 = x_33320 + x_33321;
                    
                    // store in accumulator
                    {
                        x_acc_38632 = res_33322;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_33320 = x_acc_38632;
            ((__local
              float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619)] =
                x_33320;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38638;
        int32_t skip_waves_38639;
        
        skip_waves_38639 = 1;
        
        float x_38634;
        float x_38635;
        
        offset_38638 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38619,
                      sext_i64_i32(segred_group_sizze_33316))) {
                x_38634 = ((__local
                            float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619 +
                                                        offset_38638)];
            }
        }
        offset_38638 = 1;
        while (slt32(offset_38638, wave_sizze_38621)) {
            if (slt32(local_tid_38619 + offset_38638,
                      sext_i64_i32(segred_group_sizze_33316)) &&
                ((local_tid_38619 - squot32(local_tid_38619, wave_sizze_38621) *
                  wave_sizze_38621) & (2 * offset_38638 - 1)) == 0) {
                // read array element
                {
                    x_38635 = ((volatile __local
                                float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619 +
                                                            offset_38638)];
                }
                // apply reduction operation
                {
                    float res_38636 = x_38634 + x_38635;
                    
                    x_38634 = res_38636;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619)] =
                        x_38634;
                }
            }
            offset_38638 *= 2;
        }
        while (slt32(skip_waves_38639,
                     squot32(sext_i64_i32(segred_group_sizze_33316) +
                             wave_sizze_38621 - 1, wave_sizze_38621))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38638 = skip_waves_38639 * wave_sizze_38621;
            if (slt32(local_tid_38619 + offset_38638,
                      sext_i64_i32(segred_group_sizze_33316)) &&
                ((local_tid_38619 - squot32(local_tid_38619, wave_sizze_38621) *
                  wave_sizze_38621) == 0 && (squot32(local_tid_38619,
                                                     wave_sizze_38621) & (2 *
                                                                          skip_waves_38639 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38635 = ((__local
                                float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619 +
                                                            offset_38638)];
                }
                // apply reduction operation
                {
                    float res_38636 = x_38634 + x_38635;
                    
                    x_38634 = res_38636;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619)] =
                        x_38634;
                }
            }
            skip_waves_38639 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38619) == 0) {
                x_acc_38632 = x_38634;
            }
        }
        if (groups_per_segment_38609 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38619 == 0) {
                    ((__global float *) mem_37326)[gtid_33290] = x_acc_38632;
                }
            }
        } else {
            int32_t old_counter_38640;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38619 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38614)[sext_i32_i64(virt_group_id_38629) *
                                                        segred_group_sizze_33316] =
                        x_acc_38632;
                    mem_fence_global();
                    old_counter_38640 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38616)[sext_i32_i64(srem32(flat_segment_id_38630,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38625)[0] =
                        old_counter_38640 == groups_per_segment_38609 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38641;
            
            is_last_group_38641 = ((__local bool *) sync_arr_mem_38625)[0];
            if (is_last_group_38641) {
                if (local_tid_38619 == 0) {
                    old_counter_38640 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38616)[sext_i32_i64(srem32(flat_segment_id_38630,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38609));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38642 =
                            sdiv_up64(groups_per_segment_38609,
                                      segred_group_sizze_33316);
                    
                    x_33320 = 0.0F;
                    for (int64_t i_38643 = 0; i_38643 < read_per_thread_38642;
                         i_38643++) {
                        int64_t group_res_id_38644 =
                                sext_i32_i64(local_tid_38619) *
                                read_per_thread_38642 + i_38643;
                        int64_t index_of_group_res_38645 =
                                sext_i32_i64(flat_segment_id_38630) *
                                groups_per_segment_38609 + group_res_id_38644;
                        
                        if (slt64(group_res_id_38644,
                                  groups_per_segment_38609)) {
                            x_33321 = ((__global
                                        float *) group_res_arr_mem_38614)[index_of_group_res_38645 *
                                                                          segred_group_sizze_33316];
                            
                            float res_33322;
                            
                            res_33322 = x_33320 + x_33321;
                            x_33320 = res_33322;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619)] =
                    x_33320;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38646;
                    int32_t skip_waves_38647;
                    
                    skip_waves_38647 = 1;
                    
                    float x_38634;
                    float x_38635;
                    
                    offset_38646 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38619,
                                  sext_i64_i32(segred_group_sizze_33316))) {
                            x_38634 = ((__local
                                        float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619 +
                                                                    offset_38646)];
                        }
                    }
                    offset_38646 = 1;
                    while (slt32(offset_38646, wave_sizze_38621)) {
                        if (slt32(local_tid_38619 + offset_38646,
                                  sext_i64_i32(segred_group_sizze_33316)) &&
                            ((local_tid_38619 - squot32(local_tid_38619,
                                                        wave_sizze_38621) *
                              wave_sizze_38621) & (2 * offset_38646 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38635 = ((volatile __local
                                            float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619 +
                                                                        offset_38646)];
                            }
                            // apply reduction operation
                            {
                                float res_38636 = x_38634 + x_38635;
                                
                                x_38634 = res_38636;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619)] =
                                    x_38634;
                            }
                        }
                        offset_38646 *= 2;
                    }
                    while (slt32(skip_waves_38647,
                                 squot32(sext_i64_i32(segred_group_sizze_33316) +
                                         wave_sizze_38621 - 1,
                                         wave_sizze_38621))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38646 = skip_waves_38647 * wave_sizze_38621;
                        if (slt32(local_tid_38619 + offset_38646,
                                  sext_i64_i32(segred_group_sizze_33316)) &&
                            ((local_tid_38619 - squot32(local_tid_38619,
                                                        wave_sizze_38621) *
                              wave_sizze_38621) == 0 &&
                             (squot32(local_tid_38619, wave_sizze_38621) & (2 *
                                                                            skip_waves_38647 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38635 = ((__local
                                            float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619 +
                                                                        offset_38646)];
                            }
                            // apply reduction operation
                            {
                                float res_38636 = x_38634 + x_38635;
                                
                                x_38634 = res_38636;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38623)[sext_i32_i64(local_tid_38619)] =
                                    x_38634;
                            }
                        }
                        skip_waves_38647 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38619 == 0) {
                            ((__global float *) mem_37326)[gtid_33290] =
                                x_38634;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33316
}
__kernel void mainzisegred_large_34848(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38856_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38854_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_38852_backing_aligned_2,
                                       __local volatile
                                       int64_t *red_arr_mem_38850_backing_aligned_3,
                                       int64_t iota32_arg_25183,
                                       int64_t num_groups_35019, __global
                                       unsigned char *mem_37332, __global
                                       unsigned char *mem_37492, __global
                                       unsigned char *mem_37494, __global
                                       unsigned char *mem_37498, __global
                                       unsigned char *mem_37501, __global
                                       unsigned char *mem_37503, __global
                                       unsigned char *mem_37505,
                                       int64_t groups_per_segment_38832,
                                       int64_t elements_per_thread_38833,
                                       int64_t virt_num_groups_38834, __global
                                       unsigned char *group_res_arr_mem_38837,
                                       __global
                                       unsigned char *group_res_arr_mem_38839,
                                       __global
                                       unsigned char *group_res_arr_mem_38841,
                                       __global
                                       unsigned char *mainzicounter_mem_38843)
{
    #define segred_group_sizze_35018 (mainzisegred_group_sizze_34842)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38856_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_38856_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38854_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38854_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38852_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38852_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_38850_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38850_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38845;
    int32_t local_tid_38846;
    int64_t group_sizze_38849;
    int32_t wave_sizze_38848;
    int32_t group_tid_38847;
    
    global_tid_38845 = get_global_id(0);
    local_tid_38846 = get_local_id(0);
    group_sizze_38849 = get_local_size(0);
    wave_sizze_38848 = LOCKSTEP_WIDTH;
    group_tid_38847 = get_group_id(0);
    
    int32_t phys_tid_34848;
    
    phys_tid_34848 = global_tid_38845;
    
    __local char *red_arr_mem_38850;
    
    red_arr_mem_38850 = (__local char *) red_arr_mem_38850_backing_0;
    
    __local char *red_arr_mem_38852;
    
    red_arr_mem_38852 = (__local char *) red_arr_mem_38852_backing_1;
    
    __local char *red_arr_mem_38854;
    
    red_arr_mem_38854 = (__local char *) red_arr_mem_38854_backing_2;
    
    __local char *sync_arr_mem_38856;
    
    sync_arr_mem_38856 = (__local char *) sync_arr_mem_38856_backing_3;
    
    int32_t phys_group_id_38858;
    
    phys_group_id_38858 = get_group_id(0);
    for (int32_t i_38859 = 0; i_38859 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38834) - phys_group_id_38858,
                   sext_i64_i32(num_groups_35019)); i_38859++) {
        int32_t virt_group_id_38860 = phys_group_id_38858 + i_38859 *
                sext_i64_i32(num_groups_35019);
        int32_t flat_segment_id_38861 = squot32(virt_group_id_38860,
                                                sext_i64_i32(groups_per_segment_38832));
        int64_t global_tid_38862 = srem64(sext_i32_i64(virt_group_id_38860) *
                                          segred_group_sizze_35018 +
                                          sext_i32_i64(local_tid_38846),
                                          segred_group_sizze_35018 *
                                          groups_per_segment_38832);
        int64_t gtid_34839 = sext_i32_i64(flat_segment_id_38861);
        int64_t gtid_34847;
        bool x_acc_38863;
        int32_t x_acc_38864;
        float x_acc_38865;
        int64_t chunk_sizze_38866;
        int64_t starting_point_38867;
        
        starting_point_38867 = sext_i32_i64(sext_i64_i32(global_tid_38862)) *
            elements_per_thread_38833;
        
        int64_t remaining_elements_38868;
        
        remaining_elements_38868 = iota32_arg_25183 - starting_point_38867;
        if (sle64(remaining_elements_38868, 0) || sle64(iota32_arg_25183,
                                                        starting_point_38867)) {
            chunk_sizze_38866 = 0;
        } else {
            if (slt64(iota32_arg_25183,
                      (sext_i32_i64(sext_i64_i32(global_tid_38862)) + 1) *
                      elements_per_thread_38833)) {
                chunk_sizze_38866 = iota32_arg_25183 -
                    sext_i32_i64(sext_i64_i32(global_tid_38862)) *
                    elements_per_thread_38833;
            } else {
                chunk_sizze_38866 = elements_per_thread_38833;
            }
        }
        
        bool x_35024;
        int32_t x_35025;
        float x_35026;
        bool x_35027;
        int32_t x_35028;
        float x_35029;
        
        // neutral-initialise the accumulators
        {
            x_acc_38863 = 0;
            x_acc_38864 = -1;
            x_acc_38865 = 0.0F;
        }
        for (int64_t i_38883 = 0; i_38883 < elements_per_thread_38833;
             i_38883++) {
            gtid_34847 = sext_i32_i64(local_tid_38846) +
                (sext_i32_i64(squot32(sext_i64_i32(global_tid_38862),
                                      sext_i64_i32(segred_group_sizze_35018))) *
                 elements_per_thread_38833 + i_38883) *
                segred_group_sizze_35018;
            if (slt64(gtid_34847, iota32_arg_25183)) {
                // apply map function
                {
                    int32_t y_35038 = ((__global
                                        int32_t *) mem_37494)[gtid_34839];
                    float y_35039 = ((__global float *) mem_37492)[gtid_34839];
                    float x_35043 = ((__global float *) mem_37498)[gtid_34839 *
                                                                   iota32_arg_25183 +
                                                                   gtid_34847];
                    float x_35044 = ((__global float *) mem_37332)[gtid_34847];
                    int32_t index_primexp_35466 = sext_i64_i32(gtid_34847);
                    float res_35047 = x_35043 / y_35039;
                    bool cond_35048 = slt32(index_primexp_35466, y_35038);
                    bool res_35049;
                    
                    res_35049 = futrts_isnan32(res_35047);
                    
                    bool res_35050 = !res_35049;
                    bool x_35051 = cond_35048 && res_35050;
                    float res_35052 = (float) fabs(res_35047);
                    bool res_35053 = x_35044 < res_35052;
                    bool x_35054 = x_35051 && res_35053;
                    float res_35055;
                    
                    if (cond_35048) {
                        res_35055 = res_35047;
                    } else {
                        res_35055 = 0.0F;
                    }
                    // save map-out results
                    { }
                    // load accumulator
                    {
                        x_35024 = x_acc_38863;
                        x_35025 = x_acc_38864;
                        x_35026 = x_acc_38865;
                    }
                    // load new values
                    {
                        x_35027 = x_35054;
                        x_35028 = index_primexp_35466;
                        x_35029 = res_35055;
                    }
                    // apply reduction operator
                    {
                        bool res_35030;
                        int32_t res_35031;
                        
                        if (x_35024) {
                            res_35030 = x_35024;
                            res_35031 = x_35025;
                        } else {
                            bool x_35032 = x_35027 && x_35027;
                            bool x_35033 = !x_35027;
                            bool y_35034 = x_35024 && x_35033;
                            bool res_35035 = x_35032 || y_35034;
                            int32_t res_35036;
                            
                            if (x_35027) {
                                res_35036 = x_35028;
                            } else {
                                res_35036 = x_35025;
                            }
                            res_35030 = res_35035;
                            res_35031 = res_35036;
                        }
                        
                        float res_35037 = x_35026 + x_35029;
                        
                        // store in accumulator
                        {
                            x_acc_38863 = res_35030;
                            x_acc_38864 = res_35031;
                            x_acc_38865 = res_35037;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_35024 = x_acc_38863;
                x_35025 = x_acc_38864;
                x_35026 = x_acc_38865;
                ((__local
                  bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846)] =
                    x_35024;
                ((__local
                  int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846)] =
                    x_35025;
                ((__local
                  float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846)] =
                    x_35026;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_38884;
            int32_t skip_waves_38885;
            
            skip_waves_38885 = 1;
            
            bool x_38869;
            int32_t x_38870;
            float x_38871;
            bool x_38872;
            int32_t x_38873;
            float x_38874;
            
            offset_38884 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38846,
                          sext_i64_i32(segred_group_sizze_35018))) {
                    x_38869 = ((__local
                                bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846 +
                                                           offset_38884)];
                    x_38870 = ((__local
                                int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846 +
                                                              offset_38884)];
                    x_38871 = ((__local
                                float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846 +
                                                            offset_38884)];
                }
            }
            offset_38884 = 1;
            while (slt32(offset_38884, wave_sizze_38848)) {
                if (slt32(local_tid_38846 + offset_38884,
                          sext_i64_i32(segred_group_sizze_35018)) &&
                    ((local_tid_38846 - squot32(local_tid_38846,
                                                wave_sizze_38848) *
                      wave_sizze_38848) & (2 * offset_38884 - 1)) == 0) {
                    // read array element
                    {
                        x_38872 = ((volatile __local
                                    bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846 +
                                                               offset_38884)];
                        x_38873 = ((volatile __local
                                    int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846 +
                                                                  offset_38884)];
                        x_38874 = ((volatile __local
                                    float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846 +
                                                                offset_38884)];
                    }
                    // apply reduction operation
                    {
                        bool res_38875;
                        int32_t res_38876;
                        
                        if (x_38869) {
                            res_38875 = x_38869;
                            res_38876 = x_38870;
                        } else {
                            bool x_38877 = x_38872 && x_38872;
                            bool x_38878 = !x_38872;
                            bool y_38879 = x_38869 && x_38878;
                            bool res_38880 = x_38877 || y_38879;
                            int32_t res_38881;
                            
                            if (x_38872) {
                                res_38881 = x_38873;
                            } else {
                                res_38881 = x_38870;
                            }
                            res_38875 = res_38880;
                            res_38876 = res_38881;
                        }
                        
                        float res_38882 = x_38871 + x_38874;
                        
                        x_38869 = res_38875;
                        x_38870 = res_38876;
                        x_38871 = res_38882;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846)] =
                            x_38869;
                        ((volatile __local
                          int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846)] =
                            x_38870;
                        ((volatile __local
                          float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846)] =
                            x_38871;
                    }
                }
                offset_38884 *= 2;
            }
            while (slt32(skip_waves_38885,
                         squot32(sext_i64_i32(segred_group_sizze_35018) +
                                 wave_sizze_38848 - 1, wave_sizze_38848))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38884 = skip_waves_38885 * wave_sizze_38848;
                if (slt32(local_tid_38846 + offset_38884,
                          sext_i64_i32(segred_group_sizze_35018)) &&
                    ((local_tid_38846 - squot32(local_tid_38846,
                                                wave_sizze_38848) *
                      wave_sizze_38848) == 0 && (squot32(local_tid_38846,
                                                         wave_sizze_38848) &
                                                 (2 * skip_waves_38885 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38872 = ((__local
                                    bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846 +
                                                               offset_38884)];
                        x_38873 = ((__local
                                    int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846 +
                                                                  offset_38884)];
                        x_38874 = ((__local
                                    float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846 +
                                                                offset_38884)];
                    }
                    // apply reduction operation
                    {
                        bool res_38875;
                        int32_t res_38876;
                        
                        if (x_38869) {
                            res_38875 = x_38869;
                            res_38876 = x_38870;
                        } else {
                            bool x_38877 = x_38872 && x_38872;
                            bool x_38878 = !x_38872;
                            bool y_38879 = x_38869 && x_38878;
                            bool res_38880 = x_38877 || y_38879;
                            int32_t res_38881;
                            
                            if (x_38872) {
                                res_38881 = x_38873;
                            } else {
                                res_38881 = x_38870;
                            }
                            res_38875 = res_38880;
                            res_38876 = res_38881;
                        }
                        
                        float res_38882 = x_38871 + x_38874;
                        
                        x_38869 = res_38875;
                        x_38870 = res_38876;
                        x_38871 = res_38882;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846)] =
                            x_38869;
                        ((__local
                          int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846)] =
                            x_38870;
                        ((__local
                          float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846)] =
                            x_38871;
                    }
                }
                skip_waves_38885 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_38846) == 0) {
                    x_acc_38863 = x_38869;
                    x_acc_38864 = x_38870;
                    x_acc_38865 = x_38871;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_38846) == 0)) {
                    x_acc_38863 = 0;
                    x_acc_38864 = -1;
                    x_acc_38865 = 0.0F;
                }
            }
        }
        x_35024 = x_acc_38863;
        x_35025 = x_acc_38864;
        x_35026 = x_acc_38865;
        if (groups_per_segment_38832 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38846 == 0) {
                    ((__global bool *) mem_37501)[gtid_34839] = x_acc_38863;
                    ((__global int32_t *) mem_37503)[gtid_34839] = x_acc_38864;
                    ((__global float *) mem_37505)[gtid_34839] = x_acc_38865;
                }
            }
        } else {
            int32_t old_counter_38886;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38846 == 0) {
                    ((__global
                      bool *) group_res_arr_mem_38837)[sext_i32_i64(virt_group_id_38860) *
                                                       segred_group_sizze_35018] =
                        x_acc_38863;
                    ((__global
                      int32_t *) group_res_arr_mem_38839)[sext_i32_i64(virt_group_id_38860) *
                                                          segred_group_sizze_35018] =
                        x_acc_38864;
                    ((__global
                      float *) group_res_arr_mem_38841)[sext_i32_i64(virt_group_id_38860) *
                                                        segred_group_sizze_35018] =
                        x_acc_38865;
                    mem_fence_global();
                    old_counter_38886 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38843)[sext_i32_i64(srem32(flat_segment_id_38861,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38856)[0] =
                        old_counter_38886 == groups_per_segment_38832 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38887;
            
            is_last_group_38887 = ((__local bool *) sync_arr_mem_38856)[0];
            if (is_last_group_38887) {
                if (local_tid_38846 == 0) {
                    old_counter_38886 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38843)[sext_i32_i64(srem32(flat_segment_id_38861,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38832));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38888 =
                            sdiv_up64(groups_per_segment_38832,
                                      segred_group_sizze_35018);
                    
                    x_35024 = 0;
                    x_35025 = -1;
                    x_35026 = 0.0F;
                    for (int64_t i_38889 = 0; i_38889 < read_per_thread_38888;
                         i_38889++) {
                        int64_t group_res_id_38890 =
                                sext_i32_i64(local_tid_38846) *
                                read_per_thread_38888 + i_38889;
                        int64_t index_of_group_res_38891 =
                                sext_i32_i64(flat_segment_id_38861) *
                                groups_per_segment_38832 + group_res_id_38890;
                        
                        if (slt64(group_res_id_38890,
                                  groups_per_segment_38832)) {
                            x_35027 = ((__global
                                        bool *) group_res_arr_mem_38837)[index_of_group_res_38891 *
                                                                         segred_group_sizze_35018];
                            x_35028 = ((__global
                                        int32_t *) group_res_arr_mem_38839)[index_of_group_res_38891 *
                                                                            segred_group_sizze_35018];
                            x_35029 = ((__global
                                        float *) group_res_arr_mem_38841)[index_of_group_res_38891 *
                                                                          segred_group_sizze_35018];
                            
                            bool res_35030;
                            int32_t res_35031;
                            
                            if (x_35024) {
                                res_35030 = x_35024;
                                res_35031 = x_35025;
                            } else {
                                bool x_35032 = x_35027 && x_35027;
                                bool x_35033 = !x_35027;
                                bool y_35034 = x_35024 && x_35033;
                                bool res_35035 = x_35032 || y_35034;
                                int32_t res_35036;
                                
                                if (x_35027) {
                                    res_35036 = x_35028;
                                } else {
                                    res_35036 = x_35025;
                                }
                                res_35030 = res_35035;
                                res_35031 = res_35036;
                            }
                            
                            float res_35037 = x_35026 + x_35029;
                            
                            x_35024 = res_35030;
                            x_35025 = res_35031;
                            x_35026 = res_35037;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846)] =
                    x_35024;
                ((__local
                  int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846)] =
                    x_35025;
                ((__local
                  float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846)] =
                    x_35026;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38892;
                    int32_t skip_waves_38893;
                    
                    skip_waves_38893 = 1;
                    
                    bool x_38869;
                    int32_t x_38870;
                    float x_38871;
                    bool x_38872;
                    int32_t x_38873;
                    float x_38874;
                    
                    offset_38892 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38846,
                                  sext_i64_i32(segred_group_sizze_35018))) {
                            x_38869 = ((__local
                                        bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846 +
                                                                   offset_38892)];
                            x_38870 = ((__local
                                        int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846 +
                                                                      offset_38892)];
                            x_38871 = ((__local
                                        float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846 +
                                                                    offset_38892)];
                        }
                    }
                    offset_38892 = 1;
                    while (slt32(offset_38892, wave_sizze_38848)) {
                        if (slt32(local_tid_38846 + offset_38892,
                                  sext_i64_i32(segred_group_sizze_35018)) &&
                            ((local_tid_38846 - squot32(local_tid_38846,
                                                        wave_sizze_38848) *
                              wave_sizze_38848) & (2 * offset_38892 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38872 = ((volatile __local
                                            bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846 +
                                                                       offset_38892)];
                                x_38873 = ((volatile __local
                                            int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846 +
                                                                          offset_38892)];
                                x_38874 = ((volatile __local
                                            float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846 +
                                                                        offset_38892)];
                            }
                            // apply reduction operation
                            {
                                bool res_38875;
                                int32_t res_38876;
                                
                                if (x_38869) {
                                    res_38875 = x_38869;
                                    res_38876 = x_38870;
                                } else {
                                    bool x_38877 = x_38872 && x_38872;
                                    bool x_38878 = !x_38872;
                                    bool y_38879 = x_38869 && x_38878;
                                    bool res_38880 = x_38877 || y_38879;
                                    int32_t res_38881;
                                    
                                    if (x_38872) {
                                        res_38881 = x_38873;
                                    } else {
                                        res_38881 = x_38870;
                                    }
                                    res_38875 = res_38880;
                                    res_38876 = res_38881;
                                }
                                
                                float res_38882 = x_38871 + x_38874;
                                
                                x_38869 = res_38875;
                                x_38870 = res_38876;
                                x_38871 = res_38882;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846)] =
                                    x_38869;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846)] =
                                    x_38870;
                                ((volatile __local
                                  float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846)] =
                                    x_38871;
                            }
                        }
                        offset_38892 *= 2;
                    }
                    while (slt32(skip_waves_38893,
                                 squot32(sext_i64_i32(segred_group_sizze_35018) +
                                         wave_sizze_38848 - 1,
                                         wave_sizze_38848))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38892 = skip_waves_38893 * wave_sizze_38848;
                        if (slt32(local_tid_38846 + offset_38892,
                                  sext_i64_i32(segred_group_sizze_35018)) &&
                            ((local_tid_38846 - squot32(local_tid_38846,
                                                        wave_sizze_38848) *
                              wave_sizze_38848) == 0 &&
                             (squot32(local_tid_38846, wave_sizze_38848) & (2 *
                                                                            skip_waves_38893 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38872 = ((__local
                                            bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846 +
                                                                       offset_38892)];
                                x_38873 = ((__local
                                            int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846 +
                                                                          offset_38892)];
                                x_38874 = ((__local
                                            float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846 +
                                                                        offset_38892)];
                            }
                            // apply reduction operation
                            {
                                bool res_38875;
                                int32_t res_38876;
                                
                                if (x_38869) {
                                    res_38875 = x_38869;
                                    res_38876 = x_38870;
                                } else {
                                    bool x_38877 = x_38872 && x_38872;
                                    bool x_38878 = !x_38872;
                                    bool y_38879 = x_38869 && x_38878;
                                    bool res_38880 = x_38877 || y_38879;
                                    int32_t res_38881;
                                    
                                    if (x_38872) {
                                        res_38881 = x_38873;
                                    } else {
                                        res_38881 = x_38870;
                                    }
                                    res_38875 = res_38880;
                                    res_38876 = res_38881;
                                }
                                
                                float res_38882 = x_38871 + x_38874;
                                
                                x_38869 = res_38875;
                                x_38870 = res_38876;
                                x_38871 = res_38882;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_38850)[sext_i32_i64(local_tid_38846)] =
                                    x_38869;
                                ((__local
                                  int32_t *) red_arr_mem_38852)[sext_i32_i64(local_tid_38846)] =
                                    x_38870;
                                ((__local
                                  float *) red_arr_mem_38854)[sext_i32_i64(local_tid_38846)] =
                                    x_38871;
                            }
                        }
                        skip_waves_38893 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38846 == 0) {
                            ((__global bool *) mem_37501)[gtid_34839] = x_38869;
                            ((__global int32_t *) mem_37503)[gtid_34839] =
                                x_38870;
                            ((__global float *) mem_37505)[gtid_34839] =
                                x_38871;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35018
}
__kernel void mainzisegred_nonseg_33217(__global int *global_failure,
                                        __local volatile
                                        int64_t *red_arr_mem_38559_backing_aligned_0,
                                        __local volatile
                                        int64_t *sync_arr_mem_38557_backing_aligned_1,
                                        int64_t m_24797,
                                        int64_t num_groups_33212, __global
                                        unsigned char *res_mem_37276, __global
                                        unsigned char *mem_37281, __global
                                        unsigned char *mainzicounter_mem_38547,
                                        __global
                                        unsigned char *group_res_arr_mem_38549,
                                        int64_t num_threads_38551)
{
    #define segred_group_sizze_33210 (mainzisegred_group_sizze_33209)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38559_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38559_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_38557_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_38557_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38552;
    int32_t local_tid_38553;
    int64_t group_sizze_38556;
    int32_t wave_sizze_38555;
    int32_t group_tid_38554;
    
    global_tid_38552 = get_global_id(0);
    local_tid_38553 = get_local_id(0);
    group_sizze_38556 = get_local_size(0);
    wave_sizze_38555 = LOCKSTEP_WIDTH;
    group_tid_38554 = get_group_id(0);
    
    int32_t phys_tid_33217;
    
    phys_tid_33217 = global_tid_38552;
    
    __local char *sync_arr_mem_38557;
    
    sync_arr_mem_38557 = (__local char *) sync_arr_mem_38557_backing_0;
    
    __local char *red_arr_mem_38559;
    
    red_arr_mem_38559 = (__local char *) red_arr_mem_38559_backing_1;
    
    int64_t dummy_33215;
    
    dummy_33215 = 0;
    
    int64_t gtid_33216;
    
    gtid_33216 = 0;
    
    int32_t x_acc_38561;
    int64_t chunk_sizze_38562;
    
    chunk_sizze_38562 = smin64(sdiv_up64(m_24797,
                                         sext_i32_i64(sext_i64_i32(segred_group_sizze_33210 *
                                         num_groups_33212))),
                               sdiv_up64(m_24797 - sext_i32_i64(phys_tid_33217),
                                         num_threads_38551));
    
    int32_t x_25154;
    int32_t x_25155;
    
    // neutral-initialise the accumulators
    {
        x_acc_38561 = 0;
    }
    for (int64_t i_38566 = 0; i_38566 < chunk_sizze_38562; i_38566++) {
        gtid_33216 = sext_i32_i64(phys_tid_33217) + num_threads_38551 * i_38566;
        // apply map function
        {
            int32_t x_25157 = ((__global int32_t *) res_mem_37276)[gtid_33216];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_25154 = x_acc_38561;
            }
            // load new values
            {
                x_25155 = x_25157;
            }
            // apply reduction operator
            {
                int32_t res_25156 = smax32(x_25154, x_25155);
                
                // store in accumulator
                {
                    x_acc_38561 = res_25156;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_25154 = x_acc_38561;
        ((__local int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553)] =
            x_25154;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38567;
    int32_t skip_waves_38568;
    
    skip_waves_38568 = 1;
    
    int32_t x_38563;
    int32_t x_38564;
    
    offset_38567 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38553, sext_i64_i32(segred_group_sizze_33210))) {
            x_38563 = ((__local
                        int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553 +
                                                      offset_38567)];
        }
    }
    offset_38567 = 1;
    while (slt32(offset_38567, wave_sizze_38555)) {
        if (slt32(local_tid_38553 + offset_38567,
                  sext_i64_i32(segred_group_sizze_33210)) && ((local_tid_38553 -
                                                               squot32(local_tid_38553,
                                                                       wave_sizze_38555) *
                                                               wave_sizze_38555) &
                                                              (2 *
                                                               offset_38567 -
                                                               1)) == 0) {
            // read array element
            {
                x_38564 = ((volatile __local
                            int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553 +
                                                          offset_38567)];
            }
            // apply reduction operation
            {
                int32_t res_38565 = smax32(x_38563, x_38564);
                
                x_38563 = res_38565;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553)] =
                    x_38563;
            }
        }
        offset_38567 *= 2;
    }
    while (slt32(skip_waves_38568,
                 squot32(sext_i64_i32(segred_group_sizze_33210) +
                         wave_sizze_38555 - 1, wave_sizze_38555))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38567 = skip_waves_38568 * wave_sizze_38555;
        if (slt32(local_tid_38553 + offset_38567,
                  sext_i64_i32(segred_group_sizze_33210)) && ((local_tid_38553 -
                                                               squot32(local_tid_38553,
                                                                       wave_sizze_38555) *
                                                               wave_sizze_38555) ==
                                                              0 &&
                                                              (squot32(local_tid_38553,
                                                                       wave_sizze_38555) &
                                                               (2 *
                                                                skip_waves_38568 -
                                                                1)) == 0)) {
            // read array element
            {
                x_38564 = ((__local
                            int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553 +
                                                          offset_38567)];
            }
            // apply reduction operation
            {
                int32_t res_38565 = smax32(x_38563, x_38564);
                
                x_38563 = res_38565;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553)] =
                    x_38563;
            }
        }
        skip_waves_38568 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_38553) == 0) {
            x_acc_38561 = x_38563;
        }
    }
    
    int32_t old_counter_38569;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_38553 == 0) {
            ((__global
              int32_t *) group_res_arr_mem_38549)[sext_i32_i64(group_tid_38554) *
                                                  segred_group_sizze_33210] =
                x_acc_38561;
            mem_fence_global();
            old_counter_38569 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_38547)[0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_38557)[0] = old_counter_38569 ==
                num_groups_33212 - 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_38570;
    
    is_last_group_38570 = ((__local bool *) sync_arr_mem_38557)[0];
    if (is_last_group_38570) {
        if (local_tid_38553 == 0) {
            old_counter_38569 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_38547)[0],
                                                      (int) (0 -
                                                             num_groups_33212));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_38571 = sdiv_up64(num_groups_33212,
                                                      segred_group_sizze_33210);
            
            x_25154 = 0;
            for (int64_t i_38572 = 0; i_38572 < read_per_thread_38571;
                 i_38572++) {
                int64_t group_res_id_38573 = sext_i32_i64(local_tid_38553) *
                        read_per_thread_38571 + i_38572;
                int64_t index_of_group_res_38574 = group_res_id_38573;
                
                if (slt64(group_res_id_38573, num_groups_33212)) {
                    x_25155 = ((__global
                                int32_t *) group_res_arr_mem_38549)[index_of_group_res_38574 *
                                                                    segred_group_sizze_33210];
                    
                    int32_t res_25156;
                    
                    res_25156 = smax32(x_25154, x_25155);
                    x_25154 = res_25156;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553)] =
            x_25154;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_38575;
            int32_t skip_waves_38576;
            
            skip_waves_38576 = 1;
            
            int32_t x_38563;
            int32_t x_38564;
            
            offset_38575 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38553,
                          sext_i64_i32(segred_group_sizze_33210))) {
                    x_38563 = ((__local
                                int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553 +
                                                              offset_38575)];
                }
            }
            offset_38575 = 1;
            while (slt32(offset_38575, wave_sizze_38555)) {
                if (slt32(local_tid_38553 + offset_38575,
                          sext_i64_i32(segred_group_sizze_33210)) &&
                    ((local_tid_38553 - squot32(local_tid_38553,
                                                wave_sizze_38555) *
                      wave_sizze_38555) & (2 * offset_38575 - 1)) == 0) {
                    // read array element
                    {
                        x_38564 = ((volatile __local
                                    int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553 +
                                                                  offset_38575)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38565 = smax32(x_38563, x_38564);
                        
                        x_38563 = res_38565;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553)] =
                            x_38563;
                    }
                }
                offset_38575 *= 2;
            }
            while (slt32(skip_waves_38576,
                         squot32(sext_i64_i32(segred_group_sizze_33210) +
                                 wave_sizze_38555 - 1, wave_sizze_38555))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38575 = skip_waves_38576 * wave_sizze_38555;
                if (slt32(local_tid_38553 + offset_38575,
                          sext_i64_i32(segred_group_sizze_33210)) &&
                    ((local_tid_38553 - squot32(local_tid_38553,
                                                wave_sizze_38555) *
                      wave_sizze_38555) == 0 && (squot32(local_tid_38553,
                                                         wave_sizze_38555) &
                                                 (2 * skip_waves_38576 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38564 = ((__local
                                    int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553 +
                                                                  offset_38575)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38565 = smax32(x_38563, x_38564);
                        
                        x_38563 = res_38565;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_38559)[sext_i32_i64(local_tid_38553)] =
                            x_38563;
                    }
                }
                skip_waves_38576 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_38553 == 0) {
                    ((__global int32_t *) mem_37281)[0] = x_38563;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33210
}
__kernel void mainzisegred_small_31121(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_37909_backing_aligned_0,
                                       int64_t N_24796, int64_t m_24797,
                                       int64_t N_24798, int64_t res_24810,
                                       int64_t res_24816,
                                       int64_t num_groups_31260, __global
                                       unsigned char *images_mem_36738, __global
                                       unsigned char *binop_p_mem_36747,
                                       __global unsigned char *mem_36830,
                                       __global unsigned char *mem_36835,
                                       int64_t segment_sizze_nonzzero_37902)
{
    #define segred_group_sizze_31259 (mainzisegred_group_sizze_31115)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_37909_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37909_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37904;
    int32_t local_tid_37905;
    int64_t group_sizze_37908;
    int32_t wave_sizze_37907;
    int32_t group_tid_37906;
    
    global_tid_37904 = get_global_id(0);
    local_tid_37905 = get_local_id(0);
    group_sizze_37908 = get_local_size(0);
    wave_sizze_37907 = LOCKSTEP_WIDTH;
    group_tid_37906 = get_group_id(0);
    
    int32_t phys_tid_31121;
    
    phys_tid_31121 = global_tid_37904;
    
    __local char *red_arr_mem_37909;
    
    red_arr_mem_37909 = (__local char *) red_arr_mem_37909_backing_0;
    
    int32_t phys_group_id_37911;
    
    phys_group_id_37911 = get_group_id(0);
    for (int32_t i_37912 = 0; i_37912 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797 * res_24816 * res_24816,
                                          squot64(segred_group_sizze_31259,
                                                  segment_sizze_nonzzero_37902))) -
                   phys_group_id_37911, sext_i64_i32(num_groups_31260));
         i_37912++) {
        int32_t virt_group_id_37913 = phys_group_id_37911 + i_37912 *
                sext_i64_i32(num_groups_31260);
        int64_t gtid_31108 = squot64(squot64(sext_i32_i64(local_tid_37905),
                                             segment_sizze_nonzzero_37902) +
                                     sext_i32_i64(virt_group_id_37913) *
                                     squot64(segred_group_sizze_31259,
                                             segment_sizze_nonzzero_37902),
                                     res_24816 * res_24816);
        int64_t gtid_31109 = squot64(squot64(sext_i32_i64(local_tid_37905),
                                             segment_sizze_nonzzero_37902) +
                                     sext_i32_i64(virt_group_id_37913) *
                                     squot64(segred_group_sizze_31259,
                                             segment_sizze_nonzzero_37902) -
                                     squot64(squot64(sext_i32_i64(local_tid_37905),
                                                     segment_sizze_nonzzero_37902) +
                                             sext_i32_i64(virt_group_id_37913) *
                                             squot64(segred_group_sizze_31259,
                                                     segment_sizze_nonzzero_37902),
                                             res_24816 * res_24816) *
                                     (res_24816 * res_24816), res_24816);
        int64_t gtid_31110 = squot64(sext_i32_i64(local_tid_37905),
                                     segment_sizze_nonzzero_37902) +
                sext_i32_i64(virt_group_id_37913) *
                squot64(segred_group_sizze_31259,
                        segment_sizze_nonzzero_37902) -
                squot64(squot64(sext_i32_i64(local_tid_37905),
                                segment_sizze_nonzzero_37902) +
                        sext_i32_i64(virt_group_id_37913) *
                        squot64(segred_group_sizze_31259,
                                segment_sizze_nonzzero_37902), res_24816 *
                        res_24816) * (res_24816 * res_24816) -
                squot64(squot64(sext_i32_i64(local_tid_37905),
                                segment_sizze_nonzzero_37902) +
                        sext_i32_i64(virt_group_id_37913) *
                        squot64(segred_group_sizze_31259,
                                segment_sizze_nonzzero_37902) -
                        squot64(squot64(sext_i32_i64(local_tid_37905),
                                        segment_sizze_nonzzero_37902) +
                                sext_i32_i64(virt_group_id_37913) *
                                squot64(segred_group_sizze_31259,
                                        segment_sizze_nonzzero_37902),
                                res_24816 * res_24816) * (res_24816 *
                                                          res_24816),
                        res_24816) * res_24816;
        int64_t gtid_31120 = srem64(sext_i32_i64(local_tid_37905), res_24810);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24810) && (((slt64(gtid_31108, m_24797) &&
                                          slt64(gtid_31109, res_24816)) &&
                                         slt64(gtid_31110, res_24816)) &&
                                        slt64(sext_i32_i64(local_tid_37905),
                                              res_24810 *
                                              squot64(segred_group_sizze_31259,
                                                      segment_sizze_nonzzero_37902)))) {
                float x_31269 = ((__global
                                  float *) images_mem_36738)[gtid_31108 *
                                                             N_24798 +
                                                             gtid_31120];
                float x_31270 = ((__global
                                  float *) binop_p_mem_36747)[gtid_31109 *
                                                              N_24796 +
                                                              gtid_31120];
                float x_31271 = ((__global float *) mem_36830)[gtid_31110 *
                                                               N_24796 +
                                                               gtid_31120];
                float x_31272 = x_31270 * x_31271;
                bool res_31273;
                
                res_31273 = futrts_isnan32(x_31269);
                
                float y_31274;
                
                if (res_31273) {
                    y_31274 = 0.0F;
                } else {
                    y_31274 = 1.0F;
                }
                
                float res_31275 = x_31272 * y_31274;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)] =
                        res_31275;
                }
            } else {
                ((__local
                  float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24810)) {
            // perform segmented scan to imitate reduction
            {
                float x_31263;
                float x_31264;
                float x_37914;
                float x_37915;
                bool ltid_in_bounds_37917;
                
                ltid_in_bounds_37917 = slt64(sext_i32_i64(local_tid_37905),
                                             res_24810 *
                                             squot64(segred_group_sizze_31259,
                                                     segment_sizze_nonzzero_37902));
                
                int32_t skip_threads_37918;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_37917) {
                        x_31264 = ((volatile __local
                                    float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)];
                        if ((local_tid_37905 - squot32(local_tid_37905, 32) *
                             32) == 0) {
                            x_31263 = x_31264;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_37918 = 1;
                    while (slt32(skip_threads_37918, 32)) {
                        if (sle32(skip_threads_37918, local_tid_37905 -
                                  squot32(local_tid_37905, 32) * 32) &&
                            ltid_in_bounds_37917) {
                            // read operands
                            {
                                x_31263 = ((volatile __local
                                            float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905) -
                                                                        sext_i32_i64(skip_threads_37918)];
                            }
                            // perform operation
                            {
                                bool inactive_37919 =
                                     slt64(srem64(sext_i32_i64(local_tid_37905),
                                                  res_24810),
                                           sext_i32_i64(local_tid_37905) -
                                           sext_i32_i64(local_tid_37905 -
                                           skip_threads_37918));
                                
                                if (inactive_37919) {
                                    x_31263 = x_31264;
                                }
                                if (!inactive_37919) {
                                    float res_31265 = x_31263 + x_31264;
                                    
                                    x_31263 = res_31265;
                                }
                            }
                        }
                        if (sle32(wave_sizze_37907, skip_threads_37918)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_37918, local_tid_37905 -
                                  squot32(local_tid_37905, 32) * 32) &&
                            ltid_in_bounds_37917) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)] =
                                    x_31263;
                                x_31264 = x_31263;
                            }
                        }
                        if (sle32(wave_sizze_37907, skip_threads_37918)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_37918 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_37905 - squot32(local_tid_37905, 32) * 32) ==
                        31 && ltid_in_bounds_37917) {
                        ((volatile __local
                          float *) red_arr_mem_37909)[sext_i32_i64(squot32(local_tid_37905,
                                                                           32))] =
                            x_31263;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_37920;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_37905, 32) == 0 &&
                            ltid_in_bounds_37917) {
                            x_37915 = ((volatile __local
                                        float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)];
                            if ((local_tid_37905 - squot32(local_tid_37905,
                                                           32) * 32) == 0) {
                                x_37914 = x_37915;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_37920 = 1;
                        while (slt32(skip_threads_37920, 32)) {
                            if (sle32(skip_threads_37920, local_tid_37905 -
                                      squot32(local_tid_37905, 32) * 32) &&
                                (squot32(local_tid_37905, 32) == 0 &&
                                 ltid_in_bounds_37917)) {
                                // read operands
                                {
                                    x_37914 = ((volatile __local
                                                float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905) -
                                                                            sext_i32_i64(skip_threads_37920)];
                                }
                                // perform operation
                                {
                                    bool inactive_37921 =
                                         slt64(srem64(sext_i32_i64(local_tid_37905 *
                                                      32 + 32 - 1), res_24810),
                                               sext_i32_i64(local_tid_37905 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_37905 -
                                                             skip_threads_37920) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_37921) {
                                        x_37914 = x_37915;
                                    }
                                    if (!inactive_37921) {
                                        float res_37916 = x_37914 + x_37915;
                                        
                                        x_37914 = res_37916;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_37907, skip_threads_37920)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_37920, local_tid_37905 -
                                      squot32(local_tid_37905, 32) * 32) &&
                                (squot32(local_tid_37905, 32) == 0 &&
                                 ltid_in_bounds_37917)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)] =
                                        x_37914;
                                    x_37915 = x_37914;
                                }
                            }
                            if (sle32(wave_sizze_37907, skip_threads_37920)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_37920 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_37905, 32) == 0 ||
                          !ltid_in_bounds_37917)) {
                        // read operands
                        {
                            x_31264 = x_31263;
                            x_31263 = ((__local
                                        float *) red_arr_mem_37909)[sext_i32_i64(squot32(local_tid_37905,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_37922 =
                                 slt64(srem64(sext_i32_i64(local_tid_37905),
                                              res_24810),
                                       sext_i32_i64(local_tid_37905) -
                                       sext_i32_i64(squot32(local_tid_37905,
                                                            32) * 32 - 1));
                            
                            if (inactive_37922) {
                                x_31263 = x_31264;
                            }
                            if (!inactive_37922) {
                                float res_31265 = x_31263 + x_31264;
                                
                                x_31263 = res_31265;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)] =
                                x_31263;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_37905, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_37909)[sext_i32_i64(local_tid_37905)] =
                            x_31264;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_37913) *
                      squot64(segred_group_sizze_31259,
                              segment_sizze_nonzzero_37902) +
                      sext_i32_i64(local_tid_37905), m_24797 * res_24816 *
                      res_24816) && slt64(sext_i32_i64(local_tid_37905),
                                          squot64(segred_group_sizze_31259,
                                                  segment_sizze_nonzzero_37902))) {
                ((__global
                  float *) mem_36835)[squot64(sext_i32_i64(virt_group_id_37913) *
                                              squot64(segred_group_sizze_31259,
                                                      segment_sizze_nonzzero_37902) +
                                              sext_i32_i64(local_tid_37905),
                                              res_24816 * res_24816) *
                                      (res_24816 * res_24816) +
                                      squot64(sext_i32_i64(virt_group_id_37913) *
                                              squot64(segred_group_sizze_31259,
                                                      segment_sizze_nonzzero_37902) +
                                              sext_i32_i64(local_tid_37905) -
                                              squot64(sext_i32_i64(virt_group_id_37913) *
                                                      squot64(segred_group_sizze_31259,
                                                              segment_sizze_nonzzero_37902) +
                                                      sext_i32_i64(local_tid_37905),
                                                      res_24816 * res_24816) *
                                              (res_24816 * res_24816),
                                              res_24816) * res_24816 +
                                      (sext_i32_i64(virt_group_id_37913) *
                                       squot64(segred_group_sizze_31259,
                                               segment_sizze_nonzzero_37902) +
                                       sext_i32_i64(local_tid_37905) -
                                       squot64(sext_i32_i64(virt_group_id_37913) *
                                               squot64(segred_group_sizze_31259,
                                                       segment_sizze_nonzzero_37902) +
                                               sext_i32_i64(local_tid_37905),
                                               res_24816 * res_24816) *
                                       (res_24816 * res_24816) -
                                       squot64(sext_i32_i64(virt_group_id_37913) *
                                               squot64(segred_group_sizze_31259,
                                                       segment_sizze_nonzzero_37902) +
                                               sext_i32_i64(local_tid_37905) -
                                               squot64(sext_i32_i64(virt_group_id_37913) *
                                                       squot64(segred_group_sizze_31259,
                                                               segment_sizze_nonzzero_37902) +
                                                       sext_i32_i64(local_tid_37905),
                                                       res_24816 * res_24816) *
                                               (res_24816 * res_24816),
                                               res_24816) * res_24816)] =
                    ((__local
                      float *) red_arr_mem_37909)[(sext_i32_i64(local_tid_37905) +
                                                   1) *
                                                  segment_sizze_nonzzero_37902 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31259
}
__kernel void mainzisegred_small_32294(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38063_backing_aligned_0,
                                       int64_t N_24796, int64_t m_24797,
                                       int64_t N_24798, int64_t res_24810,
                                       int64_t res_24816,
                                       int64_t num_groups_32347, __global
                                       unsigned char *images_mem_36738, __global
                                       unsigned char *binop_p_mem_36747,
                                       __global unsigned char *mem_37016,
                                       int64_t segment_sizze_nonzzero_38056)
{
    #define segred_group_sizze_32346 (mainzisegred_group_sizze_32288)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38063_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38063_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38058;
    int32_t local_tid_38059;
    int64_t group_sizze_38062;
    int32_t wave_sizze_38061;
    int32_t group_tid_38060;
    
    global_tid_38058 = get_global_id(0);
    local_tid_38059 = get_local_id(0);
    group_sizze_38062 = get_local_size(0);
    wave_sizze_38061 = LOCKSTEP_WIDTH;
    group_tid_38060 = get_group_id(0);
    
    int32_t phys_tid_32294;
    
    phys_tid_32294 = global_tid_38058;
    
    __local char *red_arr_mem_38063;
    
    red_arr_mem_38063 = (__local char *) red_arr_mem_38063_backing_0;
    
    int32_t phys_group_id_38065;
    
    phys_group_id_38065 = get_group_id(0);
    for (int32_t i_38066 = 0; i_38066 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797 * res_24816,
                                          squot64(segred_group_sizze_32346,
                                                  segment_sizze_nonzzero_38056))) -
                   phys_group_id_38065, sext_i64_i32(num_groups_32347));
         i_38066++) {
        int32_t virt_group_id_38067 = phys_group_id_38065 + i_38066 *
                sext_i64_i32(num_groups_32347);
        int64_t gtid_32283 = squot64(squot64(sext_i32_i64(local_tid_38059),
                                             segment_sizze_nonzzero_38056) +
                                     sext_i32_i64(virt_group_id_38067) *
                                     squot64(segred_group_sizze_32346,
                                             segment_sizze_nonzzero_38056),
                                     res_24816);
        int64_t gtid_32284 = squot64(sext_i32_i64(local_tid_38059),
                                     segment_sizze_nonzzero_38056) +
                sext_i32_i64(virt_group_id_38067) *
                squot64(segred_group_sizze_32346,
                        segment_sizze_nonzzero_38056) -
                squot64(squot64(sext_i32_i64(local_tid_38059),
                                segment_sizze_nonzzero_38056) +
                        sext_i32_i64(virt_group_id_38067) *
                        squot64(segred_group_sizze_32346,
                                segment_sizze_nonzzero_38056), res_24816) *
                res_24816;
        int64_t gtid_32293 = srem64(sext_i32_i64(local_tid_38059), res_24810);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24810) && ((slt64(gtid_32283, m_24797) &&
                                         slt64(gtid_32284, res_24816)) &&
                                        slt64(sext_i32_i64(local_tid_38059),
                                              res_24810 *
                                              squot64(segred_group_sizze_32346,
                                                      segment_sizze_nonzzero_38056)))) {
                float x_32356 = ((__global
                                  float *) images_mem_36738)[gtid_32283 *
                                                             N_24798 +
                                                             gtid_32293];
                bool res_32357;
                
                res_32357 = futrts_isnan32(x_32356);
                
                float res_32358;
                
                if (res_32357) {
                    res_32358 = 0.0F;
                } else {
                    float x_32355 = ((__global
                                      float *) binop_p_mem_36747)[gtid_32284 *
                                                                  N_24796 +
                                                                  gtid_32293];
                    float res_32359 = x_32355 * x_32356;
                    
                    res_32358 = res_32359;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)] =
                        res_32358;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24810)) {
            // perform segmented scan to imitate reduction
            {
                float x_32350;
                float x_32351;
                float x_38068;
                float x_38069;
                bool ltid_in_bounds_38071;
                
                ltid_in_bounds_38071 = slt64(sext_i32_i64(local_tid_38059),
                                             res_24810 *
                                             squot64(segred_group_sizze_32346,
                                                     segment_sizze_nonzzero_38056));
                
                int32_t skip_threads_38072;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38071) {
                        x_32351 = ((volatile __local
                                    float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)];
                        if ((local_tid_38059 - squot32(local_tid_38059, 32) *
                             32) == 0) {
                            x_32350 = x_32351;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38072 = 1;
                    while (slt32(skip_threads_38072, 32)) {
                        if (sle32(skip_threads_38072, local_tid_38059 -
                                  squot32(local_tid_38059, 32) * 32) &&
                            ltid_in_bounds_38071) {
                            // read operands
                            {
                                x_32350 = ((volatile __local
                                            float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059) -
                                                                        sext_i32_i64(skip_threads_38072)];
                            }
                            // perform operation
                            {
                                bool inactive_38073 =
                                     slt64(srem64(sext_i32_i64(local_tid_38059),
                                                  res_24810),
                                           sext_i32_i64(local_tid_38059) -
                                           sext_i32_i64(local_tid_38059 -
                                           skip_threads_38072));
                                
                                if (inactive_38073) {
                                    x_32350 = x_32351;
                                }
                                if (!inactive_38073) {
                                    float res_32352 = x_32350 + x_32351;
                                    
                                    x_32350 = res_32352;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38061, skip_threads_38072)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38072, local_tid_38059 -
                                  squot32(local_tid_38059, 32) * 32) &&
                            ltid_in_bounds_38071) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)] =
                                    x_32350;
                                x_32351 = x_32350;
                            }
                        }
                        if (sle32(wave_sizze_38061, skip_threads_38072)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38072 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38059 - squot32(local_tid_38059, 32) * 32) ==
                        31 && ltid_in_bounds_38071) {
                        ((volatile __local
                          float *) red_arr_mem_38063)[sext_i32_i64(squot32(local_tid_38059,
                                                                           32))] =
                            x_32350;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38074;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38059, 32) == 0 &&
                            ltid_in_bounds_38071) {
                            x_38069 = ((volatile __local
                                        float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)];
                            if ((local_tid_38059 - squot32(local_tid_38059,
                                                           32) * 32) == 0) {
                                x_38068 = x_38069;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38074 = 1;
                        while (slt32(skip_threads_38074, 32)) {
                            if (sle32(skip_threads_38074, local_tid_38059 -
                                      squot32(local_tid_38059, 32) * 32) &&
                                (squot32(local_tid_38059, 32) == 0 &&
                                 ltid_in_bounds_38071)) {
                                // read operands
                                {
                                    x_38068 = ((volatile __local
                                                float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059) -
                                                                            sext_i32_i64(skip_threads_38074)];
                                }
                                // perform operation
                                {
                                    bool inactive_38075 =
                                         slt64(srem64(sext_i32_i64(local_tid_38059 *
                                                      32 + 32 - 1), res_24810),
                                               sext_i32_i64(local_tid_38059 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38059 -
                                                             skip_threads_38074) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38075) {
                                        x_38068 = x_38069;
                                    }
                                    if (!inactive_38075) {
                                        float res_38070 = x_38068 + x_38069;
                                        
                                        x_38068 = res_38070;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38061, skip_threads_38074)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38074, local_tid_38059 -
                                      squot32(local_tid_38059, 32) * 32) &&
                                (squot32(local_tid_38059, 32) == 0 &&
                                 ltid_in_bounds_38071)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)] =
                                        x_38068;
                                    x_38069 = x_38068;
                                }
                            }
                            if (sle32(wave_sizze_38061, skip_threads_38074)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38074 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38059, 32) == 0 ||
                          !ltid_in_bounds_38071)) {
                        // read operands
                        {
                            x_32351 = x_32350;
                            x_32350 = ((__local
                                        float *) red_arr_mem_38063)[sext_i32_i64(squot32(local_tid_38059,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38076 =
                                 slt64(srem64(sext_i32_i64(local_tid_38059),
                                              res_24810),
                                       sext_i32_i64(local_tid_38059) -
                                       sext_i32_i64(squot32(local_tid_38059,
                                                            32) * 32 - 1));
                            
                            if (inactive_38076) {
                                x_32350 = x_32351;
                            }
                            if (!inactive_38076) {
                                float res_32352 = x_32350 + x_32351;
                                
                                x_32350 = res_32352;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)] =
                                x_32350;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38059, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38063)[sext_i32_i64(local_tid_38059)] =
                            x_32351;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38067) *
                      squot64(segred_group_sizze_32346,
                              segment_sizze_nonzzero_38056) +
                      sext_i32_i64(local_tid_38059), m_24797 * res_24816) &&
                slt64(sext_i32_i64(local_tid_38059),
                      squot64(segred_group_sizze_32346,
                              segment_sizze_nonzzero_38056))) {
                ((__global
                  float *) mem_37016)[squot64(sext_i32_i64(virt_group_id_38067) *
                                              squot64(segred_group_sizze_32346,
                                                      segment_sizze_nonzzero_38056) +
                                              sext_i32_i64(local_tid_38059),
                                              res_24816) * res_24816 +
                                      (sext_i32_i64(virt_group_id_38067) *
                                       squot64(segred_group_sizze_32346,
                                               segment_sizze_nonzzero_38056) +
                                       sext_i32_i64(local_tid_38059) -
                                       squot64(sext_i32_i64(virt_group_id_38067) *
                                               squot64(segred_group_sizze_32346,
                                                       segment_sizze_nonzzero_38056) +
                                               sext_i32_i64(local_tid_38059),
                                               res_24816) * res_24816)] =
                    ((__local
                      float *) red_arr_mem_38063)[(sext_i32_i64(local_tid_38059) +
                                                   1) *
                                                  segment_sizze_nonzzero_38056 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32346
}
__kernel void mainzisegred_small_32431(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38144_backing_aligned_0,
                                       int64_t m_24797, int64_t res_24816,
                                       int64_t num_groups_32480, __global
                                       unsigned char *res_mem_36931, __global
                                       unsigned char *res_mem_37022, __global
                                       unsigned char *mem_37059,
                                       int64_t segment_sizze_nonzzero_38137)
{
    #define segred_group_sizze_32479 (mainzisegred_group_sizze_32425)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38144_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38144_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38139;
    int32_t local_tid_38140;
    int64_t group_sizze_38143;
    int32_t wave_sizze_38142;
    int32_t group_tid_38141;
    
    global_tid_38139 = get_global_id(0);
    local_tid_38140 = get_local_id(0);
    group_sizze_38143 = get_local_size(0);
    wave_sizze_38142 = LOCKSTEP_WIDTH;
    group_tid_38141 = get_group_id(0);
    
    int32_t phys_tid_32431;
    
    phys_tid_32431 = global_tid_38139;
    
    __local char *red_arr_mem_38144;
    
    red_arr_mem_38144 = (__local char *) red_arr_mem_38144_backing_0;
    
    int32_t phys_group_id_38146;
    
    phys_group_id_38146 = get_group_id(0);
    for (int32_t i_38147 = 0; i_38147 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797 * res_24816,
                                          squot64(segred_group_sizze_32479,
                                                  segment_sizze_nonzzero_38137))) -
                   phys_group_id_38146, sext_i64_i32(num_groups_32480));
         i_38147++) {
        int32_t virt_group_id_38148 = phys_group_id_38146 + i_38147 *
                sext_i64_i32(num_groups_32480);
        int64_t gtid_32420 = squot64(squot64(sext_i32_i64(local_tid_38140),
                                             segment_sizze_nonzzero_38137) +
                                     sext_i32_i64(virt_group_id_38148) *
                                     squot64(segred_group_sizze_32479,
                                             segment_sizze_nonzzero_38137),
                                     res_24816);
        int64_t gtid_32421 = squot64(sext_i32_i64(local_tid_38140),
                                     segment_sizze_nonzzero_38137) +
                sext_i32_i64(virt_group_id_38148) *
                squot64(segred_group_sizze_32479,
                        segment_sizze_nonzzero_38137) -
                squot64(squot64(sext_i32_i64(local_tid_38140),
                                segment_sizze_nonzzero_38137) +
                        sext_i32_i64(virt_group_id_38148) *
                        squot64(segred_group_sizze_32479,
                                segment_sizze_nonzzero_38137), res_24816) *
                res_24816;
        int64_t gtid_32430 = srem64(sext_i32_i64(local_tid_38140), res_24816);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24816) && ((slt64(gtid_32420, m_24797) &&
                                         slt64(gtid_32421, res_24816)) &&
                                        slt64(sext_i32_i64(local_tid_38140),
                                              res_24816 *
                                              squot64(segred_group_sizze_32479,
                                                      segment_sizze_nonzzero_38137)))) {
                float x_32489 = ((__global float *) res_mem_37022)[gtid_32420 *
                                                                   res_24816 +
                                                                   gtid_32430];
                float x_32490 = ((__global float *) res_mem_36931)[gtid_32420 *
                                                                   (res_24816 *
                                                                    res_24816) +
                                                                   gtid_32421 *
                                                                   res_24816 +
                                                                   gtid_32430];
                float res_32491 = x_32489 * x_32490;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)] =
                        res_32491;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24816)) {
            // perform segmented scan to imitate reduction
            {
                float x_32483;
                float x_32484;
                float x_38149;
                float x_38150;
                bool ltid_in_bounds_38152;
                
                ltid_in_bounds_38152 = slt64(sext_i32_i64(local_tid_38140),
                                             res_24816 *
                                             squot64(segred_group_sizze_32479,
                                                     segment_sizze_nonzzero_38137));
                
                int32_t skip_threads_38153;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38152) {
                        x_32484 = ((volatile __local
                                    float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)];
                        if ((local_tid_38140 - squot32(local_tid_38140, 32) *
                             32) == 0) {
                            x_32483 = x_32484;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38153 = 1;
                    while (slt32(skip_threads_38153, 32)) {
                        if (sle32(skip_threads_38153, local_tid_38140 -
                                  squot32(local_tid_38140, 32) * 32) &&
                            ltid_in_bounds_38152) {
                            // read operands
                            {
                                x_32483 = ((volatile __local
                                            float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140) -
                                                                        sext_i32_i64(skip_threads_38153)];
                            }
                            // perform operation
                            {
                                bool inactive_38154 =
                                     slt64(srem64(sext_i32_i64(local_tid_38140),
                                                  res_24816),
                                           sext_i32_i64(local_tid_38140) -
                                           sext_i32_i64(local_tid_38140 -
                                           skip_threads_38153));
                                
                                if (inactive_38154) {
                                    x_32483 = x_32484;
                                }
                                if (!inactive_38154) {
                                    float res_32485 = x_32483 + x_32484;
                                    
                                    x_32483 = res_32485;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38142, skip_threads_38153)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38153, local_tid_38140 -
                                  squot32(local_tid_38140, 32) * 32) &&
                            ltid_in_bounds_38152) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)] =
                                    x_32483;
                                x_32484 = x_32483;
                            }
                        }
                        if (sle32(wave_sizze_38142, skip_threads_38153)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38153 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38140 - squot32(local_tid_38140, 32) * 32) ==
                        31 && ltid_in_bounds_38152) {
                        ((volatile __local
                          float *) red_arr_mem_38144)[sext_i32_i64(squot32(local_tid_38140,
                                                                           32))] =
                            x_32483;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38155;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38140, 32) == 0 &&
                            ltid_in_bounds_38152) {
                            x_38150 = ((volatile __local
                                        float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)];
                            if ((local_tid_38140 - squot32(local_tid_38140,
                                                           32) * 32) == 0) {
                                x_38149 = x_38150;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38155 = 1;
                        while (slt32(skip_threads_38155, 32)) {
                            if (sle32(skip_threads_38155, local_tid_38140 -
                                      squot32(local_tid_38140, 32) * 32) &&
                                (squot32(local_tid_38140, 32) == 0 &&
                                 ltid_in_bounds_38152)) {
                                // read operands
                                {
                                    x_38149 = ((volatile __local
                                                float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140) -
                                                                            sext_i32_i64(skip_threads_38155)];
                                }
                                // perform operation
                                {
                                    bool inactive_38156 =
                                         slt64(srem64(sext_i32_i64(local_tid_38140 *
                                                      32 + 32 - 1), res_24816),
                                               sext_i32_i64(local_tid_38140 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38140 -
                                                             skip_threads_38155) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38156) {
                                        x_38149 = x_38150;
                                    }
                                    if (!inactive_38156) {
                                        float res_38151 = x_38149 + x_38150;
                                        
                                        x_38149 = res_38151;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38142, skip_threads_38155)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38155, local_tid_38140 -
                                      squot32(local_tid_38140, 32) * 32) &&
                                (squot32(local_tid_38140, 32) == 0 &&
                                 ltid_in_bounds_38152)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)] =
                                        x_38149;
                                    x_38150 = x_38149;
                                }
                            }
                            if (sle32(wave_sizze_38142, skip_threads_38155)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38155 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38140, 32) == 0 ||
                          !ltid_in_bounds_38152)) {
                        // read operands
                        {
                            x_32484 = x_32483;
                            x_32483 = ((__local
                                        float *) red_arr_mem_38144)[sext_i32_i64(squot32(local_tid_38140,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38157 =
                                 slt64(srem64(sext_i32_i64(local_tid_38140),
                                              res_24816),
                                       sext_i32_i64(local_tid_38140) -
                                       sext_i32_i64(squot32(local_tid_38140,
                                                            32) * 32 - 1));
                            
                            if (inactive_38157) {
                                x_32483 = x_32484;
                            }
                            if (!inactive_38157) {
                                float res_32485 = x_32483 + x_32484;
                                
                                x_32483 = res_32485;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)] =
                                x_32483;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38140, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38144)[sext_i32_i64(local_tid_38140)] =
                            x_32484;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38148) *
                      squot64(segred_group_sizze_32479,
                              segment_sizze_nonzzero_38137) +
                      sext_i32_i64(local_tid_38140), m_24797 * res_24816) &&
                slt64(sext_i32_i64(local_tid_38140),
                      squot64(segred_group_sizze_32479,
                              segment_sizze_nonzzero_38137))) {
                ((__global
                  float *) mem_37059)[squot64(sext_i32_i64(virt_group_id_38148) *
                                              squot64(segred_group_sizze_32479,
                                                      segment_sizze_nonzzero_38137) +
                                              sext_i32_i64(local_tid_38140),
                                              res_24816) * res_24816 +
                                      (sext_i32_i64(virt_group_id_38148) *
                                       squot64(segred_group_sizze_32479,
                                               segment_sizze_nonzzero_38137) +
                                       sext_i32_i64(local_tid_38140) -
                                       squot64(sext_i32_i64(virt_group_id_38148) *
                                               squot64(segred_group_sizze_32479,
                                                       segment_sizze_nonzzero_38137) +
                                               sext_i32_i64(local_tid_38140),
                                               res_24816) * res_24816)] =
                    ((__local
                      float *) red_arr_mem_38144)[(sext_i32_i64(local_tid_38140) +
                                                   1) *
                                                  segment_sizze_nonzzero_38137 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32479
}
__kernel void mainzisegred_small_32561(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38232_backing_aligned_0,
                                       int64_t N_24796, int64_t m_24797,
                                       int64_t res_24816,
                                       int64_t num_groups_32608, __global
                                       unsigned char *mem_36754, __global
                                       unsigned char *res_mem_37065, __global
                                       unsigned char *mem_37153,
                                       int64_t segment_sizze_nonzzero_38225)
{
    #define segred_group_sizze_32607 (mainzisegred_group_sizze_32555)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38232_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38232_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38227;
    int32_t local_tid_38228;
    int64_t group_sizze_38231;
    int32_t wave_sizze_38230;
    int32_t group_tid_38229;
    
    global_tid_38227 = get_global_id(0);
    local_tid_38228 = get_local_id(0);
    group_sizze_38231 = get_local_size(0);
    wave_sizze_38230 = LOCKSTEP_WIDTH;
    group_tid_38229 = get_group_id(0);
    
    int32_t phys_tid_32561;
    
    phys_tid_32561 = global_tid_38227;
    
    __local char *red_arr_mem_38232;
    
    red_arr_mem_38232 = (__local char *) red_arr_mem_38232_backing_0;
    
    int32_t phys_group_id_38234;
    
    phys_group_id_38234 = get_group_id(0);
    for (int32_t i_38235 = 0; i_38235 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797 * N_24796,
                                          squot64(segred_group_sizze_32607,
                                                  segment_sizze_nonzzero_38225))) -
                   phys_group_id_38234, sext_i64_i32(num_groups_32608));
         i_38235++) {
        int32_t virt_group_id_38236 = phys_group_id_38234 + i_38235 *
                sext_i64_i32(num_groups_32608);
        int64_t gtid_32550 = squot64(squot64(sext_i32_i64(local_tid_38228),
                                             segment_sizze_nonzzero_38225) +
                                     sext_i32_i64(virt_group_id_38236) *
                                     squot64(segred_group_sizze_32607,
                                             segment_sizze_nonzzero_38225),
                                     N_24796);
        int64_t gtid_32551 = squot64(sext_i32_i64(local_tid_38228),
                                     segment_sizze_nonzzero_38225) +
                sext_i32_i64(virt_group_id_38236) *
                squot64(segred_group_sizze_32607,
                        segment_sizze_nonzzero_38225) -
                squot64(squot64(sext_i32_i64(local_tid_38228),
                                segment_sizze_nonzzero_38225) +
                        sext_i32_i64(virt_group_id_38236) *
                        squot64(segred_group_sizze_32607,
                                segment_sizze_nonzzero_38225), N_24796) *
                N_24796;
        int64_t gtid_32560 = srem64(sext_i32_i64(local_tid_38228), res_24816);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24816) && ((slt64(gtid_32550, m_24797) &&
                                         slt64(gtid_32551, N_24796)) &&
                                        slt64(sext_i32_i64(local_tid_38228),
                                              res_24816 *
                                              squot64(segred_group_sizze_32607,
                                                      segment_sizze_nonzzero_38225)))) {
                float x_32616 = ((__global float *) res_mem_37065)[gtid_32550 *
                                                                   res_24816 +
                                                                   gtid_32560];
                float x_32617 = ((__global float *) mem_36754)[gtid_32551 *
                                                               res_24816 +
                                                               gtid_32560];
                float res_32618 = x_32616 * x_32617;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)] =
                        res_32618;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24816)) {
            // perform segmented scan to imitate reduction
            {
                float x_32611;
                float x_32612;
                float x_38237;
                float x_38238;
                bool ltid_in_bounds_38240;
                
                ltid_in_bounds_38240 = slt64(sext_i32_i64(local_tid_38228),
                                             res_24816 *
                                             squot64(segred_group_sizze_32607,
                                                     segment_sizze_nonzzero_38225));
                
                int32_t skip_threads_38241;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38240) {
                        x_32612 = ((volatile __local
                                    float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)];
                        if ((local_tid_38228 - squot32(local_tid_38228, 32) *
                             32) == 0) {
                            x_32611 = x_32612;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38241 = 1;
                    while (slt32(skip_threads_38241, 32)) {
                        if (sle32(skip_threads_38241, local_tid_38228 -
                                  squot32(local_tid_38228, 32) * 32) &&
                            ltid_in_bounds_38240) {
                            // read operands
                            {
                                x_32611 = ((volatile __local
                                            float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228) -
                                                                        sext_i32_i64(skip_threads_38241)];
                            }
                            // perform operation
                            {
                                bool inactive_38242 =
                                     slt64(srem64(sext_i32_i64(local_tid_38228),
                                                  res_24816),
                                           sext_i32_i64(local_tid_38228) -
                                           sext_i32_i64(local_tid_38228 -
                                           skip_threads_38241));
                                
                                if (inactive_38242) {
                                    x_32611 = x_32612;
                                }
                                if (!inactive_38242) {
                                    float res_32613 = x_32611 + x_32612;
                                    
                                    x_32611 = res_32613;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38230, skip_threads_38241)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38241, local_tid_38228 -
                                  squot32(local_tid_38228, 32) * 32) &&
                            ltid_in_bounds_38240) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)] =
                                    x_32611;
                                x_32612 = x_32611;
                            }
                        }
                        if (sle32(wave_sizze_38230, skip_threads_38241)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38241 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38228 - squot32(local_tid_38228, 32) * 32) ==
                        31 && ltid_in_bounds_38240) {
                        ((volatile __local
                          float *) red_arr_mem_38232)[sext_i32_i64(squot32(local_tid_38228,
                                                                           32))] =
                            x_32611;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38243;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38228, 32) == 0 &&
                            ltid_in_bounds_38240) {
                            x_38238 = ((volatile __local
                                        float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)];
                            if ((local_tid_38228 - squot32(local_tid_38228,
                                                           32) * 32) == 0) {
                                x_38237 = x_38238;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38243 = 1;
                        while (slt32(skip_threads_38243, 32)) {
                            if (sle32(skip_threads_38243, local_tid_38228 -
                                      squot32(local_tid_38228, 32) * 32) &&
                                (squot32(local_tid_38228, 32) == 0 &&
                                 ltid_in_bounds_38240)) {
                                // read operands
                                {
                                    x_38237 = ((volatile __local
                                                float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228) -
                                                                            sext_i32_i64(skip_threads_38243)];
                                }
                                // perform operation
                                {
                                    bool inactive_38244 =
                                         slt64(srem64(sext_i32_i64(local_tid_38228 *
                                                      32 + 32 - 1), res_24816),
                                               sext_i32_i64(local_tid_38228 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38228 -
                                                             skip_threads_38243) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38244) {
                                        x_38237 = x_38238;
                                    }
                                    if (!inactive_38244) {
                                        float res_38239 = x_38237 + x_38238;
                                        
                                        x_38237 = res_38239;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38230, skip_threads_38243)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38243, local_tid_38228 -
                                      squot32(local_tid_38228, 32) * 32) &&
                                (squot32(local_tid_38228, 32) == 0 &&
                                 ltid_in_bounds_38240)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)] =
                                        x_38237;
                                    x_38238 = x_38237;
                                }
                            }
                            if (sle32(wave_sizze_38230, skip_threads_38243)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38243 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38228, 32) == 0 ||
                          !ltid_in_bounds_38240)) {
                        // read operands
                        {
                            x_32612 = x_32611;
                            x_32611 = ((__local
                                        float *) red_arr_mem_38232)[sext_i32_i64(squot32(local_tid_38228,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38245 =
                                 slt64(srem64(sext_i32_i64(local_tid_38228),
                                              res_24816),
                                       sext_i32_i64(local_tid_38228) -
                                       sext_i32_i64(squot32(local_tid_38228,
                                                            32) * 32 - 1));
                            
                            if (inactive_38245) {
                                x_32611 = x_32612;
                            }
                            if (!inactive_38245) {
                                float res_32613 = x_32611 + x_32612;
                                
                                x_32611 = res_32613;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)] =
                                x_32611;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38228, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38232)[sext_i32_i64(local_tid_38228)] =
                            x_32612;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38236) *
                      squot64(segred_group_sizze_32607,
                              segment_sizze_nonzzero_38225) +
                      sext_i32_i64(local_tid_38228), m_24797 * N_24796) &&
                slt64(sext_i32_i64(local_tid_38228),
                      squot64(segred_group_sizze_32607,
                              segment_sizze_nonzzero_38225))) {
                ((__global
                  float *) mem_37153)[squot64(sext_i32_i64(virt_group_id_38236) *
                                              squot64(segred_group_sizze_32607,
                                                      segment_sizze_nonzzero_38225) +
                                              sext_i32_i64(local_tid_38228),
                                              N_24796) * N_24796 +
                                      (sext_i32_i64(virt_group_id_38236) *
                                       squot64(segred_group_sizze_32607,
                                               segment_sizze_nonzzero_38225) +
                                       sext_i32_i64(local_tid_38228) -
                                       squot64(sext_i32_i64(virt_group_id_38236) *
                                               squot64(segred_group_sizze_32607,
                                                       segment_sizze_nonzzero_38225) +
                                               sext_i32_i64(local_tid_38228),
                                               N_24796) * N_24796)] = ((__local
                                                                        float *) red_arr_mem_38232)[(sext_i32_i64(local_tid_38228) +
                                                                                                     1) *
                                                                                                    segment_sizze_nonzzero_38225 -
                                                                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32607
}
__kernel void mainzisegred_small_33127(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38486_backing_aligned_0,
                                       int64_t N_24796, int64_t m_24797,
                                       int64_t res_24810,
                                       int64_t num_groups_33174, __global
                                       unsigned char *res_mem_37197, __global
                                       unsigned char *mem_37264, __global
                                       unsigned char *mem_37267,
                                       int64_t segment_sizze_nonzzero_38479)
{
    #define segred_group_sizze_33173 (mainzisegred_group_sizze_33121)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38486_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38486_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38481;
    int32_t local_tid_38482;
    int64_t group_sizze_38485;
    int32_t wave_sizze_38484;
    int32_t group_tid_38483;
    
    global_tid_38481 = get_global_id(0);
    local_tid_38482 = get_local_id(0);
    group_sizze_38485 = get_local_size(0);
    wave_sizze_38484 = LOCKSTEP_WIDTH;
    group_tid_38483 = get_group_id(0);
    
    int32_t phys_tid_33127;
    
    phys_tid_33127 = global_tid_38481;
    
    __local char *red_arr_mem_38486;
    
    red_arr_mem_38486 = (__local char *) red_arr_mem_38486_backing_0;
    
    int32_t phys_group_id_38488;
    
    phys_group_id_38488 = get_group_id(0);
    for (int32_t i_38489 = 0; i_38489 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797,
                                          squot64(segred_group_sizze_33173,
                                                  segment_sizze_nonzzero_38479))) -
                   phys_group_id_38488, sext_i64_i32(num_groups_33174));
         i_38489++) {
        int32_t virt_group_id_38490 = phys_group_id_38488 + i_38489 *
                sext_i64_i32(num_groups_33174);
        int64_t gtid_33118 = squot64(sext_i32_i64(local_tid_38482),
                                     segment_sizze_nonzzero_38479) +
                sext_i32_i64(virt_group_id_38490) *
                squot64(segred_group_sizze_33173, segment_sizze_nonzzero_38479);
        int64_t gtid_33126 = srem64(sext_i32_i64(local_tid_38482), res_24810);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24810) && (slt64(gtid_33118, m_24797) &&
                                        slt64(sext_i32_i64(local_tid_38482),
                                              res_24810 *
                                              squot64(segred_group_sizze_33173,
                                                      segment_sizze_nonzzero_38479)))) {
                int32_t res_33181 = ((__global
                                      int32_t *) mem_37264)[gtid_33118];
                int32_t index_primexp_35444 = sext_i64_i32(gtid_33126);
                bool cond_33183 = slt32(index_primexp_35444, res_33181);
                float res_33184;
                
                if (cond_33183) {
                    int64_t i_33185 = sext_i32_i64(index_primexp_35444);
                    float res_33186 = ((__global
                                        float *) res_mem_37197)[gtid_33118 *
                                                                N_24796 +
                                                                i_33185];
                    
                    res_33184 = res_33186;
                } else {
                    res_33184 = 0.0F;
                }
                
                float res_33187 = res_33184 * res_33184;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)] =
                        res_33187;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24810)) {
            // perform segmented scan to imitate reduction
            {
                float x_33177;
                float x_33178;
                float x_38491;
                float x_38492;
                bool ltid_in_bounds_38494;
                
                ltid_in_bounds_38494 = slt64(sext_i32_i64(local_tid_38482),
                                             res_24810 *
                                             squot64(segred_group_sizze_33173,
                                                     segment_sizze_nonzzero_38479));
                
                int32_t skip_threads_38495;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38494) {
                        x_33178 = ((volatile __local
                                    float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)];
                        if ((local_tid_38482 - squot32(local_tid_38482, 32) *
                             32) == 0) {
                            x_33177 = x_33178;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38495 = 1;
                    while (slt32(skip_threads_38495, 32)) {
                        if (sle32(skip_threads_38495, local_tid_38482 -
                                  squot32(local_tid_38482, 32) * 32) &&
                            ltid_in_bounds_38494) {
                            // read operands
                            {
                                x_33177 = ((volatile __local
                                            float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482) -
                                                                        sext_i32_i64(skip_threads_38495)];
                            }
                            // perform operation
                            {
                                bool inactive_38496 =
                                     slt64(srem64(sext_i32_i64(local_tid_38482),
                                                  res_24810),
                                           sext_i32_i64(local_tid_38482) -
                                           sext_i32_i64(local_tid_38482 -
                                           skip_threads_38495));
                                
                                if (inactive_38496) {
                                    x_33177 = x_33178;
                                }
                                if (!inactive_38496) {
                                    float res_33179 = x_33177 + x_33178;
                                    
                                    x_33177 = res_33179;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38484, skip_threads_38495)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38495, local_tid_38482 -
                                  squot32(local_tid_38482, 32) * 32) &&
                            ltid_in_bounds_38494) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)] =
                                    x_33177;
                                x_33178 = x_33177;
                            }
                        }
                        if (sle32(wave_sizze_38484, skip_threads_38495)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38495 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38482 - squot32(local_tid_38482, 32) * 32) ==
                        31 && ltid_in_bounds_38494) {
                        ((volatile __local
                          float *) red_arr_mem_38486)[sext_i32_i64(squot32(local_tid_38482,
                                                                           32))] =
                            x_33177;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38497;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38482, 32) == 0 &&
                            ltid_in_bounds_38494) {
                            x_38492 = ((volatile __local
                                        float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)];
                            if ((local_tid_38482 - squot32(local_tid_38482,
                                                           32) * 32) == 0) {
                                x_38491 = x_38492;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38497 = 1;
                        while (slt32(skip_threads_38497, 32)) {
                            if (sle32(skip_threads_38497, local_tid_38482 -
                                      squot32(local_tid_38482, 32) * 32) &&
                                (squot32(local_tid_38482, 32) == 0 &&
                                 ltid_in_bounds_38494)) {
                                // read operands
                                {
                                    x_38491 = ((volatile __local
                                                float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482) -
                                                                            sext_i32_i64(skip_threads_38497)];
                                }
                                // perform operation
                                {
                                    bool inactive_38498 =
                                         slt64(srem64(sext_i32_i64(local_tid_38482 *
                                                      32 + 32 - 1), res_24810),
                                               sext_i32_i64(local_tid_38482 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38482 -
                                                             skip_threads_38497) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38498) {
                                        x_38491 = x_38492;
                                    }
                                    if (!inactive_38498) {
                                        float res_38493 = x_38491 + x_38492;
                                        
                                        x_38491 = res_38493;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38484, skip_threads_38497)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38497, local_tid_38482 -
                                      squot32(local_tid_38482, 32) * 32) &&
                                (squot32(local_tid_38482, 32) == 0 &&
                                 ltid_in_bounds_38494)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)] =
                                        x_38491;
                                    x_38492 = x_38491;
                                }
                            }
                            if (sle32(wave_sizze_38484, skip_threads_38497)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38497 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38482, 32) == 0 ||
                          !ltid_in_bounds_38494)) {
                        // read operands
                        {
                            x_33178 = x_33177;
                            x_33177 = ((__local
                                        float *) red_arr_mem_38486)[sext_i32_i64(squot32(local_tid_38482,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38499 =
                                 slt64(srem64(sext_i32_i64(local_tid_38482),
                                              res_24810),
                                       sext_i32_i64(local_tid_38482) -
                                       sext_i32_i64(squot32(local_tid_38482,
                                                            32) * 32 - 1));
                            
                            if (inactive_38499) {
                                x_33177 = x_33178;
                            }
                            if (!inactive_38499) {
                                float res_33179 = x_33177 + x_33178;
                                
                                x_33177 = res_33179;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)] =
                                x_33177;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38482, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38486)[sext_i32_i64(local_tid_38482)] =
                            x_33178;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38490) *
                      squot64(segred_group_sizze_33173,
                              segment_sizze_nonzzero_38479) +
                      sext_i32_i64(local_tid_38482), m_24797) &&
                slt64(sext_i32_i64(local_tid_38482),
                      squot64(segred_group_sizze_33173,
                              segment_sizze_nonzzero_38479))) {
                ((__global
                  float *) mem_37267)[sext_i32_i64(virt_group_id_38490) *
                                      squot64(segred_group_sizze_33173,
                                              segment_sizze_nonzzero_38479) +
                                      sext_i32_i64(local_tid_38482)] = ((__local
                                                                         float *) red_arr_mem_38486)[(sext_i32_i64(local_tid_38482) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38479 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33173
}
__kernel void mainzisegred_small_33148(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38426_backing_aligned_0,
                                       int64_t m_24797, int64_t N_24798,
                                       int64_t res_24810,
                                       int64_t num_groups_33160, __global
                                       unsigned char *images_mem_36738, __global
                                       unsigned char *mem_37264,
                                       int64_t segment_sizze_nonzzero_38419)
{
    #define segred_group_sizze_33159 (mainzisegred_group_sizze_33142)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38426_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38426_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38421;
    int32_t local_tid_38422;
    int64_t group_sizze_38425;
    int32_t wave_sizze_38424;
    int32_t group_tid_38423;
    
    global_tid_38421 = get_global_id(0);
    local_tid_38422 = get_local_id(0);
    group_sizze_38425 = get_local_size(0);
    wave_sizze_38424 = LOCKSTEP_WIDTH;
    group_tid_38423 = get_group_id(0);
    
    int32_t phys_tid_33148;
    
    phys_tid_33148 = global_tid_38421;
    
    __local char *red_arr_mem_38426;
    
    red_arr_mem_38426 = (__local char *) red_arr_mem_38426_backing_0;
    
    int32_t phys_group_id_38428;
    
    phys_group_id_38428 = get_group_id(0);
    for (int32_t i_38429 = 0; i_38429 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797,
                                          squot64(segred_group_sizze_33159,
                                                  segment_sizze_nonzzero_38419))) -
                   phys_group_id_38428, sext_i64_i32(num_groups_33160));
         i_38429++) {
        int32_t virt_group_id_38430 = phys_group_id_38428 + i_38429 *
                sext_i64_i32(num_groups_33160);
        int64_t gtid_33139 = squot64(sext_i32_i64(local_tid_38422),
                                     segment_sizze_nonzzero_38419) +
                sext_i32_i64(virt_group_id_38430) *
                squot64(segred_group_sizze_33159, segment_sizze_nonzzero_38419);
        int64_t gtid_33147 = srem64(sext_i32_i64(local_tid_38422), res_24810);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24810) && (slt64(gtid_33139, m_24797) &&
                                        slt64(sext_i32_i64(local_tid_38422),
                                              res_24810 *
                                              squot64(segred_group_sizze_33159,
                                                      segment_sizze_nonzzero_38419)))) {
                float x_33167 = ((__global
                                  float *) images_mem_36738)[gtid_33139 *
                                                             N_24798 +
                                                             gtid_33147];
                bool res_33168;
                
                res_33168 = futrts_isnan32(x_33167);
                
                bool cond_33169 = !res_33168;
                int32_t res_33170 = btoi_bool_i32(cond_33169);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)] =
                        res_33170;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24810)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_33163;
                int32_t x_33164;
                int32_t x_38431;
                int32_t x_38432;
                bool ltid_in_bounds_38434;
                
                ltid_in_bounds_38434 = slt64(sext_i32_i64(local_tid_38422),
                                             res_24810 *
                                             squot64(segred_group_sizze_33159,
                                                     segment_sizze_nonzzero_38419));
                
                int32_t skip_threads_38435;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38434) {
                        x_33164 = ((volatile __local
                                    int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)];
                        if ((local_tid_38422 - squot32(local_tid_38422, 32) *
                             32) == 0) {
                            x_33163 = x_33164;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38435 = 1;
                    while (slt32(skip_threads_38435, 32)) {
                        if (sle32(skip_threads_38435, local_tid_38422 -
                                  squot32(local_tid_38422, 32) * 32) &&
                            ltid_in_bounds_38434) {
                            // read operands
                            {
                                x_33163 = ((volatile __local
                                            int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422) -
                                                                          sext_i32_i64(skip_threads_38435)];
                            }
                            // perform operation
                            {
                                bool inactive_38436 =
                                     slt64(srem64(sext_i32_i64(local_tid_38422),
                                                  res_24810),
                                           sext_i32_i64(local_tid_38422) -
                                           sext_i32_i64(local_tid_38422 -
                                           skip_threads_38435));
                                
                                if (inactive_38436) {
                                    x_33163 = x_33164;
                                }
                                if (!inactive_38436) {
                                    int32_t res_33165 = add32(x_33163, x_33164);
                                    
                                    x_33163 = res_33165;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38424, skip_threads_38435)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38435, local_tid_38422 -
                                  squot32(local_tid_38422, 32) * 32) &&
                            ltid_in_bounds_38434) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)] =
                                    x_33163;
                                x_33164 = x_33163;
                            }
                        }
                        if (sle32(wave_sizze_38424, skip_threads_38435)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38435 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38422 - squot32(local_tid_38422, 32) * 32) ==
                        31 && ltid_in_bounds_38434) {
                        ((volatile __local
                          int32_t *) red_arr_mem_38426)[sext_i32_i64(squot32(local_tid_38422,
                                                                             32))] =
                            x_33163;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38437;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38422, 32) == 0 &&
                            ltid_in_bounds_38434) {
                            x_38432 = ((volatile __local
                                        int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)];
                            if ((local_tid_38422 - squot32(local_tid_38422,
                                                           32) * 32) == 0) {
                                x_38431 = x_38432;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38437 = 1;
                        while (slt32(skip_threads_38437, 32)) {
                            if (sle32(skip_threads_38437, local_tid_38422 -
                                      squot32(local_tid_38422, 32) * 32) &&
                                (squot32(local_tid_38422, 32) == 0 &&
                                 ltid_in_bounds_38434)) {
                                // read operands
                                {
                                    x_38431 = ((volatile __local
                                                int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422) -
                                                                              sext_i32_i64(skip_threads_38437)];
                                }
                                // perform operation
                                {
                                    bool inactive_38438 =
                                         slt64(srem64(sext_i32_i64(local_tid_38422 *
                                                      32 + 32 - 1), res_24810),
                                               sext_i32_i64(local_tid_38422 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38422 -
                                                             skip_threads_38437) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38438) {
                                        x_38431 = x_38432;
                                    }
                                    if (!inactive_38438) {
                                        int32_t res_38433 = add32(x_38431,
                                                                  x_38432);
                                        
                                        x_38431 = res_38433;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38424, skip_threads_38437)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38437, local_tid_38422 -
                                      squot32(local_tid_38422, 32) * 32) &&
                                (squot32(local_tid_38422, 32) == 0 &&
                                 ltid_in_bounds_38434)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)] =
                                        x_38431;
                                    x_38432 = x_38431;
                                }
                            }
                            if (sle32(wave_sizze_38424, skip_threads_38437)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38437 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38422, 32) == 0 ||
                          !ltid_in_bounds_38434)) {
                        // read operands
                        {
                            x_33164 = x_33163;
                            x_33163 = ((__local
                                        int32_t *) red_arr_mem_38426)[sext_i32_i64(squot32(local_tid_38422,
                                                                                           32)) -
                                                                      1];
                        }
                        // perform operation
                        {
                            bool inactive_38439 =
                                 slt64(srem64(sext_i32_i64(local_tid_38422),
                                              res_24810),
                                       sext_i32_i64(local_tid_38422) -
                                       sext_i32_i64(squot32(local_tid_38422,
                                                            32) * 32 - 1));
                            
                            if (inactive_38439) {
                                x_33163 = x_33164;
                            }
                            if (!inactive_38439) {
                                int32_t res_33165 = add32(x_33163, x_33164);
                                
                                x_33163 = res_33165;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)] =
                                x_33163;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38422, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_38426)[sext_i32_i64(local_tid_38422)] =
                            x_33164;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38430) *
                      squot64(segred_group_sizze_33159,
                              segment_sizze_nonzzero_38419) +
                      sext_i32_i64(local_tid_38422), m_24797) &&
                slt64(sext_i32_i64(local_tid_38422),
                      squot64(segred_group_sizze_33159,
                              segment_sizze_nonzzero_38419))) {
                ((__global
                  int32_t *) mem_37264)[sext_i32_i64(virt_group_id_38430) *
                                        squot64(segred_group_sizze_33159,
                                                segment_sizze_nonzzero_38419) +
                                        sext_i32_i64(local_tid_38422)] =
                    ((__local
                      int32_t *) red_arr_mem_38426)[(sext_i32_i64(local_tid_38422) +
                                                     1) *
                                                    segment_sizze_nonzzero_38419 -
                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33159
}
__kernel void mainzisegred_small_33299(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38595_backing_aligned_0,
                                       int64_t N_24796, int64_t m_24797,
                                       int64_t res_25158,
                                       int64_t num_groups_33317, __global
                                       unsigned char *res_mem_37197, __global
                                       unsigned char *res_mem_37276, __global
                                       unsigned char *res_mem_37277, __global
                                       unsigned char *mem_37326,
                                       int64_t segment_sizze_nonzzero_38588)
{
    #define segred_group_sizze_33316 (mainzisegred_group_sizze_33293)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38595_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38595_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38590;
    int32_t local_tid_38591;
    int64_t group_sizze_38594;
    int32_t wave_sizze_38593;
    int32_t group_tid_38592;
    
    global_tid_38590 = get_global_id(0);
    local_tid_38591 = get_local_id(0);
    group_sizze_38594 = get_local_size(0);
    wave_sizze_38593 = LOCKSTEP_WIDTH;
    group_tid_38592 = get_group_id(0);
    
    int32_t phys_tid_33299;
    
    phys_tid_33299 = global_tid_38590;
    
    __local char *red_arr_mem_38595;
    
    red_arr_mem_38595 = (__local char *) red_arr_mem_38595_backing_0;
    
    int32_t phys_group_id_38597;
    
    phys_group_id_38597 = get_group_id(0);
    for (int32_t i_38598 = 0; i_38598 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797,
                                          squot64(segred_group_sizze_33316,
                                                  segment_sizze_nonzzero_38588))) -
                   phys_group_id_38597, sext_i64_i32(num_groups_33317));
         i_38598++) {
        int32_t virt_group_id_38599 = phys_group_id_38597 + i_38598 *
                sext_i64_i32(num_groups_33317);
        int64_t gtid_33290 = squot64(sext_i32_i64(local_tid_38591),
                                     segment_sizze_nonzzero_38588) +
                sext_i32_i64(virt_group_id_38599) *
                squot64(segred_group_sizze_33316, segment_sizze_nonzzero_38588);
        int64_t gtid_33298 = srem64(sext_i32_i64(local_tid_38591), res_25158);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_25158) && (slt64(gtid_33290, m_24797) &&
                                        slt64(sext_i32_i64(local_tid_38591),
                                              res_25158 *
                                              squot64(segred_group_sizze_33316,
                                                      segment_sizze_nonzzero_38588)))) {
                int32_t x_33325 = ((__global
                                    int32_t *) res_mem_37276)[gtid_33290];
                int32_t index_primexp_35449 = sext_i64_i32(gtid_33298);
                bool cond_33327 = slt32(index_primexp_35449, x_33325);
                float res_33328;
                
                if (cond_33327) {
                    int32_t x_33324 = ((__global
                                        int32_t *) res_mem_37277)[gtid_33290];
                    int32_t x_33329 = add32(x_33324, index_primexp_35449);
                    int32_t x_33330 = sub32(x_33329, x_33325);
                    int32_t i_33331 = add32(1, x_33330);
                    int64_t i_33332 = sext_i32_i64(i_33331);
                    float res_33333 = ((__global
                                        float *) res_mem_37197)[gtid_33290 *
                                                                N_24796 +
                                                                i_33332];
                    
                    res_33328 = res_33333;
                } else {
                    res_33328 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)] =
                        res_33328;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_25158)) {
            // perform segmented scan to imitate reduction
            {
                float x_33320;
                float x_33321;
                float x_38600;
                float x_38601;
                bool ltid_in_bounds_38603;
                
                ltid_in_bounds_38603 = slt64(sext_i32_i64(local_tid_38591),
                                             res_25158 *
                                             squot64(segred_group_sizze_33316,
                                                     segment_sizze_nonzzero_38588));
                
                int32_t skip_threads_38604;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38603) {
                        x_33321 = ((volatile __local
                                    float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)];
                        if ((local_tid_38591 - squot32(local_tid_38591, 32) *
                             32) == 0) {
                            x_33320 = x_33321;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38604 = 1;
                    while (slt32(skip_threads_38604, 32)) {
                        if (sle32(skip_threads_38604, local_tid_38591 -
                                  squot32(local_tid_38591, 32) * 32) &&
                            ltid_in_bounds_38603) {
                            // read operands
                            {
                                x_33320 = ((volatile __local
                                            float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591) -
                                                                        sext_i32_i64(skip_threads_38604)];
                            }
                            // perform operation
                            {
                                bool inactive_38605 =
                                     slt64(srem64(sext_i32_i64(local_tid_38591),
                                                  res_25158),
                                           sext_i32_i64(local_tid_38591) -
                                           sext_i32_i64(local_tid_38591 -
                                           skip_threads_38604));
                                
                                if (inactive_38605) {
                                    x_33320 = x_33321;
                                }
                                if (!inactive_38605) {
                                    float res_33322 = x_33320 + x_33321;
                                    
                                    x_33320 = res_33322;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38593, skip_threads_38604)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38604, local_tid_38591 -
                                  squot32(local_tid_38591, 32) * 32) &&
                            ltid_in_bounds_38603) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)] =
                                    x_33320;
                                x_33321 = x_33320;
                            }
                        }
                        if (sle32(wave_sizze_38593, skip_threads_38604)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38604 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38591 - squot32(local_tid_38591, 32) * 32) ==
                        31 && ltid_in_bounds_38603) {
                        ((volatile __local
                          float *) red_arr_mem_38595)[sext_i32_i64(squot32(local_tid_38591,
                                                                           32))] =
                            x_33320;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38606;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38591, 32) == 0 &&
                            ltid_in_bounds_38603) {
                            x_38601 = ((volatile __local
                                        float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)];
                            if ((local_tid_38591 - squot32(local_tid_38591,
                                                           32) * 32) == 0) {
                                x_38600 = x_38601;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38606 = 1;
                        while (slt32(skip_threads_38606, 32)) {
                            if (sle32(skip_threads_38606, local_tid_38591 -
                                      squot32(local_tid_38591, 32) * 32) &&
                                (squot32(local_tid_38591, 32) == 0 &&
                                 ltid_in_bounds_38603)) {
                                // read operands
                                {
                                    x_38600 = ((volatile __local
                                                float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591) -
                                                                            sext_i32_i64(skip_threads_38606)];
                                }
                                // perform operation
                                {
                                    bool inactive_38607 =
                                         slt64(srem64(sext_i32_i64(local_tid_38591 *
                                                      32 + 32 - 1), res_25158),
                                               sext_i32_i64(local_tid_38591 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38591 -
                                                             skip_threads_38606) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38607) {
                                        x_38600 = x_38601;
                                    }
                                    if (!inactive_38607) {
                                        float res_38602 = x_38600 + x_38601;
                                        
                                        x_38600 = res_38602;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38593, skip_threads_38606)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38606, local_tid_38591 -
                                      squot32(local_tid_38591, 32) * 32) &&
                                (squot32(local_tid_38591, 32) == 0 &&
                                 ltid_in_bounds_38603)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)] =
                                        x_38600;
                                    x_38601 = x_38600;
                                }
                            }
                            if (sle32(wave_sizze_38593, skip_threads_38606)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38606 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38591, 32) == 0 ||
                          !ltid_in_bounds_38603)) {
                        // read operands
                        {
                            x_33321 = x_33320;
                            x_33320 = ((__local
                                        float *) red_arr_mem_38595)[sext_i32_i64(squot32(local_tid_38591,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38608 =
                                 slt64(srem64(sext_i32_i64(local_tid_38591),
                                              res_25158),
                                       sext_i32_i64(local_tid_38591) -
                                       sext_i32_i64(squot32(local_tid_38591,
                                                            32) * 32 - 1));
                            
                            if (inactive_38608) {
                                x_33320 = x_33321;
                            }
                            if (!inactive_38608) {
                                float res_33322 = x_33320 + x_33321;
                                
                                x_33320 = res_33322;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)] =
                                x_33320;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38591, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38595)[sext_i32_i64(local_tid_38591)] =
                            x_33321;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38599) *
                      squot64(segred_group_sizze_33316,
                              segment_sizze_nonzzero_38588) +
                      sext_i32_i64(local_tid_38591), m_24797) &&
                slt64(sext_i32_i64(local_tid_38591),
                      squot64(segred_group_sizze_33316,
                              segment_sizze_nonzzero_38588))) {
                ((__global
                  float *) mem_37326)[sext_i32_i64(virt_group_id_38599) *
                                      squot64(segred_group_sizze_33316,
                                              segment_sizze_nonzzero_38588) +
                                      sext_i32_i64(local_tid_38591)] = ((__local
                                                                         float *) red_arr_mem_38595)[(sext_i32_i64(local_tid_38591) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38588 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33316
}
__kernel void mainzisegred_small_34848(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38807_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38805_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_38803_backing_aligned_2,
                                       int64_t m_24797,
                                       int64_t iota32_arg_25183,
                                       int64_t num_groups_35019, __global
                                       unsigned char *mem_37332, __global
                                       unsigned char *mem_37492, __global
                                       unsigned char *mem_37494, __global
                                       unsigned char *mem_37498, __global
                                       unsigned char *mem_37501, __global
                                       unsigned char *mem_37503, __global
                                       unsigned char *mem_37505,
                                       int64_t segment_sizze_nonzzero_38796)
{
    #define segred_group_sizze_35018 (mainzisegred_group_sizze_34842)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38807_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38807_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38805_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38805_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38803_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38803_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38798;
    int32_t local_tid_38799;
    int64_t group_sizze_38802;
    int32_t wave_sizze_38801;
    int32_t group_tid_38800;
    
    global_tid_38798 = get_global_id(0);
    local_tid_38799 = get_local_id(0);
    group_sizze_38802 = get_local_size(0);
    wave_sizze_38801 = LOCKSTEP_WIDTH;
    group_tid_38800 = get_group_id(0);
    
    int32_t phys_tid_34848;
    
    phys_tid_34848 = global_tid_38798;
    
    __local char *red_arr_mem_38803;
    
    red_arr_mem_38803 = (__local char *) red_arr_mem_38803_backing_0;
    
    __local char *red_arr_mem_38805;
    
    red_arr_mem_38805 = (__local char *) red_arr_mem_38805_backing_1;
    
    __local char *red_arr_mem_38807;
    
    red_arr_mem_38807 = (__local char *) red_arr_mem_38807_backing_2;
    
    int32_t phys_group_id_38809;
    
    phys_group_id_38809 = get_group_id(0);
    for (int32_t i_38810 = 0; i_38810 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24797,
                                          squot64(segred_group_sizze_35018,
                                                  segment_sizze_nonzzero_38796))) -
                   phys_group_id_38809, sext_i64_i32(num_groups_35019));
         i_38810++) {
        int32_t virt_group_id_38811 = phys_group_id_38809 + i_38810 *
                sext_i64_i32(num_groups_35019);
        int64_t gtid_34839 = squot64(sext_i32_i64(local_tid_38799),
                                     segment_sizze_nonzzero_38796) +
                sext_i32_i64(virt_group_id_38811) *
                squot64(segred_group_sizze_35018, segment_sizze_nonzzero_38796);
        int64_t gtid_34847 = srem64(sext_i32_i64(local_tid_38799),
                                    iota32_arg_25183);
        
        // apply map function if in bounds
        {
            if (slt64(0, iota32_arg_25183) && (slt64(gtid_34839, m_24797) &&
                                               slt64(sext_i32_i64(local_tid_38799),
                                                     iota32_arg_25183 *
                                                     squot64(segred_group_sizze_35018,
                                                             segment_sizze_nonzzero_38796)))) {
                int32_t y_35038 = ((__global int32_t *) mem_37494)[gtid_34839];
                float y_35039 = ((__global float *) mem_37492)[gtid_34839];
                float x_35043 = ((__global float *) mem_37498)[gtid_34839 *
                                                               iota32_arg_25183 +
                                                               gtid_34847];
                float x_35044 = ((__global float *) mem_37332)[gtid_34847];
                int32_t index_primexp_35466 = sext_i64_i32(gtid_34847);
                float res_35047 = x_35043 / y_35039;
                bool cond_35048 = slt32(index_primexp_35466, y_35038);
                bool res_35049;
                
                res_35049 = futrts_isnan32(res_35047);
                
                bool res_35050 = !res_35049;
                bool x_35051 = cond_35048 && res_35050;
                float res_35052 = (float) fabs(res_35047);
                bool res_35053 = x_35044 < res_35052;
                bool x_35054 = x_35051 && res_35053;
                float res_35055;
                
                if (cond_35048) {
                    res_35055 = res_35047;
                } else {
                    res_35055 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)] =
                        x_35054;
                    ((__local
                      int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)] =
                        index_primexp_35466;
                    ((__local
                      float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)] =
                        res_35055;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)] = 0;
                ((__local
                  int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)] =
                    -1;
                ((__local
                  float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, iota32_arg_25183)) {
            // perform segmented scan to imitate reduction
            {
                bool x_35024;
                int32_t x_35025;
                float x_35026;
                bool x_35027;
                int32_t x_35028;
                float x_35029;
                bool x_38812;
                int32_t x_38813;
                float x_38814;
                bool x_38815;
                int32_t x_38816;
                float x_38817;
                bool ltid_in_bounds_38826;
                
                ltid_in_bounds_38826 = slt64(sext_i32_i64(local_tid_38799),
                                             iota32_arg_25183 *
                                             squot64(segred_group_sizze_35018,
                                                     segment_sizze_nonzzero_38796));
                
                int32_t skip_threads_38827;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38826) {
                        x_35027 = ((volatile __local
                                    bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)];
                        x_35028 = ((volatile __local
                                    int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)];
                        x_35029 = ((volatile __local
                                    float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)];
                        if ((local_tid_38799 - squot32(local_tid_38799, 32) *
                             32) == 0) {
                            x_35024 = x_35027;
                            x_35025 = x_35028;
                            x_35026 = x_35029;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38827 = 1;
                    while (slt32(skip_threads_38827, 32)) {
                        if (sle32(skip_threads_38827, local_tid_38799 -
                                  squot32(local_tid_38799, 32) * 32) &&
                            ltid_in_bounds_38826) {
                            // read operands
                            {
                                x_35024 = ((volatile __local
                                            bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799) -
                                                                       sext_i32_i64(skip_threads_38827)];
                                x_35025 = ((volatile __local
                                            int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799) -
                                                                          sext_i32_i64(skip_threads_38827)];
                                x_35026 = ((volatile __local
                                            float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799) -
                                                                        sext_i32_i64(skip_threads_38827)];
                            }
                            // perform operation
                            {
                                bool inactive_38828 =
                                     slt64(srem64(sext_i32_i64(local_tid_38799),
                                                  iota32_arg_25183),
                                           sext_i32_i64(local_tid_38799) -
                                           sext_i32_i64(local_tid_38799 -
                                           skip_threads_38827));
                                
                                if (inactive_38828) {
                                    x_35024 = x_35027;
                                    x_35025 = x_35028;
                                    x_35026 = x_35029;
                                }
                                if (!inactive_38828) {
                                    bool res_35030;
                                    int32_t res_35031;
                                    
                                    if (x_35024) {
                                        res_35030 = x_35024;
                                        res_35031 = x_35025;
                                    } else {
                                        bool x_35032 = x_35027 && x_35027;
                                        bool x_35033 = !x_35027;
                                        bool y_35034 = x_35024 && x_35033;
                                        bool res_35035 = x_35032 || y_35034;
                                        int32_t res_35036;
                                        
                                        if (x_35027) {
                                            res_35036 = x_35028;
                                        } else {
                                            res_35036 = x_35025;
                                        }
                                        res_35030 = res_35035;
                                        res_35031 = res_35036;
                                    }
                                    
                                    float res_35037 = x_35026 + x_35029;
                                    
                                    x_35024 = res_35030;
                                    x_35025 = res_35031;
                                    x_35026 = res_35037;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38801, skip_threads_38827)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38827, local_tid_38799 -
                                  squot32(local_tid_38799, 32) * 32) &&
                            ltid_in_bounds_38826) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)] =
                                    x_35024;
                                x_35027 = x_35024;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)] =
                                    x_35025;
                                x_35028 = x_35025;
                                ((volatile __local
                                  float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)] =
                                    x_35026;
                                x_35029 = x_35026;
                            }
                        }
                        if (sle32(wave_sizze_38801, skip_threads_38827)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38827 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38799 - squot32(local_tid_38799, 32) * 32) ==
                        31 && ltid_in_bounds_38826) {
                        ((volatile __local
                          bool *) red_arr_mem_38803)[sext_i32_i64(squot32(local_tid_38799,
                                                                          32))] =
                            x_35024;
                        ((volatile __local
                          int32_t *) red_arr_mem_38805)[sext_i32_i64(squot32(local_tid_38799,
                                                                             32))] =
                            x_35025;
                        ((volatile __local
                          float *) red_arr_mem_38807)[sext_i32_i64(squot32(local_tid_38799,
                                                                           32))] =
                            x_35026;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38829;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38799, 32) == 0 &&
                            ltid_in_bounds_38826) {
                            x_38815 = ((volatile __local
                                        bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)];
                            x_38816 = ((volatile __local
                                        int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)];
                            x_38817 = ((volatile __local
                                        float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)];
                            if ((local_tid_38799 - squot32(local_tid_38799,
                                                           32) * 32) == 0) {
                                x_38812 = x_38815;
                                x_38813 = x_38816;
                                x_38814 = x_38817;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38829 = 1;
                        while (slt32(skip_threads_38829, 32)) {
                            if (sle32(skip_threads_38829, local_tid_38799 -
                                      squot32(local_tid_38799, 32) * 32) &&
                                (squot32(local_tid_38799, 32) == 0 &&
                                 ltid_in_bounds_38826)) {
                                // read operands
                                {
                                    x_38812 = ((volatile __local
                                                bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799) -
                                                                           sext_i32_i64(skip_threads_38829)];
                                    x_38813 = ((volatile __local
                                                int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799) -
                                                                              sext_i32_i64(skip_threads_38829)];
                                    x_38814 = ((volatile __local
                                                float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799) -
                                                                            sext_i32_i64(skip_threads_38829)];
                                }
                                // perform operation
                                {
                                    bool inactive_38830 =
                                         slt64(srem64(sext_i32_i64(local_tid_38799 *
                                                      32 + 32 - 1),
                                                      iota32_arg_25183),
                                               sext_i32_i64(local_tid_38799 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38799 -
                                                             skip_threads_38829) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38830) {
                                        x_38812 = x_38815;
                                        x_38813 = x_38816;
                                        x_38814 = x_38817;
                                    }
                                    if (!inactive_38830) {
                                        bool res_38818;
                                        int32_t res_38819;
                                        
                                        if (x_38812) {
                                            res_38818 = x_38812;
                                            res_38819 = x_38813;
                                        } else {
                                            bool x_38820 = x_38815 && x_38815;
                                            bool x_38821 = !x_38815;
                                            bool y_38822 = x_38812 && x_38821;
                                            bool res_38823 = x_38820 || y_38822;
                                            int32_t res_38824;
                                            
                                            if (x_38815) {
                                                res_38824 = x_38816;
                                            } else {
                                                res_38824 = x_38813;
                                            }
                                            res_38818 = res_38823;
                                            res_38819 = res_38824;
                                        }
                                        
                                        float res_38825 = x_38814 + x_38817;
                                        
                                        x_38812 = res_38818;
                                        x_38813 = res_38819;
                                        x_38814 = res_38825;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38801, skip_threads_38829)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38829, local_tid_38799 -
                                      squot32(local_tid_38799, 32) * 32) &&
                                (squot32(local_tid_38799, 32) == 0 &&
                                 ltid_in_bounds_38826)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)] =
                                        x_38812;
                                    x_38815 = x_38812;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)] =
                                        x_38813;
                                    x_38816 = x_38813;
                                    ((volatile __local
                                      float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)] =
                                        x_38814;
                                    x_38817 = x_38814;
                                }
                            }
                            if (sle32(wave_sizze_38801, skip_threads_38829)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38829 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38799, 32) == 0 ||
                          !ltid_in_bounds_38826)) {
                        // read operands
                        {
                            x_35027 = x_35024;
                            x_35028 = x_35025;
                            x_35029 = x_35026;
                            x_35024 = ((__local
                                        bool *) red_arr_mem_38803)[sext_i32_i64(squot32(local_tid_38799,
                                                                                        32)) -
                                                                   1];
                            x_35025 = ((__local
                                        int32_t *) red_arr_mem_38805)[sext_i32_i64(squot32(local_tid_38799,
                                                                                           32)) -
                                                                      1];
                            x_35026 = ((__local
                                        float *) red_arr_mem_38807)[sext_i32_i64(squot32(local_tid_38799,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38831 =
                                 slt64(srem64(sext_i32_i64(local_tid_38799),
                                              iota32_arg_25183),
                                       sext_i32_i64(local_tid_38799) -
                                       sext_i32_i64(squot32(local_tid_38799,
                                                            32) * 32 - 1));
                            
                            if (inactive_38831) {
                                x_35024 = x_35027;
                                x_35025 = x_35028;
                                x_35026 = x_35029;
                            }
                            if (!inactive_38831) {
                                bool res_35030;
                                int32_t res_35031;
                                
                                if (x_35024) {
                                    res_35030 = x_35024;
                                    res_35031 = x_35025;
                                } else {
                                    bool x_35032 = x_35027 && x_35027;
                                    bool x_35033 = !x_35027;
                                    bool y_35034 = x_35024 && x_35033;
                                    bool res_35035 = x_35032 || y_35034;
                                    int32_t res_35036;
                                    
                                    if (x_35027) {
                                        res_35036 = x_35028;
                                    } else {
                                        res_35036 = x_35025;
                                    }
                                    res_35030 = res_35035;
                                    res_35031 = res_35036;
                                }
                                
                                float res_35037 = x_35026 + x_35029;
                                
                                x_35024 = res_35030;
                                x_35025 = res_35031;
                                x_35026 = res_35037;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)] =
                                x_35024;
                            ((__local
                              int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)] =
                                x_35025;
                            ((__local
                              float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)] =
                                x_35026;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38799, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_38803)[sext_i32_i64(local_tid_38799)] =
                            x_35027;
                        ((__local
                          int32_t *) red_arr_mem_38805)[sext_i32_i64(local_tid_38799)] =
                            x_35028;
                        ((__local
                          float *) red_arr_mem_38807)[sext_i32_i64(local_tid_38799)] =
                            x_35029;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38811) *
                      squot64(segred_group_sizze_35018,
                              segment_sizze_nonzzero_38796) +
                      sext_i32_i64(local_tid_38799), m_24797) &&
                slt64(sext_i32_i64(local_tid_38799),
                      squot64(segred_group_sizze_35018,
                              segment_sizze_nonzzero_38796))) {
                ((__global
                  bool *) mem_37501)[sext_i32_i64(virt_group_id_38811) *
                                     squot64(segred_group_sizze_35018,
                                             segment_sizze_nonzzero_38796) +
                                     sext_i32_i64(local_tid_38799)] = ((__local
                                                                        bool *) red_arr_mem_38803)[(sext_i32_i64(local_tid_38799) +
                                                                                                    1) *
                                                                                                   segment_sizze_nonzzero_38796 -
                                                                                                   1];
                ((__global
                  int32_t *) mem_37503)[sext_i32_i64(virt_group_id_38811) *
                                        squot64(segred_group_sizze_35018,
                                                segment_sizze_nonzzero_38796) +
                                        sext_i32_i64(local_tid_38799)] =
                    ((__local
                      int32_t *) red_arr_mem_38805)[(sext_i32_i64(local_tid_38799) +
                                                     1) *
                                                    segment_sizze_nonzzero_38796 -
                                                    1];
                ((__global
                  float *) mem_37505)[sext_i32_i64(virt_group_id_38811) *
                                      squot64(segred_group_sizze_35018,
                                              segment_sizze_nonzzero_38796) +
                                      sext_i32_i64(local_tid_38799)] = ((__local
                                                                         float *) red_arr_mem_38807)[(sext_i32_i64(local_tid_38799) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38796 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35018
}
__kernel void mainDetailedzicopy_38018(int64_t m_24055, int64_t nm_24206,
                                       int64_t ctx_param_ext_36883,
                                       int64_t ctx_param_ext_36884,
                                       int64_t ctx_param_ext_36886, __global
                                       unsigned char *mem_param_36888, __global
                                       unsigned char *mem_36893)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_gtid_38018;
    int32_t copy_ltid_38019;
    int32_t copy_gid_38020;
    
    copy_gtid_38018 = get_global_id(0);
    copy_ltid_38019 = get_local_id(0);
    copy_gid_38020 = get_group_id(0);
    if (slt64(sext_i32_i64(copy_gtid_38018), m_24055 * nm_24206)) {
        ((__global float *) mem_36893)[(sext_i32_i64(copy_gtid_38018) -
                                        squot64(sext_i32_i64(copy_gtid_38018),
                                                nm_24206) * nm_24206) *
                                       m_24055 +
                                       squot64(sext_i32_i64(copy_gtid_38018),
                                               nm_24206)] = ((__global
                                                              float *) mem_param_36888)[ctx_param_ext_36883 +
                                                                                        (squot64(sext_i32_i64(copy_gtid_38018),
                                                                                                 nm_24206) *
                                                                                         ctx_param_ext_36884 +
                                                                                         (sext_i32_i64(copy_gtid_38018) -
                                                                                          squot64(sext_i32_i64(copy_gtid_38018),
                                                                                                  nm_24206) *
                                                                                          nm_24206) *
                                                                                         ctx_param_ext_36886)];
    }
    
  error_0:
    return;
}
__kernel void mainDetailedziscan_stage1_27914(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38353_backing_aligned_0,
                                              int64_t N_24054, int64_t m_24055,
                                              int64_t N_24056, __global
                                              unsigned char *images_mem_36738,
                                              __global
                                              unsigned char *res_mem_37159,
                                              __global unsigned char *mem_37188,
                                              __global unsigned char *mem_37191,
                                              int32_t num_threads_38347)
{
    #define segscan_group_sizze_27931 (mainDetailedzisegscan_group_sizze_27908)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38353_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38353_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38348;
    int32_t local_tid_38349;
    int64_t group_sizze_38352;
    int32_t wave_sizze_38351;
    int32_t group_tid_38350;
    
    global_tid_38348 = get_global_id(0);
    local_tid_38349 = get_local_id(0);
    group_sizze_38352 = get_local_size(0);
    wave_sizze_38351 = LOCKSTEP_WIDTH;
    group_tid_38350 = get_group_id(0);
    
    int32_t phys_tid_27914;
    
    phys_tid_27914 = global_tid_38348;
    
    __local char *scan_arr_mem_38353;
    
    scan_arr_mem_38353 = (__local char *) scan_arr_mem_38353_backing_0;
    
    int64_t x_27936;
    int64_t x_27937;
    
    x_27936 = 0;
    for (int64_t j_38355 = 0; j_38355 < sdiv_up64(m_24055 * N_24054,
                                                  sext_i32_i64(num_threads_38347));
         j_38355++) {
        int64_t chunk_offset_38356 = segscan_group_sizze_27931 * j_38355 +
                sext_i32_i64(group_tid_38350) * (segscan_group_sizze_27931 *
                                                 sdiv_up64(m_24055 * N_24054,
                                                           sext_i32_i64(num_threads_38347)));
        int64_t flat_idx_38357 = chunk_offset_38356 +
                sext_i32_i64(local_tid_38349);
        int64_t gtid_27905 = squot64(flat_idx_38357, N_24054);
        int64_t gtid_27913 = flat_idx_38357 - squot64(flat_idx_38357, N_24054) *
                N_24054;
        
        // threads in bounds read input
        {
            if (slt64(gtid_27905, m_24055) && slt64(gtid_27913, N_24054)) {
                float x_27941 = ((__global
                                  float *) images_mem_36738)[gtid_27905 *
                                                             N_24056 +
                                                             gtid_27913];
                bool res_27943;
                
                res_27943 = futrts_isnan32(x_27941);
                
                bool cond_27944 = !res_27943;
                float res_27945;
                
                if (cond_27944) {
                    float x_27942 = ((__global
                                      float *) res_mem_37159)[gtid_27905 *
                                                              N_24054 +
                                                              gtid_27913];
                    float res_27946 = x_27941 - x_27942;
                    
                    res_27945 = res_27946;
                } else {
                    res_27945 = NAN;
                }
                
                bool res_27947;
                
                res_27947 = futrts_isnan32(res_27945);
                
                bool res_27948 = !res_27947;
                int64_t res_27949 = btoi_bool_i64(res_27948);
                
                // write to-scan values to parameters
                {
                    x_27937 = res_27949;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_37191)[gtid_27905 * N_24054 +
                                                   gtid_27913] = res_27945;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_27905, m_24055) && slt64(gtid_27913,
                                                          N_24054))) {
                    x_27937 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_27938 = add64(x_27936, x_27937);
                
                ((__local
                  int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)] =
                    res_27938;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38358;
            int64_t x_38359;
            int64_t x_38361;
            int64_t x_38362;
            bool ltid_in_bounds_38364;
            
            ltid_in_bounds_38364 = slt64(sext_i32_i64(local_tid_38349),
                                         segscan_group_sizze_27931);
            
            int32_t skip_threads_38365;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38364) {
                    x_38359 = ((volatile __local
                                int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)];
                    if ((local_tid_38349 - squot32(local_tid_38349, 32) * 32) ==
                        0) {
                        x_38358 = x_38359;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38365 = 1;
                while (slt32(skip_threads_38365, 32)) {
                    if (sle32(skip_threads_38365, local_tid_38349 -
                              squot32(local_tid_38349, 32) * 32) &&
                        ltid_in_bounds_38364) {
                        // read operands
                        {
                            x_38358 = ((volatile __local
                                        int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349) -
                                                                       sext_i32_i64(skip_threads_38365)];
                        }
                        // perform operation
                        {
                            bool inactive_38366 =
                                 slt64(srem64(sext_i32_i64(local_tid_38349) +
                                              chunk_offset_38356, N_24054),
                                       sext_i32_i64(local_tid_38349) +
                                       chunk_offset_38356 -
                                       (sext_i32_i64(local_tid_38349 -
                                        skip_threads_38365) +
                                        chunk_offset_38356));
                            
                            if (inactive_38366) {
                                x_38358 = x_38359;
                            }
                            if (!inactive_38366) {
                                int64_t res_38360 = add64(x_38358, x_38359);
                                
                                x_38358 = res_38360;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38351, skip_threads_38365)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38365, local_tid_38349 -
                              squot32(local_tid_38349, 32) * 32) &&
                        ltid_in_bounds_38364) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)] =
                                x_38358;
                            x_38359 = x_38358;
                        }
                    }
                    if (sle32(wave_sizze_38351, skip_threads_38365)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38365 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38349 - squot32(local_tid_38349, 32) * 32) ==
                    31 && ltid_in_bounds_38364) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38353)[sext_i32_i64(squot32(local_tid_38349,
                                                                          32))] =
                        x_38358;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38367;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38349, 32) == 0 &&
                        ltid_in_bounds_38364) {
                        x_38362 = ((volatile __local
                                    int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)];
                        if ((local_tid_38349 - squot32(local_tid_38349, 32) *
                             32) == 0) {
                            x_38361 = x_38362;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38367 = 1;
                    while (slt32(skip_threads_38367, 32)) {
                        if (sle32(skip_threads_38367, local_tid_38349 -
                                  squot32(local_tid_38349, 32) * 32) &&
                            (squot32(local_tid_38349, 32) == 0 &&
                             ltid_in_bounds_38364)) {
                            // read operands
                            {
                                x_38361 = ((volatile __local
                                            int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349) -
                                                                           sext_i32_i64(skip_threads_38367)];
                            }
                            // perform operation
                            {
                                bool inactive_38368 =
                                     slt64(srem64(sext_i32_i64(local_tid_38349 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38356, N_24054),
                                           sext_i32_i64(local_tid_38349 * 32 +
                                           32 - 1) + chunk_offset_38356 -
                                           (sext_i32_i64((local_tid_38349 -
                                                          skip_threads_38367) *
                                            32 + 32 - 1) + chunk_offset_38356));
                                
                                if (inactive_38368) {
                                    x_38361 = x_38362;
                                }
                                if (!inactive_38368) {
                                    int64_t res_38363 = add64(x_38361, x_38362);
                                    
                                    x_38361 = res_38363;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38351, skip_threads_38367)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38367, local_tid_38349 -
                                  squot32(local_tid_38349, 32) * 32) &&
                            (squot32(local_tid_38349, 32) == 0 &&
                             ltid_in_bounds_38364)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)] =
                                    x_38361;
                                x_38362 = x_38361;
                            }
                        }
                        if (sle32(wave_sizze_38351, skip_threads_38367)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38367 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38349, 32) == 0 ||
                      !ltid_in_bounds_38364)) {
                    // read operands
                    {
                        x_38359 = x_38358;
                        x_38358 = ((__local
                                    int64_t *) scan_arr_mem_38353)[sext_i32_i64(squot32(local_tid_38349,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_38369 =
                             slt64(srem64(sext_i32_i64(local_tid_38349) +
                                          chunk_offset_38356, N_24054),
                                   sext_i32_i64(local_tid_38349) +
                                   chunk_offset_38356 -
                                   (sext_i32_i64(squot32(local_tid_38349, 32) *
                                    32 - 1) + chunk_offset_38356));
                        
                        if (inactive_38369) {
                            x_38358 = x_38359;
                        }
                        if (!inactive_38369) {
                            int64_t res_38360 = add64(x_38358, x_38359);
                            
                            x_38358 = res_38360;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)] =
                            x_38358;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38349, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)] =
                        x_38359;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_27905, m_24055) && slt64(gtid_27913, N_24054)) {
                    ((__global int64_t *) mem_37188)[gtid_27905 * N_24054 +
                                                     gtid_27913] = ((__local
                                                                     int64_t *) scan_arr_mem_38353)[sext_i32_i64(local_tid_38349)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38370 = slt64(srem64(chunk_offset_38356 +
                                                          segscan_group_sizze_27931,
                                                          N_24054),
                                                   chunk_offset_38356 +
                                                   segscan_group_sizze_27931 -
                                                   (chunk_offset_38356 +
                                                    segscan_group_sizze_27931 -
                                                    1));
                bool should_load_carry_38371 = local_tid_38349 == 0 &&
                     !crosses_segment_38370;
                
                if (should_load_carry_38371) {
                    x_27936 = ((__local
                                int64_t *) scan_arr_mem_38353)[segscan_group_sizze_27931 -
                                                               1];
                }
                if (!should_load_carry_38371) {
                    x_27936 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_27931
}
__kernel void mainDetailedziscan_stage1_29700(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38986_backing_aligned_0,
                                              __local volatile
                                              int64_t *scan_arr_mem_38984_backing_aligned_1,
                                              __local volatile
                                              int64_t *scan_arr_mem_38982_backing_aligned_2,
                                              __local volatile
                                              int64_t *scan_arr_mem_38980_backing_aligned_3,
                                              int64_t m_24055,
                                              int64_t iota32_arg_24441,
                                              int32_t lifted_2_radix_sort_step_arg_30282,
                                              int32_t lifted_0_get_bit_arg_30283,
                                              unsigned char res_30284,
                                              unsigned char res_30285, __global
                                              unsigned char *mem_param_37576,
                                              __global unsigned char *mem_37603,
                                              __global unsigned char *mem_37606,
                                              __global unsigned char *mem_37609,
                                              __global unsigned char *mem_37612,
                                              __global unsigned char *mem_37615,
                                              int32_t num_threads_38974)
{
    #define segscan_group_sizze_30377 (mainDetailedzisegscan_group_sizze_29694)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38986_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_38986_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_38984_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_38984_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_38982_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_38982_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_38980_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38980_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38975;
    int32_t local_tid_38976;
    int64_t group_sizze_38979;
    int32_t wave_sizze_38978;
    int32_t group_tid_38977;
    
    global_tid_38975 = get_global_id(0);
    local_tid_38976 = get_local_id(0);
    group_sizze_38979 = get_local_size(0);
    wave_sizze_38978 = LOCKSTEP_WIDTH;
    group_tid_38977 = get_group_id(0);
    
    int32_t phys_tid_29700;
    
    phys_tid_29700 = global_tid_38975;
    
    __local char *scan_arr_mem_38980;
    __local char *scan_arr_mem_38982;
    __local char *scan_arr_mem_38984;
    __local char *scan_arr_mem_38986;
    
    scan_arr_mem_38980 = (__local char *) scan_arr_mem_38980_backing_0;
    scan_arr_mem_38982 = (__local char *) scan_arr_mem_38982_backing_1;
    scan_arr_mem_38984 = (__local char *) scan_arr_mem_38984_backing_2;
    scan_arr_mem_38986 = (__local char *) scan_arr_mem_38986_backing_3;
    
    int64_t x_30385;
    int64_t x_30386;
    int64_t x_30387;
    int64_t x_30388;
    int64_t x_30389;
    int64_t x_30390;
    int64_t x_30391;
    int64_t x_30392;
    
    x_30385 = 0;
    x_30386 = 0;
    x_30387 = 0;
    x_30388 = 0;
    for (int64_t j_38988 = 0; j_38988 < sdiv_up64(m_24055 * iota32_arg_24441,
                                                  sext_i32_i64(num_threads_38974));
         j_38988++) {
        int64_t chunk_offset_38989 = segscan_group_sizze_30377 * j_38988 +
                sext_i32_i64(group_tid_38977) * (segscan_group_sizze_30377 *
                                                 sdiv_up64(m_24055 *
                                                           iota32_arg_24441,
                                                           sext_i32_i64(num_threads_38974)));
        int64_t flat_idx_38990 = chunk_offset_38989 +
                sext_i32_i64(local_tid_38976);
        int64_t gtid_29691 = squot64(flat_idx_38990, iota32_arg_24441);
        int64_t gtid_29699 = flat_idx_38990 - squot64(flat_idx_38990,
                                                      iota32_arg_24441) *
                iota32_arg_24441;
        
        // threads in bounds read input
        {
            if (slt64(gtid_29691, m_24055) && slt64(gtid_29699,
                                                    iota32_arg_24441)) {
                float x_30398 = ((__global
                                  float *) mem_param_37576)[gtid_29691 *
                                                            iota32_arg_24441 +
                                                            gtid_29699];
                int32_t i32_arg_30399;
                
                i32_arg_30399 = futrts_to_bits32(x_30398);
                
                int32_t unsign_arg_30400 = ashr32(i32_arg_30399,
                                                  lifted_0_get_bit_arg_30283);
                int32_t unsign_arg_30401 = 1 & unsign_arg_30400;
                int32_t unsign_arg_30402 = ashr32(i32_arg_30399, 31);
                int32_t unsign_arg_30403 = 1 & unsign_arg_30402;
                bool cond_30404 = unsign_arg_30403 == 1;
                bool x_30405 = !cond_30404;
                bool y_30406 = res_30284 && x_30405;
                bool cond_30407 = cond_30404 || y_30406;
                int32_t res_30408;
                
                if (cond_30407) {
                    int32_t res_30409 = 1 ^ unsign_arg_30401;
                    
                    res_30408 = res_30409;
                } else {
                    res_30408 = unsign_arg_30401;
                }
                
                int32_t x_30410 = mul32(2, res_30408);
                int32_t unsign_arg_30411 = ashr32(i32_arg_30399,
                                                  lifted_2_radix_sort_step_arg_30282);
                int32_t unsign_arg_30412 = 1 & unsign_arg_30411;
                bool y_30413 = res_30285 && x_30405;
                bool cond_30414 = cond_30404 || y_30413;
                int32_t res_30415;
                
                if (cond_30414) {
                    int32_t res_30416 = 1 ^ unsign_arg_30412;
                    
                    res_30415 = res_30416;
                } else {
                    res_30415 = unsign_arg_30412;
                }
                
                int32_t res_30417 = add32(x_30410, res_30415);
                bool cond_30418 = res_30417 == 0;
                int64_t res_30419 = btoi_bool_i64(cond_30418);
                int64_t res_30420;
                int64_t res_30421;
                int64_t res_30422;
                
                if (cond_30418) {
                    res_30420 = 0;
                    res_30421 = 0;
                    res_30422 = 0;
                } else {
                    bool cond_30423 = res_30417 == 1;
                    int64_t res_30424 = btoi_bool_i64(cond_30423);
                    int64_t res_30425;
                    int64_t res_30426;
                    
                    if (cond_30423) {
                        res_30425 = 0;
                        res_30426 = 0;
                    } else {
                        bool cond_30427 = res_30417 == 2;
                        int64_t res_30428 = btoi_bool_i64(cond_30427);
                        bool cond_neg_30429 = !cond_30427;
                        int64_t res_30430 = btoi_bool_i64(cond_neg_30429);
                        
                        res_30425 = res_30428;
                        res_30426 = res_30430;
                    }
                    res_30420 = res_30424;
                    res_30421 = res_30425;
                    res_30422 = res_30426;
                }
                // write to-scan values to parameters
                {
                    x_30389 = res_30419;
                    x_30390 = res_30420;
                    x_30391 = res_30421;
                    x_30392 = res_30422;
                }
                // write mapped values results to global memory
                {
                    ((__global int32_t *) mem_37615)[gtid_29691 *
                                                     iota32_arg_24441 +
                                                     gtid_29699] = res_30417;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_29691, m_24055) && slt64(gtid_29699,
                                                          iota32_arg_24441))) {
                    x_30389 = 0;
                    x_30390 = 0;
                    x_30391 = 0;
                    x_30392 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_30393 = add64(x_30385, x_30389);
                int64_t res_30394 = add64(x_30386, x_30390);
                int64_t res_30395 = add64(x_30387, x_30391);
                int64_t res_30396 = add64(x_30388, x_30392);
                
                ((__local
                  int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)] =
                    res_30393;
                ((__local
                  int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)] =
                    res_30394;
                ((__local
                  int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)] =
                    res_30395;
                ((__local
                  int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)] =
                    res_30396;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38991;
            int64_t x_38992;
            int64_t x_38993;
            int64_t x_38994;
            int64_t x_38995;
            int64_t x_38996;
            int64_t x_38997;
            int64_t x_38998;
            int64_t x_39003;
            int64_t x_39004;
            int64_t x_39005;
            int64_t x_39006;
            int64_t x_39007;
            int64_t x_39008;
            int64_t x_39009;
            int64_t x_39010;
            bool ltid_in_bounds_39015;
            
            ltid_in_bounds_39015 = slt64(sext_i32_i64(local_tid_38976),
                                         segscan_group_sizze_30377);
            
            int32_t skip_threads_39016;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_39015) {
                    x_38995 = ((volatile __local
                                int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)];
                    x_38996 = ((volatile __local
                                int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)];
                    x_38997 = ((volatile __local
                                int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)];
                    x_38998 = ((volatile __local
                                int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)];
                    if ((local_tid_38976 - squot32(local_tid_38976, 32) * 32) ==
                        0) {
                        x_38991 = x_38995;
                        x_38992 = x_38996;
                        x_38993 = x_38997;
                        x_38994 = x_38998;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_39016 = 1;
                while (slt32(skip_threads_39016, 32)) {
                    if (sle32(skip_threads_39016, local_tid_38976 -
                              squot32(local_tid_38976, 32) * 32) &&
                        ltid_in_bounds_39015) {
                        // read operands
                        {
                            x_38991 = ((volatile __local
                                        int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976) -
                                                                       sext_i32_i64(skip_threads_39016)];
                            x_38992 = ((volatile __local
                                        int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976) -
                                                                       sext_i32_i64(skip_threads_39016)];
                            x_38993 = ((volatile __local
                                        int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976) -
                                                                       sext_i32_i64(skip_threads_39016)];
                            x_38994 = ((volatile __local
                                        int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976) -
                                                                       sext_i32_i64(skip_threads_39016)];
                        }
                        // perform operation
                        {
                            bool inactive_39017 =
                                 slt64(srem64(sext_i32_i64(local_tid_38976) +
                                              chunk_offset_38989,
                                              iota32_arg_24441),
                                       sext_i32_i64(local_tid_38976) +
                                       chunk_offset_38989 -
                                       (sext_i32_i64(local_tid_38976 -
                                        skip_threads_39016) +
                                        chunk_offset_38989));
                            
                            if (inactive_39017) {
                                x_38991 = x_38995;
                                x_38992 = x_38996;
                                x_38993 = x_38997;
                                x_38994 = x_38998;
                            }
                            if (!inactive_39017) {
                                int64_t res_38999 = add64(x_38991, x_38995);
                                int64_t res_39000 = add64(x_38992, x_38996);
                                int64_t res_39001 = add64(x_38993, x_38997);
                                int64_t res_39002 = add64(x_38994, x_38998);
                                
                                x_38991 = res_38999;
                                x_38992 = res_39000;
                                x_38993 = res_39001;
                                x_38994 = res_39002;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38978, skip_threads_39016)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_39016, local_tid_38976 -
                              squot32(local_tid_38976, 32) * 32) &&
                        ltid_in_bounds_39015) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)] =
                                x_38991;
                            x_38995 = x_38991;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)] =
                                x_38992;
                            x_38996 = x_38992;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)] =
                                x_38993;
                            x_38997 = x_38993;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)] =
                                x_38994;
                            x_38998 = x_38994;
                        }
                    }
                    if (sle32(wave_sizze_38978, skip_threads_39016)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_39016 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38976 - squot32(local_tid_38976, 32) * 32) ==
                    31 && ltid_in_bounds_39015) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38980)[sext_i32_i64(squot32(local_tid_38976,
                                                                          32))] =
                        x_38991;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38982)[sext_i32_i64(squot32(local_tid_38976,
                                                                          32))] =
                        x_38992;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38984)[sext_i32_i64(squot32(local_tid_38976,
                                                                          32))] =
                        x_38993;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38986)[sext_i32_i64(squot32(local_tid_38976,
                                                                          32))] =
                        x_38994;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_39018;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38976, 32) == 0 &&
                        ltid_in_bounds_39015) {
                        x_39007 = ((volatile __local
                                    int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)];
                        x_39008 = ((volatile __local
                                    int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)];
                        x_39009 = ((volatile __local
                                    int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)];
                        x_39010 = ((volatile __local
                                    int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)];
                        if ((local_tid_38976 - squot32(local_tid_38976, 32) *
                             32) == 0) {
                            x_39003 = x_39007;
                            x_39004 = x_39008;
                            x_39005 = x_39009;
                            x_39006 = x_39010;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_39018 = 1;
                    while (slt32(skip_threads_39018, 32)) {
                        if (sle32(skip_threads_39018, local_tid_38976 -
                                  squot32(local_tid_38976, 32) * 32) &&
                            (squot32(local_tid_38976, 32) == 0 &&
                             ltid_in_bounds_39015)) {
                            // read operands
                            {
                                x_39003 = ((volatile __local
                                            int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976) -
                                                                           sext_i32_i64(skip_threads_39018)];
                                x_39004 = ((volatile __local
                                            int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976) -
                                                                           sext_i32_i64(skip_threads_39018)];
                                x_39005 = ((volatile __local
                                            int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976) -
                                                                           sext_i32_i64(skip_threads_39018)];
                                x_39006 = ((volatile __local
                                            int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976) -
                                                                           sext_i32_i64(skip_threads_39018)];
                            }
                            // perform operation
                            {
                                bool inactive_39019 =
                                     slt64(srem64(sext_i32_i64(local_tid_38976 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38989,
                                                  iota32_arg_24441),
                                           sext_i32_i64(local_tid_38976 * 32 +
                                           32 - 1) + chunk_offset_38989 -
                                           (sext_i32_i64((local_tid_38976 -
                                                          skip_threads_39018) *
                                            32 + 32 - 1) + chunk_offset_38989));
                                
                                if (inactive_39019) {
                                    x_39003 = x_39007;
                                    x_39004 = x_39008;
                                    x_39005 = x_39009;
                                    x_39006 = x_39010;
                                }
                                if (!inactive_39019) {
                                    int64_t res_39011 = add64(x_39003, x_39007);
                                    int64_t res_39012 = add64(x_39004, x_39008);
                                    int64_t res_39013 = add64(x_39005, x_39009);
                                    int64_t res_39014 = add64(x_39006, x_39010);
                                    
                                    x_39003 = res_39011;
                                    x_39004 = res_39012;
                                    x_39005 = res_39013;
                                    x_39006 = res_39014;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38978, skip_threads_39018)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_39018, local_tid_38976 -
                                  squot32(local_tid_38976, 32) * 32) &&
                            (squot32(local_tid_38976, 32) == 0 &&
                             ltid_in_bounds_39015)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)] =
                                    x_39003;
                                x_39007 = x_39003;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)] =
                                    x_39004;
                                x_39008 = x_39004;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)] =
                                    x_39005;
                                x_39009 = x_39005;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)] =
                                    x_39006;
                                x_39010 = x_39006;
                            }
                        }
                        if (sle32(wave_sizze_38978, skip_threads_39018)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_39018 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38976, 32) == 0 ||
                      !ltid_in_bounds_39015)) {
                    // read operands
                    {
                        x_38995 = x_38991;
                        x_38996 = x_38992;
                        x_38997 = x_38993;
                        x_38998 = x_38994;
                        x_38991 = ((__local
                                    int64_t *) scan_arr_mem_38980)[sext_i32_i64(squot32(local_tid_38976,
                                                                                        32)) -
                                                                   1];
                        x_38992 = ((__local
                                    int64_t *) scan_arr_mem_38982)[sext_i32_i64(squot32(local_tid_38976,
                                                                                        32)) -
                                                                   1];
                        x_38993 = ((__local
                                    int64_t *) scan_arr_mem_38984)[sext_i32_i64(squot32(local_tid_38976,
                                                                                        32)) -
                                                                   1];
                        x_38994 = ((__local
                                    int64_t *) scan_arr_mem_38986)[sext_i32_i64(squot32(local_tid_38976,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_39020 =
                             slt64(srem64(sext_i32_i64(local_tid_38976) +
                                          chunk_offset_38989, iota32_arg_24441),
                                   sext_i32_i64(local_tid_38976) +
                                   chunk_offset_38989 -
                                   (sext_i32_i64(squot32(local_tid_38976, 32) *
                                    32 - 1) + chunk_offset_38989));
                        
                        if (inactive_39020) {
                            x_38991 = x_38995;
                            x_38992 = x_38996;
                            x_38993 = x_38997;
                            x_38994 = x_38998;
                        }
                        if (!inactive_39020) {
                            int64_t res_38999 = add64(x_38991, x_38995);
                            int64_t res_39000 = add64(x_38992, x_38996);
                            int64_t res_39001 = add64(x_38993, x_38997);
                            int64_t res_39002 = add64(x_38994, x_38998);
                            
                            x_38991 = res_38999;
                            x_38992 = res_39000;
                            x_38993 = res_39001;
                            x_38994 = res_39002;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)] =
                            x_38991;
                        ((__local
                          int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)] =
                            x_38992;
                        ((__local
                          int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)] =
                            x_38993;
                        ((__local
                          int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)] =
                            x_38994;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38976, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)] =
                        x_38995;
                    ((__local
                      int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)] =
                        x_38996;
                    ((__local
                      int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)] =
                        x_38997;
                    ((__local
                      int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)] =
                        x_38998;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_29691, m_24055) && slt64(gtid_29699,
                                                        iota32_arg_24441)) {
                    ((__global int64_t *) mem_37603)[gtid_29691 *
                                                     iota32_arg_24441 +
                                                     gtid_29699] = ((__local
                                                                     int64_t *) scan_arr_mem_38980)[sext_i32_i64(local_tid_38976)];
                    ((__global int64_t *) mem_37606)[gtid_29691 *
                                                     iota32_arg_24441 +
                                                     gtid_29699] = ((__local
                                                                     int64_t *) scan_arr_mem_38982)[sext_i32_i64(local_tid_38976)];
                    ((__global int64_t *) mem_37609)[gtid_29691 *
                                                     iota32_arg_24441 +
                                                     gtid_29699] = ((__local
                                                                     int64_t *) scan_arr_mem_38984)[sext_i32_i64(local_tid_38976)];
                    ((__global int64_t *) mem_37612)[gtid_29691 *
                                                     iota32_arg_24441 +
                                                     gtid_29699] = ((__local
                                                                     int64_t *) scan_arr_mem_38986)[sext_i32_i64(local_tid_38976)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_39021 = slt64(srem64(chunk_offset_38989 +
                                                          segscan_group_sizze_30377,
                                                          iota32_arg_24441),
                                                   chunk_offset_38989 +
                                                   segscan_group_sizze_30377 -
                                                   (chunk_offset_38989 +
                                                    segscan_group_sizze_30377 -
                                                    1));
                bool should_load_carry_39022 = local_tid_38976 == 0 &&
                     !crosses_segment_39021;
                
                if (should_load_carry_39022) {
                    x_30385 = ((__local
                                int64_t *) scan_arr_mem_38980)[segscan_group_sizze_30377 -
                                                               1];
                    x_30386 = ((__local
                                int64_t *) scan_arr_mem_38982)[segscan_group_sizze_30377 -
                                                               1];
                    x_30387 = ((__local
                                int64_t *) scan_arr_mem_38984)[segscan_group_sizze_30377 -
                                                               1];
                    x_30388 = ((__local
                                int64_t *) scan_arr_mem_38986)[segscan_group_sizze_30377 -
                                                               1];
                }
                if (!should_load_carry_39022) {
                    x_30385 = 0;
                    x_30386 = 0;
                    x_30387 = 0;
                    x_30388 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_30377
}
__kernel void mainDetailedziscan_stage1_30055(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38780_backing_aligned_0,
                                              int64_t N_24054, int64_t m_24055,
                                              int64_t iota32_arg_24441, __global
                                              unsigned char *res_mem_37197,
                                              __global
                                              unsigned char *res_mem_37276,
                                              __global
                                              unsigned char *res_mem_37277,
                                              __global
                                              unsigned char *res_mem_37327,
                                              __global unsigned char *mem_37542,
                                              __global unsigned char *mem_37546,
                                              int32_t num_threads_38774)
{
    #define segscan_group_sizze_30133 (mainDetailedzisegscan_group_sizze_30049)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38780_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38780_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38775;
    int32_t local_tid_38776;
    int64_t group_sizze_38779;
    int32_t wave_sizze_38778;
    int32_t group_tid_38777;
    
    global_tid_38775 = get_global_id(0);
    local_tid_38776 = get_local_id(0);
    group_sizze_38779 = get_local_size(0);
    wave_sizze_38778 = LOCKSTEP_WIDTH;
    group_tid_38777 = get_group_id(0);
    
    int32_t phys_tid_30055;
    
    phys_tid_30055 = global_tid_38775;
    
    __local char *scan_arr_mem_38780;
    
    scan_arr_mem_38780 = (__local char *) scan_arr_mem_38780_backing_0;
    
    float x_30137;
    float x_30138;
    
    x_30137 = 0.0F;
    for (int64_t j_38782 = 0; j_38782 < sdiv_up64(m_24055 * iota32_arg_24441,
                                                  sext_i32_i64(num_threads_38774));
         j_38782++) {
        int64_t chunk_offset_38783 = segscan_group_sizze_30133 * j_38782 +
                sext_i32_i64(group_tid_38777) * (segscan_group_sizze_30133 *
                                                 sdiv_up64(m_24055 *
                                                           iota32_arg_24441,
                                                           sext_i32_i64(num_threads_38774)));
        int64_t flat_idx_38784 = chunk_offset_38783 +
                sext_i32_i64(local_tid_38776);
        int64_t gtid_30046 = squot64(flat_idx_38784, iota32_arg_24441);
        int64_t gtid_30054 = flat_idx_38784 - squot64(flat_idx_38784,
                                                      iota32_arg_24441) *
                iota32_arg_24441;
        
        // threads in bounds read input
        {
            if (slt64(gtid_30046, m_24055) && slt64(gtid_30054,
                                                    iota32_arg_24441)) {
                int32_t y_30144 = ((__global int32_t *) mem_37542)[gtid_30046];
                int32_t index_primexp_35466 = sext_i64_i32(gtid_30054);
                bool cond_30147 = sle32(y_30144, index_primexp_35466);
                float res_30148;
                
                if (cond_30147) {
                    res_30148 = 0.0F;
                } else {
                    int32_t x_30140 = ((__global
                                        int32_t *) res_mem_37277)[gtid_30046];
                    int32_t x_30141 = ((__global
                                        int32_t *) res_mem_37276)[gtid_30046];
                    float x_30142 = ((__global
                                      float *) res_mem_37327)[gtid_30046];
                    bool cond_30149 = index_primexp_35466 == 0;
                    float res_30150;
                    
                    if (cond_30149) {
                        res_30150 = x_30142;
                    } else {
                        int32_t i_30151 = add32(x_30140, index_primexp_35466);
                        int64_t i_30152 = sext_i32_i64(i_30151);
                        float x_30153 = ((__global
                                          float *) res_mem_37197)[gtid_30046 *
                                                                  N_24054 +
                                                                  i_30152];
                        int32_t x_30154 = sub32(x_30140, x_30141);
                        int32_t i_30155 = add32(x_30154, index_primexp_35466);
                        int64_t i_30156 = sext_i32_i64(i_30155);
                        float y_30157 = ((__global
                                          float *) res_mem_37197)[gtid_30046 *
                                                                  N_24054 +
                                                                  i_30156];
                        float res_30158 = x_30153 - y_30157;
                        
                        res_30150 = res_30158;
                    }
                    res_30148 = res_30150;
                }
                // write to-scan values to parameters
                {
                    x_30138 = res_30148;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_30046, m_24055) && slt64(gtid_30054,
                                                          iota32_arg_24441))) {
                    x_30138 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float res_30139 = x_30137 + x_30138;
                
                ((__local
                  float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)] =
                    res_30139;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_38785;
            float x_38786;
            float x_38788;
            float x_38789;
            bool ltid_in_bounds_38791;
            
            ltid_in_bounds_38791 = slt64(sext_i32_i64(local_tid_38776),
                                         segscan_group_sizze_30133);
            
            int32_t skip_threads_38792;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38791) {
                    x_38786 = ((volatile __local
                                float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)];
                    if ((local_tid_38776 - squot32(local_tid_38776, 32) * 32) ==
                        0) {
                        x_38785 = x_38786;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38792 = 1;
                while (slt32(skip_threads_38792, 32)) {
                    if (sle32(skip_threads_38792, local_tid_38776 -
                              squot32(local_tid_38776, 32) * 32) &&
                        ltid_in_bounds_38791) {
                        // read operands
                        {
                            x_38785 = ((volatile __local
                                        float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776) -
                                                                     sext_i32_i64(skip_threads_38792)];
                        }
                        // perform operation
                        {
                            bool inactive_38793 =
                                 slt64(srem64(sext_i32_i64(local_tid_38776) +
                                              chunk_offset_38783,
                                              iota32_arg_24441),
                                       sext_i32_i64(local_tid_38776) +
                                       chunk_offset_38783 -
                                       (sext_i32_i64(local_tid_38776 -
                                        skip_threads_38792) +
                                        chunk_offset_38783));
                            
                            if (inactive_38793) {
                                x_38785 = x_38786;
                            }
                            if (!inactive_38793) {
                                float res_38787 = x_38785 + x_38786;
                                
                                x_38785 = res_38787;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38778, skip_threads_38792)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38792, local_tid_38776 -
                              squot32(local_tid_38776, 32) * 32) &&
                        ltid_in_bounds_38791) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)] =
                                x_38785;
                            x_38786 = x_38785;
                        }
                    }
                    if (sle32(wave_sizze_38778, skip_threads_38792)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38792 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38776 - squot32(local_tid_38776, 32) * 32) ==
                    31 && ltid_in_bounds_38791) {
                    ((volatile __local
                      float *) scan_arr_mem_38780)[sext_i32_i64(squot32(local_tid_38776,
                                                                        32))] =
                        x_38785;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38794;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38776, 32) == 0 &&
                        ltid_in_bounds_38791) {
                        x_38789 = ((volatile __local
                                    float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)];
                        if ((local_tid_38776 - squot32(local_tid_38776, 32) *
                             32) == 0) {
                            x_38788 = x_38789;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38794 = 1;
                    while (slt32(skip_threads_38794, 32)) {
                        if (sle32(skip_threads_38794, local_tid_38776 -
                                  squot32(local_tid_38776, 32) * 32) &&
                            (squot32(local_tid_38776, 32) == 0 &&
                             ltid_in_bounds_38791)) {
                            // read operands
                            {
                                x_38788 = ((volatile __local
                                            float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776) -
                                                                         sext_i32_i64(skip_threads_38794)];
                            }
                            // perform operation
                            {
                                bool inactive_38795 =
                                     slt64(srem64(sext_i32_i64(local_tid_38776 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38783,
                                                  iota32_arg_24441),
                                           sext_i32_i64(local_tid_38776 * 32 +
                                           32 - 1) + chunk_offset_38783 -
                                           (sext_i32_i64((local_tid_38776 -
                                                          skip_threads_38794) *
                                            32 + 32 - 1) + chunk_offset_38783));
                                
                                if (inactive_38795) {
                                    x_38788 = x_38789;
                                }
                                if (!inactive_38795) {
                                    float res_38790 = x_38788 + x_38789;
                                    
                                    x_38788 = res_38790;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38778, skip_threads_38794)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38794, local_tid_38776 -
                                  squot32(local_tid_38776, 32) * 32) &&
                            (squot32(local_tid_38776, 32) == 0 &&
                             ltid_in_bounds_38791)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)] =
                                    x_38788;
                                x_38789 = x_38788;
                            }
                        }
                        if (sle32(wave_sizze_38778, skip_threads_38794)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38794 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38776, 32) == 0 ||
                      !ltid_in_bounds_38791)) {
                    // read operands
                    {
                        x_38786 = x_38785;
                        x_38785 = ((__local
                                    float *) scan_arr_mem_38780)[sext_i32_i64(squot32(local_tid_38776,
                                                                                      32)) -
                                                                 1];
                    }
                    // perform operation
                    {
                        bool inactive_38796 =
                             slt64(srem64(sext_i32_i64(local_tid_38776) +
                                          chunk_offset_38783, iota32_arg_24441),
                                   sext_i32_i64(local_tid_38776) +
                                   chunk_offset_38783 -
                                   (sext_i32_i64(squot32(local_tid_38776, 32) *
                                    32 - 1) + chunk_offset_38783));
                        
                        if (inactive_38796) {
                            x_38785 = x_38786;
                        }
                        if (!inactive_38796) {
                            float res_38787 = x_38785 + x_38786;
                            
                            x_38785 = res_38787;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)] =
                            x_38785;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38776, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)] =
                        x_38786;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_30046, m_24055) && slt64(gtid_30054,
                                                        iota32_arg_24441)) {
                    ((__global float *) mem_37546)[gtid_30046 *
                                                   iota32_arg_24441 +
                                                   gtid_30054] = ((__local
                                                                   float *) scan_arr_mem_38780)[sext_i32_i64(local_tid_38776)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38797 = slt64(srem64(chunk_offset_38783 +
                                                          segscan_group_sizze_30133,
                                                          iota32_arg_24441),
                                                   chunk_offset_38783 +
                                                   segscan_group_sizze_30133 -
                                                   (chunk_offset_38783 +
                                                    segscan_group_sizze_30133 -
                                                    1));
                bool should_load_carry_38798 = local_tid_38776 == 0 &&
                     !crosses_segment_38797;
                
                if (should_load_carry_38798) {
                    x_30137 = ((__local
                                float *) scan_arr_mem_38780)[segscan_group_sizze_30133 -
                                                             1];
                }
                if (!should_load_carry_38798) {
                    x_30137 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_30133
}
__kernel void mainDetailedziscan_stage2_27914(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38377_backing_aligned_0,
                                              int64_t N_24054, int64_t m_24055,
                                              __global unsigned char *mem_37188,
                                              int64_t stage1_num_groups_38346,
                                              int32_t num_threads_38347)
{
    #define segscan_group_sizze_27931 (mainDetailedzisegscan_group_sizze_27908)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38377_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38377_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38372;
    int32_t local_tid_38373;
    int64_t group_sizze_38376;
    int32_t wave_sizze_38375;
    int32_t group_tid_38374;
    
    global_tid_38372 = get_global_id(0);
    local_tid_38373 = get_local_id(0);
    group_sizze_38376 = get_local_size(0);
    wave_sizze_38375 = LOCKSTEP_WIDTH;
    group_tid_38374 = get_group_id(0);
    
    int32_t phys_tid_27914;
    
    phys_tid_27914 = global_tid_38372;
    
    __local char *scan_arr_mem_38377;
    
    scan_arr_mem_38377 = (__local char *) scan_arr_mem_38377_backing_0;
    
    int64_t flat_idx_38379;
    
    flat_idx_38379 = (sext_i32_i64(local_tid_38373) + 1) *
        (segscan_group_sizze_27931 * sdiv_up64(m_24055 * N_24054,
                                               sext_i32_i64(num_threads_38347))) -
        1;
    
    int64_t gtid_27905;
    
    gtid_27905 = squot64(flat_idx_38379, N_24054);
    
    int64_t gtid_27913;
    
    gtid_27913 = flat_idx_38379 - squot64(flat_idx_38379, N_24054) * N_24054;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_27905, m_24055) && slt64(gtid_27913, N_24054)) {
            ((__local
              int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)] =
                ((__global int64_t *) mem_37188)[gtid_27905 * N_24054 +
                                                 gtid_27913];
        } else {
            ((__local
              int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_27936;
    int64_t x_27937;
    int64_t x_38380;
    int64_t x_38381;
    bool ltid_in_bounds_38383;
    
    ltid_in_bounds_38383 = slt64(sext_i32_i64(local_tid_38373),
                                 stage1_num_groups_38346);
    
    int32_t skip_threads_38384;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38383) {
            x_27937 = ((volatile __local
                        int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)];
            if ((local_tid_38373 - squot32(local_tid_38373, 32) * 32) == 0) {
                x_27936 = x_27937;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38384 = 1;
        while (slt32(skip_threads_38384, 32)) {
            if (sle32(skip_threads_38384, local_tid_38373 -
                      squot32(local_tid_38373, 32) * 32) &&
                ltid_in_bounds_38383) {
                // read operands
                {
                    x_27936 = ((volatile __local
                                int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373) -
                                                               sext_i32_i64(skip_threads_38384)];
                }
                // perform operation
                {
                    bool inactive_38385 =
                         slt64(srem64((sext_i32_i64(local_tid_38373) + 1) *
                                      (segscan_group_sizze_27931 *
                                       sdiv_up64(m_24055 * N_24054,
                                                 sext_i32_i64(num_threads_38347))) -
                                      1, N_24054),
                               (sext_i32_i64(local_tid_38373) + 1) *
                               (segscan_group_sizze_27931 * sdiv_up64(m_24055 *
                                                                      N_24054,
                                                                      sext_i32_i64(num_threads_38347))) -
                               1 - ((sext_i32_i64(local_tid_38373 -
                                     skip_threads_38384) + 1) *
                                    (segscan_group_sizze_27931 *
                                     sdiv_up64(m_24055 * N_24054,
                                               sext_i32_i64(num_threads_38347))) -
                                    1));
                    
                    if (inactive_38385) {
                        x_27936 = x_27937;
                    }
                    if (!inactive_38385) {
                        int64_t res_27938 = add64(x_27936, x_27937);
                        
                        x_27936 = res_27938;
                    }
                }
            }
            if (sle32(wave_sizze_38375, skip_threads_38384)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38384, local_tid_38373 -
                      squot32(local_tid_38373, 32) * 32) &&
                ltid_in_bounds_38383) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)] =
                        x_27936;
                    x_27937 = x_27936;
                }
            }
            if (sle32(wave_sizze_38375, skip_threads_38384)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38384 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38373 - squot32(local_tid_38373, 32) * 32) == 31 &&
            ltid_in_bounds_38383) {
            ((volatile __local
              int64_t *) scan_arr_mem_38377)[sext_i32_i64(squot32(local_tid_38373,
                                                                  32))] =
                x_27936;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38386;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38373, 32) == 0 && ltid_in_bounds_38383) {
                x_38381 = ((volatile __local
                            int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)];
                if ((local_tid_38373 - squot32(local_tid_38373, 32) * 32) ==
                    0) {
                    x_38380 = x_38381;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38386 = 1;
            while (slt32(skip_threads_38386, 32)) {
                if (sle32(skip_threads_38386, local_tid_38373 -
                          squot32(local_tid_38373, 32) * 32) &&
                    (squot32(local_tid_38373, 32) == 0 &&
                     ltid_in_bounds_38383)) {
                    // read operands
                    {
                        x_38380 = ((volatile __local
                                    int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373) -
                                                                   sext_i32_i64(skip_threads_38386)];
                    }
                    // perform operation
                    {
                        bool inactive_38387 =
                             slt64(srem64((sext_i32_i64(local_tid_38373 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_27931 *
                                           sdiv_up64(m_24055 * N_24054,
                                                     sext_i32_i64(num_threads_38347))) -
                                          1, N_24054),
                                   (sext_i32_i64(local_tid_38373 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_27931 *
                                               sdiv_up64(m_24055 * N_24054,
                                                         sext_i32_i64(num_threads_38347))) -
                                   1 - ((sext_i32_i64((local_tid_38373 -
                                                       skip_threads_38386) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_27931 *
                                         sdiv_up64(m_24055 * N_24054,
                                                   sext_i32_i64(num_threads_38347))) -
                                        1));
                        
                        if (inactive_38387) {
                            x_38380 = x_38381;
                        }
                        if (!inactive_38387) {
                            int64_t res_38382 = add64(x_38380, x_38381);
                            
                            x_38380 = res_38382;
                        }
                    }
                }
                if (sle32(wave_sizze_38375, skip_threads_38386)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38386, local_tid_38373 -
                          squot32(local_tid_38373, 32) * 32) &&
                    (squot32(local_tid_38373, 32) == 0 &&
                     ltid_in_bounds_38383)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)] =
                            x_38380;
                        x_38381 = x_38380;
                    }
                }
                if (sle32(wave_sizze_38375, skip_threads_38386)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38386 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38373, 32) == 0 || !ltid_in_bounds_38383)) {
            // read operands
            {
                x_27937 = x_27936;
                x_27936 = ((__local
                            int64_t *) scan_arr_mem_38377)[sext_i32_i64(squot32(local_tid_38373,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_38388 =
                     slt64(srem64((sext_i32_i64(local_tid_38373) + 1) *
                                  (segscan_group_sizze_27931 *
                                   sdiv_up64(m_24055 * N_24054,
                                             sext_i32_i64(num_threads_38347))) -
                                  1, N_24054), (sext_i32_i64(local_tid_38373) +
                                                1) *
                           (segscan_group_sizze_27931 * sdiv_up64(m_24055 *
                                                                  N_24054,
                                                                  sext_i32_i64(num_threads_38347))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38373, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_27931 *
                                                 sdiv_up64(m_24055 * N_24054,
                                                           sext_i32_i64(num_threads_38347))) -
                                1));
                
                if (inactive_38388) {
                    x_27936 = x_27937;
                }
                if (!inactive_38388) {
                    int64_t res_27938 = add64(x_27936, x_27937);
                    
                    x_27936 = res_27938;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)] =
                    x_27936;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38373, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)] =
                x_27937;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_27905, m_24055) && slt64(gtid_27913, N_24054)) {
            ((__global int64_t *) mem_37188)[gtid_27905 * N_24054 +
                                             gtid_27913] = ((__local
                                                             int64_t *) scan_arr_mem_38377)[sext_i32_i64(local_tid_38373)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_27931
}
__kernel void mainDetailedziscan_stage2_29700(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_39034_backing_aligned_0,
                                              __local volatile
                                              int64_t *scan_arr_mem_39032_backing_aligned_1,
                                              __local volatile
                                              int64_t *scan_arr_mem_39030_backing_aligned_2,
                                              __local volatile
                                              int64_t *scan_arr_mem_39028_backing_aligned_3,
                                              int64_t m_24055,
                                              int64_t iota32_arg_24441, __global
                                              unsigned char *mem_37603, __global
                                              unsigned char *mem_37606, __global
                                              unsigned char *mem_37609, __global
                                              unsigned char *mem_37612,
                                              int64_t stage1_num_groups_38973,
                                              int32_t num_threads_38974)
{
    #define segscan_group_sizze_30377 (mainDetailedzisegscan_group_sizze_29694)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_39034_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_39034_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_39032_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_39032_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_39030_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_39030_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_39028_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_39028_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39023;
    int32_t local_tid_39024;
    int64_t group_sizze_39027;
    int32_t wave_sizze_39026;
    int32_t group_tid_39025;
    
    global_tid_39023 = get_global_id(0);
    local_tid_39024 = get_local_id(0);
    group_sizze_39027 = get_local_size(0);
    wave_sizze_39026 = LOCKSTEP_WIDTH;
    group_tid_39025 = get_group_id(0);
    
    int32_t phys_tid_29700;
    
    phys_tid_29700 = global_tid_39023;
    
    __local char *scan_arr_mem_39028;
    __local char *scan_arr_mem_39030;
    __local char *scan_arr_mem_39032;
    __local char *scan_arr_mem_39034;
    
    scan_arr_mem_39028 = (__local char *) scan_arr_mem_39028_backing_0;
    scan_arr_mem_39030 = (__local char *) scan_arr_mem_39030_backing_1;
    scan_arr_mem_39032 = (__local char *) scan_arr_mem_39032_backing_2;
    scan_arr_mem_39034 = (__local char *) scan_arr_mem_39034_backing_3;
    
    int64_t flat_idx_39036;
    
    flat_idx_39036 = (sext_i32_i64(local_tid_39024) + 1) *
        (segscan_group_sizze_30377 * sdiv_up64(m_24055 * iota32_arg_24441,
                                               sext_i32_i64(num_threads_38974))) -
        1;
    
    int64_t gtid_29691;
    
    gtid_29691 = squot64(flat_idx_39036, iota32_arg_24441);
    
    int64_t gtid_29699;
    
    gtid_29699 = flat_idx_39036 - squot64(flat_idx_39036, iota32_arg_24441) *
        iota32_arg_24441;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_29691, m_24055) && slt64(gtid_29699, iota32_arg_24441)) {
            ((__local
              int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)] =
                ((__global int64_t *) mem_37603)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699];
            ((__local
              int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)] =
                ((__global int64_t *) mem_37606)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699];
            ((__local
              int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)] =
                ((__global int64_t *) mem_37609)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699];
            ((__local
              int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)] =
                ((__global int64_t *) mem_37612)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699];
        } else {
            ((__local
              int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)] = 0;
            ((__local
              int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)] = 0;
            ((__local
              int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)] = 0;
            ((__local
              int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_30385;
    int64_t x_30386;
    int64_t x_30387;
    int64_t x_30388;
    int64_t x_30389;
    int64_t x_30390;
    int64_t x_30391;
    int64_t x_30392;
    int64_t x_39037;
    int64_t x_39038;
    int64_t x_39039;
    int64_t x_39040;
    int64_t x_39041;
    int64_t x_39042;
    int64_t x_39043;
    int64_t x_39044;
    bool ltid_in_bounds_39049;
    
    ltid_in_bounds_39049 = slt64(sext_i32_i64(local_tid_39024),
                                 stage1_num_groups_38973);
    
    int32_t skip_threads_39050;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_39049) {
            x_30389 = ((volatile __local
                        int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)];
            x_30390 = ((volatile __local
                        int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)];
            x_30391 = ((volatile __local
                        int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)];
            x_30392 = ((volatile __local
                        int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)];
            if ((local_tid_39024 - squot32(local_tid_39024, 32) * 32) == 0) {
                x_30385 = x_30389;
                x_30386 = x_30390;
                x_30387 = x_30391;
                x_30388 = x_30392;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_39050 = 1;
        while (slt32(skip_threads_39050, 32)) {
            if (sle32(skip_threads_39050, local_tid_39024 -
                      squot32(local_tid_39024, 32) * 32) &&
                ltid_in_bounds_39049) {
                // read operands
                {
                    x_30385 = ((volatile __local
                                int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024) -
                                                               sext_i32_i64(skip_threads_39050)];
                    x_30386 = ((volatile __local
                                int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024) -
                                                               sext_i32_i64(skip_threads_39050)];
                    x_30387 = ((volatile __local
                                int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024) -
                                                               sext_i32_i64(skip_threads_39050)];
                    x_30388 = ((volatile __local
                                int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024) -
                                                               sext_i32_i64(skip_threads_39050)];
                }
                // perform operation
                {
                    bool inactive_39051 =
                         slt64(srem64((sext_i32_i64(local_tid_39024) + 1) *
                                      (segscan_group_sizze_30377 *
                                       sdiv_up64(m_24055 * iota32_arg_24441,
                                                 sext_i32_i64(num_threads_38974))) -
                                      1, iota32_arg_24441),
                               (sext_i32_i64(local_tid_39024) + 1) *
                               (segscan_group_sizze_30377 * sdiv_up64(m_24055 *
                                                                      iota32_arg_24441,
                                                                      sext_i32_i64(num_threads_38974))) -
                               1 - ((sext_i32_i64(local_tid_39024 -
                                     skip_threads_39050) + 1) *
                                    (segscan_group_sizze_30377 *
                                     sdiv_up64(m_24055 * iota32_arg_24441,
                                               sext_i32_i64(num_threads_38974))) -
                                    1));
                    
                    if (inactive_39051) {
                        x_30385 = x_30389;
                        x_30386 = x_30390;
                        x_30387 = x_30391;
                        x_30388 = x_30392;
                    }
                    if (!inactive_39051) {
                        int64_t res_30393 = add64(x_30385, x_30389);
                        int64_t res_30394 = add64(x_30386, x_30390);
                        int64_t res_30395 = add64(x_30387, x_30391);
                        int64_t res_30396 = add64(x_30388, x_30392);
                        
                        x_30385 = res_30393;
                        x_30386 = res_30394;
                        x_30387 = res_30395;
                        x_30388 = res_30396;
                    }
                }
            }
            if (sle32(wave_sizze_39026, skip_threads_39050)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_39050, local_tid_39024 -
                      squot32(local_tid_39024, 32) * 32) &&
                ltid_in_bounds_39049) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)] =
                        x_30385;
                    x_30389 = x_30385;
                    ((volatile __local
                      int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)] =
                        x_30386;
                    x_30390 = x_30386;
                    ((volatile __local
                      int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)] =
                        x_30387;
                    x_30391 = x_30387;
                    ((volatile __local
                      int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)] =
                        x_30388;
                    x_30392 = x_30388;
                }
            }
            if (sle32(wave_sizze_39026, skip_threads_39050)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_39050 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_39024 - squot32(local_tid_39024, 32) * 32) == 31 &&
            ltid_in_bounds_39049) {
            ((volatile __local
              int64_t *) scan_arr_mem_39028)[sext_i32_i64(squot32(local_tid_39024,
                                                                  32))] =
                x_30385;
            ((volatile __local
              int64_t *) scan_arr_mem_39030)[sext_i32_i64(squot32(local_tid_39024,
                                                                  32))] =
                x_30386;
            ((volatile __local
              int64_t *) scan_arr_mem_39032)[sext_i32_i64(squot32(local_tid_39024,
                                                                  32))] =
                x_30387;
            ((volatile __local
              int64_t *) scan_arr_mem_39034)[sext_i32_i64(squot32(local_tid_39024,
                                                                  32))] =
                x_30388;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_39052;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_39024, 32) == 0 && ltid_in_bounds_39049) {
                x_39041 = ((volatile __local
                            int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)];
                x_39042 = ((volatile __local
                            int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)];
                x_39043 = ((volatile __local
                            int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)];
                x_39044 = ((volatile __local
                            int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)];
                if ((local_tid_39024 - squot32(local_tid_39024, 32) * 32) ==
                    0) {
                    x_39037 = x_39041;
                    x_39038 = x_39042;
                    x_39039 = x_39043;
                    x_39040 = x_39044;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_39052 = 1;
            while (slt32(skip_threads_39052, 32)) {
                if (sle32(skip_threads_39052, local_tid_39024 -
                          squot32(local_tid_39024, 32) * 32) &&
                    (squot32(local_tid_39024, 32) == 0 &&
                     ltid_in_bounds_39049)) {
                    // read operands
                    {
                        x_39037 = ((volatile __local
                                    int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024) -
                                                                   sext_i32_i64(skip_threads_39052)];
                        x_39038 = ((volatile __local
                                    int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024) -
                                                                   sext_i32_i64(skip_threads_39052)];
                        x_39039 = ((volatile __local
                                    int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024) -
                                                                   sext_i32_i64(skip_threads_39052)];
                        x_39040 = ((volatile __local
                                    int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024) -
                                                                   sext_i32_i64(skip_threads_39052)];
                    }
                    // perform operation
                    {
                        bool inactive_39053 =
                             slt64(srem64((sext_i32_i64(local_tid_39024 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_30377 *
                                           sdiv_up64(m_24055 * iota32_arg_24441,
                                                     sext_i32_i64(num_threads_38974))) -
                                          1, iota32_arg_24441),
                                   (sext_i32_i64(local_tid_39024 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_30377 *
                                               sdiv_up64(m_24055 *
                                                         iota32_arg_24441,
                                                         sext_i32_i64(num_threads_38974))) -
                                   1 - ((sext_i32_i64((local_tid_39024 -
                                                       skip_threads_39052) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_30377 *
                                         sdiv_up64(m_24055 * iota32_arg_24441,
                                                   sext_i32_i64(num_threads_38974))) -
                                        1));
                        
                        if (inactive_39053) {
                            x_39037 = x_39041;
                            x_39038 = x_39042;
                            x_39039 = x_39043;
                            x_39040 = x_39044;
                        }
                        if (!inactive_39053) {
                            int64_t res_39045 = add64(x_39037, x_39041);
                            int64_t res_39046 = add64(x_39038, x_39042);
                            int64_t res_39047 = add64(x_39039, x_39043);
                            int64_t res_39048 = add64(x_39040, x_39044);
                            
                            x_39037 = res_39045;
                            x_39038 = res_39046;
                            x_39039 = res_39047;
                            x_39040 = res_39048;
                        }
                    }
                }
                if (sle32(wave_sizze_39026, skip_threads_39052)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_39052, local_tid_39024 -
                          squot32(local_tid_39024, 32) * 32) &&
                    (squot32(local_tid_39024, 32) == 0 &&
                     ltid_in_bounds_39049)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)] =
                            x_39037;
                        x_39041 = x_39037;
                        ((volatile __local
                          int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)] =
                            x_39038;
                        x_39042 = x_39038;
                        ((volatile __local
                          int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)] =
                            x_39039;
                        x_39043 = x_39039;
                        ((volatile __local
                          int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)] =
                            x_39040;
                        x_39044 = x_39040;
                    }
                }
                if (sle32(wave_sizze_39026, skip_threads_39052)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_39052 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_39024, 32) == 0 || !ltid_in_bounds_39049)) {
            // read operands
            {
                x_30389 = x_30385;
                x_30390 = x_30386;
                x_30391 = x_30387;
                x_30392 = x_30388;
                x_30385 = ((__local
                            int64_t *) scan_arr_mem_39028)[sext_i32_i64(squot32(local_tid_39024,
                                                                                32)) -
                                                           1];
                x_30386 = ((__local
                            int64_t *) scan_arr_mem_39030)[sext_i32_i64(squot32(local_tid_39024,
                                                                                32)) -
                                                           1];
                x_30387 = ((__local
                            int64_t *) scan_arr_mem_39032)[sext_i32_i64(squot32(local_tid_39024,
                                                                                32)) -
                                                           1];
                x_30388 = ((__local
                            int64_t *) scan_arr_mem_39034)[sext_i32_i64(squot32(local_tid_39024,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_39054 =
                     slt64(srem64((sext_i32_i64(local_tid_39024) + 1) *
                                  (segscan_group_sizze_30377 *
                                   sdiv_up64(m_24055 * iota32_arg_24441,
                                             sext_i32_i64(num_threads_38974))) -
                                  1, iota32_arg_24441),
                           (sext_i32_i64(local_tid_39024) + 1) *
                           (segscan_group_sizze_30377 * sdiv_up64(m_24055 *
                                                                  iota32_arg_24441,
                                                                  sext_i32_i64(num_threads_38974))) -
                           1 - ((sext_i32_i64(squot32(local_tid_39024, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_30377 *
                                                 sdiv_up64(m_24055 *
                                                           iota32_arg_24441,
                                                           sext_i32_i64(num_threads_38974))) -
                                1));
                
                if (inactive_39054) {
                    x_30385 = x_30389;
                    x_30386 = x_30390;
                    x_30387 = x_30391;
                    x_30388 = x_30392;
                }
                if (!inactive_39054) {
                    int64_t res_30393 = add64(x_30385, x_30389);
                    int64_t res_30394 = add64(x_30386, x_30390);
                    int64_t res_30395 = add64(x_30387, x_30391);
                    int64_t res_30396 = add64(x_30388, x_30392);
                    
                    x_30385 = res_30393;
                    x_30386 = res_30394;
                    x_30387 = res_30395;
                    x_30388 = res_30396;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)] =
                    x_30385;
                ((__local
                  int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)] =
                    x_30386;
                ((__local
                  int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)] =
                    x_30387;
                ((__local
                  int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)] =
                    x_30388;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_39024, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)] =
                x_30389;
            ((__local
              int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)] =
                x_30390;
            ((__local
              int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)] =
                x_30391;
            ((__local
              int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)] =
                x_30392;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_29691, m_24055) && slt64(gtid_29699, iota32_arg_24441)) {
            ((__global int64_t *) mem_37603)[gtid_29691 * iota32_arg_24441 +
                                             gtid_29699] = ((__local
                                                             int64_t *) scan_arr_mem_39028)[sext_i32_i64(local_tid_39024)];
            ((__global int64_t *) mem_37606)[gtid_29691 * iota32_arg_24441 +
                                             gtid_29699] = ((__local
                                                             int64_t *) scan_arr_mem_39030)[sext_i32_i64(local_tid_39024)];
            ((__global int64_t *) mem_37609)[gtid_29691 * iota32_arg_24441 +
                                             gtid_29699] = ((__local
                                                             int64_t *) scan_arr_mem_39032)[sext_i32_i64(local_tid_39024)];
            ((__global int64_t *) mem_37612)[gtid_29691 * iota32_arg_24441 +
                                             gtid_29699] = ((__local
                                                             int64_t *) scan_arr_mem_39034)[sext_i32_i64(local_tid_39024)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30377
}
__kernel void mainDetailedziscan_stage2_30055(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38804_backing_aligned_0,
                                              int64_t m_24055,
                                              int64_t iota32_arg_24441, __global
                                              unsigned char *mem_37546,
                                              int64_t stage1_num_groups_38773,
                                              int32_t num_threads_38774)
{
    #define segscan_group_sizze_30133 (mainDetailedzisegscan_group_sizze_30049)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38804_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38804_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38799;
    int32_t local_tid_38800;
    int64_t group_sizze_38803;
    int32_t wave_sizze_38802;
    int32_t group_tid_38801;
    
    global_tid_38799 = get_global_id(0);
    local_tid_38800 = get_local_id(0);
    group_sizze_38803 = get_local_size(0);
    wave_sizze_38802 = LOCKSTEP_WIDTH;
    group_tid_38801 = get_group_id(0);
    
    int32_t phys_tid_30055;
    
    phys_tid_30055 = global_tid_38799;
    
    __local char *scan_arr_mem_38804;
    
    scan_arr_mem_38804 = (__local char *) scan_arr_mem_38804_backing_0;
    
    int64_t flat_idx_38806;
    
    flat_idx_38806 = (sext_i32_i64(local_tid_38800) + 1) *
        (segscan_group_sizze_30133 * sdiv_up64(m_24055 * iota32_arg_24441,
                                               sext_i32_i64(num_threads_38774))) -
        1;
    
    int64_t gtid_30046;
    
    gtid_30046 = squot64(flat_idx_38806, iota32_arg_24441);
    
    int64_t gtid_30054;
    
    gtid_30054 = flat_idx_38806 - squot64(flat_idx_38806, iota32_arg_24441) *
        iota32_arg_24441;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_30046, m_24055) && slt64(gtid_30054, iota32_arg_24441)) {
            ((__local
              float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)] =
                ((__global float *) mem_37546)[gtid_30046 * iota32_arg_24441 +
                                               gtid_30054];
        } else {
            ((__local
              float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_30137;
    float x_30138;
    float x_38807;
    float x_38808;
    bool ltid_in_bounds_38810;
    
    ltid_in_bounds_38810 = slt64(sext_i32_i64(local_tid_38800),
                                 stage1_num_groups_38773);
    
    int32_t skip_threads_38811;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38810) {
            x_30138 = ((volatile __local
                        float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)];
            if ((local_tid_38800 - squot32(local_tid_38800, 32) * 32) == 0) {
                x_30137 = x_30138;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38811 = 1;
        while (slt32(skip_threads_38811, 32)) {
            if (sle32(skip_threads_38811, local_tid_38800 -
                      squot32(local_tid_38800, 32) * 32) &&
                ltid_in_bounds_38810) {
                // read operands
                {
                    x_30137 = ((volatile __local
                                float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800) -
                                                             sext_i32_i64(skip_threads_38811)];
                }
                // perform operation
                {
                    bool inactive_38812 =
                         slt64(srem64((sext_i32_i64(local_tid_38800) + 1) *
                                      (segscan_group_sizze_30133 *
                                       sdiv_up64(m_24055 * iota32_arg_24441,
                                                 sext_i32_i64(num_threads_38774))) -
                                      1, iota32_arg_24441),
                               (sext_i32_i64(local_tid_38800) + 1) *
                               (segscan_group_sizze_30133 * sdiv_up64(m_24055 *
                                                                      iota32_arg_24441,
                                                                      sext_i32_i64(num_threads_38774))) -
                               1 - ((sext_i32_i64(local_tid_38800 -
                                     skip_threads_38811) + 1) *
                                    (segscan_group_sizze_30133 *
                                     sdiv_up64(m_24055 * iota32_arg_24441,
                                               sext_i32_i64(num_threads_38774))) -
                                    1));
                    
                    if (inactive_38812) {
                        x_30137 = x_30138;
                    }
                    if (!inactive_38812) {
                        float res_30139 = x_30137 + x_30138;
                        
                        x_30137 = res_30139;
                    }
                }
            }
            if (sle32(wave_sizze_38802, skip_threads_38811)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38811, local_tid_38800 -
                      squot32(local_tid_38800, 32) * 32) &&
                ltid_in_bounds_38810) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)] =
                        x_30137;
                    x_30138 = x_30137;
                }
            }
            if (sle32(wave_sizze_38802, skip_threads_38811)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38811 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38800 - squot32(local_tid_38800, 32) * 32) == 31 &&
            ltid_in_bounds_38810) {
            ((volatile __local
              float *) scan_arr_mem_38804)[sext_i32_i64(squot32(local_tid_38800,
                                                                32))] = x_30137;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38813;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38800, 32) == 0 && ltid_in_bounds_38810) {
                x_38808 = ((volatile __local
                            float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)];
                if ((local_tid_38800 - squot32(local_tid_38800, 32) * 32) ==
                    0) {
                    x_38807 = x_38808;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38813 = 1;
            while (slt32(skip_threads_38813, 32)) {
                if (sle32(skip_threads_38813, local_tid_38800 -
                          squot32(local_tid_38800, 32) * 32) &&
                    (squot32(local_tid_38800, 32) == 0 &&
                     ltid_in_bounds_38810)) {
                    // read operands
                    {
                        x_38807 = ((volatile __local
                                    float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800) -
                                                                 sext_i32_i64(skip_threads_38813)];
                    }
                    // perform operation
                    {
                        bool inactive_38814 =
                             slt64(srem64((sext_i32_i64(local_tid_38800 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_30133 *
                                           sdiv_up64(m_24055 * iota32_arg_24441,
                                                     sext_i32_i64(num_threads_38774))) -
                                          1, iota32_arg_24441),
                                   (sext_i32_i64(local_tid_38800 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_30133 *
                                               sdiv_up64(m_24055 *
                                                         iota32_arg_24441,
                                                         sext_i32_i64(num_threads_38774))) -
                                   1 - ((sext_i32_i64((local_tid_38800 -
                                                       skip_threads_38813) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_30133 *
                                         sdiv_up64(m_24055 * iota32_arg_24441,
                                                   sext_i32_i64(num_threads_38774))) -
                                        1));
                        
                        if (inactive_38814) {
                            x_38807 = x_38808;
                        }
                        if (!inactive_38814) {
                            float res_38809 = x_38807 + x_38808;
                            
                            x_38807 = res_38809;
                        }
                    }
                }
                if (sle32(wave_sizze_38802, skip_threads_38813)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38813, local_tid_38800 -
                          squot32(local_tid_38800, 32) * 32) &&
                    (squot32(local_tid_38800, 32) == 0 &&
                     ltid_in_bounds_38810)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)] =
                            x_38807;
                        x_38808 = x_38807;
                    }
                }
                if (sle32(wave_sizze_38802, skip_threads_38813)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38813 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38800, 32) == 0 || !ltid_in_bounds_38810)) {
            // read operands
            {
                x_30138 = x_30137;
                x_30137 = ((__local
                            float *) scan_arr_mem_38804)[sext_i32_i64(squot32(local_tid_38800,
                                                                              32)) -
                                                         1];
            }
            // perform operation
            {
                bool inactive_38815 =
                     slt64(srem64((sext_i32_i64(local_tid_38800) + 1) *
                                  (segscan_group_sizze_30133 *
                                   sdiv_up64(m_24055 * iota32_arg_24441,
                                             sext_i32_i64(num_threads_38774))) -
                                  1, iota32_arg_24441),
                           (sext_i32_i64(local_tid_38800) + 1) *
                           (segscan_group_sizze_30133 * sdiv_up64(m_24055 *
                                                                  iota32_arg_24441,
                                                                  sext_i32_i64(num_threads_38774))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38800, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_30133 *
                                                 sdiv_up64(m_24055 *
                                                           iota32_arg_24441,
                                                           sext_i32_i64(num_threads_38774))) -
                                1));
                
                if (inactive_38815) {
                    x_30137 = x_30138;
                }
                if (!inactive_38815) {
                    float res_30139 = x_30137 + x_30138;
                    
                    x_30137 = res_30139;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)] =
                    x_30137;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38800, 32) == 0) {
            ((__local
              float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)] =
                x_30138;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_30046, m_24055) && slt64(gtid_30054, iota32_arg_24441)) {
            ((__global float *) mem_37546)[gtid_30046 * iota32_arg_24441 +
                                           gtid_30054] = ((__local
                                                           float *) scan_arr_mem_38804)[sext_i32_i64(local_tid_38800)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30133
}
__kernel void mainDetailedziscan_stage3_27914(__global int *global_failure,
                                              int64_t N_24054, int64_t m_24055,
                                              int64_t num_groups_27932, __global
                                              unsigned char *mem_37188,
                                              int32_t num_threads_38347,
                                              int32_t required_groups_38389)
{
    #define segscan_group_sizze_27931 (mainDetailedzisegscan_group_sizze_27908)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38390;
    int32_t local_tid_38391;
    int64_t group_sizze_38394;
    int32_t wave_sizze_38393;
    int32_t group_tid_38392;
    
    global_tid_38390 = get_global_id(0);
    local_tid_38391 = get_local_id(0);
    group_sizze_38394 = get_local_size(0);
    wave_sizze_38393 = LOCKSTEP_WIDTH;
    group_tid_38392 = get_group_id(0);
    
    int32_t phys_tid_27914;
    
    phys_tid_27914 = global_tid_38390;
    
    int32_t phys_group_id_38395;
    
    phys_group_id_38395 = get_group_id(0);
    for (int32_t i_38396 = 0; i_38396 < sdiv_up32(required_groups_38389 -
                                                  phys_group_id_38395,
                                                  sext_i64_i32(num_groups_27932));
         i_38396++) {
        int32_t virt_group_id_38397 = phys_group_id_38395 + i_38396 *
                sext_i64_i32(num_groups_27932);
        int64_t flat_idx_38398 = sext_i32_i64(virt_group_id_38397) *
                segscan_group_sizze_27931 + sext_i32_i64(local_tid_38391);
        int64_t gtid_27905 = squot64(flat_idx_38398, N_24054);
        int64_t gtid_27913 = flat_idx_38398 - squot64(flat_idx_38398, N_24054) *
                N_24054;
        int64_t orig_group_38399 = squot64(flat_idx_38398,
                                           segscan_group_sizze_27931 *
                                           sdiv_up64(m_24055 * N_24054,
                                                     sext_i32_i64(num_threads_38347)));
        int64_t carry_in_flat_idx_38400 = orig_group_38399 *
                (segscan_group_sizze_27931 * sdiv_up64(m_24055 * N_24054,
                                                       sext_i32_i64(num_threads_38347))) -
                1;
        
        if (slt64(gtid_27905, m_24055) && slt64(gtid_27913, N_24054)) {
            if (!(orig_group_38399 == 0 || (flat_idx_38398 ==
                                            (orig_group_38399 + 1) *
                                            (segscan_group_sizze_27931 *
                                             sdiv_up64(m_24055 * N_24054,
                                                       sext_i32_i64(num_threads_38347))) -
                                            1 || slt64(srem64(flat_idx_38398,
                                                              N_24054),
                                                       flat_idx_38398 -
                                                       carry_in_flat_idx_38400)))) {
                int64_t x_27936;
                int64_t x_27937;
                
                x_27936 = ((__global
                            int64_t *) mem_37188)[squot64(carry_in_flat_idx_38400,
                                                          N_24054) * N_24054 +
                                                  (carry_in_flat_idx_38400 -
                                                   squot64(carry_in_flat_idx_38400,
                                                           N_24054) * N_24054)];
                x_27937 = ((__global int64_t *) mem_37188)[gtid_27905 *
                                                           N_24054 +
                                                           gtid_27913];
                
                int64_t res_27938;
                
                res_27938 = add64(x_27936, x_27937);
                x_27936 = res_27938;
                ((__global int64_t *) mem_37188)[gtid_27905 * N_24054 +
                                                 gtid_27913] = x_27936;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_27931
}
__kernel void mainDetailedziscan_stage3_29700(__global int *global_failure,
                                              int64_t m_24055,
                                              int64_t iota32_arg_24441,
                                              int64_t num_groups_30378, __global
                                              unsigned char *mem_37603, __global
                                              unsigned char *mem_37606, __global
                                              unsigned char *mem_37609, __global
                                              unsigned char *mem_37612,
                                              int32_t num_threads_38974,
                                              int32_t required_groups_39055)
{
    #define segscan_group_sizze_30377 (mainDetailedzisegscan_group_sizze_29694)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39056;
    int32_t local_tid_39057;
    int64_t group_sizze_39060;
    int32_t wave_sizze_39059;
    int32_t group_tid_39058;
    
    global_tid_39056 = get_global_id(0);
    local_tid_39057 = get_local_id(0);
    group_sizze_39060 = get_local_size(0);
    wave_sizze_39059 = LOCKSTEP_WIDTH;
    group_tid_39058 = get_group_id(0);
    
    int32_t phys_tid_29700;
    
    phys_tid_29700 = global_tid_39056;
    
    int32_t phys_group_id_39061;
    
    phys_group_id_39061 = get_group_id(0);
    for (int32_t i_39062 = 0; i_39062 < sdiv_up32(required_groups_39055 -
                                                  phys_group_id_39061,
                                                  sext_i64_i32(num_groups_30378));
         i_39062++) {
        int32_t virt_group_id_39063 = phys_group_id_39061 + i_39062 *
                sext_i64_i32(num_groups_30378);
        int64_t flat_idx_39064 = sext_i32_i64(virt_group_id_39063) *
                segscan_group_sizze_30377 + sext_i32_i64(local_tid_39057);
        int64_t gtid_29691 = squot64(flat_idx_39064, iota32_arg_24441);
        int64_t gtid_29699 = flat_idx_39064 - squot64(flat_idx_39064,
                                                      iota32_arg_24441) *
                iota32_arg_24441;
        int64_t orig_group_39065 = squot64(flat_idx_39064,
                                           segscan_group_sizze_30377 *
                                           sdiv_up64(m_24055 * iota32_arg_24441,
                                                     sext_i32_i64(num_threads_38974)));
        int64_t carry_in_flat_idx_39066 = orig_group_39065 *
                (segscan_group_sizze_30377 * sdiv_up64(m_24055 *
                                                       iota32_arg_24441,
                                                       sext_i32_i64(num_threads_38974))) -
                1;
        
        if (slt64(gtid_29691, m_24055) && slt64(gtid_29699, iota32_arg_24441)) {
            if (!(orig_group_39065 == 0 || (flat_idx_39064 ==
                                            (orig_group_39065 + 1) *
                                            (segscan_group_sizze_30377 *
                                             sdiv_up64(m_24055 *
                                                       iota32_arg_24441,
                                                       sext_i32_i64(num_threads_38974))) -
                                            1 || slt64(srem64(flat_idx_39064,
                                                              iota32_arg_24441),
                                                       flat_idx_39064 -
                                                       carry_in_flat_idx_39066)))) {
                int64_t x_30385;
                int64_t x_30386;
                int64_t x_30387;
                int64_t x_30388;
                int64_t x_30389;
                int64_t x_30390;
                int64_t x_30391;
                int64_t x_30392;
                
                x_30385 = ((__global
                            int64_t *) mem_37603)[squot64(carry_in_flat_idx_39066,
                                                          iota32_arg_24441) *
                                                  iota32_arg_24441 +
                                                  (carry_in_flat_idx_39066 -
                                                   squot64(carry_in_flat_idx_39066,
                                                           iota32_arg_24441) *
                                                   iota32_arg_24441)];
                x_30386 = ((__global
                            int64_t *) mem_37606)[squot64(carry_in_flat_idx_39066,
                                                          iota32_arg_24441) *
                                                  iota32_arg_24441 +
                                                  (carry_in_flat_idx_39066 -
                                                   squot64(carry_in_flat_idx_39066,
                                                           iota32_arg_24441) *
                                                   iota32_arg_24441)];
                x_30387 = ((__global
                            int64_t *) mem_37609)[squot64(carry_in_flat_idx_39066,
                                                          iota32_arg_24441) *
                                                  iota32_arg_24441 +
                                                  (carry_in_flat_idx_39066 -
                                                   squot64(carry_in_flat_idx_39066,
                                                           iota32_arg_24441) *
                                                   iota32_arg_24441)];
                x_30388 = ((__global
                            int64_t *) mem_37612)[squot64(carry_in_flat_idx_39066,
                                                          iota32_arg_24441) *
                                                  iota32_arg_24441 +
                                                  (carry_in_flat_idx_39066 -
                                                   squot64(carry_in_flat_idx_39066,
                                                           iota32_arg_24441) *
                                                   iota32_arg_24441)];
                x_30389 = ((__global int64_t *) mem_37603)[gtid_29691 *
                                                           iota32_arg_24441 +
                                                           gtid_29699];
                x_30390 = ((__global int64_t *) mem_37606)[gtid_29691 *
                                                           iota32_arg_24441 +
                                                           gtid_29699];
                x_30391 = ((__global int64_t *) mem_37609)[gtid_29691 *
                                                           iota32_arg_24441 +
                                                           gtid_29699];
                x_30392 = ((__global int64_t *) mem_37612)[gtid_29691 *
                                                           iota32_arg_24441 +
                                                           gtid_29699];
                
                int64_t res_30393;
                
                res_30393 = add64(x_30385, x_30389);
                
                int64_t res_30394 = add64(x_30386, x_30390);
                int64_t res_30395 = add64(x_30387, x_30391);
                int64_t res_30396 = add64(x_30388, x_30392);
                
                x_30385 = res_30393;
                x_30386 = res_30394;
                x_30387 = res_30395;
                x_30388 = res_30396;
                ((__global int64_t *) mem_37603)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699] = x_30385;
                ((__global int64_t *) mem_37606)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699] = x_30386;
                ((__global int64_t *) mem_37609)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699] = x_30387;
                ((__global int64_t *) mem_37612)[gtid_29691 * iota32_arg_24441 +
                                                 gtid_29699] = x_30388;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30377
}
__kernel void mainDetailedziscan_stage3_30055(__global int *global_failure,
                                              int64_t m_24055,
                                              int64_t iota32_arg_24441,
                                              int64_t num_groups_30134, __global
                                              unsigned char *mem_37546,
                                              int32_t num_threads_38774,
                                              int32_t required_groups_38816)
{
    #define segscan_group_sizze_30133 (mainDetailedzisegscan_group_sizze_30049)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38817;
    int32_t local_tid_38818;
    int64_t group_sizze_38821;
    int32_t wave_sizze_38820;
    int32_t group_tid_38819;
    
    global_tid_38817 = get_global_id(0);
    local_tid_38818 = get_local_id(0);
    group_sizze_38821 = get_local_size(0);
    wave_sizze_38820 = LOCKSTEP_WIDTH;
    group_tid_38819 = get_group_id(0);
    
    int32_t phys_tid_30055;
    
    phys_tid_30055 = global_tid_38817;
    
    int32_t phys_group_id_38822;
    
    phys_group_id_38822 = get_group_id(0);
    for (int32_t i_38823 = 0; i_38823 < sdiv_up32(required_groups_38816 -
                                                  phys_group_id_38822,
                                                  sext_i64_i32(num_groups_30134));
         i_38823++) {
        int32_t virt_group_id_38824 = phys_group_id_38822 + i_38823 *
                sext_i64_i32(num_groups_30134);
        int64_t flat_idx_38825 = sext_i32_i64(virt_group_id_38824) *
                segscan_group_sizze_30133 + sext_i32_i64(local_tid_38818);
        int64_t gtid_30046 = squot64(flat_idx_38825, iota32_arg_24441);
        int64_t gtid_30054 = flat_idx_38825 - squot64(flat_idx_38825,
                                                      iota32_arg_24441) *
                iota32_arg_24441;
        int64_t orig_group_38826 = squot64(flat_idx_38825,
                                           segscan_group_sizze_30133 *
                                           sdiv_up64(m_24055 * iota32_arg_24441,
                                                     sext_i32_i64(num_threads_38774)));
        int64_t carry_in_flat_idx_38827 = orig_group_38826 *
                (segscan_group_sizze_30133 * sdiv_up64(m_24055 *
                                                       iota32_arg_24441,
                                                       sext_i32_i64(num_threads_38774))) -
                1;
        
        if (slt64(gtid_30046, m_24055) && slt64(gtid_30054, iota32_arg_24441)) {
            if (!(orig_group_38826 == 0 || (flat_idx_38825 ==
                                            (orig_group_38826 + 1) *
                                            (segscan_group_sizze_30133 *
                                             sdiv_up64(m_24055 *
                                                       iota32_arg_24441,
                                                       sext_i32_i64(num_threads_38774))) -
                                            1 || slt64(srem64(flat_idx_38825,
                                                              iota32_arg_24441),
                                                       flat_idx_38825 -
                                                       carry_in_flat_idx_38827)))) {
                float x_30137;
                float x_30138;
                
                x_30137 = ((__global
                            float *) mem_37546)[squot64(carry_in_flat_idx_38827,
                                                        iota32_arg_24441) *
                                                iota32_arg_24441 +
                                                (carry_in_flat_idx_38827 -
                                                 squot64(carry_in_flat_idx_38827,
                                                         iota32_arg_24441) *
                                                 iota32_arg_24441)];
                x_30138 = ((__global float *) mem_37546)[gtid_30046 *
                                                         iota32_arg_24441 +
                                                         gtid_30054];
                
                float res_30139;
                
                res_30139 = x_30137 + x_30138;
                x_30137 = res_30139;
                ((__global float *) mem_37546)[gtid_30046 * iota32_arg_24441 +
                                               gtid_30054] = x_30137;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30133
}
__kernel void mainDetailedzisegmap_25711(__global int *global_failure,
                                         int64_t N_24054, float freq_24060,
                                         int64_t res_24074, __global
                                         unsigned char *mappingindices_mem_36737,
                                         __global unsigned char *mem_36742)
{
    #define segmap_group_sizze_25784 (mainDetailedzisegmap_group_sizze_25714)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37876;
    int32_t local_tid_37877;
    int64_t group_sizze_37880;
    int32_t wave_sizze_37879;
    int32_t group_tid_37878;
    
    global_tid_37876 = get_global_id(0);
    local_tid_37877 = get_local_id(0);
    group_sizze_37880 = get_local_size(0);
    wave_sizze_37879 = LOCKSTEP_WIDTH;
    group_tid_37878 = get_group_id(0);
    
    int32_t phys_tid_25711;
    
    phys_tid_25711 = global_tid_37876;
    
    int64_t gtid_25709;
    
    gtid_25709 = squot64(sext_i32_i64(group_tid_37878) *
                         segmap_group_sizze_25784 +
                         sext_i32_i64(local_tid_37877), N_24054);
    
    int64_t gtid_25710;
    
    gtid_25710 = sext_i32_i64(group_tid_37878) * segmap_group_sizze_25784 +
        sext_i32_i64(local_tid_37877) - squot64(sext_i32_i64(group_tid_37878) *
                                                segmap_group_sizze_25784 +
                                                sext_i32_i64(local_tid_37877),
                                                N_24054) * N_24054;
    if (slt64(gtid_25709, res_24074) && slt64(gtid_25710, N_24054)) {
        int32_t index_primexp_35389 = sext_i64_i32(gtid_25709);
        bool index_primexp_35386 = index_primexp_35389 == 0;
        float res_25790;
        
        if (index_primexp_35386) {
            res_25790 = 1.0F;
        } else {
            int32_t x_25789 = ((__global
                                int32_t *) mappingindices_mem_36737)[gtid_25710];
            bool cond_25791 = index_primexp_35389 == 1;
            float res_25792;
            
            if (cond_25791) {
                float res_25793 = sitofp_i32_f32(x_25789);
                
                res_25792 = res_25793;
            } else {
                int32_t r32_arg_25794 = sdiv32(index_primexp_35389, 2);
                float res_25795 = sitofp_i32_f32(r32_arg_25794);
                float res_25796 = sitofp_i32_f32(x_25789);
                float x_25797 = 6.2831855F * res_25795;
                float x_25798 = res_25796 * x_25797;
                float angle_25799 = x_25798 / freq_24060;
                int32_t x_25800 = smod32(index_primexp_35389, 2);
                bool cond_25801 = x_25800 == 0;
                float res_25802;
                
                if (cond_25801) {
                    float res_25803;
                    
                    res_25803 = futrts_sin32(angle_25799);
                    res_25802 = res_25803;
                } else {
                    float res_25804;
                    
                    res_25804 = futrts_cos32(angle_25799);
                    res_25802 = res_25804;
                }
                res_25792 = res_25802;
            }
            res_25790 = res_25792;
        }
        ((__global float *) mem_36742)[gtid_25709 * N_24054 + gtid_25710] =
            res_25790;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25784
}
__kernel void mainDetailedzisegmap_25889(__global int *global_failure,
                                         int64_t N_24054, float freq_24060,
                                         int64_t res_24074, __global
                                         unsigned char *mappingindices_mem_36737,
                                         __global unsigned char *mem_36746)
{
    #define segmap_group_sizze_25958 (mainDetailedzisegmap_group_sizze_25892)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37881;
    int32_t local_tid_37882;
    int64_t group_sizze_37885;
    int32_t wave_sizze_37884;
    int32_t group_tid_37883;
    
    global_tid_37881 = get_global_id(0);
    local_tid_37882 = get_local_id(0);
    group_sizze_37885 = get_local_size(0);
    wave_sizze_37884 = LOCKSTEP_WIDTH;
    group_tid_37883 = get_group_id(0);
    
    int32_t phys_tid_25889;
    
    phys_tid_25889 = global_tid_37881;
    
    int64_t gtid_25887;
    
    gtid_25887 = squot64(sext_i32_i64(group_tid_37883) *
                         segmap_group_sizze_25958 +
                         sext_i32_i64(local_tid_37882), N_24054);
    
    int64_t gtid_25888;
    
    gtid_25888 = sext_i32_i64(group_tid_37883) * segmap_group_sizze_25958 +
        sext_i32_i64(local_tid_37882) - squot64(sext_i32_i64(group_tid_37883) *
                                                segmap_group_sizze_25958 +
                                                sext_i32_i64(local_tid_37882),
                                                N_24054) * N_24054;
    if (slt64(gtid_25887, res_24074) && slt64(gtid_25888, N_24054)) {
        int32_t index_primexp_35398 = sext_i64_i32(gtid_25887);
        bool index_primexp_35395 = index_primexp_35398 == 0;
        float res_25964;
        
        if (index_primexp_35395) {
            res_25964 = 1.0F;
        } else {
            int32_t x_25963 = ((__global
                                int32_t *) mappingindices_mem_36737)[gtid_25888];
            int32_t i_25965 = add32(1, index_primexp_35398);
            int32_t r32_arg_25966 = sdiv32(i_25965, 2);
            float res_25967 = sitofp_i32_f32(r32_arg_25966);
            float res_25968 = sitofp_i32_f32(x_25963);
            float x_25969 = 6.2831855F * res_25967;
            float x_25970 = res_25968 * x_25969;
            float angle_25971 = x_25970 / freq_24060;
            int32_t x_25972 = smod32(i_25965, 2);
            bool cond_25973 = x_25972 == 0;
            float res_25974;
            
            if (cond_25973) {
                float res_25975;
                
                res_25975 = futrts_sin32(angle_25971);
                res_25974 = res_25975;
            } else {
                float res_25976;
                
                res_25976 = futrts_cos32(angle_25971);
                res_25974 = res_25976;
            }
            res_25964 = res_25974;
        }
        ((__global float *) mem_36746)[gtid_25887 * N_24054 + gtid_25888] =
            res_25964;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25958
}
__kernel void mainDetailedzisegmap_26017(__global int *global_failure,
                                         int64_t N_24054, int64_t res_24074,
                                         float res_24139, __global
                                         unsigned char *mem_36750, __global
                                         unsigned char *mem_36754)
{
    #define segmap_group_sizze_26041 (mainDetailedzisegmap_group_sizze_26020)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37886;
    int32_t local_tid_37887;
    int64_t group_sizze_37890;
    int32_t wave_sizze_37889;
    int32_t group_tid_37888;
    
    global_tid_37886 = get_global_id(0);
    local_tid_37887 = get_local_id(0);
    group_sizze_37890 = get_local_size(0);
    wave_sizze_37889 = LOCKSTEP_WIDTH;
    group_tid_37888 = get_group_id(0);
    
    int32_t phys_tid_26017;
    
    phys_tid_26017 = global_tid_37886;
    
    int64_t gtid_26015;
    
    gtid_26015 = squot64(sext_i32_i64(group_tid_37888) *
                         segmap_group_sizze_26041 +
                         sext_i32_i64(local_tid_37887), res_24074);
    
    int64_t gtid_26016;
    
    gtid_26016 = sext_i32_i64(group_tid_37888) * segmap_group_sizze_26041 +
        sext_i32_i64(local_tid_37887) - squot64(sext_i32_i64(group_tid_37888) *
                                                segmap_group_sizze_26041 +
                                                sext_i32_i64(local_tid_37887),
                                                res_24074) * res_24074;
    if (slt64(gtid_26015, N_24054) && slt64(gtid_26016, res_24074)) {
        float x_26044 = ((__global float *) mem_36750)[gtid_26015 * res_24074 +
                                                       gtid_26016];
        float res_26045 = res_24139 + x_26044;
        
        ((__global float *) mem_36754)[gtid_26015 * res_24074 + gtid_26016] =
            res_26045;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26041
}
__kernel void mainDetailedzisegmap_26050(__global int *global_failure,
                                         int64_t N_24054, int64_t m_24055,
                                         int32_t n_24059, int32_t k2p2zq_24072,
                                         int64_t res_24074,
                                         int64_t num_groups_26075, __global
                                         unsigned char *binop_p_mem_36747,
                                         __global unsigned char *mem_36754,
                                         __global unsigned char *mem_36757,
                                         __global unsigned char *mem_36761,
                                         __global unsigned char *mem_36803)
{
    #define segmap_group_sizze_26074 (mainDetailedzisegmap_group_sizze_26052)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37894;
    int32_t local_tid_37895;
    int64_t group_sizze_37898;
    int32_t wave_sizze_37897;
    int32_t group_tid_37896;
    
    global_tid_37894 = get_global_id(0);
    local_tid_37895 = get_local_id(0);
    group_sizze_37898 = get_local_size(0);
    wave_sizze_37897 = LOCKSTEP_WIDTH;
    group_tid_37896 = get_group_id(0);
    
    int32_t phys_tid_26050;
    
    phys_tid_26050 = global_tid_37894;
    
    int32_t phys_group_id_37899;
    
    phys_group_id_37899 = get_group_id(0);
    for (int32_t i_37900 = 0; i_37900 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055, segmap_group_sizze_26074)) -
                   phys_group_id_37899, sext_i64_i32(num_groups_26075));
         i_37900++) {
        int32_t virt_group_id_37901 = phys_group_id_37899 + i_37900 *
                sext_i64_i32(num_groups_26075);
        int64_t gtid_26049 = sext_i32_i64(virt_group_id_37901) *
                segmap_group_sizze_26074 + sext_i32_i64(local_tid_37895);
        
        if (slt64(gtid_26049, m_24055)) {
            for (int32_t i_36715 = 0; i_36715 < k2p2zq_24072; i_36715++) {
                int64_t i_36603 = sext_i32_i64(i_36715);
                
                for (int32_t i_36714 = 0; i_36714 < k2p2zq_24072; i_36714++) {
                    int64_t i_36607 = sext_i32_i64(i_36714);
                    float res_26083;
                    float redout_36609 = 0.0F;
                    
                    for (int32_t i_36713 = 0; i_36713 < n_24059; i_36713++) {
                        int64_t i_36610 = sext_i32_i64(i_36713);
                        float x_26087 = ((__global float *) mem_36757)[i_36610 *
                                                                       m_24055 +
                                                                       gtid_26049];
                        float x_26088 = ((__global
                                          float *) binop_p_mem_36747)[i_36603 *
                                                                      N_24054 +
                                                                      i_36610];
                        float x_26089 = ((__global float *) mem_36754)[i_36610 *
                                                                       res_24074 +
                                                                       i_36607];
                        float x_26090 = x_26088 * x_26089;
                        bool res_26091;
                        
                        res_26091 = futrts_isnan32(x_26087);
                        
                        float y_26092;
                        
                        if (res_26091) {
                            y_26092 = 0.0F;
                        } else {
                            y_26092 = 1.0F;
                        }
                        
                        float res_26093 = x_26090 * y_26092;
                        float res_26086 = res_26093 + redout_36609;
                        float redout_tmp_37904 = res_26086;
                        
                        redout_36609 = redout_tmp_37904;
                    }
                    res_26083 = redout_36609;
                    ((__global float *) mem_36761)[phys_tid_26050 + (i_36603 *
                                                                     (num_groups_26075 *
                                                                      segmap_group_sizze_26074 *
                                                                      res_24074) +
                                                                     i_36607 *
                                                                     (num_groups_26075 *
                                                                      segmap_group_sizze_26074))] =
                        res_26083;
                }
            }
            for (int64_t i_37905 = 0; i_37905 < res_24074; i_37905++) {
                for (int64_t i_37906 = 0; i_37906 < res_24074; i_37906++) {
                    ((__global float *) mem_36803)[i_37905 * (m_24055 *
                                                              res_24074) +
                                                   i_37906 * m_24055 +
                                                   gtid_26049] = ((__global
                                                                   float *) mem_36761)[phys_tid_26050 +
                                                                                       (i_37905 *
                                                                                        (num_groups_26075 *
                                                                                         segmap_group_sizze_26074 *
                                                                                         res_24074) +
                                                                                        i_37906 *
                                                                                        (num_groups_26075 *
                                                                                         segmap_group_sizze_26074))];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26074
}
__kernel void mainDetailedzisegmap_26096(__global int *global_failure,
                                         int64_t m_24055, int64_t N_24056,
                                         int32_t n_24059, int32_t k2p2zq_24072,
                                         int64_t res_24074,
                                         int64_t num_groups_26252, __global
                                         unsigned char *images_mem_36738,
                                         __global unsigned char *mem_36750,
                                         __global unsigned char *mem_36754,
                                         __global unsigned char *mem_36806,
                                         __global unsigned char *mem_36822)
{
    #define segmap_group_sizze_26251 (mainDetailedzisegmap_group_sizze_26099)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37907;
    int32_t local_tid_37908;
    int64_t group_sizze_37911;
    int32_t wave_sizze_37910;
    int32_t group_tid_37909;
    
    global_tid_37907 = get_global_id(0);
    local_tid_37908 = get_local_id(0);
    group_sizze_37911 = get_local_size(0);
    wave_sizze_37910 = LOCKSTEP_WIDTH;
    group_tid_37909 = get_group_id(0);
    
    int32_t phys_tid_26096;
    
    phys_tid_26096 = global_tid_37907;
    
    int32_t phys_group_id_37912;
    
    phys_group_id_37912 = get_group_id(0);
    for (int32_t i_37913 = 0; i_37913 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055 * res_24074,
                                          segmap_group_sizze_26251)) -
                   phys_group_id_37912, sext_i64_i32(num_groups_26252));
         i_37913++) {
        int32_t virt_group_id_37914 = phys_group_id_37912 + i_37913 *
                sext_i64_i32(num_groups_26252);
        int64_t gtid_26094 = squot64(sext_i32_i64(virt_group_id_37914) *
                                     segmap_group_sizze_26251 +
                                     sext_i32_i64(local_tid_37908), res_24074);
        int64_t gtid_26095 = sext_i32_i64(virt_group_id_37914) *
                segmap_group_sizze_26251 + sext_i32_i64(local_tid_37908) -
                squot64(sext_i32_i64(virt_group_id_37914) *
                        segmap_group_sizze_26251 +
                        sext_i32_i64(local_tid_37908), res_24074) * res_24074;
        
        if (slt64(gtid_26094, m_24055) && slt64(gtid_26095, res_24074)) {
            for (int32_t i_36717 = 0; i_36717 < k2p2zq_24072; i_36717++) {
                int64_t i_36613 = sext_i32_i64(i_36717);
                float res_26263;
                float redout_36615 = 0.0F;
                
                for (int32_t i_36716 = 0; i_36716 < n_24059; i_36716++) {
                    int64_t i_36616 = sext_i32_i64(i_36716);
                    float x_26267 = ((__global
                                      float *) images_mem_36738)[gtid_26094 *
                                                                 N_24056 +
                                                                 i_36616];
                    float x_26268 = ((__global float *) mem_36750)[i_36616 *
                                                                   res_24074 +
                                                                   gtid_26095];
                    float x_26269 = ((__global float *) mem_36754)[i_36616 *
                                                                   res_24074 +
                                                                   i_36613];
                    float x_26270 = x_26268 * x_26269;
                    bool res_26271;
                    
                    res_26271 = futrts_isnan32(x_26267);
                    
                    float y_26272;
                    
                    if (res_26271) {
                        y_26272 = 0.0F;
                    } else {
                        y_26272 = 1.0F;
                    }
                    
                    float res_26273 = x_26270 * y_26272;
                    float res_26266 = res_26273 + redout_36615;
                    float redout_tmp_37916 = res_26266;
                    
                    redout_36615 = redout_tmp_37916;
                }
                res_26263 = redout_36615;
                ((__global float *) mem_36806)[phys_tid_26096 + i_36613 *
                                               (num_groups_26252 *
                                                segmap_group_sizze_26251)] =
                    res_26263;
            }
            for (int64_t i_37917 = 0; i_37917 < res_24074; i_37917++) {
                ((__global float *) mem_36822)[i_37917 * (res_24074 * m_24055) +
                                               gtid_26094 * res_24074 +
                                               gtid_26095] = ((__global
                                                               float *) mem_36806)[phys_tid_26096 +
                                                                                   i_37917 *
                                                                                   (num_groups_26252 *
                                                                                    segmap_group_sizze_26251)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26251
}
__kernel void mainDetailedzisegmap_26126(__global int *global_failure,
                                         int64_t m_24055, int64_t N_24056,
                                         int32_t n_24059, int64_t res_24074,
                                         __global
                                         unsigned char *images_mem_36738,
                                         __global unsigned char *mem_36750,
                                         __global unsigned char *mem_36754,
                                         __global unsigned char *mem_36827)
{
    #define segmap_group_sizze_26277 (mainDetailedzisegmap_group_sizze_26130)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37918;
    int32_t local_tid_37919;
    int64_t group_sizze_37922;
    int32_t wave_sizze_37921;
    int32_t group_tid_37920;
    
    global_tid_37918 = get_global_id(0);
    local_tid_37919 = get_local_id(0);
    group_sizze_37922 = get_local_size(0);
    wave_sizze_37921 = LOCKSTEP_WIDTH;
    group_tid_37920 = get_group_id(0);
    
    int32_t phys_tid_26126;
    
    phys_tid_26126 = global_tid_37918;
    
    int64_t gtid_26123;
    
    gtid_26123 = squot64(sext_i32_i64(group_tid_37920) *
                         segmap_group_sizze_26277 +
                         sext_i32_i64(local_tid_37919), res_24074 * res_24074);
    
    int64_t gtid_26124;
    
    gtid_26124 = squot64(sext_i32_i64(group_tid_37920) *
                         segmap_group_sizze_26277 +
                         sext_i32_i64(local_tid_37919) -
                         squot64(sext_i32_i64(group_tid_37920) *
                                 segmap_group_sizze_26277 +
                                 sext_i32_i64(local_tid_37919), res_24074 *
                                 res_24074) * (res_24074 * res_24074),
                         res_24074);
    
    int64_t gtid_26125;
    
    gtid_26125 = sext_i32_i64(group_tid_37920) * segmap_group_sizze_26277 +
        sext_i32_i64(local_tid_37919) - squot64(sext_i32_i64(group_tid_37920) *
                                                segmap_group_sizze_26277 +
                                                sext_i32_i64(local_tid_37919),
                                                res_24074 * res_24074) *
        (res_24074 * res_24074) - squot64(sext_i32_i64(group_tid_37920) *
                                          segmap_group_sizze_26277 +
                                          sext_i32_i64(local_tid_37919) -
                                          squot64(sext_i32_i64(group_tid_37920) *
                                                  segmap_group_sizze_26277 +
                                                  sext_i32_i64(local_tid_37919),
                                                  res_24074 * res_24074) *
                                          (res_24074 * res_24074), res_24074) *
        res_24074;
    if ((slt64(gtid_26123, m_24055) && slt64(gtid_26124, res_24074)) &&
        slt64(gtid_26125, res_24074)) {
        float res_26288;
        float redout_36617 = 0.0F;
        
        for (int32_t i_36718 = 0; i_36718 < n_24059; i_36718++) {
            int64_t i_36618 = sext_i32_i64(i_36718);
            float x_26292 = ((__global float *) images_mem_36738)[gtid_26123 *
                                                                  N_24056 +
                                                                  i_36618];
            float x_26293 = ((__global float *) mem_36750)[i_36618 * res_24074 +
                                                           gtid_26124];
            float x_26294 = ((__global float *) mem_36754)[i_36618 * res_24074 +
                                                           gtid_26125];
            float x_26295 = x_26293 * x_26294;
            bool res_26296;
            
            res_26296 = futrts_isnan32(x_26292);
            
            float y_26297;
            
            if (res_26296) {
                y_26297 = 0.0F;
            } else {
                y_26297 = 1.0F;
            }
            
            float res_26298 = x_26295 * y_26297;
            float res_26291 = res_26298 + redout_36617;
            float redout_tmp_37923 = res_26291;
            
            redout_36617 = redout_tmp_37923;
        }
        res_26288 = redout_36617;
        ((__global float *) mem_36827)[gtid_26123 * (res_24074 * res_24074) +
                                       gtid_26124 * res_24074 + gtid_26125] =
            res_26288;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26277
}
__kernel void mainDetailedzisegmap_26630(__global int *global_failure,
                                         int64_t m_24055, int64_t res_24074,
                                         int64_t m_24205,
                                         int64_t res_r_ixfn_36920,
                                         int64_t res_r_ixfn_36921,
                                         int64_t res_r_ixfn_36923, __global
                                         unsigned char *res_r_mem_36925,
                                         __global unsigned char *mem_36930)
{
    #define segmap_group_sizze_27253 (mainDetailedzisegmap_group_sizze_26634)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38046;
    int32_t local_tid_38047;
    int64_t group_sizze_38050;
    int32_t wave_sizze_38049;
    int32_t group_tid_38048;
    
    global_tid_38046 = get_global_id(0);
    local_tid_38047 = get_local_id(0);
    group_sizze_38050 = get_local_size(0);
    wave_sizze_38049 = LOCKSTEP_WIDTH;
    group_tid_38048 = get_group_id(0);
    
    int32_t phys_tid_26630;
    
    phys_tid_26630 = global_tid_38046;
    
    int64_t gtid_26627;
    
    gtid_26627 = squot64(sext_i32_i64(group_tid_38048) *
                         segmap_group_sizze_27253 +
                         sext_i32_i64(local_tid_38047), res_24074 * res_24074);
    
    int64_t gtid_26628;
    
    gtid_26628 = squot64(sext_i32_i64(group_tid_38048) *
                         segmap_group_sizze_27253 +
                         sext_i32_i64(local_tid_38047) -
                         squot64(sext_i32_i64(group_tid_38048) *
                                 segmap_group_sizze_27253 +
                                 sext_i32_i64(local_tid_38047), res_24074 *
                                 res_24074) * (res_24074 * res_24074),
                         res_24074);
    
    int64_t gtid_26629;
    
    gtid_26629 = sext_i32_i64(group_tid_38048) * segmap_group_sizze_27253 +
        sext_i32_i64(local_tid_38047) - squot64(sext_i32_i64(group_tid_38048) *
                                                segmap_group_sizze_27253 +
                                                sext_i32_i64(local_tid_38047),
                                                res_24074 * res_24074) *
        (res_24074 * res_24074) - squot64(sext_i32_i64(group_tid_38048) *
                                          segmap_group_sizze_27253 +
                                          sext_i32_i64(local_tid_38047) -
                                          squot64(sext_i32_i64(group_tid_38048) *
                                                  segmap_group_sizze_27253 +
                                                  sext_i32_i64(local_tid_38047),
                                                  res_24074 * res_24074) *
                                          (res_24074 * res_24074), res_24074) *
        res_24074;
    if ((slt64(gtid_26627, m_24055) && slt64(gtid_26628, res_24074)) &&
        slt64(gtid_26629, res_24074)) {
        int64_t index_primexp_35428 = m_24205 * gtid_26628;
        int64_t i_27259 = add64(res_24074, gtid_26629);
        int64_t new_index_27260 = i_27259 + index_primexp_35428;
        float res_27261 = ((__global
                            float *) res_r_mem_36925)[res_r_ixfn_36920 +
                                                      (gtid_26627 *
                                                       res_r_ixfn_36921 +
                                                       new_index_27260 *
                                                       res_r_ixfn_36923)];
        
        ((__global float *) mem_36930)[gtid_26627 * (res_24074 * res_24074) +
                                       gtid_26628 * res_24074 + gtid_26629] =
            res_27261;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27253
}
__kernel void mainDetailedzisegmap_26849(__global int *global_failure,
                                         int64_t m_24055, int64_t nm_24206,
                                         int64_t ctx_param_ext_36883,
                                         int64_t ctx_param_ext_36884,
                                         int64_t ctx_param_ext_36886, __global
                                         unsigned char *mem_param_36888,
                                         __global unsigned char *mem_36908)
{
    #define segmap_group_sizze_27218 (mainDetailedzisegmap_group_sizze_26852)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38040;
    int32_t local_tid_38041;
    int64_t group_sizze_38044;
    int32_t wave_sizze_38043;
    int32_t group_tid_38042;
    
    global_tid_38040 = get_global_id(0);
    local_tid_38041 = get_local_id(0);
    group_sizze_38044 = get_local_size(0);
    wave_sizze_38043 = LOCKSTEP_WIDTH;
    group_tid_38042 = get_group_id(0);
    
    int32_t phys_tid_26849;
    
    phys_tid_26849 = global_tid_38040;
    
    int64_t gtid_26847;
    
    gtid_26847 = squot64(sext_i32_i64(group_tid_38042) *
                         segmap_group_sizze_27218 +
                         sext_i32_i64(local_tid_38041), nm_24206);
    
    int64_t gtid_26848;
    
    gtid_26848 = sext_i32_i64(group_tid_38042) * segmap_group_sizze_27218 +
        sext_i32_i64(local_tid_38041) - squot64(sext_i32_i64(group_tid_38042) *
                                                segmap_group_sizze_27218 +
                                                sext_i32_i64(local_tid_38041),
                                                nm_24206) * nm_24206;
    if (slt64(gtid_26847, m_24055) && slt64(gtid_26848, nm_24206)) {
        float write_value_27224 = ((__global float *) mem_36908)[gtid_26847 *
                                                                 nm_24206 +
                                                                 gtid_26848];
        
        if ((sle64(0, gtid_26847) && slt64(gtid_26847, m_24055)) && (sle64(0,
                                                                           gtid_26848) &&
                                                                     slt64(gtid_26848,
                                                                           nm_24206))) {
            ((__global float *) mem_param_36888)[ctx_param_ext_36883 +
                                                 (gtid_26847 *
                                                  ctx_param_ext_36884 +
                                                  gtid_26848 *
                                                  ctx_param_ext_36886)] =
                write_value_27224;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27218
}
__kernel void mainDetailedzisegmap_26903(__global int *global_failure,
                                         int64_t m_24055, int32_t k2p2zq_24072,
                                         int64_t nm_24206, int32_t res_24214,
                                         int32_t i_27117, int64_t i_27119,
                                         int64_t ctx_param_ext_36883,
                                         int64_t ctx_param_ext_36884,
                                         int64_t ctx_param_ext_36886, __global
                                         unsigned char *mem_param_36888,
                                         __global unsigned char *mem_36904,
                                         __global unsigned char *mem_36908)
{
    #define segmap_group_sizze_27184 (mainDetailedzisegmap_group_sizze_26906)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38035;
    int32_t local_tid_38036;
    int64_t group_sizze_38039;
    int32_t wave_sizze_38038;
    int32_t group_tid_38037;
    
    global_tid_38035 = get_global_id(0);
    local_tid_38036 = get_local_id(0);
    group_sizze_38039 = get_local_size(0);
    wave_sizze_38038 = LOCKSTEP_WIDTH;
    group_tid_38037 = get_group_id(0);
    
    int32_t phys_tid_26903;
    
    phys_tid_26903 = global_tid_38035;
    
    int64_t gtid_26901;
    
    gtid_26901 = squot64(sext_i32_i64(group_tid_38037) *
                         segmap_group_sizze_27184 +
                         sext_i32_i64(local_tid_38036), nm_24206);
    
    int64_t gtid_26902;
    
    gtid_26902 = sext_i32_i64(group_tid_38037) * segmap_group_sizze_27184 +
        sext_i32_i64(local_tid_38036) - squot64(sext_i32_i64(group_tid_38037) *
                                                segmap_group_sizze_27184 +
                                                sext_i32_i64(local_tid_38036),
                                                nm_24206) * nm_24206;
    if (slt64(gtid_26901, m_24055) && slt64(gtid_26902, nm_24206)) {
        bool cond_27189 = ((__global bool *) mem_36904)[gtid_26901];
        int32_t res_27191 = sext_i64_i32(gtid_26902);
        int32_t res_27192 = sdiv32(res_27191, res_24214);
        int32_t res_27193 = smod32(res_27191, res_24214);
        float res_27194;
        
        if (cond_27189) {
            int32_t x_27195 = mul32(res_24214, res_27192);
            int32_t i_27196 = add32(res_27193, x_27195);
            int64_t i_27197 = sext_i32_i64(i_27196);
            float res_27198 = ((__global
                                float *) mem_param_36888)[ctx_param_ext_36883 +
                                                          (gtid_26901 *
                                                           ctx_param_ext_36884 +
                                                           i_27197 *
                                                           ctx_param_ext_36886)];
            
            res_27194 = res_27198;
        } else {
            float v1_27188 = ((__global
                               float *) mem_param_36888)[ctx_param_ext_36883 +
                                                         (gtid_26901 *
                                                          ctx_param_ext_36884 +
                                                          i_27119 *
                                                          ctx_param_ext_36886)];
            int64_t j_27199 = sext_i32_i64(res_27193);
            float x_27200 = ((__global
                              float *) mem_param_36888)[ctx_param_ext_36883 +
                                                        (gtid_26901 *
                                                         ctx_param_ext_36884 +
                                                         j_27199 *
                                                         ctx_param_ext_36886)];
            float x_27201 = x_27200 / v1_27188;
            int32_t y_27202 = sub32(k2p2zq_24072, 1);
            bool cond_27203 = slt32(res_27192, y_27202);
            float res_27204;
            
            if (cond_27203) {
                int32_t x_27205 = add32(1, res_27192);
                int32_t x_27206 = mul32(res_24214, x_27205);
                int32_t i_27207 = add32(res_27193, x_27206);
                int64_t i_27208 = sext_i32_i64(i_27207);
                float x_27209 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_26901 *
                                                             ctx_param_ext_36884 +
                                                             i_27208 *
                                                             ctx_param_ext_36886)];
                int32_t i_27210 = add32(i_27117, x_27206);
                int64_t i_27211 = sext_i32_i64(i_27210);
                float x_27212 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_26901 *
                                                             ctx_param_ext_36884 +
                                                             i_27211 *
                                                             ctx_param_ext_36886)];
                float y_27213 = x_27201 * x_27212;
                float res_27214 = x_27209 - y_27213;
                
                res_27204 = res_27214;
            } else {
                res_27204 = x_27201;
            }
            res_27194 = res_27204;
        }
        ((__global float *) mem_36908)[gtid_26901 * nm_24206 + gtid_26902] =
            res_27194;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27184
}
__kernel void mainDetailedzisegmap_26971(__global int *global_failure,
                                         int64_t m_24055, int64_t i_27119,
                                         int64_t ctx_param_ext_36883,
                                         int64_t ctx_param_ext_36884,
                                         int64_t ctx_param_ext_36886, __global
                                         unsigned char *mem_param_36888,
                                         __global unsigned char *mem_36904)
{
    #define segmap_group_sizze_27168 (mainDetailedzisegmap_group_sizze_26973)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38030;
    int32_t local_tid_38031;
    int64_t group_sizze_38034;
    int32_t wave_sizze_38033;
    int32_t group_tid_38032;
    
    global_tid_38030 = get_global_id(0);
    local_tid_38031 = get_local_id(0);
    group_sizze_38034 = get_local_size(0);
    wave_sizze_38033 = LOCKSTEP_WIDTH;
    group_tid_38032 = get_group_id(0);
    
    int32_t phys_tid_26971;
    
    phys_tid_26971 = global_tid_38030;
    
    int64_t gtid_26970;
    
    gtid_26970 = sext_i32_i64(group_tid_38032) * segmap_group_sizze_27168 +
        sext_i32_i64(local_tid_38031);
    if (slt64(gtid_26970, m_24055)) {
        float v1_27173 = ((__global
                           float *) mem_param_36888)[ctx_param_ext_36883 +
                                                     (gtid_26970 *
                                                      ctx_param_ext_36884 +
                                                      i_27119 *
                                                      ctx_param_ext_36886)];
        bool cond_27174 = v1_27173 == 0.0F;
        
        ((__global bool *) mem_36904)[gtid_26970] = cond_27174;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27168
}
__kernel void mainDetailedzisegmap_27062(__global int *global_failure,
                                         int64_t m_24055, int64_t res_24074,
                                         int64_t m_24205, int64_t nm_24206,
                                         __global unsigned char *res_mem_36848,
                                         __global unsigned char *mem_36880)
{
    #define segmap_group_sizze_27102 (mainDetailedzisegmap_group_sizze_27065)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37997;
    int32_t local_tid_37998;
    int64_t group_sizze_38001;
    int32_t wave_sizze_38000;
    int32_t group_tid_37999;
    
    global_tid_37997 = get_global_id(0);
    local_tid_37998 = get_local_id(0);
    group_sizze_38001 = get_local_size(0);
    wave_sizze_38000 = LOCKSTEP_WIDTH;
    group_tid_37999 = get_group_id(0);
    
    int32_t phys_tid_27062;
    
    phys_tid_27062 = global_tid_37997;
    
    int64_t gtid_27060;
    
    gtid_27060 = squot64(sext_i32_i64(group_tid_37999) *
                         segmap_group_sizze_27102 +
                         sext_i32_i64(local_tid_37998), nm_24206);
    
    int64_t gtid_27061;
    
    gtid_27061 = sext_i32_i64(group_tid_37999) * segmap_group_sizze_27102 +
        sext_i32_i64(local_tid_37998) - squot64(sext_i32_i64(group_tid_37999) *
                                                segmap_group_sizze_27102 +
                                                sext_i32_i64(local_tid_37998),
                                                nm_24206) * nm_24206;
    if (slt64(gtid_27060, m_24055) && slt64(gtid_27061, nm_24206)) {
        int64_t res_27107 = sdiv64(gtid_27061, m_24205);
        int64_t res_27108 = smod64(gtid_27061, m_24205);
        bool cond_27109 = slt64(res_27108, res_24074);
        float res_27110;
        
        if (cond_27109) {
            float res_27111 = ((__global float *) res_mem_36848)[gtid_27060 *
                                                                 (res_24074 *
                                                                  res_24074) +
                                                                 res_27107 *
                                                                 res_24074 +
                                                                 res_27108];
            
            res_27110 = res_27111;
        } else {
            int64_t y_27112 = add64(res_24074, res_27107);
            bool cond_27113 = res_27108 == y_27112;
            float res_27114;
            
            if (cond_27113) {
                res_27114 = 1.0F;
            } else {
                res_27114 = 0.0F;
            }
            res_27110 = res_27114;
        }
        ((__global float *) mem_36880)[gtid_27060 * nm_24206 + gtid_27061] =
            res_27110;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27102
}
__kernel void mainDetailedzisegmap_27268(__global int *global_failure,
                                         int64_t N_24054, int64_t m_24055,
                                         int32_t n_24059, int32_t k2p2zq_24072,
                                         int64_t res_24074,
                                         int64_t num_groups_27289, __global
                                         unsigned char *binop_p_mem_36747,
                                         __global unsigned char *mem_36934,
                                         __global unsigned char *mem_36937,
                                         __global unsigned char *mem_36952)
{
    #define segmap_group_sizze_27288 (mainDetailedzisegmap_group_sizze_27270)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38054;
    int32_t local_tid_38055;
    int64_t group_sizze_38058;
    int32_t wave_sizze_38057;
    int32_t group_tid_38056;
    
    global_tid_38054 = get_global_id(0);
    local_tid_38055 = get_local_id(0);
    group_sizze_38058 = get_local_size(0);
    wave_sizze_38057 = LOCKSTEP_WIDTH;
    group_tid_38056 = get_group_id(0);
    
    int32_t phys_tid_27268;
    
    phys_tid_27268 = global_tid_38054;
    
    int32_t phys_group_id_38059;
    
    phys_group_id_38059 = get_group_id(0);
    for (int32_t i_38060 = 0; i_38060 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055, segmap_group_sizze_27288)) -
                   phys_group_id_38059, sext_i64_i32(num_groups_27289));
         i_38060++) {
        int32_t virt_group_id_38061 = phys_group_id_38059 + i_38060 *
                sext_i64_i32(num_groups_27289);
        int64_t gtid_27267 = sext_i32_i64(virt_group_id_38061) *
                segmap_group_sizze_27288 + sext_i32_i64(local_tid_38055);
        
        if (slt64(gtid_27267, m_24055)) {
            for (int32_t i_36720 = 0; i_36720 < k2p2zq_24072; i_36720++) {
                int64_t i_36621 = sext_i32_i64(i_36720);
                float res_27295;
                float redout_36623 = 0.0F;
                
                for (int32_t i_36719 = 0; i_36719 < n_24059; i_36719++) {
                    int64_t i_36624 = sext_i32_i64(i_36719);
                    float x_27300 = ((__global float *) mem_36934)[i_36624 *
                                                                   m_24055 +
                                                                   gtid_27267];
                    bool res_27301;
                    
                    res_27301 = futrts_isnan32(x_27300);
                    
                    float res_27302;
                    
                    if (res_27301) {
                        res_27302 = 0.0F;
                    } else {
                        float x_27299 = ((__global
                                          float *) binop_p_mem_36747)[i_36621 *
                                                                      N_24054 +
                                                                      i_36624];
                        float res_27303 = x_27299 * x_27300;
                        
                        res_27302 = res_27303;
                    }
                    
                    float res_27298 = res_27302 + redout_36623;
                    float redout_tmp_38063 = res_27298;
                    
                    redout_36623 = redout_tmp_38063;
                }
                res_27295 = redout_36623;
                ((__global float *) mem_36937)[phys_tid_27268 + i_36621 *
                                               (num_groups_27289 *
                                                segmap_group_sizze_27288)] =
                    res_27295;
            }
            for (int64_t i_38064 = 0; i_38064 < res_24074; i_38064++) {
                ((__global float *) mem_36952)[i_38064 * m_24055 + gtid_27267] =
                    ((__global float *) mem_36937)[phys_tid_27268 + i_38064 *
                                                   (num_groups_27289 *
                                                    segmap_group_sizze_27288)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27288
}
__kernel void mainDetailedzisegmap_27409(__global int *global_failure,
                                         int64_t m_24055, int32_t k2p2zq_24072,
                                         int64_t res_24074,
                                         int64_t num_groups_27429, __global
                                         unsigned char *mem_37026, __global
                                         unsigned char *mem_37029, __global
                                         unsigned char *mem_37032, __global
                                         unsigned char *mem_37047)
{
    #define segmap_group_sizze_27428 (mainDetailedzisegmap_group_sizze_27411)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38142;
    int32_t local_tid_38143;
    int64_t group_sizze_38146;
    int32_t wave_sizze_38145;
    int32_t group_tid_38144;
    
    global_tid_38142 = get_global_id(0);
    local_tid_38143 = get_local_id(0);
    group_sizze_38146 = get_local_size(0);
    wave_sizze_38145 = LOCKSTEP_WIDTH;
    group_tid_38144 = get_group_id(0);
    
    int32_t phys_tid_27409;
    
    phys_tid_27409 = global_tid_38142;
    
    int32_t phys_group_id_38147;
    
    phys_group_id_38147 = get_group_id(0);
    for (int32_t i_38148 = 0; i_38148 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055, segmap_group_sizze_27428)) -
                   phys_group_id_38147, sext_i64_i32(num_groups_27429));
         i_38148++) {
        int32_t virt_group_id_38149 = phys_group_id_38147 + i_38148 *
                sext_i64_i32(num_groups_27429);
        int64_t gtid_27408 = sext_i32_i64(virt_group_id_38149) *
                segmap_group_sizze_27428 + sext_i32_i64(local_tid_38143);
        
        if (slt64(gtid_27408, m_24055)) {
            for (int32_t i_36722 = 0; i_36722 < k2p2zq_24072; i_36722++) {
                int64_t i_36631 = sext_i32_i64(i_36722);
                float res_27436;
                float redout_36633 = 0.0F;
                
                for (int32_t i_36721 = 0; i_36721 < k2p2zq_24072; i_36721++) {
                    int64_t i_36634 = sext_i32_i64(i_36721);
                    float x_27440 = ((__global float *) mem_37029)[i_36634 *
                                                                   m_24055 +
                                                                   gtid_27408];
                    float x_27441 = ((__global float *) mem_37026)[i_36631 *
                                                                   (m_24055 *
                                                                    res_24074) +
                                                                   i_36634 *
                                                                   m_24055 +
                                                                   gtid_27408];
                    float res_27442 = x_27440 * x_27441;
                    float res_27439 = res_27442 + redout_36633;
                    float redout_tmp_38151 = res_27439;
                    
                    redout_36633 = redout_tmp_38151;
                }
                res_27436 = redout_36633;
                ((__global float *) mem_37032)[phys_tid_27409 + i_36631 *
                                               (num_groups_27429 *
                                                segmap_group_sizze_27428)] =
                    res_27436;
            }
            for (int64_t i_38152 = 0; i_38152 < res_24074; i_38152++) {
                ((__global float *) mem_37047)[i_38152 * m_24055 + gtid_27408] =
                    ((__global float *) mem_37032)[phys_tid_27409 + i_38152 *
                                                   (num_groups_27429 *
                                                    segmap_group_sizze_27428)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27428
}
__kernel void mainDetailedzisegmap_27445(__global int *global_failure,
                                         int64_t m_24055, int32_t k2p2zq_24072,
                                         int64_t res_24074, __global
                                         unsigned char *res_mem_37022, __global
                                         unsigned char *mem_37051, __global
                                         unsigned char *mem_37055)
{
    #define segmap_group_sizze_27504 (mainDetailedzisegmap_group_sizze_27448)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38153;
    int32_t local_tid_38154;
    int64_t group_sizze_38157;
    int32_t wave_sizze_38156;
    int32_t group_tid_38155;
    
    global_tid_38153 = get_global_id(0);
    local_tid_38154 = get_local_id(0);
    group_sizze_38157 = get_local_size(0);
    wave_sizze_38156 = LOCKSTEP_WIDTH;
    group_tid_38155 = get_group_id(0);
    
    int32_t phys_tid_27445;
    
    phys_tid_27445 = global_tid_38153;
    
    int64_t gtid_27443;
    
    gtid_27443 = squot64(sext_i32_i64(group_tid_38155) *
                         segmap_group_sizze_27504 +
                         sext_i32_i64(local_tid_38154), res_24074);
    
    int64_t gtid_27444;
    
    gtid_27444 = sext_i32_i64(group_tid_38155) * segmap_group_sizze_27504 +
        sext_i32_i64(local_tid_38154) - squot64(sext_i32_i64(group_tid_38155) *
                                                segmap_group_sizze_27504 +
                                                sext_i32_i64(local_tid_38154),
                                                res_24074) * res_24074;
    if (slt64(gtid_27443, m_24055) && slt64(gtid_27444, res_24074)) {
        float res_27513;
        float redout_36635 = 0.0F;
        
        for (int32_t i_36723 = 0; i_36723 < k2p2zq_24072; i_36723++) {
            int64_t i_36636 = sext_i32_i64(i_36723);
            float x_27517 = ((__global float *) res_mem_37022)[gtid_27443 *
                                                               res_24074 +
                                                               i_36636];
            float x_27518 = ((__global float *) mem_37051)[i_36636 *
                                                           (res_24074 *
                                                            m_24055) +
                                                           gtid_27443 *
                                                           res_24074 +
                                                           gtid_27444];
            float res_27519 = x_27517 * x_27518;
            float res_27516 = res_27519 + redout_36635;
            float redout_tmp_38158 = res_27516;
            
            redout_36635 = redout_tmp_38158;
        }
        res_27513 = redout_36635;
        ((__global float *) mem_37055)[gtid_27443 * res_24074 + gtid_27444] =
            res_27513;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27504
}
__kernel void mainDetailedzisegmap_27541(__global int *global_failure,
                                         int64_t N_24054, int64_t m_24055,
                                         int32_t k2p2zq_24072,
                                         int64_t res_24074,
                                         int64_t num_groups_27560, __global
                                         unsigned char *mem_36754, __global
                                         unsigned char *mem_37068, __global
                                         unsigned char *mem_37071, __global
                                         unsigned char *mem_37086)
{
    #define segmap_group_sizze_27559 (mainDetailedzisegmap_group_sizze_27543)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38223;
    int32_t local_tid_38224;
    int64_t group_sizze_38227;
    int32_t wave_sizze_38226;
    int32_t group_tid_38225;
    
    global_tid_38223 = get_global_id(0);
    local_tid_38224 = get_local_id(0);
    group_sizze_38227 = get_local_size(0);
    wave_sizze_38226 = LOCKSTEP_WIDTH;
    group_tid_38225 = get_group_id(0);
    
    int32_t phys_tid_27541;
    
    phys_tid_27541 = global_tid_38223;
    
    int32_t phys_group_id_38228;
    
    phys_group_id_38228 = get_group_id(0);
    for (int32_t i_38229 = 0; i_38229 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055, segmap_group_sizze_27559)) -
                   phys_group_id_38228, sext_i64_i32(num_groups_27560));
         i_38229++) {
        int32_t virt_group_id_38230 = phys_group_id_38228 + i_38229 *
                sext_i64_i32(num_groups_27560);
        int64_t gtid_27540 = sext_i32_i64(virt_group_id_38230) *
                segmap_group_sizze_27559 + sext_i32_i64(local_tid_38224);
        
        if (slt64(gtid_27540, m_24055)) {
            for (int64_t i_36639 = 0; i_36639 < N_24054; i_36639++) {
                float res_27566;
                float redout_36641 = 0.0F;
                
                for (int32_t i_36724 = 0; i_36724 < k2p2zq_24072; i_36724++) {
                    int64_t i_36642 = sext_i32_i64(i_36724);
                    float x_27570 = ((__global float *) mem_37068)[i_36642 *
                                                                   m_24055 +
                                                                   gtid_27540];
                    float x_27571 = ((__global float *) mem_36754)[i_36639 *
                                                                   res_24074 +
                                                                   i_36642];
                    float res_27572 = x_27570 * x_27571;
                    float res_27569 = res_27572 + redout_36641;
                    float redout_tmp_38232 = res_27569;
                    
                    redout_36641 = redout_tmp_38232;
                }
                res_27566 = redout_36641;
                ((__global float *) mem_37071)[phys_tid_27541 + i_36639 *
                                               (num_groups_27560 *
                                                segmap_group_sizze_27559)] =
                    res_27566;
            }
            for (int64_t i_38233 = 0; i_38233 < N_24054; i_38233++) {
                ((__global float *) mem_37086)[i_38233 * m_24055 + gtid_27540] =
                    ((__global float *) mem_37071)[phys_tid_27541 + i_38233 *
                                                   (num_groups_27560 *
                                                    segmap_group_sizze_27559)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27559
}
__kernel void mainDetailedzisegmap_27821(__global int *global_failure,
                                         int64_t N_24054, int64_t m_24055,
                                         __global unsigned char *mem_37162,
                                         __global unsigned char *mem_37165,
                                         __global unsigned char *mem_37188,
                                         __global unsigned char *mem_37191)
{
    #define segmap_group_sizze_27987 (mainDetailedzisegmap_group_sizze_27824)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38406;
    int32_t local_tid_38407;
    int64_t group_sizze_38410;
    int32_t wave_sizze_38409;
    int32_t group_tid_38408;
    
    global_tid_38406 = get_global_id(0);
    local_tid_38407 = get_local_id(0);
    group_sizze_38410 = get_local_size(0);
    wave_sizze_38409 = LOCKSTEP_WIDTH;
    group_tid_38408 = get_group_id(0);
    
    int32_t phys_tid_27821;
    
    phys_tid_27821 = global_tid_38406;
    
    int64_t gtid_27819;
    
    gtid_27819 = squot64(sext_i32_i64(group_tid_38408) *
                         segmap_group_sizze_27987 +
                         sext_i32_i64(local_tid_38407), N_24054);
    
    int64_t gtid_27820;
    
    gtid_27820 = sext_i32_i64(group_tid_38408) * segmap_group_sizze_27987 +
        sext_i32_i64(local_tid_38407) - squot64(sext_i32_i64(group_tid_38408) *
                                                segmap_group_sizze_27987 +
                                                sext_i32_i64(local_tid_38407),
                                                N_24054) * N_24054;
    if (slt64(gtid_27819, m_24055) && slt64(gtid_27820, N_24054)) {
        float x_27995 = ((__global float *) mem_37191)[gtid_27819 * N_24054 +
                                                       gtid_27820];
        int32_t index_primexp_35436 = sext_i64_i32(gtid_27820);
        bool res_27998;
        
        res_27998 = futrts_isnan32(x_27995);
        
        bool res_27999 = !res_27998;
        int64_t res_28000;
        
        if (res_27999) {
            int64_t x_27996 = ((__global int64_t *) mem_37188)[gtid_27819 *
                                                               N_24054 +
                                                               gtid_27820];
            int64_t res_28001 = sub64(x_27996, 1);
            
            res_28000 = res_28001;
        } else {
            res_28000 = -1;
        }
        if ((sle64(0, gtid_27819) && slt64(gtid_27819, m_24055)) && (sle64(0,
                                                                           res_28000) &&
                                                                     slt64(res_28000,
                                                                           N_24054))) {
            ((__global int32_t *) mem_37165)[gtid_27819 * N_24054 + res_28000] =
                index_primexp_35436;
        }
        if ((sle64(0, gtid_27819) && slt64(gtid_27819, m_24055)) && (sle64(0,
                                                                           res_28000) &&
                                                                     slt64(res_28000,
                                                                           N_24054))) {
            ((__global float *) mem_37162)[gtid_27819 * N_24054 + res_28000] =
                x_27995;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27987
}
__kernel void mainDetailedzisegmap_27897(__global int *global_failure,
                                         int64_t N_24054, int64_t m_24055,
                                         int64_t i_24321, __global
                                         unsigned char *mem_37188, __global
                                         unsigned char *mem_37194)
{
    #define segmap_group_sizze_27951 (mainDetailedzisegmap_group_sizze_27899)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38401;
    int32_t local_tid_38402;
    int64_t group_sizze_38405;
    int32_t wave_sizze_38404;
    int32_t group_tid_38403;
    
    global_tid_38401 = get_global_id(0);
    local_tid_38402 = get_local_id(0);
    group_sizze_38405 = get_local_size(0);
    wave_sizze_38404 = LOCKSTEP_WIDTH;
    group_tid_38403 = get_group_id(0);
    
    int32_t phys_tid_27897;
    
    phys_tid_27897 = global_tid_38401;
    
    int64_t gtid_27896;
    
    gtid_27896 = sext_i32_i64(group_tid_38403) * segmap_group_sizze_27951 +
        sext_i32_i64(local_tid_38402);
    if (slt64(gtid_27896, m_24055)) {
        int64_t res_27955 = ((__global int64_t *) mem_37188)[gtid_27896 *
                                                             N_24054 + i_24321];
        int32_t res_27956 = sext_i64_i32(res_27955);
        
        ((__global int32_t *) mem_37194)[gtid_27896] = res_27956;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27951
}
__kernel void mainDetailedzisegmap_28148(__global int *global_failure,
                                         int64_t m_24055, float hfrac_24061,
                                         int32_t k2p2_24070, __global
                                         unsigned char *mem_37264, __global
                                         unsigned char *mem_37267, __global
                                         unsigned char *mem_37270, __global
                                         unsigned char *mem_37272)
{
    #define segmap_group_sizze_28233 (mainDetailedzisegmap_group_sizze_28150)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38561;
    int32_t local_tid_38562;
    int64_t group_sizze_38565;
    int32_t wave_sizze_38564;
    int32_t group_tid_38563;
    
    global_tid_38561 = get_global_id(0);
    local_tid_38562 = get_local_id(0);
    group_sizze_38565 = get_local_size(0);
    wave_sizze_38564 = LOCKSTEP_WIDTH;
    group_tid_38563 = get_group_id(0);
    
    int32_t phys_tid_28148;
    
    phys_tid_28148 = global_tid_38561;
    
    int64_t gtid_28147;
    
    gtid_28147 = sext_i32_i64(group_tid_38563) * segmap_group_sizze_28233 +
        sext_i32_i64(local_tid_38562);
    if (slt64(gtid_28147, m_24055)) {
        int32_t res_28237 = ((__global int32_t *) mem_37264)[gtid_28147];
        float res_28238 = ((__global float *) mem_37267)[gtid_28147];
        int32_t r32_arg_28239 = sub32(res_28237, k2p2_24070);
        float res_28240 = sitofp_i32_f32(r32_arg_28239);
        float sqrt_arg_28241 = res_28238 / res_28240;
        float res_28242;
        
        res_28242 = futrts_sqrt32(sqrt_arg_28241);
        
        float res_28243 = sitofp_i32_f32(res_28237);
        float t32_arg_28244 = hfrac_24061 * res_28243;
        int32_t res_28245 = fptosi_f32_i32(t32_arg_28244);
        
        ((__global int32_t *) mem_37270)[gtid_28147] = res_28245;
        ((__global float *) mem_37272)[gtid_28147] = res_28242;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28233
}
__kernel void mainDetailedzisegmap_28419(__global int *global_failure,
                                         float lam_24062,
                                         int64_t iota32_arg_24441,
                                         int32_t x_24446, float res_24449,
                                         __global
                                         unsigned char *mappingindices_mem_36737,
                                         __global unsigned char *mem_37330,
                                         __global unsigned char *mem_37332)
{
    #define segmap_group_sizze_28438 (mainDetailedzisegmap_group_sizze_28421)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38671;
    int32_t local_tid_38672;
    int64_t group_sizze_38675;
    int32_t wave_sizze_38674;
    int32_t group_tid_38673;
    
    global_tid_38671 = get_global_id(0);
    local_tid_38672 = get_local_id(0);
    group_sizze_38675 = get_local_size(0);
    wave_sizze_38674 = LOCKSTEP_WIDTH;
    group_tid_38673 = get_group_id(0);
    
    int32_t phys_tid_28419;
    
    phys_tid_28419 = global_tid_38671;
    
    int64_t gtid_28418;
    
    gtid_28418 = sext_i32_i64(group_tid_38673) * segmap_group_sizze_28438 +
        sext_i32_i64(local_tid_38672);
    if (slt64(gtid_28418, iota32_arg_24441)) {
        int32_t res_28443 = sext_i64_i32(gtid_28418);
        int32_t t_28444 = add32(x_24446, res_28443);
        int32_t i_28445 = sub32(t_28444, 1);
        int64_t i_28446 = sext_i32_i64(i_28445);
        int32_t time_28447 = ((__global
                               int32_t *) mappingindices_mem_36737)[i_28446];
        float res_28448 = sitofp_i32_f32(time_28447);
        float logplus_arg_28449 = res_28448 / res_24449;
        bool cond_28450 = 2.7182817F < logplus_arg_28449;
        float res_28451;
        
        if (cond_28450) {
            float res_28452;
            
            res_28452 = futrts_log32(logplus_arg_28449);
            res_28451 = res_28452;
        } else {
            res_28451 = 1.0F;
        }
        
        float res_28453;
        
        res_28453 = futrts_sqrt32(res_28451);
        
        float res_28454 = lam_24062 * res_28453;
        
        ((__global int32_t *) mem_37330)[gtid_28418] = res_28443;
        ((__global float *) mem_37332)[gtid_28418] = res_28454;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28438
}
__kernel void mainDetailedzisegmap_28494(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_24054, int64_t m_24055,
                                         int32_t n_24059,
                                         int64_t iota32_arg_24441,
                                         int32_t iters_24467, int64_t i_24469,
                                         int64_t num_groups_28748, __global
                                         unsigned char *res_mem_37196, __global
                                         unsigned char *res_mem_37197, __global
                                         unsigned char *res_mem_37198, __global
                                         unsigned char *res_mem_37276, __global
                                         unsigned char *res_mem_37277, __global
                                         unsigned char *res_mem_37278, __global
                                         unsigned char *res_mem_37327, __global
                                         unsigned char *mem_37332, __global
                                         unsigned char *mem_37338, __global
                                         unsigned char *mem_37352, __global
                                         unsigned char *mem_37371, __global
                                         unsigned char *mem_37373, __global
                                         unsigned char *mem_37375, __global
                                         unsigned char *mem_37377, __global
                                         unsigned char *mem_37379, __global
                                         unsigned char *mem_37441, __global
                                         unsigned char *mem_37460, __global
                                         unsigned char *mem_37475, __global
                                         unsigned char *mem_37478, __global
                                         unsigned char *mem_37480, __global
                                         unsigned char *mem_37482, __global
                                         unsigned char *mem_37484, __global
                                         unsigned char *double_buffer_mem_37711)
{
    #define segmap_group_sizze_28747 (mainDetailedzisegmap_group_sizze_28496)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_38681;
    int32_t local_tid_38682;
    int64_t group_sizze_38685;
    int32_t wave_sizze_38684;
    int32_t group_tid_38683;
    
    global_tid_38681 = get_global_id(0);
    local_tid_38682 = get_local_id(0);
    group_sizze_38685 = get_local_size(0);
    wave_sizze_38684 = LOCKSTEP_WIDTH;
    group_tid_38683 = get_group_id(0);
    
    int32_t phys_tid_28494;
    
    phys_tid_28494 = global_tid_38681;
    
    int32_t phys_group_id_38686;
    
    phys_group_id_38686 = get_group_id(0);
    for (int32_t i_38687 = 0; i_38687 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055, segmap_group_sizze_28747)) -
                   phys_group_id_38686, sext_i64_i32(num_groups_28748));
         i_38687++) {
        int32_t virt_group_id_38688 = phys_group_id_38686 + i_38687 *
                sext_i64_i32(num_groups_28748);
        int64_t gtid_28493 = sext_i32_i64(virt_group_id_38688) *
                segmap_group_sizze_28747 + sext_i32_i64(local_tid_38682);
        
        if (slt64(gtid_28493, m_24055)) {
            int32_t x_28755 = ((__global int32_t *) res_mem_37196)[gtid_28493];
            int32_t x_28756 = ((__global int32_t *) res_mem_37277)[gtid_28493];
            float x_28757 = ((__global float *) res_mem_37278)[gtid_28493];
            int32_t x_28758 = ((__global int32_t *) res_mem_37276)[gtid_28493];
            float x_28759 = ((__global float *) res_mem_37327)[gtid_28493];
            int32_t y_28762 = sub32(x_28755, x_28756);
            float res_28763 = sitofp_i32_f32(x_28756);
            float res_28764;
            
            res_28764 = futrts_sqrt32(res_28763);
            
            float y_28765 = x_28757 * res_28764;
            float inpacc_28766;
            bool res_28767;
            int32_t res_28768;
            float res_28769;
            float inpacc_28772;
            bool inpacc_28773;
            int32_t inpacc_28774;
            float inpacc_28775;
            
            inpacc_28772 = 0.0F;
            inpacc_28773 = 0;
            inpacc_28774 = -1;
            inpacc_28775 = 0.0F;
            for (int64_t i_36593 = 0; i_36593 < iota32_arg_24441; i_36593++) {
                int32_t index_primexp_36600 = sext_i64_i32(i_36593);
                bool cond_28783 = sle32(y_28762, index_primexp_36600);
                float res_28784;
                
                if (cond_28783) {
                    res_28784 = 0.0F;
                } else {
                    bool cond_28785 = index_primexp_36600 == 0;
                    float res_28786;
                    
                    if (cond_28785) {
                        res_28786 = x_28759;
                    } else {
                        int32_t i_28787 = add32(x_28756, index_primexp_36600);
                        int64_t i_28788 = sext_i32_i64(i_28787);
                        float x_28789 = ((__global
                                          float *) res_mem_37197)[gtid_28493 *
                                                                  N_24054 +
                                                                  i_28788];
                        int32_t x_28790 = sub32(x_28756, x_28758);
                        int32_t i_28791 = add32(x_28790, index_primexp_36600);
                        int64_t i_28792 = sext_i32_i64(i_28791);
                        float y_28793 = ((__global
                                          float *) res_mem_37197)[gtid_28493 *
                                                                  N_24054 +
                                                                  i_28792];
                        float res_28794 = x_28789 - y_28793;
                        
                        res_28786 = res_28794;
                    }
                    res_28784 = res_28786;
                }
                
                float res_28799 = inpacc_28772 + res_28784;
                float x_28819 = ((__global float *) mem_37332)[i_36593];
                float res_28822 = res_28799 / y_28765;
                bool cond_28823 = slt32(index_primexp_36600, y_28762);
                bool res_28824;
                
                res_28824 = futrts_isnan32(res_28822);
                
                bool res_28825 = !res_28824;
                bool x_28826 = cond_28823 && res_28825;
                float res_28827 = (float) fabs(res_28822);
                bool res_28828 = x_28819 < res_28827;
                bool x_28829 = x_28826 && res_28828;
                float res_28830;
                
                if (cond_28823) {
                    res_28830 = res_28822;
                } else {
                    res_28830 = 0.0F;
                }
                
                int32_t x_28808 = index_primexp_36600;
                bool x_28812 = x_28829 && x_28829;
                int32_t res_28816;
                
                if (x_28829) {
                    res_28816 = x_28808;
                } else {
                    res_28816 = -1;
                }
                
                bool res_28831;
                int32_t res_28832;
                
                if (inpacc_28773) {
                    res_28831 = inpacc_28773;
                    res_28832 = inpacc_28774;
                } else {
                    bool x_28833 = x_28812 && x_28812;
                    bool x_28834 = !x_28812;
                    bool y_28835 = inpacc_28773 && x_28834;
                    bool res_28836 = x_28833 || y_28835;
                    int32_t res_28837;
                    
                    if (x_28812) {
                        res_28837 = res_28816;
                    } else {
                        res_28837 = inpacc_28774;
                    }
                    res_28831 = res_28836;
                    res_28832 = res_28837;
                }
                
                float res_28838 = inpacc_28775 + res_28830;
                
                ((__global float *) mem_37338)[phys_tid_28494 + i_36593 *
                                               (num_groups_28748 *
                                                segmap_group_sizze_28747)] =
                    res_28822;
                
                float inpacc_tmp_38689 = res_28799;
                bool inpacc_tmp_38690 = res_28831;
                int32_t inpacc_tmp_38691 = res_28832;
                float inpacc_tmp_38692 = res_28838;
                
                inpacc_28772 = inpacc_tmp_38689;
                inpacc_28773 = inpacc_tmp_38690;
                inpacc_28774 = inpacc_tmp_38691;
                inpacc_28775 = inpacc_tmp_38692;
            }
            inpacc_28766 = inpacc_28772;
            res_28767 = inpacc_28773;
            res_28768 = inpacc_28774;
            res_28769 = inpacc_28775;
            
            bool cond_28839 = y_28762 == 0;
            float res_28840;
            
            if (cond_28839) {
                res_28840 = 0.0F;
            } else {
                float res_28841 = sitofp_i32_f32(y_28762);
                float res_28842 = res_28769 / res_28841;
                
                res_28840 = res_28842;
            }
            for (int64_t i_36663 = 0; i_36663 < iota32_arg_24441; i_36663++) {
                int32_t index_primexp_36728 = sext_i64_i32(i_36663);
                bool cond_28845 = slt32(index_primexp_36728, y_28762);
                bool cond_28846;
                
                if (cond_28845) {
                    int32_t i_28847 = add32(x_28756, index_primexp_36728);
                    int64_t i_28848 = sext_i32_i64(i_28847);
                    bool x_28849 = sle64(0, i_28848);
                    bool y_28850 = slt64(i_28848, N_24054);
                    bool bounds_check_28851 = x_28849 && y_28850;
                    bool index_certs_28852;
                    
                    if (!bounds_check_28851) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          17) == -1) {
                                global_failure_args[0] = i_28848;
                                global_failure_args[1] = N_24054;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float isnan_arg_28853 = ((__global
                                              float *) res_mem_37197)[gtid_28493 *
                                                                      N_24054 +
                                                                      i_28848];
                    bool res_28854;
                    
                    res_28854 = futrts_isnan32(isnan_arg_28853);
                    
                    bool res_28855 = !res_28854;
                    
                    cond_28846 = res_28855;
                } else {
                    cond_28846 = 0;
                }
                
                float res_28856;
                
                if (cond_28846) {
                    int32_t i_28857 = add32(x_28756, index_primexp_36728);
                    int64_t i_28858 = sext_i32_i64(i_28857);
                    bool x_28859 = sle64(0, i_28858);
                    bool y_28860 = slt64(i_28858, N_24054);
                    bool bounds_check_28861 = x_28859 && y_28860;
                    bool index_certs_28862;
                    
                    if (!bounds_check_28861) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          18) == -1) {
                                global_failure_args[0] = i_28858;
                                global_failure_args[1] = N_24054;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float res_28863 = ((__global
                                        float *) res_mem_37197)[gtid_28493 *
                                                                N_24054 +
                                                                i_28858];
                    
                    res_28856 = res_28863;
                } else {
                    res_28856 = INFINITY;
                }
                ((__global float *) mem_37352)[phys_tid_28494 + i_36663 *
                                               (num_groups_28748 *
                                                segmap_group_sizze_28747)] =
                    res_28856;
            }
            for (int64_t i_38695 = 0; i_38695 < iota32_arg_24441; i_38695++) {
                ((__global float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                             i_38695 *
                                                             (num_groups_28748 *
                                                              segmap_group_sizze_28747)] =
                    ((__global float *) mem_37352)[phys_tid_28494 + i_38695 *
                                                   (num_groups_28748 *
                                                    segmap_group_sizze_28747)];
            }
            for (int32_t i_28865 = 0; i_28865 < iters_24467; i_28865++) {
                int32_t lifted_2_radix_sort_step_arg_28867 = mul32(2, i_28865);
                int32_t lifted_0_get_bit_arg_28868 = add32(1,
                                                           lifted_2_radix_sort_step_arg_28867);
                bool res_28869 = lifted_0_get_bit_arg_28868 == 31;
                bool res_28870 = lifted_2_radix_sort_step_arg_28867 == 31;
                int64_t discard_36685;
                int64_t discard_36686;
                int64_t discard_36687;
                int64_t discard_36688;
                int64_t scanacc_36670;
                int64_t scanacc_36671;
                int64_t scanacc_36672;
                int64_t scanacc_36673;
                
                scanacc_36670 = 0;
                scanacc_36671 = 0;
                scanacc_36672 = 0;
                scanacc_36673 = 0;
                for (int64_t i_36679 = 0; i_36679 < iota32_arg_24441;
                     i_36679++) {
                    float x_28888 = ((__global
                                      float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                                        i_36679 *
                                                                        (num_groups_28748 *
                                                                         segmap_group_sizze_28747)];
                    int32_t i32_arg_28889;
                    
                    i32_arg_28889 = futrts_to_bits32(x_28888);
                    
                    int32_t unsign_arg_28890 = ashr32(i32_arg_28889,
                                                      lifted_0_get_bit_arg_28868);
                    int32_t unsign_arg_28891 = 1 & unsign_arg_28890;
                    int32_t unsign_arg_28892 = ashr32(i32_arg_28889, 31);
                    int32_t unsign_arg_28893 = 1 & unsign_arg_28892;
                    bool cond_28894 = unsign_arg_28893 == 1;
                    bool x_28895 = !cond_28894;
                    bool y_28896 = res_28869 && x_28895;
                    bool cond_28897 = cond_28894 || y_28896;
                    int32_t res_28898;
                    
                    if (cond_28897) {
                        int32_t res_28899 = 1 ^ unsign_arg_28891;
                        
                        res_28898 = res_28899;
                    } else {
                        res_28898 = unsign_arg_28891;
                    }
                    
                    int32_t x_28900 = mul32(2, res_28898);
                    int32_t unsign_arg_28901 = ashr32(i32_arg_28889,
                                                      lifted_2_radix_sort_step_arg_28867);
                    int32_t unsign_arg_28902 = 1 & unsign_arg_28901;
                    bool y_28903 = res_28870 && x_28895;
                    bool cond_28904 = cond_28894 || y_28903;
                    int32_t res_28905;
                    
                    if (cond_28904) {
                        int32_t res_28906 = 1 ^ unsign_arg_28902;
                        
                        res_28905 = res_28906;
                    } else {
                        res_28905 = unsign_arg_28902;
                    }
                    
                    int32_t res_28907 = add32(x_28900, res_28905);
                    bool cond_28908 = res_28907 == 0;
                    int64_t res_28909 = btoi_bool_i64(cond_28908);
                    int64_t res_28910;
                    int64_t res_28911;
                    int64_t res_28912;
                    
                    if (cond_28908) {
                        res_28910 = 0;
                        res_28911 = 0;
                        res_28912 = 0;
                    } else {
                        bool cond_28913 = res_28907 == 1;
                        int64_t res_28914 = btoi_bool_i64(cond_28913);
                        int64_t res_28915;
                        int64_t res_28916;
                        
                        if (cond_28913) {
                            res_28915 = 0;
                            res_28916 = 0;
                        } else {
                            bool cond_28917 = res_28907 == 2;
                            int64_t res_28918 = btoi_bool_i64(cond_28917);
                            bool cond_neg_28919 = !cond_28917;
                            int64_t res_28920 = btoi_bool_i64(cond_neg_28919);
                            
                            res_28915 = res_28918;
                            res_28916 = res_28920;
                        }
                        res_28910 = res_28914;
                        res_28911 = res_28915;
                        res_28912 = res_28916;
                    }
                    
                    int64_t res_28884 = add64(res_28909, scanacc_36670);
                    int64_t res_28885 = add64(res_28910, scanacc_36671);
                    int64_t res_28886 = add64(res_28911, scanacc_36672);
                    int64_t res_28887 = add64(res_28912, scanacc_36673);
                    
                    ((__global int64_t *) mem_37371)[phys_tid_28494 + i_36679 *
                                                     (num_groups_28748 *
                                                      segmap_group_sizze_28747)] =
                        res_28884;
                    ((__global int64_t *) mem_37373)[phys_tid_28494 + i_36679 *
                                                     (num_groups_28748 *
                                                      segmap_group_sizze_28747)] =
                        res_28885;
                    ((__global int64_t *) mem_37375)[phys_tid_28494 + i_36679 *
                                                     (num_groups_28748 *
                                                      segmap_group_sizze_28747)] =
                        res_28886;
                    ((__global int64_t *) mem_37377)[phys_tid_28494 + i_36679 *
                                                     (num_groups_28748 *
                                                      segmap_group_sizze_28747)] =
                        res_28887;
                    ((__global int32_t *) mem_37379)[phys_tid_28494 + i_36679 *
                                                     (num_groups_28748 *
                                                      segmap_group_sizze_28747)] =
                        res_28907;
                    
                    int64_t scanacc_tmp_38697 = res_28884;
                    int64_t scanacc_tmp_38698 = res_28885;
                    int64_t scanacc_tmp_38699 = res_28886;
                    int64_t scanacc_tmp_38700 = res_28887;
                    
                    scanacc_36670 = scanacc_tmp_38697;
                    scanacc_36671 = scanacc_tmp_38698;
                    scanacc_36672 = scanacc_tmp_38699;
                    scanacc_36673 = scanacc_tmp_38700;
                }
                discard_36685 = scanacc_36670;
                discard_36686 = scanacc_36671;
                discard_36687 = scanacc_36672;
                discard_36688 = scanacc_36673;
                
                int64_t res_28921 = ((__global
                                      int64_t *) mem_37371)[phys_tid_28494 +
                                                            i_24469 *
                                                            (num_groups_28748 *
                                                             segmap_group_sizze_28747)];
                int64_t res_28922 = ((__global
                                      int64_t *) mem_37373)[phys_tid_28494 +
                                                            i_24469 *
                                                            (num_groups_28748 *
                                                             segmap_group_sizze_28747)];
                int64_t res_28923 = ((__global
                                      int64_t *) mem_37375)[phys_tid_28494 +
                                                            i_24469 *
                                                            (num_groups_28748 *
                                                             segmap_group_sizze_28747)];
                
                for (int64_t i_38706 = 0; i_38706 < iota32_arg_24441;
                     i_38706++) {
                    ((__global float *) mem_37441)[phys_tid_28494 + i_38706 *
                                                   (num_groups_28748 *
                                                    segmap_group_sizze_28747)] =
                        ((__global
                          float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                            i_38706 *
                                                            (num_groups_28748 *
                                                             segmap_group_sizze_28747)];
                }
                for (int64_t write_iter_36689 = 0; write_iter_36689 <
                     iota32_arg_24441; write_iter_36689++) {
                    int32_t write_iv_36691 = ((__global
                                               int32_t *) mem_37379)[phys_tid_28494 +
                                                                     write_iter_36689 *
                                                                     (num_groups_28748 *
                                                                      segmap_group_sizze_28747)];
                    bool match_lit_28932 = 0 == write_iv_36691;
                    int64_t res_28933;
                    
                    if (match_lit_28932) {
                        int64_t write_iv_36692 = ((__global
                                                   int64_t *) mem_37371)[phys_tid_28494 +
                                                                         write_iter_36689 *
                                                                         (num_groups_28748 *
                                                                          segmap_group_sizze_28747)];
                        int64_t res_28934 = sub64(write_iv_36692, 1);
                        
                        res_28933 = res_28934;
                    } else {
                        int64_t write_iv_36693 = ((__global
                                                   int64_t *) mem_37373)[phys_tid_28494 +
                                                                         write_iter_36689 *
                                                                         (num_groups_28748 *
                                                                          segmap_group_sizze_28747)];
                        int64_t write_iv_36694 = ((__global
                                                   int64_t *) mem_37375)[phys_tid_28494 +
                                                                         write_iter_36689 *
                                                                         (num_groups_28748 *
                                                                          segmap_group_sizze_28747)];
                        int64_t write_iv_36695 = ((__global
                                                   int64_t *) mem_37377)[phys_tid_28494 +
                                                                         write_iter_36689 *
                                                                         (num_groups_28748 *
                                                                          segmap_group_sizze_28747)];
                        bool match_lit_28935 = 1 == write_iv_36691;
                        int64_t x_28936;
                        
                        if (match_lit_28935) {
                            int64_t x_28937 = add64(res_28921, write_iv_36693);
                            int64_t res_28938 = sub64(x_28937, 1);
                            
                            x_28936 = res_28938;
                        } else {
                            bool match_lit_28939 = 2 == write_iv_36691;
                            int64_t x_28940;
                            
                            if (match_lit_28939) {
                                int64_t x_28941 = add64(res_28921, res_28922);
                                int64_t x_28942 = add64(x_28941,
                                                        write_iv_36694);
                                int64_t res_28943 = sub64(x_28942, 1);
                                
                                x_28940 = res_28943;
                            } else {
                                int64_t x_28944 = add64(res_28921, res_28922);
                                int64_t x_28945 = add64(res_28923, x_28944);
                                int64_t x_28946 = add64(x_28945,
                                                        write_iv_36695);
                                int64_t res_28947 = sub64(x_28946, 1);
                                
                                x_28940 = res_28947;
                            }
                            x_28936 = x_28940;
                        }
                        res_28933 = x_28936;
                    }
                    
                    bool less_than_zzero_36697 = slt64(res_28933, 0);
                    bool greater_than_sizze_36698 = sle64(iota32_arg_24441,
                                                          res_28933);
                    bool outside_bounds_dim_36699 = less_than_zzero_36697 ||
                         greater_than_sizze_36698;
                    
                    if (!outside_bounds_dim_36699) {
                        for (int64_t i_38708 = 0; i_38708 < 1; i_38708++) {
                            ((__global float *) mem_37441)[phys_tid_28494 +
                                                           (res_28933 +
                                                            i_38708) *
                                                           (num_groups_28748 *
                                                            segmap_group_sizze_28747)] =
                                ((__global
                                  float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                                    num_groups_28748 *
                                                                    segmap_group_sizze_28747 *
                                                                    write_iter_36689 +
                                                                    i_38708 *
                                                                    (num_groups_28748 *
                                                                     segmap_group_sizze_28747)];
                        }
                    }
                }
                for (int64_t i_38709 = 0; i_38709 < iota32_arg_24441;
                     i_38709++) {
                    ((__global
                      float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                        i_38709 *
                                                        (num_groups_28748 *
                                                         segmap_group_sizze_28747)] =
                        ((__global float *) mem_37441)[phys_tid_28494 +
                                                       i_38709 *
                                                       (num_groups_28748 *
                                                        segmap_group_sizze_28747)];
                }
            }
            
            int32_t i_28948 = sdiv32(y_28762, 2);
            int32_t j_28949 = sub32(i_28948, 1);
            bool cond_28950 = x_28755 == x_28756;
            float res_28951;
            
            if (cond_28950) {
                res_28951 = 0.0F;
            } else {
                int32_t x_28952 = smod32(y_28762, 2);
                bool cond_28953 = x_28952 == 0;
                float res_28954;
                
                if (cond_28953) {
                    int64_t j_28955 = sext_i32_i64(j_28949);
                    bool x_28956 = sle64(0, j_28955);
                    bool y_28957 = slt64(j_28955, iota32_arg_24441);
                    bool bounds_check_28958 = x_28956 && y_28957;
                    bool index_certs_28959;
                    
                    if (!bounds_check_28958) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          19) == -1) {
                                global_failure_args[0] = j_28955;
                                global_failure_args[1] = iota32_arg_24441;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float x_28960 = ((__global
                                      float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                                        j_28955 *
                                                                        (num_groups_28748 *
                                                                         segmap_group_sizze_28747)];
                    int64_t i_28961 = sext_i32_i64(i_28948);
                    bool x_28962 = sle64(0, i_28961);
                    bool y_28963 = slt64(i_28961, iota32_arg_24441);
                    bool bounds_check_28964 = x_28962 && y_28963;
                    bool index_certs_28965;
                    
                    if (!bounds_check_28964) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          20) == -1) {
                                global_failure_args[0] = i_28961;
                                global_failure_args[1] = iota32_arg_24441;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float y_28966 = ((__global
                                      float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                                        i_28961 *
                                                                        (num_groups_28748 *
                                                                         segmap_group_sizze_28747)];
                    float x_28967 = x_28960 + y_28966;
                    float res_28968 = x_28967 / 2.0F;
                    
                    res_28954 = res_28968;
                } else {
                    int64_t i_28969 = sext_i32_i64(i_28948);
                    bool x_28970 = sle64(0, i_28969);
                    bool y_28971 = slt64(i_28969, iota32_arg_24441);
                    bool bounds_check_28972 = x_28970 && y_28971;
                    bool index_certs_28973;
                    
                    if (!bounds_check_28972) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          21) == -1) {
                                global_failure_args[0] = i_28969;
                                global_failure_args[1] = iota32_arg_24441;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float res_28974 = ((__global
                                        float *) double_buffer_mem_37711)[phys_tid_28494 +
                                                                          i_28969 *
                                                                          (num_groups_28748 *
                                                                           segmap_group_sizze_28747)];
                    
                    res_28954 = res_28974;
                }
                res_28951 = res_28954;
            }
            
            bool cond_28975 = !res_28767;
            int32_t fst_breakzq_28976;
            
            if (cond_28975) {
                fst_breakzq_28976 = -1;
            } else {
                bool cond_28977 = slt32(res_28768, y_28762);
                int32_t res_28978;
                
                if (cond_28977) {
                    int32_t i_28979 = add32(x_28756, res_28768);
                    int64_t i_28980 = sext_i32_i64(i_28979);
                    int32_t x_28981 = ((__global
                                        int32_t *) res_mem_37198)[gtid_28493 *
                                                                  N_24054 +
                                                                  i_28980];
                    int32_t res_28982 = sub32(x_28981, n_24059);
                    
                    res_28978 = res_28982;
                } else {
                    res_28978 = -1;
                }
                fst_breakzq_28976 = res_28978;
            }
            
            bool cond_28983 = sle32(x_28756, 5);
            bool res_28984 = sle32(y_28762, 5);
            bool x_28985 = !cond_28983;
            bool y_28986 = res_28984 && x_28985;
            bool cond_28987 = cond_28983 || y_28986;
            int32_t fst_breakzq_28988;
            
            if (cond_28987) {
                fst_breakzq_28988 = -2;
            } else {
                fst_breakzq_28988 = fst_breakzq_28976;
            }
            for (int64_t i_38710 = 0; i_38710 < iota32_arg_24441; i_38710++) {
                ((__global float *) mem_37460)[phys_tid_28494 + i_38710 *
                                               (num_groups_28748 *
                                                segmap_group_sizze_28747)] =
                    NAN;
            }
            for (int64_t write_iter_36703 = 0; write_iter_36703 <
                 iota32_arg_24441; write_iter_36703++) {
                int32_t index_primexp_36731 = sext_i64_i32(write_iter_36703);
                bool cond_28993 = slt32(index_primexp_36731, y_28762);
                int32_t res_28994;
                
                if (cond_28993) {
                    int32_t i_28995 = add32(x_28756, index_primexp_36731);
                    int64_t i_28996 = sext_i32_i64(i_28995);
                    int32_t x_28997 = ((__global
                                        int32_t *) res_mem_37198)[gtid_28493 *
                                                                  N_24054 +
                                                                  i_28996];
                    int32_t res_28998 = sub32(x_28997, n_24059);
                    
                    res_28994 = res_28998;
                } else {
                    res_28994 = -1;
                }
                
                int64_t res_28999 = sext_i32_i64(res_28994);
                bool less_than_zzero_36707 = slt64(res_28999, 0);
                bool greater_than_sizze_36708 = sle64(iota32_arg_24441,
                                                      res_28999);
                bool outside_bounds_dim_36709 = less_than_zzero_36707 ||
                     greater_than_sizze_36708;
                
                if (!outside_bounds_dim_36709) {
                    for (int64_t i_38712 = 0; i_38712 < 1; i_38712++) {
                        ((__global float *) mem_37460)[phys_tid_28494 +
                                                       (res_28999 + i_38712) *
                                                       (num_groups_28748 *
                                                        segmap_group_sizze_28747)] =
                            ((__global float *) mem_37338)[phys_tid_28494 +
                                                           num_groups_28748 *
                                                           segmap_group_sizze_28747 *
                                                           write_iter_36703 +
                                                           i_38712 *
                                                           (num_groups_28748 *
                                                            segmap_group_sizze_28747)];
                    }
                }
            }
            for (int64_t i_38713 = 0; i_38713 < iota32_arg_24441; i_38713++) {
                ((__global float *) mem_37475)[i_38713 * m_24055 + gtid_28493] =
                    ((__global float *) mem_37460)[phys_tid_28494 + i_38713 *
                                                   (num_groups_28748 *
                                                    segmap_group_sizze_28747)];
            }
            for (int64_t i_38714 = 0; i_38714 < iota32_arg_24441; i_38714++) {
                ((__global float *) mem_37478)[i_38714 * m_24055 + gtid_28493] =
                    ((__global float *) mem_37338)[phys_tid_28494 + i_38714 *
                                                   (num_groups_28748 *
                                                    segmap_group_sizze_28747)];
            }
            ((__global int32_t *) mem_37480)[gtid_28493] = fst_breakzq_28988;
            ((__global float *) mem_37482)[gtid_28493] = res_28840;
            ((__global float *) mem_37484)[gtid_28493] = res_28951;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28747
}
__kernel void mainDetailedzisegmap_29259(__global int *global_failure,
                                         int64_t N_24054, int64_t m_24055,
                                         int32_t n_24059,
                                         int64_t iota32_arg_24441, __global
                                         unsigned char *res_mem_37198, __global
                                         unsigned char *res_mem_37277, __global
                                         unsigned char *mem_37335, __global
                                         unsigned char *mem_37542, __global
                                         unsigned char *mem_37556)
{
    #define segmap_group_sizze_30551 (mainDetailedzisegmap_group_sizze_29262)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39078;
    int32_t local_tid_39079;
    int64_t group_sizze_39082;
    int32_t wave_sizze_39081;
    int32_t group_tid_39080;
    
    global_tid_39078 = get_global_id(0);
    local_tid_39079 = get_local_id(0);
    group_sizze_39082 = get_local_size(0);
    wave_sizze_39081 = LOCKSTEP_WIDTH;
    group_tid_39080 = get_group_id(0);
    
    int32_t phys_tid_29259;
    
    phys_tid_29259 = global_tid_39078;
    
    int64_t gtid_29257;
    
    gtid_29257 = squot64(sext_i32_i64(group_tid_39080) *
                         segmap_group_sizze_30551 +
                         sext_i32_i64(local_tid_39079), iota32_arg_24441);
    
    int64_t gtid_29258;
    
    gtid_29258 = sext_i32_i64(group_tid_39080) * segmap_group_sizze_30551 +
        sext_i32_i64(local_tid_39079) - squot64(sext_i32_i64(group_tid_39080) *
                                                segmap_group_sizze_30551 +
                                                sext_i32_i64(local_tid_39079),
                                                iota32_arg_24441) *
        iota32_arg_24441;
    if (slt64(gtid_29257, m_24055) && slt64(gtid_29258, iota32_arg_24441)) {
        int32_t y_30556 = ((__global int32_t *) mem_37542)[gtid_29257];
        int32_t index_primexp_35475 = sext_i64_i32(gtid_29258);
        float write_value_30560 = ((__global float *) mem_37556)[gtid_29257 *
                                                                 iota32_arg_24441 +
                                                                 gtid_29258];
        bool cond_30561 = slt32(index_primexp_35475, y_30556);
        int32_t res_30562;
        
        if (cond_30561) {
            int32_t x_30554 = ((__global int32_t *) res_mem_37277)[gtid_29257];
            int32_t i_30563 = add32(x_30554, index_primexp_35475);
            int64_t i_30564 = sext_i32_i64(i_30563);
            int32_t x_30565 = ((__global int32_t *) res_mem_37198)[gtid_29257 *
                                                                   N_24054 +
                                                                   i_30564];
            int32_t res_30566 = sub32(x_30565, n_24059);
            
            res_30562 = res_30566;
        } else {
            res_30562 = -1;
        }
        
        int64_t res_30567 = sext_i32_i64(res_30562);
        
        if ((sle64(0, gtid_29257) && slt64(gtid_29257, m_24055)) && (sle64(0,
                                                                           res_30567) &&
                                                                     slt64(res_30567,
                                                                           iota32_arg_24441))) {
            ((__global float *) mem_37335)[gtid_29257 * iota32_arg_24441 +
                                           res_30567] = write_value_30560;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30551
}
__kernel void mainDetailedzisegmap_29312(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_24054, int64_t m_24055,
                                         int32_t n_24059,
                                         int64_t iota32_arg_24441, __global
                                         unsigned char *res_mem_37196, __global
                                         unsigned char *res_mem_37198, __global
                                         unsigned char *res_mem_37277, __global
                                         unsigned char *mem_37542, __global
                                         unsigned char *mem_37559, __global
                                         unsigned char *mem_37561, __global
                                         unsigned char *res_r_mem_37630,
                                         __global unsigned char *mem_37633,
                                         __global unsigned char *mem_37635)
{
    #define segmap_group_sizze_30483 (mainDetailedzisegmap_group_sizze_29314)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39073;
    int32_t local_tid_39074;
    int64_t group_sizze_39077;
    int32_t wave_sizze_39076;
    int32_t group_tid_39075;
    
    global_tid_39073 = get_global_id(0);
    local_tid_39074 = get_local_id(0);
    group_sizze_39077 = get_local_size(0);
    wave_sizze_39076 = LOCKSTEP_WIDTH;
    group_tid_39075 = get_group_id(0);
    
    int32_t phys_tid_29312;
    
    phys_tid_29312 = global_tid_39073;
    
    int64_t gtid_29311;
    
    gtid_29311 = sext_i32_i64(group_tid_39075) * segmap_group_sizze_30483 +
        sext_i32_i64(local_tid_39074);
    if (slt64(gtid_29311, m_24055)) {
        int32_t x_30487 = ((__global int32_t *) res_mem_37196)[gtid_29311];
        int32_t x_30488 = ((__global int32_t *) res_mem_37277)[gtid_29311];
        int32_t y_30490 = ((__global int32_t *) mem_37542)[gtid_29311];
        bool res_30491 = ((__global bool *) mem_37559)[gtid_29311];
        int32_t i_30494 = sdiv32(y_30490, 2);
        int32_t j_30495 = sub32(i_30494, 1);
        bool cond_30496 = x_30487 == x_30488;
        float res_30497;
        
        if (cond_30496) {
            res_30497 = 0.0F;
        } else {
            int32_t x_30498 = smod32(y_30490, 2);
            bool cond_30499 = x_30498 == 0;
            float res_30500;
            
            if (cond_30499) {
                int64_t j_30501 = sext_i32_i64(j_30495);
                bool x_30502 = sle64(0, j_30501);
                bool y_30503 = slt64(j_30501, iota32_arg_24441);
                bool bounds_check_30504 = x_30502 && y_30503;
                bool index_certs_30505;
                
                if (!bounds_check_30504) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 29) ==
                            -1) {
                            global_failure_args[0] = j_30501;
                            global_failure_args[1] = iota32_arg_24441;
                            ;
                        }
                        return;
                    }
                }
                
                float x_30506 = ((__global
                                  float *) res_r_mem_37630)[gtid_29311 *
                                                            iota32_arg_24441 +
                                                            j_30501];
                int64_t i_30507 = sext_i32_i64(i_30494);
                bool x_30508 = sle64(0, i_30507);
                bool y_30509 = slt64(i_30507, iota32_arg_24441);
                bool bounds_check_30510 = x_30508 && y_30509;
                bool index_certs_30511;
                
                if (!bounds_check_30510) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 30) ==
                            -1) {
                            global_failure_args[0] = i_30507;
                            global_failure_args[1] = iota32_arg_24441;
                            ;
                        }
                        return;
                    }
                }
                
                float y_30512 = ((__global
                                  float *) res_r_mem_37630)[gtid_29311 *
                                                            iota32_arg_24441 +
                                                            i_30507];
                float x_30513 = x_30506 + y_30512;
                float res_30514 = x_30513 / 2.0F;
                
                res_30500 = res_30514;
            } else {
                int64_t i_30515 = sext_i32_i64(i_30494);
                bool x_30516 = sle64(0, i_30515);
                bool y_30517 = slt64(i_30515, iota32_arg_24441);
                bool bounds_check_30518 = x_30516 && y_30517;
                bool index_certs_30519;
                
                if (!bounds_check_30518) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 31) ==
                            -1) {
                            global_failure_args[0] = i_30515;
                            global_failure_args[1] = iota32_arg_24441;
                            ;
                        }
                        return;
                    }
                }
                
                float res_30520 = ((__global
                                    float *) res_r_mem_37630)[gtid_29311 *
                                                              iota32_arg_24441 +
                                                              i_30515];
                
                res_30500 = res_30520;
            }
            res_30497 = res_30500;
        }
        
        bool cond_30521 = !res_30491;
        int32_t fst_breakzq_30522;
        
        if (cond_30521) {
            fst_breakzq_30522 = -1;
        } else {
            int32_t res_30492 = ((__global int32_t *) mem_37561)[gtid_29311];
            bool cond_30523 = slt32(res_30492, y_30490);
            int32_t res_30524;
            
            if (cond_30523) {
                int32_t i_30525 = add32(x_30488, res_30492);
                int64_t i_30526 = sext_i32_i64(i_30525);
                int32_t x_30527 = ((__global
                                    int32_t *) res_mem_37198)[gtid_29311 *
                                                              N_24054 +
                                                              i_30526];
                int32_t res_30528 = sub32(x_30527, n_24059);
                
                res_30524 = res_30528;
            } else {
                res_30524 = -1;
            }
            fst_breakzq_30522 = res_30524;
        }
        
        bool cond_30529 = sle32(x_30488, 5);
        bool res_30530 = sle32(y_30490, 5);
        bool x_30531 = !cond_30529;
        bool y_30532 = res_30530 && x_30531;
        bool cond_30533 = cond_30529 || y_30532;
        int32_t fst_breakzq_30534;
        
        if (cond_30533) {
            fst_breakzq_30534 = -2;
        } else {
            fst_breakzq_30534 = fst_breakzq_30522;
        }
        ((__global int32_t *) mem_37633)[gtid_29311] = fst_breakzq_30534;
        ((__global float *) mem_37635)[gtid_29311] = res_30497;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30483
}
__kernel void mainDetailedzisegmap_29641(__global int *global_failure,
                                         int64_t m_24055,
                                         int64_t iota32_arg_24441,
                                         int64_t i_24469, __global
                                         unsigned char *mem_param_37576,
                                         __global unsigned char *mem_37603,
                                         __global unsigned char *mem_37606,
                                         __global unsigned char *mem_37609,
                                         __global unsigned char *mem_37612,
                                         __global unsigned char *mem_37615,
                                         __global unsigned char *mem_37618)
{
    #define segmap_group_sizze_30446 (mainDetailedzisegmap_group_sizze_29644)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_39067;
    int32_t local_tid_39068;
    int64_t group_sizze_39071;
    int32_t wave_sizze_39070;
    int32_t group_tid_39069;
    
    global_tid_39067 = get_global_id(0);
    local_tid_39068 = get_local_id(0);
    group_sizze_39071 = get_local_size(0);
    wave_sizze_39070 = LOCKSTEP_WIDTH;
    group_tid_39069 = get_group_id(0);
    
    int32_t phys_tid_29641;
    
    phys_tid_29641 = global_tid_39067;
    
    int64_t gtid_29639;
    
    gtid_29639 = squot64(sext_i32_i64(group_tid_39069) *
                         segmap_group_sizze_30446 +
                         sext_i32_i64(local_tid_39068), iota32_arg_24441);
    
    int64_t gtid_29640;
    
    gtid_29640 = sext_i32_i64(group_tid_39069) * segmap_group_sizze_30446 +
        sext_i32_i64(local_tid_39068) - squot64(sext_i32_i64(group_tid_39069) *
                                                segmap_group_sizze_30446 +
                                                sext_i32_i64(local_tid_39068),
                                                iota32_arg_24441) *
        iota32_arg_24441;
    if (slt64(gtid_29639, m_24055) && slt64(gtid_29640, iota32_arg_24441)) {
        int32_t x_30459 = ((__global int32_t *) mem_37615)[gtid_29639 *
                                                           iota32_arg_24441 +
                                                           gtid_29640];
        float write_value_30464 = ((__global
                                    float *) mem_param_37576)[gtid_29639 *
                                                              iota32_arg_24441 +
                                                              gtid_29640];
        bool match_lit_30465 = 0 == x_30459;
        int64_t res_30466;
        
        if (match_lit_30465) {
            int64_t x_30460 = ((__global int64_t *) mem_37603)[gtid_29639 *
                                                               iota32_arg_24441 +
                                                               gtid_29640];
            int64_t res_30467 = sub64(x_30460, 1);
            
            res_30466 = res_30467;
        } else {
            int64_t res_30455 = ((__global int64_t *) mem_37603)[gtid_29639 *
                                                                 iota32_arg_24441 +
                                                                 i_24469];
            int64_t res_30456 = ((__global int64_t *) mem_37606)[gtid_29639 *
                                                                 iota32_arg_24441 +
                                                                 i_24469];
            int64_t res_30457 = ((__global int64_t *) mem_37609)[gtid_29639 *
                                                                 iota32_arg_24441 +
                                                                 i_24469];
            int64_t x_30461 = ((__global int64_t *) mem_37606)[gtid_29639 *
                                                               iota32_arg_24441 +
                                                               gtid_29640];
            int64_t x_30462 = ((__global int64_t *) mem_37609)[gtid_29639 *
                                                               iota32_arg_24441 +
                                                               gtid_29640];
            int64_t x_30463 = ((__global int64_t *) mem_37612)[gtid_29639 *
                                                               iota32_arg_24441 +
                                                               gtid_29640];
            bool match_lit_30468 = 1 == x_30459;
            int64_t x_30469;
            
            if (match_lit_30468) {
                int64_t x_30470 = add64(res_30455, x_30461);
                int64_t res_30471 = sub64(x_30470, 1);
                
                x_30469 = res_30471;
            } else {
                bool match_lit_30472 = 2 == x_30459;
                int64_t x_30473;
                
                if (match_lit_30472) {
                    int64_t x_30474 = add64(res_30455, res_30456);
                    int64_t x_30475 = add64(x_30462, x_30474);
                    int64_t res_30476 = sub64(x_30475, 1);
                    
                    x_30473 = res_30476;
                } else {
                    int64_t x_30477 = add64(res_30455, res_30456);
                    int64_t x_30478 = add64(res_30457, x_30477);
                    int64_t x_30479 = add64(x_30463, x_30478);
                    int64_t res_30480 = sub64(x_30479, 1);
                    
                    x_30473 = res_30480;
                }
                x_30469 = x_30473;
            }
            res_30466 = x_30469;
        }
        if ((sle64(0, gtid_29639) && slt64(gtid_29639, m_24055)) && (sle64(0,
                                                                           res_30466) &&
                                                                     slt64(res_30466,
                                                                           iota32_arg_24441))) {
            ((__global float *) mem_37618)[gtid_29639 * iota32_arg_24441 +
                                           res_30466] = write_value_30464;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30446
}
__kernel void mainDetailedzisegmap_29891(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_24054, int64_t m_24055,
                                         int64_t iota32_arg_24441, __global
                                         unsigned char *res_mem_37197, __global
                                         unsigned char *res_mem_37277, __global
                                         unsigned char *mem_37542, __global
                                         unsigned char *mem_37568)
{
    #define segmap_group_sizze_30252 (mainDetailedzisegmap_group_sizze_29894)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38936;
    int32_t local_tid_38937;
    int64_t group_sizze_38940;
    int32_t wave_sizze_38939;
    int32_t group_tid_38938;
    
    global_tid_38936 = get_global_id(0);
    local_tid_38937 = get_local_id(0);
    group_sizze_38940 = get_local_size(0);
    wave_sizze_38939 = LOCKSTEP_WIDTH;
    group_tid_38938 = get_group_id(0);
    
    int32_t phys_tid_29891;
    
    phys_tid_29891 = global_tid_38936;
    
    int64_t gtid_29889;
    
    gtid_29889 = squot64(sext_i32_i64(group_tid_38938) *
                         segmap_group_sizze_30252 +
                         sext_i32_i64(local_tid_38937), iota32_arg_24441);
    
    int64_t gtid_29890;
    
    gtid_29890 = sext_i32_i64(group_tid_38938) * segmap_group_sizze_30252 +
        sext_i32_i64(local_tid_38937) - squot64(sext_i32_i64(group_tid_38938) *
                                                segmap_group_sizze_30252 +
                                                sext_i32_i64(local_tid_38937),
                                                iota32_arg_24441) *
        iota32_arg_24441;
    if (slt64(gtid_29889, m_24055) && slt64(gtid_29890, iota32_arg_24441)) {
        int32_t x_30255 = ((__global int32_t *) res_mem_37277)[gtid_29889];
        int32_t y_30257 = ((__global int32_t *) mem_37542)[gtid_29889];
        int32_t index_primexp_35472 = sext_i64_i32(gtid_29890);
        bool cond_30259 = slt32(index_primexp_35472, y_30257);
        bool cond_30260;
        
        if (cond_30259) {
            int32_t i_30261 = add32(x_30255, index_primexp_35472);
            int64_t i_30262 = sext_i32_i64(i_30261);
            bool x_30263 = sle64(0, i_30262);
            bool y_30264 = slt64(i_30262, N_24054);
            bool bounds_check_30265 = x_30263 && y_30264;
            bool index_certs_30266;
            
            if (!bounds_check_30265) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 27) ==
                        -1) {
                        global_failure_args[0] = i_30262;
                        global_failure_args[1] = N_24054;
                        ;
                    }
                    return;
                }
            }
            
            float isnan_arg_30267 = ((__global
                                      float *) res_mem_37197)[gtid_29889 *
                                                              N_24054 +
                                                              i_30262];
            bool res_30268;
            
            res_30268 = futrts_isnan32(isnan_arg_30267);
            
            bool res_30269 = !res_30268;
            
            cond_30260 = res_30269;
        } else {
            cond_30260 = 0;
        }
        
        float res_30270;
        
        if (cond_30260) {
            int32_t i_30271 = add32(x_30255, index_primexp_35472);
            int64_t i_30272 = sext_i32_i64(i_30271);
            bool x_30273 = sle64(0, i_30272);
            bool y_30274 = slt64(i_30272, N_24054);
            bool bounds_check_30275 = x_30273 && y_30274;
            bool index_certs_30276;
            
            if (!bounds_check_30275) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 28) ==
                        -1) {
                        global_failure_args[0] = i_30272;
                        global_failure_args[1] = N_24054;
                        ;
                    }
                    return;
                }
            }
            
            float res_30277 = ((__global float *) res_mem_37197)[gtid_29889 *
                                                                 N_24054 +
                                                                 i_30272];
            
            res_30270 = res_30277;
        } else {
            res_30270 = INFINITY;
        }
        ((__global float *) mem_37568)[gtid_29889 * iota32_arg_24441 +
                                       gtid_29890] = res_30270;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30252
}
__kernel void mainDetailedzisegmap_29950(__global int *global_failure,
                                         int64_t m_24055, __global
                                         unsigned char *mem_37542, __global
                                         unsigned char *mem_37553, __global
                                         unsigned char *mem_37564)
{
    #define segmap_group_sizze_30234 (mainDetailedzisegmap_group_sizze_29952)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38931;
    int32_t local_tid_38932;
    int64_t group_sizze_38935;
    int32_t wave_sizze_38934;
    int32_t group_tid_38933;
    
    global_tid_38931 = get_global_id(0);
    local_tid_38932 = get_local_id(0);
    group_sizze_38935 = get_local_size(0);
    wave_sizze_38934 = LOCKSTEP_WIDTH;
    group_tid_38933 = get_group_id(0);
    
    int32_t phys_tid_29950;
    
    phys_tid_29950 = global_tid_38931;
    
    int64_t gtid_29949;
    
    gtid_29949 = sext_i32_i64(group_tid_38933) * segmap_group_sizze_30234 +
        sext_i32_i64(local_tid_38932);
    if (slt64(gtid_29949, m_24055)) {
        int32_t y_30237 = ((__global int32_t *) mem_37542)[gtid_29949];
        bool cond_30239 = y_30237 == 0;
        float res_30240;
        
        if (cond_30239) {
            res_30240 = 0.0F;
        } else {
            float res_30238 = ((__global float *) mem_37553)[gtid_29949];
            float res_30241 = sitofp_i32_f32(y_30237);
            float res_30242 = res_30238 / res_30241;
            
            res_30240 = res_30242;
        }
        ((__global float *) mem_37564)[gtid_29949] = res_30240;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30234
}
__kernel void mainDetailedzisegmap_29967(__global int *global_failure,
                                         int64_t m_24055, __global
                                         unsigned char *mem_37549, __global
                                         unsigned char *mem_37551, __global
                                         unsigned char *mem_37559, __global
                                         unsigned char *mem_37561)
{
    #define segmap_group_sizze_30211 (mainDetailedzisegmap_group_sizze_29969)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38926;
    int32_t local_tid_38927;
    int64_t group_sizze_38930;
    int32_t wave_sizze_38929;
    int32_t group_tid_38928;
    
    global_tid_38926 = get_global_id(0);
    local_tid_38927 = get_local_id(0);
    group_sizze_38930 = get_local_size(0);
    wave_sizze_38929 = LOCKSTEP_WIDTH;
    group_tid_38928 = get_group_id(0);
    
    int32_t phys_tid_29967;
    
    phys_tid_29967 = global_tid_38926;
    
    int64_t gtid_29966;
    
    gtid_29966 = sext_i32_i64(group_tid_38928) * segmap_group_sizze_30211 +
        sext_i32_i64(local_tid_38927);
    if (slt64(gtid_29966, m_24055)) {
        bool acc0_30217 = ((__global bool *) mem_37549)[gtid_29966];
        bool x_30222 = acc0_30217 && acc0_30217;
        int32_t res_30226;
        
        if (acc0_30217) {
            int32_t acc0_30218 = ((__global int32_t *) mem_37551)[gtid_29966];
            
            res_30226 = acc0_30218;
        } else {
            res_30226 = -1;
        }
        ((__global bool *) mem_37559)[gtid_29966] = x_30222;
        ((__global int32_t *) mem_37561)[gtid_29966] = res_30226;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30211
}
__kernel void mainDetailedzisegmap_30088(__global int *global_failure,
                                         int64_t m_24055,
                                         int64_t num_groups_30111, __global
                                         unsigned char *res_mem_37196, __global
                                         unsigned char *res_mem_37277, __global
                                         unsigned char *res_mem_37278, __global
                                         unsigned char *mem_37540, __global
                                         unsigned char *mem_37542)
{
    #define segmap_group_sizze_30110 (mainDetailedzisegmap_group_sizze_30090)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38764;
    int32_t local_tid_38765;
    int64_t group_sizze_38768;
    int32_t wave_sizze_38767;
    int32_t group_tid_38766;
    
    global_tid_38764 = get_global_id(0);
    local_tid_38765 = get_local_id(0);
    group_sizze_38768 = get_local_size(0);
    wave_sizze_38767 = LOCKSTEP_WIDTH;
    group_tid_38766 = get_group_id(0);
    
    int32_t phys_tid_30088;
    
    phys_tid_30088 = global_tid_38764;
    
    int32_t phys_group_id_38769;
    
    phys_group_id_38769 = get_group_id(0);
    for (int32_t i_38770 = 0; i_38770 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055, segmap_group_sizze_30110)) -
                   phys_group_id_38769, sext_i64_i32(num_groups_30111));
         i_38770++) {
        int32_t virt_group_id_38771 = phys_group_id_38769 + i_38770 *
                sext_i64_i32(num_groups_30111);
        int64_t gtid_30087 = sext_i32_i64(virt_group_id_38771) *
                segmap_group_sizze_30110 + sext_i32_i64(local_tid_38765);
        
        if (slt64(gtid_30087, m_24055)) {
            int32_t x_30117 = ((__global int32_t *) res_mem_37196)[gtid_30087];
            int32_t x_30118 = ((__global int32_t *) res_mem_37277)[gtid_30087];
            float x_30119 = ((__global float *) res_mem_37278)[gtid_30087];
            int32_t y_30120 = sub32(x_30117, x_30118);
            float res_30121 = sitofp_i32_f32(x_30118);
            float res_30122;
            
            res_30122 = futrts_sqrt32(res_30121);
            
            float y_30123 = x_30119 * res_30122;
            
            ((__global float *) mem_37540)[gtid_30087] = y_30123;
            ((__global int32_t *) mem_37542)[gtid_30087] = y_30120;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30110
}
__kernel void mainDetailedzisegmap_intragroup_26386(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *mem_36872_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_36862_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_36852_backing_aligned_2,
                                                    int32_t k2p2zq_24072,
                                                    int64_t res_24074,
                                                    int64_t m_24205,
                                                    int64_t nm_24206,
                                                    int32_t res_24214,
                                                    int64_t computed_group_sizze_26327,
                                                    __global
                                                    unsigned char *res_mem_36848,
                                                    __global
                                                    unsigned char *mem_36876)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36872_backing_2 = (__local volatile
                                                           char *) mem_36872_backing_aligned_0;
    __local volatile char *restrict mem_36862_backing_1 = (__local volatile
                                                           char *) mem_36862_backing_aligned_1;
    __local volatile char *restrict mem_36852_backing_0 = (__local volatile
                                                           char *) mem_36852_backing_aligned_2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_37987;
    int32_t local_tid_37988;
    int64_t group_sizze_37991;
    int32_t wave_sizze_37990;
    int32_t group_tid_37989;
    
    global_tid_37987 = get_global_id(0);
    local_tid_37988 = get_local_id(0);
    group_sizze_37991 = get_local_size(0);
    wave_sizze_37990 = LOCKSTEP_WIDTH;
    group_tid_37989 = get_group_id(0);
    
    int32_t phys_tid_26386;
    
    phys_tid_26386 = group_tid_37989;
    
    int32_t ltid_pre_37992;
    
    ltid_pre_37992 = squot32(local_tid_37988, sext_i64_i32(res_24074));
    
    int32_t ltid_pre_37993;
    
    ltid_pre_37993 = local_tid_37988 - squot32(local_tid_37988,
                                               sext_i64_i32(res_24074)) *
        sext_i64_i32(res_24074);
    
    int32_t ltid_pre_37994;
    
    ltid_pre_37994 = local_tid_37988;
    
    int64_t gtid_26325;
    
    gtid_26325 = sext_i32_i64(group_tid_37989);
    
    __local char *mem_36852;
    
    mem_36852 = (__local char *) mem_36852_backing_0;
    
    int64_t gtid_26328 = sext_i32_i64(ltid_pre_37994);
    int32_t phys_tid_26329 = local_tid_37988;
    
    if (slt64(gtid_26328, nm_24206)) {
        int64_t res_26525 = sdiv64(gtid_26328, m_24205);
        int64_t res_26526 = smod64(gtid_26328, m_24205);
        bool cond_26527 = slt64(res_26526, res_24074);
        float res_26528;
        
        if (cond_26527) {
            float res_26529 = ((__global float *) res_mem_36848)[gtid_26325 *
                                                                 (res_24074 *
                                                                  res_24074) +
                                                                 res_26525 *
                                                                 res_24074 +
                                                                 res_26526];
            
            res_26528 = res_26529;
        } else {
            int64_t y_26530 = add64(res_24074, res_26525);
            bool cond_26531 = res_26526 == y_26530;
            float res_26532;
            
            if (cond_26531) {
                res_26532 = 1.0F;
            } else {
                res_26532 = 0.0F;
            }
            res_26528 = res_26532;
        }
        ((__local float *) mem_36852)[gtid_26328] = res_26528;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_36862;
    
    mem_36862 = (__local char *) mem_36862_backing_1;
    for (int32_t i_26534 = 0; i_26534 < k2p2zq_24072; i_26534++) {
        int64_t i_26536 = sext_i32_i64(i_26534);
        bool x_26537 = sle64(0, i_26536);
        bool y_26538 = slt64(i_26536, nm_24206);
        bool bounds_check_26539 = x_26537 && y_26538;
        bool index_certs_26540;
        
        if (!bounds_check_26539) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 16) == -1) {
                    global_failure_args[0] = i_26536;
                    global_failure_args[1] = nm_24206;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_26541 = ((__local float *) mem_36852)[i_26536];
        bool cond_26542 = v1_26541 == 0.0F;
        int64_t gtid_26339 = sext_i32_i64(ltid_pre_37994);
        int32_t phys_tid_26340 = local_tid_37988;
        
        if (slt64(gtid_26339, nm_24206)) {
            int32_t res_26545 = sext_i64_i32(gtid_26339);
            int32_t res_26546 = sdiv32(res_26545, res_24214);
            int32_t res_26547 = smod32(res_26545, res_24214);
            float res_26548;
            
            if (cond_26542) {
                int32_t x_26549 = mul32(res_24214, res_26546);
                int32_t i_26550 = add32(res_26547, x_26549);
                int64_t i_26551 = sext_i32_i64(i_26550);
                float res_26552 = ((__local float *) mem_36852)[i_26551];
                
                res_26548 = res_26552;
            } else {
                int64_t j_26553 = sext_i32_i64(res_26547);
                float x_26554 = ((__local float *) mem_36852)[j_26553];
                float x_26555 = x_26554 / v1_26541;
                int32_t y_26556 = sub32(k2p2zq_24072, 1);
                bool cond_26557 = slt32(res_26546, y_26556);
                float res_26558;
                
                if (cond_26557) {
                    int32_t x_26559 = add32(1, res_26546);
                    int32_t x_26560 = mul32(res_24214, x_26559);
                    int32_t i_26561 = add32(res_26547, x_26560);
                    int64_t i_26562 = sext_i32_i64(i_26561);
                    float x_26563 = ((__local float *) mem_36852)[i_26562];
                    int32_t i_26564 = add32(i_26534, x_26560);
                    int64_t i_26565 = sext_i32_i64(i_26564);
                    float x_26566 = ((__local float *) mem_36852)[i_26565];
                    float y_26567 = x_26555 * x_26566;
                    float res_26568 = x_26563 - y_26567;
                    
                    res_26558 = res_26568;
                } else {
                    res_26558 = x_26555;
                }
                res_26548 = res_26558;
            }
            ((__local float *) mem_36862)[gtid_26339] = res_26548;
        }
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_26366 = sext_i32_i64(ltid_pre_37994);
        int32_t phys_tid_26367 = local_tid_37988;
        
        if (slt64(write_i_26366, nm_24206)) {
            float write_value_26571 = ((__local
                                        float *) mem_36862)[write_i_26366];
            
            if (sle64(0, write_i_26366) && slt64(write_i_26366, nm_24206)) {
                ((__local float *) mem_36852)[write_i_26366] =
                    write_value_26571;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    __local char *mem_36872;
    
    mem_36872 = (__local char *) mem_36872_backing_2;
    
    int64_t gtid_26369 = sext_i32_i64(ltid_pre_37992);
    int64_t gtid_26370 = sext_i32_i64(ltid_pre_37993);
    int32_t phys_tid_26371 = local_tid_37988;
    
    if (slt64(gtid_26369, res_24074) && slt64(gtid_26370, res_24074)) {
        int64_t index_primexp_35411 = m_24205 * gtid_26369;
        int64_t i_26578 = add64(res_24074, gtid_26370);
        int64_t new_index_26579 = i_26578 + index_primexp_35411;
        float res_26580 = ((__local float *) mem_36852)[new_index_26579];
        
        ((__local float *) mem_36872)[gtid_26369 * res_24074 + gtid_26370] =
            res_26580;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_37996 = 0; i_37996 < sdiv_up64(res_24074 * res_24074 -
                                                  sext_i32_i64(local_tid_37988),
                                                  computed_group_sizze_26327);
         i_37996++) {
        ((__global float *) mem_36876)[gtid_26325 * (res_24074 * res_24074) +
                                       squot64(i_37996 *
                                               computed_group_sizze_26327 +
                                               sext_i32_i64(local_tid_37988),
                                               res_24074) * res_24074 +
                                       (i_37996 * computed_group_sizze_26327 +
                                        sext_i32_i64(local_tid_37988) -
                                        squot64(i_37996 *
                                                computed_group_sizze_26327 +
                                                sext_i32_i64(local_tid_37988),
                                                res_24074) * res_24074)] =
            ((__local float *) mem_36872)[squot64(i_37996 *
                                                  computed_group_sizze_26327 +
                                                  sext_i32_i64(local_tid_37988),
                                                  res_24074) * res_24074 +
                                          (i_37996 *
                                           computed_group_sizze_26327 +
                                           sext_i32_i64(local_tid_37988) -
                                           squot64(i_37996 *
                                                   computed_group_sizze_26327 +
                                                   sext_i32_i64(local_tid_37988),
                                                   res_24074) * res_24074)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_26730(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_36897_backing_aligned_0,
                                                    int64_t m_24055,
                                                    int32_t k2p2zq_24072,
                                                    int64_t nm_24206,
                                                    int32_t res_24214,
                                                    int32_t i_27117,
                                                    int64_t i_27119,
                                                    int64_t ctx_param_ext_36883,
                                                    int64_t ctx_param_ext_36884,
                                                    int64_t ctx_param_ext_36886,
                                                    __global
                                                    unsigned char *mem_param_36888,
                                                    __global
                                                    unsigned char *mem_36893,
                                                    __global
                                                    unsigned char *mem_36901)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36897_backing_0 = (__local volatile
                                                           char *) mem_36897_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38023;
    int32_t local_tid_38024;
    int64_t group_sizze_38027;
    int32_t wave_sizze_38026;
    int32_t group_tid_38025;
    
    global_tid_38023 = get_global_id(0);
    local_tid_38024 = get_local_id(0);
    group_sizze_38027 = get_local_size(0);
    wave_sizze_38026 = LOCKSTEP_WIDTH;
    group_tid_38025 = get_group_id(0);
    
    int32_t phys_tid_26730;
    
    phys_tid_26730 = group_tid_38025;
    
    int32_t ltid_pre_38028;
    
    ltid_pre_38028 = local_tid_38024;
    
    int64_t gtid_26698;
    
    gtid_26698 = sext_i32_i64(group_tid_38025);
    
    float v1_27136 = ((__global float *) mem_param_36888)[ctx_param_ext_36883 +
                                                          (gtid_26698 *
                                                           ctx_param_ext_36884 +
                                                           i_27119 *
                                                           ctx_param_ext_36886)];
    bool cond_27137 = v1_27136 == 0.0F;
    __local char *mem_36897;
    
    mem_36897 = (__local char *) mem_36897_backing_0;
    
    int64_t gtid_26701 = sext_i32_i64(ltid_pre_38028);
    int32_t phys_tid_26702 = local_tid_38024;
    
    if (slt64(gtid_26701, nm_24206)) {
        int32_t res_27140 = sext_i64_i32(gtid_26701);
        int32_t res_27141 = sdiv32(res_27140, res_24214);
        int32_t res_27142 = smod32(res_27140, res_24214);
        float res_27143;
        
        if (cond_27137) {
            int32_t x_27144 = mul32(res_24214, res_27141);
            int32_t i_27145 = add32(res_27142, x_27144);
            int64_t i_27146 = sext_i32_i64(i_27145);
            float res_27147 = ((__global
                                float *) mem_param_36888)[ctx_param_ext_36883 +
                                                          (gtid_26698 *
                                                           ctx_param_ext_36884 +
                                                           i_27146 *
                                                           ctx_param_ext_36886)];
            
            res_27143 = res_27147;
        } else {
            int64_t j_27148 = sext_i32_i64(res_27142);
            float x_27149 = ((__global
                              float *) mem_param_36888)[ctx_param_ext_36883 +
                                                        (gtid_26698 *
                                                         ctx_param_ext_36884 +
                                                         j_27148 *
                                                         ctx_param_ext_36886)];
            float x_27150 = x_27149 / v1_27136;
            int32_t y_27151 = sub32(k2p2zq_24072, 1);
            bool cond_27152 = slt32(res_27141, y_27151);
            float res_27153;
            
            if (cond_27152) {
                int32_t x_27154 = add32(1, res_27141);
                int32_t x_27155 = mul32(res_24214, x_27154);
                int32_t i_27156 = add32(res_27142, x_27155);
                int64_t i_27157 = sext_i32_i64(i_27156);
                float x_27158 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_26698 *
                                                             ctx_param_ext_36884 +
                                                             i_27157 *
                                                             ctx_param_ext_36886)];
                int32_t i_27159 = add32(i_27117, x_27155);
                int64_t i_27160 = sext_i32_i64(i_27159);
                float x_27161 = ((__global
                                  float *) mem_param_36888)[ctx_param_ext_36883 +
                                                            (gtid_26698 *
                                                             ctx_param_ext_36884 +
                                                             i_27160 *
                                                             ctx_param_ext_36886)];
                float y_27162 = x_27150 * x_27161;
                float res_27163 = x_27158 - y_27162;
                
                res_27153 = res_27163;
            } else {
                res_27153 = x_27150;
            }
            res_27143 = res_27153;
        }
        ((__local float *) mem_36897)[gtid_26701] = res_27143;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_26728 = sext_i32_i64(ltid_pre_38028);
    int32_t phys_tid_26729 = local_tid_38024;
    
    if (slt64(write_i_26728, nm_24206)) {
        float write_value_27166 = ((__local float *) mem_36897)[write_i_26728];
        
        if (sle64(0, write_i_26728) && slt64(write_i_26728, nm_24206)) {
            ((__global float *) mem_36893)[gtid_26698 + write_i_26728 *
                                           m_24055] = write_value_27166;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38024 == 0) {
        for (int64_t i_38029 = 0; i_38029 < nm_24206; i_38029++) {
            ((__global float *) mem_36901)[gtid_26698 * nm_24206 + i_38029] =
                ((__global float *) mem_36893)[gtid_26698 + i_38029 * m_24055];
        }
    }
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_27704(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37175_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37173_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_37171_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37169_backing_aligned_3,
                                                    int64_t N_24054,
                                                    int64_t N_24056,
                                                    int64_t i_24321, __global
                                                    unsigned char *images_mem_36738,
                                                    __global
                                                    unsigned char *res_mem_37159,
                                                    __global
                                                    unsigned char *mem_37178,
                                                    __global
                                                    unsigned char *mem_37181,
                                                    __global
                                                    unsigned char *mem_37184)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37175_backing_3 = (__local volatile
                                                           char *) mem_37175_backing_aligned_0;
    __local volatile char *restrict mem_37173_backing_2 = (__local volatile
                                                           char *) mem_37173_backing_aligned_1;
    __local volatile char *restrict mem_37171_backing_1 = (__local volatile
                                                           char *) mem_37171_backing_aligned_2;
    __local volatile char *restrict mem_37169_backing_0 = (__local volatile
                                                           char *) mem_37169_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38328;
    int32_t local_tid_38329;
    int64_t group_sizze_38332;
    int32_t wave_sizze_38331;
    int32_t group_tid_38330;
    
    global_tid_38328 = get_global_id(0);
    local_tid_38329 = get_local_id(0);
    group_sizze_38332 = get_local_size(0);
    wave_sizze_38331 = LOCKSTEP_WIDTH;
    group_tid_38330 = get_group_id(0);
    
    int32_t phys_tid_27704;
    
    phys_tid_27704 = group_tid_38330;
    
    int32_t ltid_pre_38333;
    
    ltid_pre_38333 = local_tid_38329;
    
    int64_t gtid_27697;
    
    gtid_27697 = sext_i32_i64(group_tid_38330);
    
    __local char *mem_37169;
    
    mem_37169 = (__local char *) mem_37169_backing_0;
    
    __local char *mem_37171;
    
    mem_37171 = (__local char *) mem_37171_backing_1;
    
    int64_t gtid_27700 = sext_i32_i64(ltid_pre_38333);
    int32_t phys_tid_27701 = local_tid_38329;
    
    if (slt64(gtid_27700, N_24054)) {
        float x_27793 = ((__global float *) images_mem_36738)[gtid_27697 *
                                                              N_24056 +
                                                              gtid_27700];
        bool res_27795;
        
        res_27795 = futrts_isnan32(x_27793);
        
        bool cond_27796 = !res_27795;
        float res_27797;
        
        if (cond_27796) {
            float x_27794 = ((__global float *) res_mem_37159)[gtid_27697 *
                                                               N_24054 +
                                                               gtid_27700];
            float res_27798 = x_27793 - x_27794;
            
            res_27797 = res_27798;
        } else {
            res_27797 = NAN;
        }
        
        bool res_27799;
        
        res_27799 = futrts_isnan32(res_27797);
        
        bool res_27800 = !res_27799;
        int64_t res_27801 = btoi_bool_i64(res_27800);
        
        ((__local int64_t *) mem_37169)[gtid_27700] = res_27801;
        ((__local float *) mem_37171)[gtid_27700] = res_27797;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38334;
    
    dims_flat_38334 = N_24054;
    
    int64_t x_27790;
    int64_t x_27791;
    int64_t x_38336;
    int64_t x_38337;
    bool ltid_in_bounds_38339;
    
    ltid_in_bounds_38339 = slt64(sext_i32_i64(local_tid_38329), N_24054);
    
    int32_t skip_threads_38340;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38339) {
            x_27791 = ((volatile __local
                        int64_t *) mem_37169)[sext_i32_i64(local_tid_38329)];
            if ((local_tid_38329 - squot32(local_tid_38329, 32) * 32) == 0) {
                x_27790 = x_27791;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38340 = 1;
        while (slt32(skip_threads_38340, 32)) {
            if (sle32(skip_threads_38340, local_tid_38329 -
                      squot32(local_tid_38329, 32) * 32) &&
                ltid_in_bounds_38339) {
                // read operands
                {
                    x_27790 = ((volatile __local
                                int64_t *) mem_37169)[sext_i32_i64(local_tid_38329) -
                                                      sext_i32_i64(skip_threads_38340)];
                }
                // perform operation
                {
                    bool inactive_38341 =
                         slt64(srem64(sext_i32_i64(local_tid_38329), N_24054),
                               sext_i32_i64(local_tid_38329) -
                               sext_i32_i64(local_tid_38329 -
                               skip_threads_38340));
                    
                    if (inactive_38341) {
                        x_27790 = x_27791;
                    }
                    if (!inactive_38341) {
                        int64_t res_27792 = add64(x_27790, x_27791);
                        
                        x_27790 = res_27792;
                    }
                }
            }
            if (sle32(wave_sizze_38331, skip_threads_38340)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38340, local_tid_38329 -
                      squot32(local_tid_38329, 32) * 32) &&
                ltid_in_bounds_38339) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37169)[sext_i32_i64(local_tid_38329)] =
                        x_27790;
                    x_27791 = x_27790;
                }
            }
            if (sle32(wave_sizze_38331, skip_threads_38340)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38340 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38329 - squot32(local_tid_38329, 32) * 32) == 31 &&
            ltid_in_bounds_38339) {
            ((volatile __local
              int64_t *) mem_37169)[sext_i32_i64(squot32(local_tid_38329,
                                                         32))] = x_27790;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38342;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38329, 32) == 0 && ltid_in_bounds_38339) {
                x_38337 = ((volatile __local
                            int64_t *) mem_37169)[sext_i32_i64(local_tid_38329)];
                if ((local_tid_38329 - squot32(local_tid_38329, 32) * 32) ==
                    0) {
                    x_38336 = x_38337;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38342 = 1;
            while (slt32(skip_threads_38342, 32)) {
                if (sle32(skip_threads_38342, local_tid_38329 -
                          squot32(local_tid_38329, 32) * 32) &&
                    (squot32(local_tid_38329, 32) == 0 &&
                     ltid_in_bounds_38339)) {
                    // read operands
                    {
                        x_38336 = ((volatile __local
                                    int64_t *) mem_37169)[sext_i32_i64(local_tid_38329) -
                                                          sext_i32_i64(skip_threads_38342)];
                    }
                    // perform operation
                    {
                        bool inactive_38343 =
                             slt64(srem64(sext_i32_i64(local_tid_38329 * 32 +
                                          32 - 1), N_24054),
                                   sext_i32_i64(local_tid_38329 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38329 -
                                                 skip_threads_38342) * 32 + 32 -
                                   1));
                        
                        if (inactive_38343) {
                            x_38336 = x_38337;
                        }
                        if (!inactive_38343) {
                            int64_t res_38338 = add64(x_38336, x_38337);
                            
                            x_38336 = res_38338;
                        }
                    }
                }
                if (sle32(wave_sizze_38331, skip_threads_38342)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38342, local_tid_38329 -
                          squot32(local_tid_38329, 32) * 32) &&
                    (squot32(local_tid_38329, 32) == 0 &&
                     ltid_in_bounds_38339)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37169)[sext_i32_i64(local_tid_38329)] =
                            x_38336;
                        x_38337 = x_38336;
                    }
                }
                if (sle32(wave_sizze_38331, skip_threads_38342)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38342 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38329, 32) == 0 || !ltid_in_bounds_38339)) {
            // read operands
            {
                x_27791 = x_27790;
                x_27790 = ((__local
                            int64_t *) mem_37169)[sext_i32_i64(squot32(local_tid_38329,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38344 =
                     slt64(srem64(sext_i32_i64(local_tid_38329), N_24054),
                           sext_i32_i64(local_tid_38329) -
                           sext_i32_i64(squot32(local_tid_38329, 32) * 32 - 1));
                
                if (inactive_38344) {
                    x_27790 = x_27791;
                }
                if (!inactive_38344) {
                    int64_t res_27792 = add64(x_27790, x_27791);
                    
                    x_27790 = res_27792;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37169)[sext_i32_i64(local_tid_38329)] =
                    x_27790;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38329, 32) == 0) {
            ((__local int64_t *) mem_37169)[sext_i32_i64(local_tid_38329)] =
                x_27791;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_27802 = ((__local int64_t *) mem_37169)[i_24321];
    int32_t res_27803 = sext_i64_i32(res_27802);
    __local char *mem_37173;
    
    mem_37173 = (__local char *) mem_37173_backing_2;
    ((__local float *) mem_37173)[sext_i32_i64(local_tid_38329)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37175;
    
    mem_37175 = (__local char *) mem_37175_backing_3;
    ((__local int32_t *) mem_37175)[sext_i32_i64(local_tid_38329)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_27702 = sext_i32_i64(ltid_pre_38333);
    int32_t phys_tid_27703 = local_tid_38329;
    
    if (slt64(write_i_27702, N_24054)) {
        float x_27808 = ((__local float *) mem_37171)[write_i_27702];
        int32_t index_primexp_35433 = sext_i64_i32(write_i_27702);
        bool res_27811;
        
        res_27811 = futrts_isnan32(x_27808);
        
        bool res_27812 = !res_27811;
        int64_t res_27813;
        
        if (res_27812) {
            int64_t x_27809 = ((__local int64_t *) mem_37169)[write_i_27702];
            int64_t res_27814 = sub64(x_27809, 1);
            
            res_27813 = res_27814;
        } else {
            res_27813 = -1;
        }
        if (sle64(0, res_27813) && slt64(res_27813, N_24054)) {
            ((__local int32_t *) mem_37175)[res_27813] = index_primexp_35433;
        }
        if (sle64(0, res_27813) && slt64(res_27813, N_24054)) {
            ((__local float *) mem_37173)[res_27813] = x_27808;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38329 == 0) {
        ((__global int32_t *) mem_37178)[gtid_27697] = res_27803;
    }
    ((__global float *) mem_37181)[gtid_27697 * N_24054 +
                                   sext_i32_i64(local_tid_38329)] = ((__local
                                                                      float *) mem_37173)[sext_i32_i64(local_tid_38329)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_37184)[gtid_27697 * N_24054 +
                                     sext_i32_i64(local_tid_38329)] = ((__local
                                                                        int32_t *) mem_37175)[sext_i32_i64(local_tid_38329)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_28044(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38437_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38433_backing_aligned_1,
                                                    int64_t N_24054,
                                                    int64_t N_24056,
                                                    float hfrac_24061,
                                                    int64_t res_24068,
                                                    int32_t k2p2_24070, __global
                                                    unsigned char *images_mem_36738,
                                                    __global
                                                    unsigned char *res_mem_37197,
                                                    __global
                                                    unsigned char *mem_37257,
                                                    __global
                                                    unsigned char *mem_37259,
                                                    __global
                                                    unsigned char *mem_37261)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38437_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38437_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38433_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38433_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38427;
    int32_t local_tid_38428;
    int64_t group_sizze_38431;
    int32_t wave_sizze_38430;
    int32_t group_tid_38429;
    
    global_tid_38427 = get_global_id(0);
    local_tid_38428 = get_local_id(0);
    group_sizze_38431 = get_local_size(0);
    wave_sizze_38430 = LOCKSTEP_WIDTH;
    group_tid_38429 = get_group_id(0);
    
    int32_t phys_tid_28044;
    
    phys_tid_28044 = group_tid_38429;
    
    int32_t ltid_pre_38432;
    
    ltid_pre_38432 = local_tid_38428;
    
    int64_t gtid_28037;
    
    gtid_28037 = sext_i32_i64(group_tid_38429);
    
    int32_t res_28121;
    int64_t gtid_28040 = sext_i32_i64(ltid_pre_38432);
    int32_t phys_tid_28041 = local_tid_38428;
    __local char *red_arr_mem_38433;
    
    red_arr_mem_38433 = (__local char *) red_arr_mem_38433_backing_0;
    if (slt64(gtid_28040, res_24068)) {
        float x_28125 = ((__global float *) images_mem_36738)[gtid_28037 *
                                                              N_24056 +
                                                              gtid_28040];
        bool res_28126;
        
        res_28126 = futrts_isnan32(x_28125);
        
        bool cond_28127 = !res_28126;
        int32_t res_28128 = btoi_bool_i32(cond_28127);
        
        ((__local int32_t *) red_arr_mem_38433)[gtid_28040] = res_28128;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38435;
    int32_t skip_waves_38436;
    
    skip_waves_38436 = 1;
    
    int32_t x_28122;
    int32_t x_28123;
    
    offset_38435 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38428, sext_i64_i32(res_24068))) {
            x_28122 = ((__local
                        int32_t *) red_arr_mem_38433)[sext_i32_i64(local_tid_38428 +
                                                      offset_38435)];
        }
    }
    offset_38435 = 1;
    while (slt32(offset_38435, wave_sizze_38430)) {
        if (slt32(local_tid_38428 + offset_38435, sext_i64_i32(res_24068)) &&
            ((local_tid_38428 - squot32(local_tid_38428, wave_sizze_38430) *
              wave_sizze_38430) & (2 * offset_38435 - 1)) == 0) {
            // read array element
            {
                x_28123 = ((volatile __local
                            int32_t *) red_arr_mem_38433)[sext_i32_i64(local_tid_38428 +
                                                          offset_38435)];
            }
            // apply reduction operation
            {
                int32_t res_28124 = add32(x_28122, x_28123);
                
                x_28122 = res_28124;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38433)[sext_i32_i64(local_tid_38428)] =
                    x_28122;
            }
        }
        offset_38435 *= 2;
    }
    while (slt32(skip_waves_38436, squot32(sext_i64_i32(res_24068) +
                                           wave_sizze_38430 - 1,
                                           wave_sizze_38430))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38435 = skip_waves_38436 * wave_sizze_38430;
        if (slt32(local_tid_38428 + offset_38435, sext_i64_i32(res_24068)) &&
            ((local_tid_38428 - squot32(local_tid_38428, wave_sizze_38430) *
              wave_sizze_38430) == 0 && (squot32(local_tid_38428,
                                                 wave_sizze_38430) & (2 *
                                                                      skip_waves_38436 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_28123 = ((__local
                            int32_t *) red_arr_mem_38433)[sext_i32_i64(local_tid_38428 +
                                                          offset_38435)];
            }
            // apply reduction operation
            {
                int32_t res_28124 = add32(x_28122, x_28123);
                
                x_28122 = res_28124;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38433)[sext_i32_i64(local_tid_38428)] =
                    x_28122;
            }
        }
        skip_waves_38436 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_28121 = ((__local int32_t *) red_arr_mem_38433)[0];
    
    float res_28129;
    int64_t gtid_28042 = sext_i32_i64(ltid_pre_38432);
    int32_t phys_tid_28043 = local_tid_38428;
    __local char *red_arr_mem_38437;
    
    red_arr_mem_38437 = (__local char *) red_arr_mem_38437_backing_1;
    if (slt64(gtid_28042, res_24068)) {
        int32_t index_primexp_35441 = sext_i64_i32(gtid_28042);
        bool cond_28134 = slt32(index_primexp_35441, res_28121);
        float res_28135;
        
        if (cond_28134) {
            int64_t i_28136 = sext_i32_i64(index_primexp_35441);
            float res_28137 = ((__global float *) res_mem_37197)[gtid_28037 *
                                                                 N_24054 +
                                                                 i_28136];
            
            res_28135 = res_28137;
        } else {
            res_28135 = 0.0F;
        }
        
        float res_28138 = res_28135 * res_28135;
        
        ((__local float *) red_arr_mem_38437)[gtid_28042] = res_28138;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38439;
    int32_t skip_waves_38440;
    
    skip_waves_38440 = 1;
    
    float x_28130;
    float x_28131;
    
    offset_38439 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38428, sext_i64_i32(res_24068))) {
            x_28130 = ((__local
                        float *) red_arr_mem_38437)[sext_i32_i64(local_tid_38428 +
                                                    offset_38439)];
        }
    }
    offset_38439 = 1;
    while (slt32(offset_38439, wave_sizze_38430)) {
        if (slt32(local_tid_38428 + offset_38439, sext_i64_i32(res_24068)) &&
            ((local_tid_38428 - squot32(local_tid_38428, wave_sizze_38430) *
              wave_sizze_38430) & (2 * offset_38439 - 1)) == 0) {
            // read array element
            {
                x_28131 = ((volatile __local
                            float *) red_arr_mem_38437)[sext_i32_i64(local_tid_38428 +
                                                        offset_38439)];
            }
            // apply reduction operation
            {
                float res_28132 = x_28130 + x_28131;
                
                x_28130 = res_28132;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_38437)[sext_i32_i64(local_tid_38428)] =
                    x_28130;
            }
        }
        offset_38439 *= 2;
    }
    while (slt32(skip_waves_38440, squot32(sext_i64_i32(res_24068) +
                                           wave_sizze_38430 - 1,
                                           wave_sizze_38430))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38439 = skip_waves_38440 * wave_sizze_38430;
        if (slt32(local_tid_38428 + offset_38439, sext_i64_i32(res_24068)) &&
            ((local_tid_38428 - squot32(local_tid_38428, wave_sizze_38430) *
              wave_sizze_38430) == 0 && (squot32(local_tid_38428,
                                                 wave_sizze_38430) & (2 *
                                                                      skip_waves_38440 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_28131 = ((__local
                            float *) red_arr_mem_38437)[sext_i32_i64(local_tid_38428 +
                                                        offset_38439)];
            }
            // apply reduction operation
            {
                float res_28132 = x_28130 + x_28131;
                
                x_28130 = res_28132;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_38437)[sext_i32_i64(local_tid_38428)] =
                    x_28130;
            }
        }
        skip_waves_38440 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_28129 = ((__local float *) red_arr_mem_38437)[0];
    
    int32_t r32_arg_28139 = sub32(res_28121, k2p2_24070);
    float res_28140 = sitofp_i32_f32(r32_arg_28139);
    float sqrt_arg_28141 = res_28129 / res_28140;
    float res_28142;
    
    res_28142 = futrts_sqrt32(sqrt_arg_28141);
    
    float res_28143 = sitofp_i32_f32(res_28121);
    float t32_arg_28144 = hfrac_24061 * res_28143;
    int32_t res_28145 = fptosi_f32_i32(t32_arg_28144);
    
    if (local_tid_38428 == 0) {
        ((__global int32_t *) mem_37257)[gtid_28037] = res_28145;
    }
    if (local_tid_38428 == 0) {
        ((__global int32_t *) mem_37259)[gtid_28037] = res_28121;
    }
    if (local_tid_38428 == 0) {
        ((__global float *) mem_37261)[gtid_28037] = res_28142;
    }
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_28492(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *mem_37524_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37514_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *double_buffer_mem_37715_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37512_backing_aligned_3,
                                                    __local volatile
                                                    int64_t *mem_37510_backing_aligned_4,
                                                    __local volatile
                                                    int64_t *mem_37508_backing_aligned_5,
                                                    __local volatile
                                                    int64_t *mem_37506_backing_aligned_6,
                                                    __local volatile
                                                    int64_t *mem_37504_backing_aligned_7,
                                                    __local volatile
                                                    int64_t *mem_37494_backing_aligned_8,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38736_backing_aligned_9,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38734_backing_aligned_10,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38732_backing_aligned_11,
                                                    __local volatile
                                                    int64_t *mem_37491_backing_aligned_12,
                                                    __local volatile
                                                    int64_t *mem_37488_backing_aligned_13,
                                                    int64_t N_24054,
                                                    int32_t n_24059,
                                                    int64_t iota32_arg_24441,
                                                    int32_t iters_24467,
                                                    int64_t i_24469, __global
                                                    unsigned char *res_mem_37196,
                                                    __global
                                                    unsigned char *res_mem_37197,
                                                    __global
                                                    unsigned char *res_mem_37198,
                                                    __global
                                                    unsigned char *res_mem_37276,
                                                    __global
                                                    unsigned char *res_mem_37277,
                                                    __global
                                                    unsigned char *res_mem_37278,
                                                    __global
                                                    unsigned char *res_mem_37327,
                                                    __global
                                                    unsigned char *mem_37332,
                                                    __global
                                                    unsigned char *mem_37528,
                                                    __global
                                                    unsigned char *mem_37531,
                                                    __global
                                                    unsigned char *mem_37533,
                                                    __global
                                                    unsigned char *mem_37535,
                                                    __global
                                                    unsigned char *mem_37537)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37524_backing_13 = (__local volatile
                                                            char *) mem_37524_backing_aligned_0;
    __local volatile char *restrict mem_37514_backing_12 = (__local volatile
                                                            char *) mem_37514_backing_aligned_1;
    __local volatile char *restrict double_buffer_mem_37715_backing_11 =
                          (__local volatile
                           char *) double_buffer_mem_37715_backing_aligned_2;
    __local volatile char *restrict mem_37512_backing_10 = (__local volatile
                                                            char *) mem_37512_backing_aligned_3;
    __local volatile char *restrict mem_37510_backing_9 = (__local volatile
                                                           char *) mem_37510_backing_aligned_4;
    __local volatile char *restrict mem_37508_backing_8 = (__local volatile
                                                           char *) mem_37508_backing_aligned_5;
    __local volatile char *restrict mem_37506_backing_7 = (__local volatile
                                                           char *) mem_37506_backing_aligned_6;
    __local volatile char *restrict mem_37504_backing_6 = (__local volatile
                                                           char *) mem_37504_backing_aligned_7;
    __local volatile char *restrict mem_37494_backing_5 = (__local volatile
                                                           char *) mem_37494_backing_aligned_8;
    __local volatile char *restrict red_arr_mem_38736_backing_4 =
                          (__local volatile
                           char *) red_arr_mem_38736_backing_aligned_9;
    __local volatile char *restrict red_arr_mem_38734_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_38734_backing_aligned_10;
    __local volatile char *restrict red_arr_mem_38732_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38732_backing_aligned_11;
    __local volatile char *restrict mem_37491_backing_1 = (__local volatile
                                                           char *) mem_37491_backing_aligned_12;
    __local volatile char *restrict mem_37488_backing_0 = (__local volatile
                                                           char *) mem_37488_backing_aligned_13;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_38715;
    int32_t local_tid_38716;
    int64_t group_sizze_38719;
    int32_t wave_sizze_38718;
    int32_t group_tid_38717;
    
    global_tid_38715 = get_global_id(0);
    local_tid_38716 = get_local_id(0);
    group_sizze_38719 = get_local_size(0);
    wave_sizze_38718 = LOCKSTEP_WIDTH;
    group_tid_38717 = get_group_id(0);
    
    int32_t phys_tid_28492;
    
    phys_tid_28492 = group_tid_38717;
    
    int32_t ltid_pre_38720;
    
    ltid_pre_38720 = local_tid_38716;
    
    int64_t gtid_28457;
    
    gtid_28457 = sext_i32_i64(group_tid_38717);
    
    int32_t x_29010;
    
    x_29010 = ((__global int32_t *) res_mem_37196)[gtid_28457];
    
    int32_t x_29011 = ((__global int32_t *) res_mem_37277)[gtid_28457];
    float x_29012 = ((__global float *) res_mem_37278)[gtid_28457];
    int32_t x_29013 = ((__global int32_t *) res_mem_37276)[gtid_28457];
    float x_29014 = ((__global float *) res_mem_37327)[gtid_28457];
    int32_t y_29017 = sub32(x_29010, x_29011);
    float res_29018 = sitofp_i32_f32(x_29011);
    float res_29019;
    
    res_29019 = futrts_sqrt32(res_29018);
    
    float y_29020 = x_29012 * res_29019;
    __local char *mem_37488;
    
    mem_37488 = (__local char *) mem_37488_backing_0;
    
    int64_t gtid_28460 = sext_i32_i64(ltid_pre_38720);
    int32_t phys_tid_28461 = local_tid_38716;
    
    if (slt64(gtid_28460, iota32_arg_24441)) {
        int32_t index_primexp_35454 = sext_i64_i32(gtid_28460);
        bool cond_29033 = sle32(y_29017, index_primexp_35454);
        float res_29034;
        
        if (cond_29033) {
            res_29034 = 0.0F;
        } else {
            bool cond_29035 = index_primexp_35454 == 0;
            float res_29036;
            
            if (cond_29035) {
                res_29036 = x_29014;
            } else {
                int32_t i_29037 = add32(x_29011, index_primexp_35454);
                int64_t i_29038 = sext_i32_i64(i_29037);
                float x_29039 = ((__global float *) res_mem_37197)[gtid_28457 *
                                                                   N_24054 +
                                                                   i_29038];
                int32_t x_29040 = sub32(x_29011, x_29013);
                int32_t i_29041 = add32(x_29040, index_primexp_35454);
                int64_t i_29042 = sext_i32_i64(i_29041);
                float y_29043 = ((__global float *) res_mem_37197)[gtid_28457 *
                                                                   N_24054 +
                                                                   i_29042];
                float res_29044 = x_29039 - y_29043;
                
                res_29036 = res_29044;
            }
            res_29034 = res_29036;
        }
        ((__local float *) mem_37488)[gtid_28460] = res_29034;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38721;
    
    dims_flat_38721 = iota32_arg_24441;
    
    float x_29029;
    float x_29030;
    float x_38723;
    float x_38724;
    bool ltid_in_bounds_38726;
    
    ltid_in_bounds_38726 = slt64(sext_i32_i64(local_tid_38716),
                                 iota32_arg_24441);
    
    int32_t skip_threads_38727;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38726) {
            x_29030 = ((volatile __local
                        float *) mem_37488)[sext_i32_i64(local_tid_38716)];
            if ((local_tid_38716 - squot32(local_tid_38716, 32) * 32) == 0) {
                x_29029 = x_29030;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38727 = 1;
        while (slt32(skip_threads_38727, 32)) {
            if (sle32(skip_threads_38727, local_tid_38716 -
                      squot32(local_tid_38716, 32) * 32) &&
                ltid_in_bounds_38726) {
                // read operands
                {
                    x_29029 = ((volatile __local
                                float *) mem_37488)[sext_i32_i64(local_tid_38716) -
                                                    sext_i32_i64(skip_threads_38727)];
                }
                // perform operation
                {
                    bool inactive_38728 =
                         slt64(srem64(sext_i32_i64(local_tid_38716),
                                      iota32_arg_24441),
                               sext_i32_i64(local_tid_38716) -
                               sext_i32_i64(local_tid_38716 -
                               skip_threads_38727));
                    
                    if (inactive_38728) {
                        x_29029 = x_29030;
                    }
                    if (!inactive_38728) {
                        float res_29031 = x_29029 + x_29030;
                        
                        x_29029 = res_29031;
                    }
                }
            }
            if (sle32(wave_sizze_38718, skip_threads_38727)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38727, local_tid_38716 -
                      squot32(local_tid_38716, 32) * 32) &&
                ltid_in_bounds_38726) {
                // write result
                {
                    ((volatile __local
                      float *) mem_37488)[sext_i32_i64(local_tid_38716)] =
                        x_29029;
                    x_29030 = x_29029;
                }
            }
            if (sle32(wave_sizze_38718, skip_threads_38727)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38727 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38716 - squot32(local_tid_38716, 32) * 32) == 31 &&
            ltid_in_bounds_38726) {
            ((volatile __local
              float *) mem_37488)[sext_i32_i64(squot32(local_tid_38716, 32))] =
                x_29029;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38729;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38716, 32) == 0 && ltid_in_bounds_38726) {
                x_38724 = ((volatile __local
                            float *) mem_37488)[sext_i32_i64(local_tid_38716)];
                if ((local_tid_38716 - squot32(local_tid_38716, 32) * 32) ==
                    0) {
                    x_38723 = x_38724;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38729 = 1;
            while (slt32(skip_threads_38729, 32)) {
                if (sle32(skip_threads_38729, local_tid_38716 -
                          squot32(local_tid_38716, 32) * 32) &&
                    (squot32(local_tid_38716, 32) == 0 &&
                     ltid_in_bounds_38726)) {
                    // read operands
                    {
                        x_38723 = ((volatile __local
                                    float *) mem_37488)[sext_i32_i64(local_tid_38716) -
                                                        sext_i32_i64(skip_threads_38729)];
                    }
                    // perform operation
                    {
                        bool inactive_38730 =
                             slt64(srem64(sext_i32_i64(local_tid_38716 * 32 +
                                          32 - 1), iota32_arg_24441),
                                   sext_i32_i64(local_tid_38716 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38716 -
                                                 skip_threads_38729) * 32 + 32 -
                                   1));
                        
                        if (inactive_38730) {
                            x_38723 = x_38724;
                        }
                        if (!inactive_38730) {
                            float res_38725 = x_38723 + x_38724;
                            
                            x_38723 = res_38725;
                        }
                    }
                }
                if (sle32(wave_sizze_38718, skip_threads_38729)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38729, local_tid_38716 -
                          squot32(local_tid_38716, 32) * 32) &&
                    (squot32(local_tid_38716, 32) == 0 &&
                     ltid_in_bounds_38726)) {
                    // write result
                    {
                        ((volatile __local
                          float *) mem_37488)[sext_i32_i64(local_tid_38716)] =
                            x_38723;
                        x_38724 = x_38723;
                    }
                }
                if (sle32(wave_sizze_38718, skip_threads_38729)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38729 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38716, 32) == 0 || !ltid_in_bounds_38726)) {
            // read operands
            {
                x_29030 = x_29029;
                x_29029 = ((__local
                            float *) mem_37488)[sext_i32_i64(squot32(local_tid_38716,
                                                                     32)) - 1];
            }
            // perform operation
            {
                bool inactive_38731 =
                     slt64(srem64(sext_i32_i64(local_tid_38716),
                                  iota32_arg_24441),
                           sext_i32_i64(local_tid_38716) -
                           sext_i32_i64(squot32(local_tid_38716, 32) * 32 - 1));
                
                if (inactive_38731) {
                    x_29029 = x_29030;
                }
                if (!inactive_38731) {
                    float res_29031 = x_29029 + x_29030;
                    
                    x_29029 = res_29031;
                }
            }
            // write final result
            {
                ((__local float *) mem_37488)[sext_i32_i64(local_tid_38716)] =
                    x_29029;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38716, 32) == 0) {
            ((__local float *) mem_37488)[sext_i32_i64(local_tid_38716)] =
                x_29030;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37491;
    
    mem_37491 = (__local char *) mem_37491_backing_1;
    
    bool acc0_29050;
    int32_t acc0_29051;
    float acc0_29052;
    int64_t gtid_28462 = sext_i32_i64(ltid_pre_38720);
    int32_t phys_tid_28463 = local_tid_38716;
    __local char *red_arr_mem_38732;
    
    red_arr_mem_38732 = (__local char *) red_arr_mem_38732_backing_2;
    
    __local char *red_arr_mem_38734;
    
    red_arr_mem_38734 = (__local char *) red_arr_mem_38734_backing_3;
    
    __local char *red_arr_mem_38736;
    
    red_arr_mem_38736 = (__local char *) red_arr_mem_38736_backing_4;
    if (slt64(gtid_28462, iota32_arg_24441)) {
        float x_29068 = ((__local float *) mem_37488)[gtid_28462];
        float x_29069 = ((__global float *) mem_37332)[gtid_28462];
        int32_t index_primexp_35457 = sext_i64_i32(gtid_28462);
        float res_29072 = x_29068 / y_29020;
        bool cond_29073 = slt32(index_primexp_35457, y_29017);
        bool res_29074;
        
        res_29074 = futrts_isnan32(res_29072);
        
        bool res_29075 = !res_29074;
        bool x_29076 = cond_29073 && res_29075;
        float res_29077 = (float) fabs(res_29072);
        bool res_29078 = x_29069 < res_29077;
        bool x_29079 = x_29076 && res_29078;
        float res_29080;
        
        if (cond_29073) {
            res_29080 = res_29072;
        } else {
            res_29080 = 0.0F;
        }
        ((__local bool *) red_arr_mem_38732)[gtid_28462] = x_29079;
        ((__local int32_t *) red_arr_mem_38734)[gtid_28462] =
            index_primexp_35457;
        ((__local float *) red_arr_mem_38736)[gtid_28462] = res_29080;
        ((__local float *) mem_37491)[gtid_28462] = res_29072;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38738;
    int32_t skip_waves_38739;
    
    skip_waves_38739 = 1;
    
    bool x_29054;
    int32_t x_29055;
    float x_29056;
    bool x_29057;
    int32_t x_29058;
    float x_29059;
    
    offset_38738 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38716, sext_i64_i32(iota32_arg_24441))) {
            x_29054 = ((__local
                        bool *) red_arr_mem_38732)[sext_i32_i64(local_tid_38716 +
                                                   offset_38738)];
            x_29055 = ((__local
                        int32_t *) red_arr_mem_38734)[sext_i32_i64(local_tid_38716 +
                                                      offset_38738)];
            x_29056 = ((__local
                        float *) red_arr_mem_38736)[sext_i32_i64(local_tid_38716 +
                                                    offset_38738)];
        }
    }
    offset_38738 = 1;
    while (slt32(offset_38738, wave_sizze_38718)) {
        if (slt32(local_tid_38716 + offset_38738,
                  sext_i64_i32(iota32_arg_24441)) && ((local_tid_38716 -
                                                       squot32(local_tid_38716,
                                                               wave_sizze_38718) *
                                                       wave_sizze_38718) & (2 *
                                                                            offset_38738 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_29057 = ((volatile __local
                            bool *) red_arr_mem_38732)[sext_i32_i64(local_tid_38716 +
                                                       offset_38738)];
                x_29058 = ((volatile __local
                            int32_t *) red_arr_mem_38734)[sext_i32_i64(local_tid_38716 +
                                                          offset_38738)];
                x_29059 = ((volatile __local
                            float *) red_arr_mem_38736)[sext_i32_i64(local_tid_38716 +
                                                        offset_38738)];
            }
            // apply reduction operation
            {
                bool res_29060;
                int32_t res_29061;
                
                if (x_29054) {
                    res_29060 = x_29054;
                    res_29061 = x_29055;
                } else {
                    bool x_29062 = x_29057 && x_29057;
                    bool x_29063 = !x_29057;
                    bool y_29064 = x_29054 && x_29063;
                    bool res_29065 = x_29062 || y_29064;
                    int32_t res_29066;
                    
                    if (x_29057) {
                        res_29066 = x_29058;
                    } else {
                        res_29066 = x_29055;
                    }
                    res_29060 = res_29065;
                    res_29061 = res_29066;
                }
                
                float res_29067 = x_29056 + x_29059;
                
                x_29054 = res_29060;
                x_29055 = res_29061;
                x_29056 = res_29067;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_38732)[sext_i32_i64(local_tid_38716)] =
                    x_29054;
                ((volatile __local
                  int32_t *) red_arr_mem_38734)[sext_i32_i64(local_tid_38716)] =
                    x_29055;
                ((volatile __local
                  float *) red_arr_mem_38736)[sext_i32_i64(local_tid_38716)] =
                    x_29056;
            }
        }
        offset_38738 *= 2;
    }
    while (slt32(skip_waves_38739, squot32(sext_i64_i32(iota32_arg_24441) +
                                           wave_sizze_38718 - 1,
                                           wave_sizze_38718))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38738 = skip_waves_38739 * wave_sizze_38718;
        if (slt32(local_tid_38716 + offset_38738,
                  sext_i64_i32(iota32_arg_24441)) && ((local_tid_38716 -
                                                       squot32(local_tid_38716,
                                                               wave_sizze_38718) *
                                                       wave_sizze_38718) == 0 &&
                                                      (squot32(local_tid_38716,
                                                               wave_sizze_38718) &
                                                       (2 * skip_waves_38739 -
                                                        1)) == 0)) {
            // read array element
            {
                x_29057 = ((__local
                            bool *) red_arr_mem_38732)[sext_i32_i64(local_tid_38716 +
                                                       offset_38738)];
                x_29058 = ((__local
                            int32_t *) red_arr_mem_38734)[sext_i32_i64(local_tid_38716 +
                                                          offset_38738)];
                x_29059 = ((__local
                            float *) red_arr_mem_38736)[sext_i32_i64(local_tid_38716 +
                                                        offset_38738)];
            }
            // apply reduction operation
            {
                bool res_29060;
                int32_t res_29061;
                
                if (x_29054) {
                    res_29060 = x_29054;
                    res_29061 = x_29055;
                } else {
                    bool x_29062 = x_29057 && x_29057;
                    bool x_29063 = !x_29057;
                    bool y_29064 = x_29054 && x_29063;
                    bool res_29065 = x_29062 || y_29064;
                    int32_t res_29066;
                    
                    if (x_29057) {
                        res_29066 = x_29058;
                    } else {
                        res_29066 = x_29055;
                    }
                    res_29060 = res_29065;
                    res_29061 = res_29066;
                }
                
                float res_29067 = x_29056 + x_29059;
                
                x_29054 = res_29060;
                x_29055 = res_29061;
                x_29056 = res_29067;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_38732)[sext_i32_i64(local_tid_38716)] =
                    x_29054;
                ((__local
                  int32_t *) red_arr_mem_38734)[sext_i32_i64(local_tid_38716)] =
                    x_29055;
                ((__local
                  float *) red_arr_mem_38736)[sext_i32_i64(local_tid_38716)] =
                    x_29056;
            }
        }
        skip_waves_38739 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_29050 = ((__local bool *) red_arr_mem_38732)[0];
    acc0_29051 = ((__local int32_t *) red_arr_mem_38734)[0];
    acc0_29052 = ((__local float *) red_arr_mem_38736)[0];
    
    bool x_29083 = acc0_29050 && acc0_29050;
    int32_t res_29087;
    
    if (acc0_29050) {
        res_29087 = acc0_29051;
    } else {
        res_29087 = -1;
    }
    
    bool cond_29094 = y_29017 == 0;
    float res_29095;
    
    if (cond_29094) {
        res_29095 = 0.0F;
    } else {
        float res_29096 = sitofp_i32_f32(y_29017);
        float res_29097 = acc0_29052 / res_29096;
        
        res_29095 = res_29097;
    }
    
    __local char *mem_37494;
    
    mem_37494 = (__local char *) mem_37494_backing_5;
    
    int64_t gtid_28464 = sext_i32_i64(ltid_pre_38720);
    int32_t phys_tid_28465 = local_tid_38716;
    
    if (slt64(gtid_28464, iota32_arg_24441)) {
        int32_t index_primexp_35460 = sext_i64_i32(gtid_28464);
        bool cond_29100 = slt32(index_primexp_35460, y_29017);
        bool cond_29101;
        
        if (cond_29100) {
            int32_t i_29102 = add32(x_29011, index_primexp_35460);
            int64_t i_29103 = sext_i32_i64(i_29102);
            bool x_29104 = sle64(0, i_29103);
            bool y_29105 = slt64(i_29103, N_24054);
            bool bounds_check_29106 = x_29104 && y_29105;
            bool index_certs_29107;
            
            if (!bounds_check_29106) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 22) ==
                        -1) {
                        global_failure_args[0] = i_29103;
                        global_failure_args[1] = N_24054;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float isnan_arg_29108 = ((__global
                                      float *) res_mem_37197)[gtid_28457 *
                                                              N_24054 +
                                                              i_29103];
            bool res_29109;
            
            res_29109 = futrts_isnan32(isnan_arg_29108);
            
            bool res_29110 = !res_29109;
            
            cond_29101 = res_29110;
        } else {
            cond_29101 = 0;
        }
        
        float res_29111;
        
        if (cond_29101) {
            int32_t i_29112 = add32(x_29011, index_primexp_35460);
            int64_t i_29113 = sext_i32_i64(i_29112);
            bool x_29114 = sle64(0, i_29113);
            bool y_29115 = slt64(i_29113, N_24054);
            bool bounds_check_29116 = x_29114 && y_29115;
            bool index_certs_29117;
            
            if (!bounds_check_29116) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 23) ==
                        -1) {
                        global_failure_args[0] = i_29113;
                        global_failure_args[1] = N_24054;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float res_29118 = ((__global float *) res_mem_37197)[gtid_28457 *
                                                                 N_24054 +
                                                                 i_29113];
            
            res_29111 = res_29118;
        } else {
            res_29111 = INFINITY;
        }
        ((__local float *) mem_37494)[gtid_28464] = res_29111;
    }
    
  error_3:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37504;
    
    mem_37504 = (__local char *) mem_37504_backing_6;
    
    __local char *mem_37506;
    
    mem_37506 = (__local char *) mem_37506_backing_7;
    
    __local char *mem_37508;
    
    mem_37508 = (__local char *) mem_37508_backing_8;
    
    __local char *mem_37510;
    
    mem_37510 = (__local char *) mem_37510_backing_9;
    
    __local char *mem_37512;
    
    mem_37512 = (__local char *) mem_37512_backing_10;
    
    __local char *double_buffer_mem_37715;
    
    double_buffer_mem_37715 = (__local
                               char *) double_buffer_mem_37715_backing_11;
    ((__local float *) double_buffer_mem_37715)[sext_i32_i64(local_tid_38716)] =
        ((__local float *) mem_37494)[sext_i32_i64(local_tid_38716)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37514;
    
    mem_37514 = (__local char *) mem_37514_backing_12;
    for (int32_t i_29120 = 0; i_29120 < iters_24467; i_29120++) {
        int32_t lifted_2_radix_sort_step_arg_29122 = mul32(2, i_29120);
        int32_t lifted_0_get_bit_arg_29123 = add32(1,
                                                   lifted_2_radix_sort_step_arg_29122);
        bool res_29124 = lifted_0_get_bit_arg_29123 == 31;
        bool res_29125 = lifted_2_radix_sort_step_arg_29122 == 31;
        int64_t gtid_28486 = sext_i32_i64(ltid_pre_38720);
        int32_t phys_tid_28487 = local_tid_38716;
        
        if (slt64(gtid_28486, iota32_arg_24441)) {
            float x_29143 = ((__local
                              float *) double_buffer_mem_37715)[gtid_28486];
            int32_t i32_arg_29144;
            
            i32_arg_29144 = futrts_to_bits32(x_29143);
            
            int32_t unsign_arg_29145 = ashr32(i32_arg_29144,
                                              lifted_0_get_bit_arg_29123);
            int32_t unsign_arg_29146 = 1 & unsign_arg_29145;
            int32_t unsign_arg_29147 = ashr32(i32_arg_29144, 31);
            int32_t unsign_arg_29148 = 1 & unsign_arg_29147;
            bool cond_29149 = unsign_arg_29148 == 1;
            bool x_29150 = !cond_29149;
            bool y_29151 = res_29124 && x_29150;
            bool cond_29152 = cond_29149 || y_29151;
            int32_t res_29153;
            
            if (cond_29152) {
                int32_t res_29154 = 1 ^ unsign_arg_29146;
                
                res_29153 = res_29154;
            } else {
                res_29153 = unsign_arg_29146;
            }
            
            int32_t x_29155 = mul32(2, res_29153);
            int32_t unsign_arg_29156 = ashr32(i32_arg_29144,
                                              lifted_2_radix_sort_step_arg_29122);
            int32_t unsign_arg_29157 = 1 & unsign_arg_29156;
            bool y_29158 = res_29125 && x_29150;
            bool cond_29159 = cond_29149 || y_29158;
            int32_t res_29160;
            
            if (cond_29159) {
                int32_t res_29161 = 1 ^ unsign_arg_29157;
                
                res_29160 = res_29161;
            } else {
                res_29160 = unsign_arg_29157;
            }
            
            int32_t res_29162 = add32(x_29155, res_29160);
            bool cond_29163 = res_29162 == 0;
            int64_t res_29164 = btoi_bool_i64(cond_29163);
            int64_t res_29165;
            int64_t res_29166;
            int64_t res_29167;
            
            if (cond_29163) {
                res_29165 = 0;
                res_29166 = 0;
                res_29167 = 0;
            } else {
                bool cond_29168 = res_29162 == 1;
                int64_t res_29169 = btoi_bool_i64(cond_29168);
                int64_t res_29170;
                int64_t res_29171;
                
                if (cond_29168) {
                    res_29170 = 0;
                    res_29171 = 0;
                } else {
                    bool cond_29172 = res_29162 == 2;
                    int64_t res_29173 = btoi_bool_i64(cond_29172);
                    bool cond_neg_29174 = !cond_29172;
                    int64_t res_29175 = btoi_bool_i64(cond_neg_29174);
                    
                    res_29170 = res_29173;
                    res_29171 = res_29175;
                }
                res_29165 = res_29169;
                res_29166 = res_29170;
                res_29167 = res_29171;
            }
            ((__local int64_t *) mem_37504)[gtid_28486] = res_29164;
            ((__local int64_t *) mem_37506)[gtid_28486] = res_29165;
            ((__local int64_t *) mem_37508)[gtid_28486] = res_29166;
            ((__local int64_t *) mem_37510)[gtid_28486] = res_29167;
            ((__local int32_t *) mem_37512)[gtid_28486] = res_29162;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t dims_flat_38741;
        
        dims_flat_38741 = iota32_arg_24441;
        
        int64_t x_29131;
        int64_t x_29132;
        int64_t x_29133;
        int64_t x_29134;
        int64_t x_29135;
        int64_t x_29136;
        int64_t x_29137;
        int64_t x_29138;
        int64_t x_38746;
        int64_t x_38747;
        int64_t x_38748;
        int64_t x_38749;
        int64_t x_38750;
        int64_t x_38751;
        int64_t x_38752;
        int64_t x_38753;
        bool ltid_in_bounds_38758;
        
        ltid_in_bounds_38758 = slt64(sext_i32_i64(local_tid_38716),
                                     iota32_arg_24441);
        
        int32_t skip_threads_38759;
        
        // read input for in-block scan
        {
            if (ltid_in_bounds_38758) {
                x_29135 = ((volatile __local
                            int64_t *) mem_37504)[sext_i32_i64(local_tid_38716)];
                x_29136 = ((volatile __local
                            int64_t *) mem_37506)[sext_i32_i64(local_tid_38716)];
                x_29137 = ((volatile __local
                            int64_t *) mem_37508)[sext_i32_i64(local_tid_38716)];
                x_29138 = ((volatile __local
                            int64_t *) mem_37510)[sext_i32_i64(local_tid_38716)];
                if ((local_tid_38716 - squot32(local_tid_38716, 32) * 32) ==
                    0) {
                    x_29131 = x_29135;
                    x_29132 = x_29136;
                    x_29133 = x_29137;
                    x_29134 = x_29138;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38759 = 1;
            while (slt32(skip_threads_38759, 32)) {
                if (sle32(skip_threads_38759, local_tid_38716 -
                          squot32(local_tid_38716, 32) * 32) &&
                    ltid_in_bounds_38758) {
                    // read operands
                    {
                        x_29131 = ((volatile __local
                                    int64_t *) mem_37504)[sext_i32_i64(local_tid_38716) -
                                                          sext_i32_i64(skip_threads_38759)];
                        x_29132 = ((volatile __local
                                    int64_t *) mem_37506)[sext_i32_i64(local_tid_38716) -
                                                          sext_i32_i64(skip_threads_38759)];
                        x_29133 = ((volatile __local
                                    int64_t *) mem_37508)[sext_i32_i64(local_tid_38716) -
                                                          sext_i32_i64(skip_threads_38759)];
                        x_29134 = ((volatile __local
                                    int64_t *) mem_37510)[sext_i32_i64(local_tid_38716) -
                                                          sext_i32_i64(skip_threads_38759)];
                    }
                    // perform operation
                    {
                        bool inactive_38760 =
                             slt64(srem64(sext_i32_i64(local_tid_38716),
                                          iota32_arg_24441),
                                   sext_i32_i64(local_tid_38716) -
                                   sext_i32_i64(local_tid_38716 -
                                   skip_threads_38759));
                        
                        if (inactive_38760) {
                            x_29131 = x_29135;
                            x_29132 = x_29136;
                            x_29133 = x_29137;
                            x_29134 = x_29138;
                        }
                        if (!inactive_38760) {
                            int64_t res_29139 = add64(x_29131, x_29135);
                            int64_t res_29140 = add64(x_29132, x_29136);
                            int64_t res_29141 = add64(x_29133, x_29137);
                            int64_t res_29142 = add64(x_29134, x_29138);
                            
                            x_29131 = res_29139;
                            x_29132 = res_29140;
                            x_29133 = res_29141;
                            x_29134 = res_29142;
                        }
                    }
                }
                if (sle32(wave_sizze_38718, skip_threads_38759)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38759, local_tid_38716 -
                          squot32(local_tid_38716, 32) * 32) &&
                    ltid_in_bounds_38758) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37504)[sext_i32_i64(local_tid_38716)] =
                            x_29131;
                        x_29135 = x_29131;
                        ((volatile __local
                          int64_t *) mem_37506)[sext_i32_i64(local_tid_38716)] =
                            x_29132;
                        x_29136 = x_29132;
                        ((volatile __local
                          int64_t *) mem_37508)[sext_i32_i64(local_tid_38716)] =
                            x_29133;
                        x_29137 = x_29133;
                        ((volatile __local
                          int64_t *) mem_37510)[sext_i32_i64(local_tid_38716)] =
                            x_29134;
                        x_29138 = x_29134;
                    }
                }
                if (sle32(wave_sizze_38718, skip_threads_38759)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38759 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_38716 - squot32(local_tid_38716, 32) * 32) == 31 &&
                ltid_in_bounds_38758) {
                ((volatile __local
                  int64_t *) mem_37504)[sext_i32_i64(squot32(local_tid_38716,
                                                             32))] = x_29131;
                ((volatile __local
                  int64_t *) mem_37506)[sext_i32_i64(squot32(local_tid_38716,
                                                             32))] = x_29132;
                ((volatile __local
                  int64_t *) mem_37508)[sext_i32_i64(squot32(local_tid_38716,
                                                             32))] = x_29133;
                ((volatile __local
                  int64_t *) mem_37510)[sext_i32_i64(squot32(local_tid_38716,
                                                             32))] = x_29134;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_38761;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_38716, 32) == 0 && ltid_in_bounds_38758) {
                    x_38750 = ((volatile __local
                                int64_t *) mem_37504)[sext_i32_i64(local_tid_38716)];
                    x_38751 = ((volatile __local
                                int64_t *) mem_37506)[sext_i32_i64(local_tid_38716)];
                    x_38752 = ((volatile __local
                                int64_t *) mem_37508)[sext_i32_i64(local_tid_38716)];
                    x_38753 = ((volatile __local
                                int64_t *) mem_37510)[sext_i32_i64(local_tid_38716)];
                    if ((local_tid_38716 - squot32(local_tid_38716, 32) * 32) ==
                        0) {
                        x_38746 = x_38750;
                        x_38747 = x_38751;
                        x_38748 = x_38752;
                        x_38749 = x_38753;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38761 = 1;
                while (slt32(skip_threads_38761, 32)) {
                    if (sle32(skip_threads_38761, local_tid_38716 -
                              squot32(local_tid_38716, 32) * 32) &&
                        (squot32(local_tid_38716, 32) == 0 &&
                         ltid_in_bounds_38758)) {
                        // read operands
                        {
                            x_38746 = ((volatile __local
                                        int64_t *) mem_37504)[sext_i32_i64(local_tid_38716) -
                                                              sext_i32_i64(skip_threads_38761)];
                            x_38747 = ((volatile __local
                                        int64_t *) mem_37506)[sext_i32_i64(local_tid_38716) -
                                                              sext_i32_i64(skip_threads_38761)];
                            x_38748 = ((volatile __local
                                        int64_t *) mem_37508)[sext_i32_i64(local_tid_38716) -
                                                              sext_i32_i64(skip_threads_38761)];
                            x_38749 = ((volatile __local
                                        int64_t *) mem_37510)[sext_i32_i64(local_tid_38716) -
                                                              sext_i32_i64(skip_threads_38761)];
                        }
                        // perform operation
                        {
                            bool inactive_38762 =
                                 slt64(srem64(sext_i32_i64(local_tid_38716 *
                                              32 + 32 - 1), iota32_arg_24441),
                                       sext_i32_i64(local_tid_38716 * 32 + 32 -
                                       1) - sext_i32_i64((local_tid_38716 -
                                                          skip_threads_38761) *
                                       32 + 32 - 1));
                            
                            if (inactive_38762) {
                                x_38746 = x_38750;
                                x_38747 = x_38751;
                                x_38748 = x_38752;
                                x_38749 = x_38753;
                            }
                            if (!inactive_38762) {
                                int64_t res_38754 = add64(x_38746, x_38750);
                                int64_t res_38755 = add64(x_38747, x_38751);
                                int64_t res_38756 = add64(x_38748, x_38752);
                                int64_t res_38757 = add64(x_38749, x_38753);
                                
                                x_38746 = res_38754;
                                x_38747 = res_38755;
                                x_38748 = res_38756;
                                x_38749 = res_38757;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38718, skip_threads_38761)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38761, local_tid_38716 -
                              squot32(local_tid_38716, 32) * 32) &&
                        (squot32(local_tid_38716, 32) == 0 &&
                         ltid_in_bounds_38758)) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) mem_37504)[sext_i32_i64(local_tid_38716)] =
                                x_38746;
                            x_38750 = x_38746;
                            ((volatile __local
                              int64_t *) mem_37506)[sext_i32_i64(local_tid_38716)] =
                                x_38747;
                            x_38751 = x_38747;
                            ((volatile __local
                              int64_t *) mem_37508)[sext_i32_i64(local_tid_38716)] =
                                x_38748;
                            x_38752 = x_38748;
                            ((volatile __local
                              int64_t *) mem_37510)[sext_i32_i64(local_tid_38716)] =
                                x_38749;
                            x_38753 = x_38749;
                        }
                    }
                    if (sle32(wave_sizze_38718, skip_threads_38761)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38761 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // carry-in for every block except the first
        {
            if (!(squot32(local_tid_38716, 32) == 0 || !ltid_in_bounds_38758)) {
                // read operands
                {
                    x_29135 = x_29131;
                    x_29136 = x_29132;
                    x_29137 = x_29133;
                    x_29138 = x_29134;
                    x_29131 = ((__local
                                int64_t *) mem_37504)[sext_i32_i64(squot32(local_tid_38716,
                                                                           32)) -
                                                      1];
                    x_29132 = ((__local
                                int64_t *) mem_37506)[sext_i32_i64(squot32(local_tid_38716,
                                                                           32)) -
                                                      1];
                    x_29133 = ((__local
                                int64_t *) mem_37508)[sext_i32_i64(squot32(local_tid_38716,
                                                                           32)) -
                                                      1];
                    x_29134 = ((__local
                                int64_t *) mem_37510)[sext_i32_i64(squot32(local_tid_38716,
                                                                           32)) -
                                                      1];
                }
                // perform operation
                {
                    bool inactive_38763 =
                         slt64(srem64(sext_i32_i64(local_tid_38716),
                                      iota32_arg_24441),
                               sext_i32_i64(local_tid_38716) -
                               sext_i32_i64(squot32(local_tid_38716, 32) * 32 -
                               1));
                    
                    if (inactive_38763) {
                        x_29131 = x_29135;
                        x_29132 = x_29136;
                        x_29133 = x_29137;
                        x_29134 = x_29138;
                    }
                    if (!inactive_38763) {
                        int64_t res_29139 = add64(x_29131, x_29135);
                        int64_t res_29140 = add64(x_29132, x_29136);
                        int64_t res_29141 = add64(x_29133, x_29137);
                        int64_t res_29142 = add64(x_29134, x_29138);
                        
                        x_29131 = res_29139;
                        x_29132 = res_29140;
                        x_29133 = res_29141;
                        x_29134 = res_29142;
                    }
                }
                // write final result
                {
                    ((__local
                      int64_t *) mem_37504)[sext_i32_i64(local_tid_38716)] =
                        x_29131;
                    ((__local
                      int64_t *) mem_37506)[sext_i32_i64(local_tid_38716)] =
                        x_29132;
                    ((__local
                      int64_t *) mem_37508)[sext_i32_i64(local_tid_38716)] =
                        x_29133;
                    ((__local
                      int64_t *) mem_37510)[sext_i32_i64(local_tid_38716)] =
                        x_29134;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_38716, 32) == 0) {
                ((__local int64_t *) mem_37504)[sext_i32_i64(local_tid_38716)] =
                    x_29135;
                ((__local int64_t *) mem_37506)[sext_i32_i64(local_tid_38716)] =
                    x_29136;
                ((__local int64_t *) mem_37508)[sext_i32_i64(local_tid_38716)] =
                    x_29137;
                ((__local int64_t *) mem_37510)[sext_i32_i64(local_tid_38716)] =
                    x_29138;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t res_29176 = ((__local int64_t *) mem_37504)[i_24469];
        int64_t res_29177 = ((__local int64_t *) mem_37506)[i_24469];
        int64_t res_29178 = ((__local int64_t *) mem_37508)[i_24469];
        
        ((__local float *) mem_37514)[sext_i32_i64(local_tid_38716)] = ((__local
                                                                         float *) double_buffer_mem_37715)[sext_i32_i64(local_tid_38716)];
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_28488 = sext_i32_i64(ltid_pre_38720);
        int32_t phys_tid_28489 = local_tid_38716;
        
        if (slt64(write_i_28488, iota32_arg_24441)) {
            int32_t x_29181 = ((__local int32_t *) mem_37512)[write_i_28488];
            float write_value_29186 = ((__local
                                        float *) double_buffer_mem_37715)[write_i_28488];
            bool match_lit_29187 = 0 == x_29181;
            int64_t res_29188;
            
            if (match_lit_29187) {
                int64_t x_29182 = ((__local
                                    int64_t *) mem_37504)[write_i_28488];
                int64_t res_29189 = sub64(x_29182, 1);
                
                res_29188 = res_29189;
            } else {
                int64_t x_29183 = ((__local
                                    int64_t *) mem_37506)[write_i_28488];
                int64_t x_29184 = ((__local
                                    int64_t *) mem_37508)[write_i_28488];
                int64_t x_29185 = ((__local
                                    int64_t *) mem_37510)[write_i_28488];
                bool match_lit_29190 = 1 == x_29181;
                int64_t x_29191;
                
                if (match_lit_29190) {
                    int64_t x_29192 = add64(res_29176, x_29183);
                    int64_t res_29193 = sub64(x_29192, 1);
                    
                    x_29191 = res_29193;
                } else {
                    bool match_lit_29194 = 2 == x_29181;
                    int64_t x_29195;
                    
                    if (match_lit_29194) {
                        int64_t x_29196 = add64(res_29176, res_29177);
                        int64_t x_29197 = add64(x_29184, x_29196);
                        int64_t res_29198 = sub64(x_29197, 1);
                        
                        x_29195 = res_29198;
                    } else {
                        int64_t x_29199 = add64(res_29176, res_29177);
                        int64_t x_29200 = add64(res_29178, x_29199);
                        int64_t x_29201 = add64(x_29185, x_29200);
                        int64_t res_29202 = sub64(x_29201, 1);
                        
                        x_29195 = res_29202;
                    }
                    x_29191 = x_29195;
                }
                res_29188 = x_29191;
            }
            if (sle64(0, res_29188) && slt64(res_29188, iota32_arg_24441)) {
                ((__local float *) mem_37514)[res_29188] = write_value_29186;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ((__local
          float *) double_buffer_mem_37715)[sext_i32_i64(local_tid_38716)] =
            ((__local float *) mem_37514)[sext_i32_i64(local_tid_38716)];
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    int32_t i_29203 = sdiv32(y_29017, 2);
    int32_t j_29204 = sub32(i_29203, 1);
    bool cond_29205 = x_29010 == x_29011;
    float res_29206;
    
    if (cond_29205) {
        res_29206 = 0.0F;
    } else {
        int32_t x_29207 = smod32(y_29017, 2);
        bool cond_29208 = x_29207 == 0;
        float res_29209;
        
        if (cond_29208) {
            int64_t j_29210 = sext_i32_i64(j_29204);
            bool x_29211 = sle64(0, j_29210);
            bool y_29212 = slt64(j_29210, iota32_arg_24441);
            bool bounds_check_29213 = x_29211 && y_29212;
            bool index_certs_29214;
            
            if (!bounds_check_29213) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 24) ==
                        -1) {
                        global_failure_args[0] = j_29210;
                        global_failure_args[1] = iota32_arg_24441;
                        ;
                    }
                    local_failure = true;
                    goto error_6;
                }
            }
            
            float x_29215 = ((__local
                              float *) double_buffer_mem_37715)[j_29210];
            int64_t i_29216 = sext_i32_i64(i_29203);
            bool x_29217 = sle64(0, i_29216);
            bool y_29218 = slt64(i_29216, iota32_arg_24441);
            bool bounds_check_29219 = x_29217 && y_29218;
            bool index_certs_29220;
            
            if (!bounds_check_29219) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 25) ==
                        -1) {
                        global_failure_args[0] = i_29216;
                        global_failure_args[1] = iota32_arg_24441;
                        ;
                    }
                    local_failure = true;
                    goto error_6;
                }
            }
            
            float y_29221 = ((__local
                              float *) double_buffer_mem_37715)[i_29216];
            float x_29222 = x_29215 + y_29221;
            float res_29223 = x_29222 / 2.0F;
            
            res_29209 = res_29223;
        } else {
            int64_t i_29224 = sext_i32_i64(i_29203);
            bool x_29225 = sle64(0, i_29224);
            bool y_29226 = slt64(i_29224, iota32_arg_24441);
            bool bounds_check_29227 = x_29225 && y_29226;
            bool index_certs_29228;
            
            if (!bounds_check_29227) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 26) ==
                        -1) {
                        global_failure_args[0] = i_29224;
                        global_failure_args[1] = iota32_arg_24441;
                        ;
                    }
                    local_failure = true;
                    goto error_6;
                }
            }
            
            float res_29229 = ((__local
                                float *) double_buffer_mem_37715)[i_29224];
            
            res_29209 = res_29229;
        }
        res_29206 = res_29209;
    }
    
    bool cond_29230 = !x_29083;
    int32_t fst_breakzq_29231;
    
    if (cond_29230) {
        fst_breakzq_29231 = -1;
    } else {
        bool cond_29232 = slt32(res_29087, y_29017);
        int32_t res_29233;
        
        if (cond_29232) {
            int32_t i_29234 = add32(x_29011, res_29087);
            int64_t i_29235 = sext_i32_i64(i_29234);
            int32_t x_29236 = ((__global int32_t *) res_mem_37198)[gtid_28457 *
                                                                   N_24054 +
                                                                   i_29235];
            int32_t res_29237 = sub32(x_29236, n_24059);
            
            res_29233 = res_29237;
        } else {
            res_29233 = -1;
        }
        fst_breakzq_29231 = res_29233;
    }
    
    bool cond_29238 = sle32(x_29011, 5);
    bool res_29239 = sle32(y_29017, 5);
    bool x_29240 = !cond_29238;
    bool y_29241 = res_29239 && x_29240;
    bool cond_29242 = cond_29238 || y_29241;
    int32_t fst_breakzq_29243;
    
    if (cond_29242) {
        fst_breakzq_29243 = -2;
    } else {
        fst_breakzq_29243 = fst_breakzq_29231;
    }
    
    __local char *mem_37524;
    
    mem_37524 = (__local char *) mem_37524_backing_13;
    ((__local float *) mem_37524)[sext_i32_i64(local_tid_38716)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_28490 = sext_i32_i64(ltid_pre_38720);
    int32_t phys_tid_28491 = local_tid_38716;
    
    if (slt64(write_i_28490, iota32_arg_24441)) {
        int32_t index_primexp_35463 = sext_i64_i32(write_i_28490);
        float write_value_29247 = ((__local float *) mem_37491)[write_i_28490];
        bool cond_29248 = slt32(index_primexp_35463, y_29017);
        int32_t res_29249;
        
        if (cond_29248) {
            int32_t i_29250 = add32(x_29011, index_primexp_35463);
            int64_t i_29251 = sext_i32_i64(i_29250);
            int32_t x_29252 = ((__global int32_t *) res_mem_37198)[gtid_28457 *
                                                                   N_24054 +
                                                                   i_29251];
            int32_t res_29253 = sub32(x_29252, n_24059);
            
            res_29249 = res_29253;
        } else {
            res_29249 = -1;
        }
        
        int64_t res_29254 = sext_i32_i64(res_29249);
        
        if (sle64(0, res_29254) && slt64(res_29254, iota32_arg_24441)) {
            ((__local float *) mem_37524)[res_29254] = write_value_29247;
        }
    }
    
  error_6:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37528)[gtid_28457 * iota32_arg_24441 +
                                   sext_i32_i64(local_tid_38716)] = ((__local
                                                                      float *) mem_37524)[sext_i32_i64(local_tid_38716)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37531)[gtid_28457 * iota32_arg_24441 +
                                   sext_i32_i64(local_tid_38716)] = ((__local
                                                                      float *) mem_37491)[sext_i32_i64(local_tid_38716)];
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38716 == 0) {
        ((__global int32_t *) mem_37533)[gtid_28457] = fst_breakzq_29243;
    }
    if (local_tid_38716 == 0) {
        ((__global float *) mem_37535)[gtid_28457] = res_29095;
    }
    if (local_tid_38716 == 0) {
        ((__global float *) mem_37537)[gtid_28457] = res_29206;
    }
    
  error_7:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_29376(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37595_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37593_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_37591_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37589_backing_aligned_3,
                                                    __local volatile
                                                    int64_t *mem_37587_backing_aligned_4,
                                                    __local volatile
                                                    int64_t *mem_37585_backing_aligned_5,
                                                    int64_t m_24055,
                                                    int64_t iota32_arg_24441,
                                                    int64_t i_24469,
                                                    int32_t lifted_2_radix_sort_step_arg_30282,
                                                    int32_t lifted_0_get_bit_arg_30283,
                                                    unsigned char res_30284,
                                                    unsigned char res_30285,
                                                    __global
                                                    unsigned char *mem_param_37576,
                                                    __global
                                                    unsigned char *mem_37581,
                                                    __global
                                                    unsigned char *mem_37599)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37595_backing_5 = (__local volatile
                                                           char *) mem_37595_backing_aligned_0;
    __local volatile char *restrict mem_37593_backing_4 = (__local volatile
                                                           char *) mem_37593_backing_aligned_1;
    __local volatile char *restrict mem_37591_backing_3 = (__local volatile
                                                           char *) mem_37591_backing_aligned_2;
    __local volatile char *restrict mem_37589_backing_2 = (__local volatile
                                                           char *) mem_37589_backing_aligned_3;
    __local volatile char *restrict mem_37587_backing_1 = (__local volatile
                                                           char *) mem_37587_backing_aligned_4;
    __local volatile char *restrict mem_37585_backing_0 = (__local volatile
                                                           char *) mem_37585_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38943;
    int32_t local_tid_38944;
    int64_t group_sizze_38947;
    int32_t wave_sizze_38946;
    int32_t group_tid_38945;
    
    global_tid_38943 = get_global_id(0);
    local_tid_38944 = get_local_id(0);
    group_sizze_38947 = get_local_size(0);
    wave_sizze_38946 = LOCKSTEP_WIDTH;
    group_tid_38945 = get_group_id(0);
    
    int32_t phys_tid_29376;
    
    phys_tid_29376 = group_tid_38945;
    
    int32_t ltid_pre_38948;
    
    ltid_pre_38948 = local_tid_38944;
    
    int64_t gtid_29369;
    
    gtid_29369 = sext_i32_i64(group_tid_38945);
    
    __local char *mem_37585;
    
    mem_37585 = (__local char *) mem_37585_backing_0;
    
    __local char *mem_37587;
    
    mem_37587 = (__local char *) mem_37587_backing_1;
    
    __local char *mem_37589;
    
    mem_37589 = (__local char *) mem_37589_backing_2;
    
    __local char *mem_37591;
    
    mem_37591 = (__local char *) mem_37591_backing_3;
    
    __local char *mem_37593;
    
    mem_37593 = (__local char *) mem_37593_backing_4;
    
    int64_t gtid_29372 = sext_i32_i64(ltid_pre_38948);
    int32_t phys_tid_29373 = local_tid_38944;
    
    if (slt64(gtid_29372, iota32_arg_24441)) {
        float x_30315 = ((__global float *) mem_param_37576)[gtid_29369 *
                                                             iota32_arg_24441 +
                                                             gtid_29372];
        int32_t i32_arg_30316;
        
        i32_arg_30316 = futrts_to_bits32(x_30315);
        
        int32_t unsign_arg_30317 = ashr32(i32_arg_30316,
                                          lifted_0_get_bit_arg_30283);
        int32_t unsign_arg_30318 = 1 & unsign_arg_30317;
        int32_t unsign_arg_30319 = ashr32(i32_arg_30316, 31);
        int32_t unsign_arg_30320 = 1 & unsign_arg_30319;
        bool cond_30321 = unsign_arg_30320 == 1;
        bool x_30322 = !cond_30321;
        bool y_30323 = res_30284 && x_30322;
        bool cond_30324 = cond_30321 || y_30323;
        int32_t res_30325;
        
        if (cond_30324) {
            int32_t res_30326 = 1 ^ unsign_arg_30318;
            
            res_30325 = res_30326;
        } else {
            res_30325 = unsign_arg_30318;
        }
        
        int32_t x_30327 = mul32(2, res_30325);
        int32_t unsign_arg_30328 = ashr32(i32_arg_30316,
                                          lifted_2_radix_sort_step_arg_30282);
        int32_t unsign_arg_30329 = 1 & unsign_arg_30328;
        bool y_30330 = res_30285 && x_30322;
        bool cond_30331 = cond_30321 || y_30330;
        int32_t res_30332;
        
        if (cond_30331) {
            int32_t res_30333 = 1 ^ unsign_arg_30329;
            
            res_30332 = res_30333;
        } else {
            res_30332 = unsign_arg_30329;
        }
        
        int32_t res_30334 = add32(x_30327, res_30332);
        bool cond_30335 = res_30334 == 0;
        int64_t res_30336 = btoi_bool_i64(cond_30335);
        int64_t res_30337;
        int64_t res_30338;
        int64_t res_30339;
        
        if (cond_30335) {
            res_30337 = 0;
            res_30338 = 0;
            res_30339 = 0;
        } else {
            bool cond_30340 = res_30334 == 1;
            int64_t res_30341 = btoi_bool_i64(cond_30340);
            int64_t res_30342;
            int64_t res_30343;
            
            if (cond_30340) {
                res_30342 = 0;
                res_30343 = 0;
            } else {
                bool cond_30344 = res_30334 == 2;
                int64_t res_30345 = btoi_bool_i64(cond_30344);
                bool cond_neg_30346 = !cond_30344;
                int64_t res_30347 = btoi_bool_i64(cond_neg_30346);
                
                res_30342 = res_30345;
                res_30343 = res_30347;
            }
            res_30337 = res_30341;
            res_30338 = res_30342;
            res_30339 = res_30343;
        }
        ((__local int64_t *) mem_37585)[gtid_29372] = res_30336;
        ((__local int64_t *) mem_37587)[gtid_29372] = res_30337;
        ((__local int64_t *) mem_37589)[gtid_29372] = res_30338;
        ((__local int64_t *) mem_37591)[gtid_29372] = res_30339;
        ((__local int32_t *) mem_37593)[gtid_29372] = res_30334;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38949;
    
    dims_flat_38949 = iota32_arg_24441;
    
    int64_t x_30303;
    int64_t x_30304;
    int64_t x_30305;
    int64_t x_30306;
    int64_t x_30307;
    int64_t x_30308;
    int64_t x_30309;
    int64_t x_30310;
    int64_t x_38954;
    int64_t x_38955;
    int64_t x_38956;
    int64_t x_38957;
    int64_t x_38958;
    int64_t x_38959;
    int64_t x_38960;
    int64_t x_38961;
    bool ltid_in_bounds_38966;
    
    ltid_in_bounds_38966 = slt64(sext_i32_i64(local_tid_38944),
                                 iota32_arg_24441);
    
    int32_t skip_threads_38967;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38966) {
            x_30307 = ((volatile __local
                        int64_t *) mem_37585)[sext_i32_i64(local_tid_38944)];
            x_30308 = ((volatile __local
                        int64_t *) mem_37587)[sext_i32_i64(local_tid_38944)];
            x_30309 = ((volatile __local
                        int64_t *) mem_37589)[sext_i32_i64(local_tid_38944)];
            x_30310 = ((volatile __local
                        int64_t *) mem_37591)[sext_i32_i64(local_tid_38944)];
            if ((local_tid_38944 - squot32(local_tid_38944, 32) * 32) == 0) {
                x_30303 = x_30307;
                x_30304 = x_30308;
                x_30305 = x_30309;
                x_30306 = x_30310;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38967 = 1;
        while (slt32(skip_threads_38967, 32)) {
            if (sle32(skip_threads_38967, local_tid_38944 -
                      squot32(local_tid_38944, 32) * 32) &&
                ltid_in_bounds_38966) {
                // read operands
                {
                    x_30303 = ((volatile __local
                                int64_t *) mem_37585)[sext_i32_i64(local_tid_38944) -
                                                      sext_i32_i64(skip_threads_38967)];
                    x_30304 = ((volatile __local
                                int64_t *) mem_37587)[sext_i32_i64(local_tid_38944) -
                                                      sext_i32_i64(skip_threads_38967)];
                    x_30305 = ((volatile __local
                                int64_t *) mem_37589)[sext_i32_i64(local_tid_38944) -
                                                      sext_i32_i64(skip_threads_38967)];
                    x_30306 = ((volatile __local
                                int64_t *) mem_37591)[sext_i32_i64(local_tid_38944) -
                                                      sext_i32_i64(skip_threads_38967)];
                }
                // perform operation
                {
                    bool inactive_38968 =
                         slt64(srem64(sext_i32_i64(local_tid_38944),
                                      iota32_arg_24441),
                               sext_i32_i64(local_tid_38944) -
                               sext_i32_i64(local_tid_38944 -
                               skip_threads_38967));
                    
                    if (inactive_38968) {
                        x_30303 = x_30307;
                        x_30304 = x_30308;
                        x_30305 = x_30309;
                        x_30306 = x_30310;
                    }
                    if (!inactive_38968) {
                        int64_t res_30311 = add64(x_30303, x_30307);
                        int64_t res_30312 = add64(x_30304, x_30308);
                        int64_t res_30313 = add64(x_30305, x_30309);
                        int64_t res_30314 = add64(x_30306, x_30310);
                        
                        x_30303 = res_30311;
                        x_30304 = res_30312;
                        x_30305 = res_30313;
                        x_30306 = res_30314;
                    }
                }
            }
            if (sle32(wave_sizze_38946, skip_threads_38967)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38967, local_tid_38944 -
                      squot32(local_tid_38944, 32) * 32) &&
                ltid_in_bounds_38966) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37585)[sext_i32_i64(local_tid_38944)] =
                        x_30303;
                    x_30307 = x_30303;
                    ((volatile __local
                      int64_t *) mem_37587)[sext_i32_i64(local_tid_38944)] =
                        x_30304;
                    x_30308 = x_30304;
                    ((volatile __local
                      int64_t *) mem_37589)[sext_i32_i64(local_tid_38944)] =
                        x_30305;
                    x_30309 = x_30305;
                    ((volatile __local
                      int64_t *) mem_37591)[sext_i32_i64(local_tid_38944)] =
                        x_30306;
                    x_30310 = x_30306;
                }
            }
            if (sle32(wave_sizze_38946, skip_threads_38967)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38967 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38944 - squot32(local_tid_38944, 32) * 32) == 31 &&
            ltid_in_bounds_38966) {
            ((volatile __local
              int64_t *) mem_37585)[sext_i32_i64(squot32(local_tid_38944,
                                                         32))] = x_30303;
            ((volatile __local
              int64_t *) mem_37587)[sext_i32_i64(squot32(local_tid_38944,
                                                         32))] = x_30304;
            ((volatile __local
              int64_t *) mem_37589)[sext_i32_i64(squot32(local_tid_38944,
                                                         32))] = x_30305;
            ((volatile __local
              int64_t *) mem_37591)[sext_i32_i64(squot32(local_tid_38944,
                                                         32))] = x_30306;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38969;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38944, 32) == 0 && ltid_in_bounds_38966) {
                x_38958 = ((volatile __local
                            int64_t *) mem_37585)[sext_i32_i64(local_tid_38944)];
                x_38959 = ((volatile __local
                            int64_t *) mem_37587)[sext_i32_i64(local_tid_38944)];
                x_38960 = ((volatile __local
                            int64_t *) mem_37589)[sext_i32_i64(local_tid_38944)];
                x_38961 = ((volatile __local
                            int64_t *) mem_37591)[sext_i32_i64(local_tid_38944)];
                if ((local_tid_38944 - squot32(local_tid_38944, 32) * 32) ==
                    0) {
                    x_38954 = x_38958;
                    x_38955 = x_38959;
                    x_38956 = x_38960;
                    x_38957 = x_38961;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38969 = 1;
            while (slt32(skip_threads_38969, 32)) {
                if (sle32(skip_threads_38969, local_tid_38944 -
                          squot32(local_tid_38944, 32) * 32) &&
                    (squot32(local_tid_38944, 32) == 0 &&
                     ltid_in_bounds_38966)) {
                    // read operands
                    {
                        x_38954 = ((volatile __local
                                    int64_t *) mem_37585)[sext_i32_i64(local_tid_38944) -
                                                          sext_i32_i64(skip_threads_38969)];
                        x_38955 = ((volatile __local
                                    int64_t *) mem_37587)[sext_i32_i64(local_tid_38944) -
                                                          sext_i32_i64(skip_threads_38969)];
                        x_38956 = ((volatile __local
                                    int64_t *) mem_37589)[sext_i32_i64(local_tid_38944) -
                                                          sext_i32_i64(skip_threads_38969)];
                        x_38957 = ((volatile __local
                                    int64_t *) mem_37591)[sext_i32_i64(local_tid_38944) -
                                                          sext_i32_i64(skip_threads_38969)];
                    }
                    // perform operation
                    {
                        bool inactive_38970 =
                             slt64(srem64(sext_i32_i64(local_tid_38944 * 32 +
                                          32 - 1), iota32_arg_24441),
                                   sext_i32_i64(local_tid_38944 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38944 -
                                                 skip_threads_38969) * 32 + 32 -
                                   1));
                        
                        if (inactive_38970) {
                            x_38954 = x_38958;
                            x_38955 = x_38959;
                            x_38956 = x_38960;
                            x_38957 = x_38961;
                        }
                        if (!inactive_38970) {
                            int64_t res_38962 = add64(x_38954, x_38958);
                            int64_t res_38963 = add64(x_38955, x_38959);
                            int64_t res_38964 = add64(x_38956, x_38960);
                            int64_t res_38965 = add64(x_38957, x_38961);
                            
                            x_38954 = res_38962;
                            x_38955 = res_38963;
                            x_38956 = res_38964;
                            x_38957 = res_38965;
                        }
                    }
                }
                if (sle32(wave_sizze_38946, skip_threads_38969)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38969, local_tid_38944 -
                          squot32(local_tid_38944, 32) * 32) &&
                    (squot32(local_tid_38944, 32) == 0 &&
                     ltid_in_bounds_38966)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37585)[sext_i32_i64(local_tid_38944)] =
                            x_38954;
                        x_38958 = x_38954;
                        ((volatile __local
                          int64_t *) mem_37587)[sext_i32_i64(local_tid_38944)] =
                            x_38955;
                        x_38959 = x_38955;
                        ((volatile __local
                          int64_t *) mem_37589)[sext_i32_i64(local_tid_38944)] =
                            x_38956;
                        x_38960 = x_38956;
                        ((volatile __local
                          int64_t *) mem_37591)[sext_i32_i64(local_tid_38944)] =
                            x_38957;
                        x_38961 = x_38957;
                    }
                }
                if (sle32(wave_sizze_38946, skip_threads_38969)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38969 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38944, 32) == 0 || !ltid_in_bounds_38966)) {
            // read operands
            {
                x_30307 = x_30303;
                x_30308 = x_30304;
                x_30309 = x_30305;
                x_30310 = x_30306;
                x_30303 = ((__local
                            int64_t *) mem_37585)[sext_i32_i64(squot32(local_tid_38944,
                                                                       32)) -
                                                  1];
                x_30304 = ((__local
                            int64_t *) mem_37587)[sext_i32_i64(squot32(local_tid_38944,
                                                                       32)) -
                                                  1];
                x_30305 = ((__local
                            int64_t *) mem_37589)[sext_i32_i64(squot32(local_tid_38944,
                                                                       32)) -
                                                  1];
                x_30306 = ((__local
                            int64_t *) mem_37591)[sext_i32_i64(squot32(local_tid_38944,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38971 =
                     slt64(srem64(sext_i32_i64(local_tid_38944),
                                  iota32_arg_24441),
                           sext_i32_i64(local_tid_38944) -
                           sext_i32_i64(squot32(local_tid_38944, 32) * 32 - 1));
                
                if (inactive_38971) {
                    x_30303 = x_30307;
                    x_30304 = x_30308;
                    x_30305 = x_30309;
                    x_30306 = x_30310;
                }
                if (!inactive_38971) {
                    int64_t res_30311 = add64(x_30303, x_30307);
                    int64_t res_30312 = add64(x_30304, x_30308);
                    int64_t res_30313 = add64(x_30305, x_30309);
                    int64_t res_30314 = add64(x_30306, x_30310);
                    
                    x_30303 = res_30311;
                    x_30304 = res_30312;
                    x_30305 = res_30313;
                    x_30306 = res_30314;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37585)[sext_i32_i64(local_tid_38944)] =
                    x_30303;
                ((__local int64_t *) mem_37587)[sext_i32_i64(local_tid_38944)] =
                    x_30304;
                ((__local int64_t *) mem_37589)[sext_i32_i64(local_tid_38944)] =
                    x_30305;
                ((__local int64_t *) mem_37591)[sext_i32_i64(local_tid_38944)] =
                    x_30306;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38944, 32) == 0) {
            ((__local int64_t *) mem_37585)[sext_i32_i64(local_tid_38944)] =
                x_30307;
            ((__local int64_t *) mem_37587)[sext_i32_i64(local_tid_38944)] =
                x_30308;
            ((__local int64_t *) mem_37589)[sext_i32_i64(local_tid_38944)] =
                x_30309;
            ((__local int64_t *) mem_37591)[sext_i32_i64(local_tid_38944)] =
                x_30310;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_30348 = ((__local int64_t *) mem_37585)[i_24469];
    int64_t res_30349 = ((__local int64_t *) mem_37587)[i_24469];
    int64_t res_30350 = ((__local int64_t *) mem_37589)[i_24469];
    __local char *mem_37595;
    
    mem_37595 = (__local char *) mem_37595_backing_5;
    ((__local float *) mem_37595)[sext_i32_i64(local_tid_38944)] = ((__global
                                                                     float *) mem_37581)[gtid_29369 +
                                                                                         sext_i32_i64(local_tid_38944) *
                                                                                         m_24055];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_29374 = sext_i32_i64(ltid_pre_38948);
    int32_t phys_tid_29375 = local_tid_38944;
    
    if (slt64(write_i_29374, iota32_arg_24441)) {
        int32_t x_30353 = ((__local int32_t *) mem_37593)[write_i_29374];
        float write_value_30358 = ((__global
                                    float *) mem_param_37576)[gtid_29369 *
                                                              iota32_arg_24441 +
                                                              write_i_29374];
        bool match_lit_30359 = 0 == x_30353;
        int64_t res_30360;
        
        if (match_lit_30359) {
            int64_t x_30354 = ((__local int64_t *) mem_37585)[write_i_29374];
            int64_t res_30361 = sub64(x_30354, 1);
            
            res_30360 = res_30361;
        } else {
            int64_t x_30355 = ((__local int64_t *) mem_37587)[write_i_29374];
            int64_t x_30356 = ((__local int64_t *) mem_37589)[write_i_29374];
            int64_t x_30357 = ((__local int64_t *) mem_37591)[write_i_29374];
            bool match_lit_30362 = 1 == x_30353;
            int64_t x_30363;
            
            if (match_lit_30362) {
                int64_t x_30364 = add64(res_30348, x_30355);
                int64_t res_30365 = sub64(x_30364, 1);
                
                x_30363 = res_30365;
            } else {
                bool match_lit_30366 = 2 == x_30353;
                int64_t x_30367;
                
                if (match_lit_30366) {
                    int64_t x_30368 = add64(res_30348, res_30349);
                    int64_t x_30369 = add64(x_30356, x_30368);
                    int64_t res_30370 = sub64(x_30369, 1);
                    
                    x_30367 = res_30370;
                } else {
                    int64_t x_30371 = add64(res_30348, res_30349);
                    int64_t x_30372 = add64(res_30350, x_30371);
                    int64_t x_30373 = add64(x_30357, x_30372);
                    int64_t res_30374 = sub64(x_30373, 1);
                    
                    x_30367 = res_30374;
                }
                x_30363 = x_30367;
            }
            res_30360 = x_30363;
        }
        if (sle64(0, res_30360) && slt64(res_30360, iota32_arg_24441)) {
            ((__local float *) mem_37595)[res_30360] = write_value_30358;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37599)[gtid_29369 * iota32_arg_24441 +
                                   sext_i32_i64(local_tid_38944)] = ((__local
                                                                      float *) mem_37595)[sext_i32_i64(local_tid_38944)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_35553(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_36997_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_36994_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_36975_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_36972_backing_aligned_3,
                                                    int64_t m_24055,
                                                    int64_t N_24056,
                                                    int64_t res_24068,
                                                    int64_t res_24074,
                                                    int64_t num_groups_y_35551,
                                                    int64_t num_whole_tiles_35569,
                                                    int64_t residual_input_35719,
                                                    unsigned char cond_35720,
                                                    __global
                                                    unsigned char *images_mem_36738,
                                                    __global
                                                    unsigned char *mem_36750,
                                                    __global
                                                    unsigned char *mem_37012)
{
    #define tile_sizze_35548 (mainDetailedzitile_sizze_35547)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36997_backing_7 = (__local volatile
                                                           char *) mem_36997_backing_aligned_0;
    __local volatile char *restrict mem_36994_backing_6 = (__local volatile
                                                           char *) mem_36994_backing_aligned_1;
    __local volatile char *restrict mem_36975_backing_1 = (__local volatile
                                                           char *) mem_36975_backing_aligned_2;
    __local volatile char *restrict mem_36972_backing_0 = (__local volatile
                                                           char *) mem_36972_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38065;
    int32_t local_tid_38066;
    int64_t group_sizze_38069;
    int32_t wave_sizze_38068;
    int32_t group_tid_38067;
    
    global_tid_38065 = get_global_id(0);
    local_tid_38066 = get_local_id(0);
    group_sizze_38069 = get_local_size(0);
    wave_sizze_38068 = LOCKSTEP_WIDTH;
    group_tid_38067 = get_group_id(0);
    
    int32_t gid_flat_35553;
    
    gid_flat_35553 = group_tid_38067;
    
    int32_t ltid_pre_38070;
    
    ltid_pre_38070 = squot32(local_tid_38066, sext_i64_i32(tile_sizze_35548));
    
    int32_t ltid_pre_38071;
    
    ltid_pre_38071 = local_tid_38066 - squot32(local_tid_38066,
                                               sext_i64_i32(tile_sizze_35548)) *
        sext_i64_i32(tile_sizze_35548);
    
    int64_t gid_x_35545;
    
    gid_x_35545 = squot64(sext_i32_i64(group_tid_38067), num_groups_y_35551);
    
    int64_t gid_y_35546;
    
    gid_y_35546 = sext_i32_i64(group_tid_38067) -
        squot64(sext_i32_i64(group_tid_38067), num_groups_y_35551) *
        num_groups_y_35551;
    
    float mem_36957[1];
    int64_t ltid_x_35570 = sext_i32_i64(ltid_pre_38070);
    int64_t ltid_y_35571 = sext_i32_i64(ltid_pre_38071);
    int32_t ltid_flat_35572 = local_tid_38066;
    
    if (slt64(ltid_x_35570, tile_sizze_35548) && slt64(ltid_y_35571,
                                                       tile_sizze_35548)) {
        mem_36957[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35669 = gid_x_35545 * tile_sizze_35548;
    int64_t binop_x_35671 = gid_y_35546 * tile_sizze_35548;
    __local char *mem_36972;
    
    mem_36972 = (__local char *) mem_36972_backing_0;
    
    __local char *mem_36975;
    
    mem_36975 = (__local char *) mem_36975_backing_1;
    
    float accs_mem_36990[1];
    float mem_param_36965[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_36965[i_2] = mem_36957[i_2];
    for (int64_t tile_id_35581 = 0; tile_id_35581 < num_whole_tiles_35569;
         tile_id_35581++) {
        int64_t binop_x_35665 = tile_sizze_35548 * tile_id_35581;
        int64_t ltid_x_35582 = sext_i32_i64(ltid_pre_38070);
        int64_t ltid_y_35583 = sext_i32_i64(ltid_pre_38071);
        int32_t ltid_flat_35584 = local_tid_38066;
        int64_t i_35666 = ltid_x_35582 + binop_x_35665;
        int64_t j_35668 = ltid_y_35583 + binop_x_35665;
        int64_t gtid_35670 = ltid_x_35582 + binop_x_35669;
        int64_t gtid_35672 = ltid_y_35583 + binop_x_35671;
        bool binop_x_35675 = slt64(i_35666, res_24068);
        bool binop_y_35676 = slt64(gtid_35672, res_24074);
        bool cond_35677 = binop_x_35675 && binop_y_35676;
        float pre_35678;
        
        if (cond_35677) {
            float x_35679 = ((__global float *) mem_36750)[i_35666 * res_24074 +
                                                           gtid_35672];
            
            pre_35678 = x_35679;
        } else {
            pre_35678 = 0.0F;
        }
        
        bool binop_x_35681 = slt64(j_35668, res_24068);
        bool binop_y_35682 = slt64(gtid_35670, m_24055);
        bool cond_35683 = binop_x_35681 && binop_y_35682;
        float pre_35684;
        
        if (cond_35683) {
            float x_35685 = ((__global float *) images_mem_36738)[gtid_35670 *
                                                                  N_24056 +
                                                                  j_35668];
            
            pre_35684 = x_35685;
        } else {
            pre_35684 = 0.0F;
        }
        ((__local float *) mem_36972)[ltid_x_35582 * tile_sizze_35548 +
                                      ltid_y_35583] = pre_35678;
        ((__local float *) mem_36975)[ltid_x_35582 * tile_sizze_35548 +
                                      ltid_y_35583] = pre_35684;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_36979[1];
        int64_t ltid_x_35627 = sext_i32_i64(ltid_pre_38070);
        int64_t ltid_y_35628 = sext_i32_i64(ltid_pre_38071);
        int32_t ltid_flat_35629 = local_tid_38066;
        int64_t gtid_35689 = ltid_x_35627 + binop_x_35669;
        int64_t gtid_35691 = ltid_y_35628 + binop_x_35671;
        float acc_35694 = mem_param_36965[0];
        bool binop_x_35697 = slt64(gtid_35689, m_24055);
        bool binop_y_35698 = slt64(gtid_35691, res_24074);
        bool cond_35699 = binop_x_35697 && binop_y_35698;
        float acc_35700;
        
        if (cond_35699) {
            float x_35701;
            float redout_36625 = acc_35694;
            
            for (int64_t i_36626 = 0; i_36626 < tile_sizze_35548; i_36626++) {
                float x_35706 = ((__local float *) mem_36975)[ltid_x_35627 *
                                                              tile_sizze_35548 +
                                                              i_36626];
                bool res_35707;
                
                res_35707 = futrts_isnan32(x_35706);
                
                float res_35708;
                
                if (res_35707) {
                    res_35708 = 0.0F;
                } else {
                    float x_35705 = ((__local float *) mem_36972)[i_36626 *
                                                                  tile_sizze_35548 +
                                                                  ltid_y_35628];
                    float res_35709 = x_35705 * x_35706;
                    
                    res_35708 = res_35709;
                }
                
                float res_35704 = res_35708 + redout_36625;
                float redout_tmp_38074 = res_35704;
                
                redout_36625 = redout_tmp_38074;
            }
            x_35701 = redout_36625;
            acc_35700 = x_35701;
        } else {
            acc_35700 = acc_35694;
        }
        mem_36979[0] = acc_35700;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38072[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_38072[i_3] = mem_36979[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_36965[i_4] = mem_param_tmp_38072[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_36990[i_5] = mem_param_36965[i_5];
    
    __local char *mem_36994;
    
    mem_36994 = (__local char *) mem_36994_backing_6;
    
    __local char *mem_36997;
    
    mem_36997 = (__local char *) mem_36997_backing_7;
    
    float mem_37001[1];
    float mem_37666[1];
    
    if (cond_35720) {
        mem_37666[0] = accs_mem_36990[0];
    } else {
        int64_t binop_x_35806 = tile_sizze_35548 * num_whole_tiles_35569;
        int64_t ltid_x_35721 = sext_i32_i64(ltid_pre_38070);
        int64_t ltid_y_35722 = sext_i32_i64(ltid_pre_38071);
        int32_t ltid_flat_35723 = local_tid_38066;
        int64_t i_35807 = ltid_x_35721 + binop_x_35806;
        int64_t j_35809 = ltid_y_35722 + binop_x_35806;
        int64_t gtid_35811 = binop_x_35669 + ltid_x_35721;
        int64_t gtid_35813 = binop_x_35671 + ltid_y_35722;
        bool binop_x_35816 = slt64(i_35807, res_24068);
        bool binop_y_35817 = slt64(gtid_35813, res_24074);
        bool cond_35818 = binop_x_35816 && binop_y_35817;
        float pre_35819;
        
        if (cond_35818) {
            float x_35820 = ((__global float *) mem_36750)[i_35807 * res_24074 +
                                                           gtid_35813];
            
            pre_35819 = x_35820;
        } else {
            pre_35819 = 0.0F;
        }
        
        bool binop_x_35822 = slt64(j_35809, res_24068);
        bool binop_y_35823 = slt64(gtid_35811, m_24055);
        bool cond_35824 = binop_x_35822 && binop_y_35823;
        float pre_35825;
        
        if (cond_35824) {
            float x_35826 = ((__global float *) images_mem_36738)[gtid_35811 *
                                                                  N_24056 +
                                                                  j_35809];
            
            pre_35825 = x_35826;
        } else {
            pre_35825 = 0.0F;
        }
        ((__local float *) mem_36994)[ltid_x_35721 * tile_sizze_35548 +
                                      ltid_y_35722] = pre_35819;
        ((__local float *) mem_36997)[ltid_x_35721 * tile_sizze_35548 +
                                      ltid_y_35722] = pre_35825;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_35768 = sext_i32_i64(ltid_pre_38070);
        int64_t ltid_y_35769 = sext_i32_i64(ltid_pre_38071);
        int32_t ltid_flat_35770 = local_tid_38066;
        int64_t gtid_35832 = binop_x_35669 + ltid_x_35768;
        int64_t gtid_35834 = binop_x_35671 + ltid_y_35769;
        float acc_35837 = accs_mem_36990[0];
        bool binop_x_35840 = slt64(gtid_35832, m_24055);
        bool binop_y_35841 = slt64(gtid_35834, res_24074);
        bool cond_35842 = binop_x_35840 && binop_y_35841;
        float acc_35843;
        
        if (cond_35842) {
            float x_35844;
            float redout_36627 = acc_35837;
            
            for (int64_t i_36628 = 0; i_36628 < residual_input_35719;
                 i_36628++) {
                float x_35849 = ((__local float *) mem_36997)[ltid_x_35768 *
                                                              tile_sizze_35548 +
                                                              i_36628];
                bool res_35850;
                
                res_35850 = futrts_isnan32(x_35849);
                
                float res_35851;
                
                if (res_35850) {
                    res_35851 = 0.0F;
                } else {
                    float x_35848 = ((__local float *) mem_36994)[i_36628 *
                                                                  tile_sizze_35548 +
                                                                  ltid_y_35769];
                    float res_35852 = x_35848 * x_35849;
                    
                    res_35851 = res_35852;
                }
                
                float res_35847 = res_35851 + redout_36627;
                float redout_tmp_38075 = res_35847;
                
                redout_36627 = redout_tmp_38075;
            }
            x_35844 = redout_36627;
            acc_35843 = x_35844;
        } else {
            acc_35843 = acc_35837;
        }
        mem_37001[0] = acc_35843;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37666[0] = mem_37001[0];
    }
    
    int64_t thread_out_index_38076 = gid_x_35545 * tile_sizze_35548 +
            sext_i32_i64(ltid_pre_38070);
    int64_t thread_out_index_38077 = gid_y_35546 * tile_sizze_35548 +
            sext_i32_i64(ltid_pre_38071);
    
    if (slt64(thread_out_index_38076, m_24055) && slt64(thread_out_index_38077,
                                                        res_24074)) {
        ((__global float *) mem_37012)[thread_out_index_38076 * res_24074 +
                                       thread_out_index_38077] = mem_37666[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35548
}
__kernel void mainDetailedzisegmap_intragroup_35875(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37134_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37131_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_37112_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37109_backing_aligned_3,
                                                    int64_t N_24054,
                                                    int64_t m_24055,
                                                    int64_t res_24074,
                                                    int64_t num_groups_y_35873,
                                                    int64_t num_whole_tiles_35891,
                                                    int64_t residual_input_36035,
                                                    unsigned char cond_36036,
                                                    __global
                                                    unsigned char *res_mem_37065,
                                                    __global
                                                    unsigned char *mem_37089,
                                                    __global
                                                    unsigned char *mem_37149)
{
    #define tile_sizze_35870 (mainDetailedzitile_sizze_35869)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37134_backing_7 = (__local volatile
                                                           char *) mem_37134_backing_aligned_0;
    __local volatile char *restrict mem_37131_backing_6 = (__local volatile
                                                           char *) mem_37131_backing_aligned_1;
    __local volatile char *restrict mem_37112_backing_1 = (__local volatile
                                                           char *) mem_37112_backing_aligned_2;
    __local volatile char *restrict mem_37109_backing_0 = (__local volatile
                                                           char *) mem_37109_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38234;
    int32_t local_tid_38235;
    int64_t group_sizze_38238;
    int32_t wave_sizze_38237;
    int32_t group_tid_38236;
    
    global_tid_38234 = get_global_id(0);
    local_tid_38235 = get_local_id(0);
    group_sizze_38238 = get_local_size(0);
    wave_sizze_38237 = LOCKSTEP_WIDTH;
    group_tid_38236 = get_group_id(0);
    
    int32_t gid_flat_35875;
    
    gid_flat_35875 = group_tid_38236;
    
    int32_t ltid_pre_38239;
    
    ltid_pre_38239 = squot32(local_tid_38235, sext_i64_i32(tile_sizze_35870));
    
    int32_t ltid_pre_38240;
    
    ltid_pre_38240 = local_tid_38235 - squot32(local_tid_38235,
                                               sext_i64_i32(tile_sizze_35870)) *
        sext_i64_i32(tile_sizze_35870);
    
    int64_t gid_x_35867;
    
    gid_x_35867 = squot64(sext_i32_i64(group_tid_38236), num_groups_y_35873);
    
    int64_t gid_y_35868;
    
    gid_y_35868 = sext_i32_i64(group_tid_38236) -
        squot64(sext_i32_i64(group_tid_38236), num_groups_y_35873) *
        num_groups_y_35873;
    
    float mem_37094[1];
    int64_t ltid_x_35892 = sext_i32_i64(ltid_pre_38239);
    int64_t ltid_y_35893 = sext_i32_i64(ltid_pre_38240);
    int32_t ltid_flat_35894 = local_tid_38235;
    
    if (slt64(ltid_x_35892, tile_sizze_35870) && slt64(ltid_y_35893,
                                                       tile_sizze_35870)) {
        mem_37094[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35989 = gid_x_35867 * tile_sizze_35870;
    int64_t binop_x_35991 = gid_y_35868 * tile_sizze_35870;
    __local char *mem_37109;
    
    mem_37109 = (__local char *) mem_37109_backing_0;
    
    __local char *mem_37112;
    
    mem_37112 = (__local char *) mem_37112_backing_1;
    
    float accs_mem_37127[1];
    float mem_param_37102[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_37102[i_2] = mem_37094[i_2];
    for (int64_t tile_id_35903 = 0; tile_id_35903 < num_whole_tiles_35891;
         tile_id_35903++) {
        int64_t binop_x_35985 = tile_sizze_35870 * tile_id_35903;
        int64_t ltid_x_35904 = sext_i32_i64(ltid_pre_38239);
        int64_t ltid_y_35905 = sext_i32_i64(ltid_pre_38240);
        int32_t ltid_flat_35906 = local_tid_38235;
        int64_t i_35986 = ltid_x_35904 + binop_x_35985;
        int64_t j_35988 = ltid_y_35905 + binop_x_35985;
        int64_t gtid_35990 = ltid_x_35904 + binop_x_35989;
        int64_t gtid_35992 = ltid_y_35905 + binop_x_35991;
        bool binop_x_35995 = slt64(j_35988, res_24074);
        bool binop_y_35996 = slt64(gtid_35990, m_24055);
        bool cond_35997 = binop_x_35995 && binop_y_35996;
        float pre_35998;
        
        if (cond_35997) {
            float x_35999 = ((__global float *) res_mem_37065)[gtid_35990 *
                                                               res_24074 +
                                                               j_35988];
            
            pre_35998 = x_35999;
        } else {
            pre_35998 = 0.0F;
        }
        
        bool binop_x_36001 = slt64(i_35986, res_24074);
        bool binop_y_36002 = slt64(gtid_35992, N_24054);
        bool cond_36003 = binop_x_36001 && binop_y_36002;
        float pre_36004;
        
        if (cond_36003) {
            float x_36005 = ((__global float *) mem_37089)[i_35986 * N_24054 +
                                                           gtid_35992];
            
            pre_36004 = x_36005;
        } else {
            pre_36004 = 0.0F;
        }
        ((__local float *) mem_37109)[ltid_x_35904 * tile_sizze_35870 +
                                      ltid_y_35905] = pre_35998;
        ((__local float *) mem_37112)[ltid_x_35904 * tile_sizze_35870 +
                                      ltid_y_35905] = pre_36004;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37116[1];
        int64_t ltid_x_35949 = sext_i32_i64(ltid_pre_38239);
        int64_t ltid_y_35950 = sext_i32_i64(ltid_pre_38240);
        int32_t ltid_flat_35951 = local_tid_38235;
        int64_t gtid_36009 = ltid_x_35949 + binop_x_35989;
        int64_t gtid_36011 = ltid_y_35950 + binop_x_35991;
        float acc_36014 = mem_param_37102[0];
        bool binop_x_36017 = slt64(gtid_36009, m_24055);
        bool binop_y_36018 = slt64(gtid_36011, N_24054);
        bool cond_36019 = binop_x_36017 && binop_y_36018;
        float acc_36020;
        
        if (cond_36019) {
            float x_36021;
            float redout_36643 = acc_36014;
            
            for (int64_t i_36644 = 0; i_36644 < tile_sizze_35870; i_36644++) {
                float x_36025 = ((__local float *) mem_37109)[ltid_x_35949 *
                                                              tile_sizze_35870 +
                                                              i_36644];
                float x_36026 = ((__local float *) mem_37112)[i_36644 *
                                                              tile_sizze_35870 +
                                                              ltid_y_35950];
                float res_36027 = x_36025 * x_36026;
                float res_36024 = res_36027 + redout_36643;
                float redout_tmp_38243 = res_36024;
                
                redout_36643 = redout_tmp_38243;
            }
            x_36021 = redout_36643;
            acc_36020 = x_36021;
        } else {
            acc_36020 = acc_36014;
        }
        mem_37116[0] = acc_36020;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38241[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_38241[i_3] = mem_37116[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_37102[i_4] = mem_param_tmp_38241[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_37127[i_5] = mem_param_37102[i_5];
    
    __local char *mem_37131;
    
    mem_37131 = (__local char *) mem_37131_backing_6;
    
    __local char *mem_37134;
    
    mem_37134 = (__local char *) mem_37134_backing_7;
    
    float mem_37138[1];
    float mem_37678[1];
    
    if (cond_36036) {
        mem_37678[0] = accs_mem_37127[0];
    } else {
        int64_t binop_x_36120 = tile_sizze_35870 * num_whole_tiles_35891;
        int64_t ltid_x_36037 = sext_i32_i64(ltid_pre_38239);
        int64_t ltid_y_36038 = sext_i32_i64(ltid_pre_38240);
        int32_t ltid_flat_36039 = local_tid_38235;
        int64_t i_36121 = ltid_x_36037 + binop_x_36120;
        int64_t j_36123 = ltid_y_36038 + binop_x_36120;
        int64_t gtid_36125 = binop_x_35989 + ltid_x_36037;
        int64_t gtid_36127 = binop_x_35991 + ltid_y_36038;
        bool binop_x_36130 = slt64(j_36123, res_24074);
        bool binop_y_36131 = slt64(gtid_36125, m_24055);
        bool cond_36132 = binop_x_36130 && binop_y_36131;
        float pre_36133;
        
        if (cond_36132) {
            float x_36134 = ((__global float *) res_mem_37065)[gtid_36125 *
                                                               res_24074 +
                                                               j_36123];
            
            pre_36133 = x_36134;
        } else {
            pre_36133 = 0.0F;
        }
        
        bool binop_x_36136 = slt64(i_36121, res_24074);
        bool binop_y_36137 = slt64(gtid_36127, N_24054);
        bool cond_36138 = binop_x_36136 && binop_y_36137;
        float pre_36139;
        
        if (cond_36138) {
            float x_36140 = ((__global float *) mem_37089)[i_36121 * N_24054 +
                                                           gtid_36127];
            
            pre_36139 = x_36140;
        } else {
            pre_36139 = 0.0F;
        }
        ((__local float *) mem_37131)[ltid_x_36037 * tile_sizze_35870 +
                                      ltid_y_36038] = pre_36133;
        ((__local float *) mem_37134)[ltid_x_36037 * tile_sizze_35870 +
                                      ltid_y_36038] = pre_36139;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_36084 = sext_i32_i64(ltid_pre_38239);
        int64_t ltid_y_36085 = sext_i32_i64(ltid_pre_38240);
        int32_t ltid_flat_36086 = local_tid_38235;
        int64_t gtid_36146 = binop_x_35989 + ltid_x_36084;
        int64_t gtid_36148 = binop_x_35991 + ltid_y_36085;
        float acc_36151 = accs_mem_37127[0];
        bool binop_x_36154 = slt64(gtid_36146, m_24055);
        bool binop_y_36155 = slt64(gtid_36148, N_24054);
        bool cond_36156 = binop_x_36154 && binop_y_36155;
        float acc_36157;
        
        if (cond_36156) {
            float x_36158;
            float redout_36645 = acc_36151;
            
            for (int64_t i_36646 = 0; i_36646 < residual_input_36035;
                 i_36646++) {
                float x_36162 = ((__local float *) mem_37131)[ltid_x_36084 *
                                                              tile_sizze_35870 +
                                                              i_36646];
                float x_36163 = ((__local float *) mem_37134)[i_36646 *
                                                              tile_sizze_35870 +
                                                              ltid_y_36085];
                float res_36164 = x_36162 * x_36163;
                float res_36161 = res_36164 + redout_36645;
                float redout_tmp_38244 = res_36161;
                
                redout_36645 = redout_tmp_38244;
            }
            x_36158 = redout_36645;
            acc_36157 = x_36158;
        } else {
            acc_36157 = acc_36151;
        }
        mem_37138[0] = acc_36157;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37678[0] = mem_37138[0];
    }
    
    int64_t thread_out_index_38245 = gid_x_35867 * tile_sizze_35870 +
            sext_i32_i64(ltid_pre_38239);
    int64_t thread_out_index_38246 = gid_y_35868 * tile_sizze_35870 +
            sext_i32_i64(ltid_pre_38240);
    
    if (slt64(thread_out_index_38245, m_24055) && slt64(thread_out_index_38246,
                                                        N_24054)) {
        ((__global float *) mem_37149)[thread_out_index_38245 * N_24054 +
                                       thread_out_index_38246] = mem_37678[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35870
}
__kernel void mainDetailedzisegmap_intragroup_36180(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37231_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37218_backing_aligned_1,
                                                    int64_t m_24055,
                                                    int32_t n_24059,
                                                    float hfrac_24061,
                                                    int64_t res_24068,
                                                    int32_t k2p2_24070,
                                                    int64_t num_whole_tiles_36188,
                                                    int64_t residual_input_36309,
                                                    unsigned char cond_36310,
                                                    __global
                                                    unsigned char *mem_37201,
                                                    __global
                                                    unsigned char *mem_37204,
                                                    __global
                                                    unsigned char *mem_37248,
                                                    __global
                                                    unsigned char *mem_37250,
                                                    __global
                                                    unsigned char *mem_37252)
{
    #define segmap_group_sizze_28079 (mainDetailedzisegmap_group_sizze_28048)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37231_backing_5 = (__local volatile
                                                           char *) mem_37231_backing_aligned_0;
    __local volatile char *restrict mem_37218_backing_0 = (__local volatile
                                                           char *) mem_37218_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38414;
    int32_t local_tid_38415;
    int64_t group_sizze_38418;
    int32_t wave_sizze_38417;
    int32_t group_tid_38416;
    
    global_tid_38414 = get_global_id(0);
    local_tid_38415 = get_local_id(0);
    group_sizze_38418 = get_local_size(0);
    wave_sizze_38417 = LOCKSTEP_WIDTH;
    group_tid_38416 = get_group_id(0);
    
    int32_t gid_flat_36180;
    
    gid_flat_36180 = group_tid_38416;
    
    int32_t ltid_pre_38419;
    
    ltid_pre_38419 = local_tid_38415;
    
    int64_t gid_36179;
    
    gid_36179 = sext_i32_i64(group_tid_38416);
    
    float mem_37208[1];
    int64_t ltid_36189 = sext_i32_i64(ltid_pre_38419);
    int32_t ltid_flat_36190 = local_tid_38415;
    
    if (slt64(ltid_36189, segmap_group_sizze_28079)) {
        mem_37208[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_36275 = segmap_group_sizze_28079 * gid_36179;
    __local char *mem_37218;
    
    mem_37218 = (__local char *) mem_37218_backing_0;
    
    float accs_mem_37228[1];
    float mem_param_37213[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37213[i_1] = mem_37208[i_1];
    for (int64_t tile_id_36196 = 0; tile_id_36196 < num_whole_tiles_36188;
         tile_id_36196++) {
        int64_t binop_x_36257 = segmap_group_sizze_28079 * tile_id_36196;
        int64_t ltid_36197 = sext_i32_i64(ltid_pre_38419);
        int32_t ltid_flat_36198 = local_tid_38415;
        
        if (slt64(ltid_36197, segmap_group_sizze_28079)) {
            int64_t j_36258 = ltid_36197 + binop_x_36257;
            bool cond_36270 = slt64(j_36258, res_24068);
            int32_t pre_36271;
            
            if (cond_36270) {
                int32_t index_primexp_36595 = sext_i64_i32(j_36258);
                
                pre_36271 = index_primexp_36595;
            } else {
                pre_36271 = 0;
            }
            ((__local int32_t *) mem_37218)[ltid_36197] = pre_36271;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37221[1];
        int64_t ltid_36224 = sext_i32_i64(ltid_pre_38419);
        int32_t ltid_flat_36225 = local_tid_38415;
        
        if (slt64(ltid_36224, segmap_group_sizze_28079)) {
            int64_t gtid_36276 = ltid_36224 + binop_x_36275;
            int32_t res_36278;
            int32_t redout_36647 = 0;
            
            for (int32_t i_36725 = 0; i_36725 < n_24059; i_36725++) {
                int64_t i_36648 = sext_i32_i64(i_36725);
                float x_36282 = ((__global float *) mem_37201)[i_36648 *
                                                               m_24055 +
                                                               gtid_36276];
                bool res_36283;
                
                res_36283 = futrts_isnan32(x_36282);
                
                bool cond_36284 = !res_36283;
                int32_t res_36285 = btoi_bool_i32(cond_36284);
                int32_t res_36281 = add32(res_36285, redout_36647);
                int32_t redout_tmp_38422 = res_36281;
                
                redout_36647 = redout_tmp_38422;
            }
            res_36278 = redout_36647;
            
            float acc_36286 = mem_param_37213[0];
            bool cond_36287 = slt64(gtid_36276, m_24055);
            float acc_36288;
            
            if (cond_36287) {
                float x_36289;
                float redout_36649 = acc_36286;
                
                for (int64_t i_36650 = 0; i_36650 < segmap_group_sizze_28079;
                     i_36650++) {
                    int32_t x_36293 = ((__local int32_t *) mem_37218)[i_36650];
                    bool cond_36294 = slt32(x_36293, res_36278);
                    float res_36295;
                    
                    if (cond_36294) {
                        int64_t i_36296 = sext_i32_i64(x_36293);
                        float res_36297 = ((__global
                                            float *) mem_37204)[i_36296 *
                                                                m_24055 +
                                                                gtid_36276];
                        
                        res_36295 = res_36297;
                    } else {
                        res_36295 = 0.0F;
                    }
                    
                    float res_36298 = res_36295 * res_36295;
                    float res_36292 = res_36298 + redout_36649;
                    float redout_tmp_38423 = res_36292;
                    
                    redout_36649 = redout_tmp_38423;
                }
                x_36289 = redout_36649;
                acc_36288 = x_36289;
            } else {
                acc_36288 = acc_36286;
            }
            mem_37221[0] = acc_36288;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38420[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38420[i_2] = mem_37221[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37213[i_3] = mem_param_tmp_38420[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37228[i_4] = mem_param_37213[i_4];
    
    __local char *mem_37231;
    
    mem_37231 = (__local char *) mem_37231_backing_5;
    
    float mem_37234[1];
    float mem_37687[1];
    
    if (cond_36310) {
        mem_37687[0] = accs_mem_37228[0];
    } else {
        int64_t binop_x_36320 = segmap_group_sizze_28079 *
                num_whole_tiles_36188;
        int64_t ltid_36311 = sext_i32_i64(ltid_pre_38419);
        int32_t ltid_flat_36312 = local_tid_38415;
        
        if (slt64(ltid_36311, segmap_group_sizze_28079)) {
            int64_t j_36321 = ltid_36311 + binop_x_36320;
            bool cond_36333 = slt64(j_36321, res_24068);
            int32_t pre_36334;
            
            if (cond_36333) {
                int32_t index_primexp_36596 = sext_i64_i32(j_36321);
                
                pre_36334 = index_primexp_36596;
            } else {
                pre_36334 = 0;
            }
            ((__local int32_t *) mem_37231)[ltid_36311] = pre_36334;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36339 = sext_i32_i64(ltid_pre_38419);
        int32_t ltid_flat_36340 = local_tid_38415;
        
        if (slt64(ltid_36339, segmap_group_sizze_28079)) {
            int64_t gtid_36347 = binop_x_36275 + ltid_36339;
            int32_t res_36349;
            int32_t redout_36651 = 0;
            
            for (int32_t i_36726 = 0; i_36726 < n_24059; i_36726++) {
                int64_t i_36652 = sext_i32_i64(i_36726);
                float x_36353 = ((__global float *) mem_37201)[i_36652 *
                                                               m_24055 +
                                                               gtid_36347];
                bool res_36354;
                
                res_36354 = futrts_isnan32(x_36353);
                
                bool cond_36355 = !res_36354;
                int32_t res_36356 = btoi_bool_i32(cond_36355);
                int32_t res_36352 = add32(res_36356, redout_36651);
                int32_t redout_tmp_38424 = res_36352;
                
                redout_36651 = redout_tmp_38424;
            }
            res_36349 = redout_36651;
            
            float acc_36357 = accs_mem_37228[0];
            bool cond_36358 = slt64(gtid_36347, m_24055);
            float acc_36359;
            
            if (cond_36358) {
                float x_36360;
                float redout_36653 = acc_36357;
                
                for (int64_t i_36654 = 0; i_36654 < residual_input_36309;
                     i_36654++) {
                    int32_t x_36364 = ((__local int32_t *) mem_37231)[i_36654];
                    bool cond_36365 = slt32(x_36364, res_36349);
                    float res_36366;
                    
                    if (cond_36365) {
                        int64_t i_36367 = sext_i32_i64(x_36364);
                        float res_36368 = ((__global
                                            float *) mem_37204)[i_36367 *
                                                                m_24055 +
                                                                gtid_36347];
                        
                        res_36366 = res_36368;
                    } else {
                        res_36366 = 0.0F;
                    }
                    
                    float res_36369 = res_36366 * res_36366;
                    float res_36363 = res_36369 + redout_36653;
                    float redout_tmp_38425 = res_36363;
                    
                    redout_36653 = redout_tmp_38425;
                }
                x_36360 = redout_36653;
                acc_36359 = x_36360;
            } else {
                acc_36359 = acc_36357;
            }
            mem_37234[0] = acc_36359;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37687[0] = mem_37234[0];
    }
    
    int32_t mem_37242[1];
    int32_t mem_37244[1];
    float mem_37246[1];
    int64_t ltid_36372 = sext_i32_i64(ltid_pre_38419);
    int32_t ltid_flat_36373 = local_tid_38415;
    
    if (slt64(ltid_36372, segmap_group_sizze_28079)) {
        int64_t gtid_36383 = binop_x_36275 + ltid_36372;
        bool cond_36385 = slt64(gtid_36383, m_24055);
        int32_t postlude_36386;
        int32_t postlude_36387;
        float postlude_36388;
        
        if (cond_36385) {
            float res_36384 = mem_37687[0];
            int32_t res_36390;
            int32_t redout_36655 = 0;
            
            for (int32_t i_36727 = 0; i_36727 < n_24059; i_36727++) {
                int64_t i_36656 = sext_i32_i64(i_36727);
                float x_36394 = ((__global float *) mem_37201)[i_36656 *
                                                               m_24055 +
                                                               gtid_36383];
                bool res_36395;
                
                res_36395 = futrts_isnan32(x_36394);
                
                bool cond_36396 = !res_36395;
                int32_t res_36397 = btoi_bool_i32(cond_36396);
                int32_t res_36393 = add32(res_36397, redout_36655);
                int32_t redout_tmp_38426 = res_36393;
                
                redout_36655 = redout_tmp_38426;
            }
            res_36390 = redout_36655;
            
            int32_t r32_arg_36398 = sub32(res_36390, k2p2_24070);
            float res_36399 = sitofp_i32_f32(r32_arg_36398);
            float sqrt_arg_36400 = res_36384 / res_36399;
            float res_36401;
            
            res_36401 = futrts_sqrt32(sqrt_arg_36400);
            
            float res_36402 = sitofp_i32_f32(res_36390);
            float t32_arg_36403 = hfrac_24061 * res_36402;
            int32_t res_36404 = fptosi_f32_i32(t32_arg_36403);
            
            postlude_36386 = res_36404;
            postlude_36387 = res_36390;
            postlude_36388 = res_36401;
        } else {
            postlude_36386 = 0;
            postlude_36387 = 0;
            postlude_36388 = 0.0F;
        }
        mem_37242[0] = postlude_36386;
        mem_37244[0] = postlude_36387;
        mem_37246[0] = postlude_36388;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_38415) + segmap_group_sizze_28079 *
              sext_i32_i64(group_tid_38416), m_24055)) {
        ((__global int32_t *) mem_37248)[sext_i32_i64(local_tid_38415) +
                                         segmap_group_sizze_28079 *
                                         sext_i32_i64(group_tid_38416)] =
            mem_37242[0];
    }
    if (slt64(sext_i32_i64(local_tid_38415) + segmap_group_sizze_28079 *
              sext_i32_i64(group_tid_38416), m_24055)) {
        ((__global int32_t *) mem_37250)[sext_i32_i64(local_tid_38415) +
                                         segmap_group_sizze_28079 *
                                         sext_i32_i64(group_tid_38416)] =
            mem_37244[0];
    }
    if (slt64(sext_i32_i64(local_tid_38415) + segmap_group_sizze_28079 *
              sext_i32_i64(group_tid_38416), m_24055)) {
        ((__global float *) mem_37252)[sext_i32_i64(local_tid_38415) +
                                       segmap_group_sizze_28079 *
                                       sext_i32_i64(group_tid_38416)] =
            mem_37246[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_28079
}
__kernel void mainDetailedzisegmap_intragroup_36412(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37313_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37300_backing_aligned_1,
                                                    int64_t N_24054,
                                                    int64_t m_24055,
                                                    int64_t res_24416,
                                                    int64_t num_whole_tiles_36432,
                                                    int64_t residual_input_36531,
                                                    unsigned char cond_36532,
                                                    __global
                                                    unsigned char *res_mem_37197,
                                                    __global
                                                    unsigned char *res_mem_37276,
                                                    __global
                                                    unsigned char *res_mem_37277,
                                                    __global
                                                    unsigned char *mem_37323)
{
    #define segmap_group_sizze_28316 (mainDetailedzisegmap_group_sizze_28297)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37313_backing_5 = (__local volatile
                                                           char *) mem_37313_backing_aligned_0;
    __local volatile char *restrict mem_37300_backing_0 = (__local volatile
                                                           char *) mem_37300_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38600;
    int32_t local_tid_38601;
    int64_t group_sizze_38604;
    int32_t wave_sizze_38603;
    int32_t group_tid_38602;
    
    global_tid_38600 = get_global_id(0);
    local_tid_38601 = get_local_id(0);
    group_sizze_38604 = get_local_size(0);
    wave_sizze_38603 = LOCKSTEP_WIDTH;
    group_tid_38602 = get_group_id(0);
    
    int32_t gid_flat_36412;
    
    gid_flat_36412 = group_tid_38602;
    
    int32_t ltid_pre_38605;
    
    ltid_pre_38605 = local_tid_38601;
    
    int64_t gid_36411;
    
    gid_36411 = sext_i32_i64(group_tid_38602);
    
    int64_t binop_x_36421;
    
    binop_x_36421 = segmap_group_sizze_28316 * gid_36411;
    
    int32_t mem_37285[1];
    int32_t mem_37287[1];
    int64_t ltid_36413 = sext_i32_i64(ltid_pre_38605);
    int32_t ltid_flat_36414 = local_tid_38601;
    
    if (slt64(ltid_36413, segmap_group_sizze_28316)) {
        int64_t gtid_36422 = ltid_36413 + binop_x_36421;
        bool cond_36423 = slt64(gtid_36422, m_24055);
        int32_t pre_36424;
        int32_t pre_36425;
        
        if (cond_36423) {
            int32_t x_36426 = ((__global int32_t *) res_mem_37277)[gtid_36422];
            int32_t x_36427 = ((__global int32_t *) res_mem_37276)[gtid_36422];
            
            pre_36424 = x_36426;
            pre_36425 = x_36427;
        } else {
            pre_36424 = 0;
            pre_36425 = 0;
        }
        mem_37285[0] = pre_36424;
        mem_37287[0] = pre_36425;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float mem_37290[1];
    int64_t ltid_36433 = sext_i32_i64(ltid_pre_38605);
    int32_t ltid_flat_36434 = local_tid_38601;
    
    if (slt64(ltid_36433, segmap_group_sizze_28316)) {
        mem_37290[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37300;
    
    mem_37300 = (__local char *) mem_37300_backing_0;
    
    float accs_mem_37310[1];
    float mem_param_37295[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37295[i_1] = mem_37290[i_1];
    for (int64_t tile_id_36440 = 0; tile_id_36440 < num_whole_tiles_36432;
         tile_id_36440++) {
        int64_t binop_x_36489 = segmap_group_sizze_28316 * tile_id_36440;
        int64_t ltid_36441 = sext_i32_i64(ltid_pre_38605);
        int32_t ltid_flat_36442 = local_tid_38601;
        
        if (slt64(ltid_36441, segmap_group_sizze_28316)) {
            int64_t j_36490 = ltid_36441 + binop_x_36489;
            bool cond_36495 = slt64(j_36490, res_24416);
            int32_t pre_36496;
            
            if (cond_36495) {
                int32_t index_primexp_36597 = sext_i64_i32(j_36490);
                int32_t tile_elem_36497 = index_primexp_36597;
                
                pre_36496 = tile_elem_36497;
            } else {
                pre_36496 = 0;
            }
            ((__local int32_t *) mem_37300)[ltid_36441] = pre_36496;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37303[1];
        int64_t ltid_36461 = sext_i32_i64(ltid_pre_38605);
        int32_t ltid_flat_36462 = local_tid_38601;
        
        if (slt64(ltid_36461, segmap_group_sizze_28316)) {
            int64_t gtid_36501 = binop_x_36421 + ltid_36461;
            float acc_36504 = mem_param_37295[0];
            bool cond_36505 = slt64(gtid_36501, m_24055);
            float acc_36506;
            
            if (cond_36505) {
                int32_t x_36502 = mem_37285[0];
                int32_t x_36503 = mem_37287[0];
                float x_36507;
                float redout_36657 = acc_36504;
                
                for (int64_t i_36658 = 0; i_36658 < segmap_group_sizze_28316;
                     i_36658++) {
                    int32_t x_36511 = ((__local int32_t *) mem_37300)[i_36658];
                    bool cond_36512 = slt32(x_36511, x_36503);
                    float res_36513;
                    
                    if (cond_36512) {
                        int32_t x_36514 = add32(x_36502, x_36511);
                        int32_t x_36515 = sub32(x_36514, x_36503);
                        int32_t i_36516 = add32(1, x_36515);
                        int64_t i_36517 = sext_i32_i64(i_36516);
                        float res_36518 = ((__global
                                            float *) res_mem_37197)[gtid_36501 *
                                                                    N_24054 +
                                                                    i_36517];
                        
                        res_36513 = res_36518;
                    } else {
                        res_36513 = 0.0F;
                    }
                    
                    float res_36510 = res_36513 + redout_36657;
                    float redout_tmp_38608 = res_36510;
                    
                    redout_36657 = redout_tmp_38608;
                }
                x_36507 = redout_36657;
                acc_36506 = x_36507;
            } else {
                acc_36506 = acc_36504;
            }
            mem_37303[0] = acc_36506;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38606[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38606[i_2] = mem_37303[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37295[i_3] = mem_param_tmp_38606[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37310[i_4] = mem_param_37295[i_4];
    
    __local char *mem_37313;
    
    mem_37313 = (__local char *) mem_37313_backing_5;
    
    float mem_37316[1];
    float mem_37696[1];
    
    if (cond_36532) {
        mem_37696[0] = accs_mem_37310[0];
    } else {
        int64_t binop_x_36542 = segmap_group_sizze_28316 *
                num_whole_tiles_36432;
        int64_t ltid_36533 = sext_i32_i64(ltid_pre_38605);
        int32_t ltid_flat_36534 = local_tid_38601;
        
        if (slt64(ltid_36533, segmap_group_sizze_28316)) {
            int64_t j_36543 = ltid_36533 + binop_x_36542;
            bool cond_36548 = slt64(j_36543, res_24416);
            int32_t pre_36549;
            
            if (cond_36548) {
                int32_t index_primexp_36598 = sext_i64_i32(j_36543);
                int32_t tile_elem_36550 = index_primexp_36598;
                
                pre_36549 = tile_elem_36550;
            } else {
                pre_36549 = 0;
            }
            ((__local int32_t *) mem_37313)[ltid_36533] = pre_36549;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36554 = sext_i32_i64(ltid_pre_38605);
        int32_t ltid_flat_36555 = local_tid_38601;
        
        if (slt64(ltid_36554, segmap_group_sizze_28316)) {
            int64_t gtid_36562 = binop_x_36421 + ltid_36554;
            float acc_36565 = accs_mem_37310[0];
            bool cond_36566 = slt64(gtid_36562, m_24055);
            float acc_36567;
            
            if (cond_36566) {
                int32_t x_36563 = mem_37285[0];
                int32_t x_36564 = mem_37287[0];
                float x_36568;
                float redout_36659 = acc_36565;
                
                for (int64_t i_36660 = 0; i_36660 < residual_input_36531;
                     i_36660++) {
                    int32_t x_36572 = ((__local int32_t *) mem_37313)[i_36660];
                    bool cond_36573 = slt32(x_36572, x_36564);
                    float res_36574;
                    
                    if (cond_36573) {
                        int32_t x_36575 = add32(x_36563, x_36572);
                        int32_t x_36576 = sub32(x_36575, x_36564);
                        int32_t i_36577 = add32(1, x_36576);
                        int64_t i_36578 = sext_i32_i64(i_36577);
                        float res_36579 = ((__global
                                            float *) res_mem_37197)[gtid_36562 *
                                                                    N_24054 +
                                                                    i_36578];
                        
                        res_36574 = res_36579;
                    } else {
                        res_36574 = 0.0F;
                    }
                    
                    float res_36571 = res_36574 + redout_36659;
                    float redout_tmp_38609 = res_36571;
                    
                    redout_36659 = redout_tmp_38609;
                }
                x_36568 = redout_36659;
                acc_36567 = x_36568;
            } else {
                acc_36567 = acc_36565;
            }
            mem_37316[0] = acc_36567;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37696[0] = mem_37316[0];
    }
    if (slt64(sext_i32_i64(local_tid_38601) + segmap_group_sizze_28316 *
              sext_i32_i64(group_tid_38602), m_24055)) {
        ((__global float *) mem_37323)[sext_i32_i64(local_tid_38601) +
                                       segmap_group_sizze_28316 *
                                       sext_i32_i64(group_tid_38602)] =
            mem_37696[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_28316
}
__kernel void mainDetailedzisegred_large_26165(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_37961_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_37959_backing_aligned_1,
                                               int64_t N_24054, int64_t N_24056,
                                               int64_t res_24068,
                                               int64_t res_24074,
                                               int64_t num_groups_26304,
                                               __global
                                               unsigned char *images_mem_36738,
                                               __global
                                               unsigned char *binop_p_mem_36747,
                                               __global
                                               unsigned char *mem_36830,
                                               __global
                                               unsigned char *mem_36835,
                                               int64_t groups_per_segment_37945,
                                               int64_t elements_per_thread_37946,
                                               int64_t virt_num_groups_37947,
                                               int64_t threads_per_segment_37949,
                                               __global
                                               unsigned char *group_res_arr_mem_37950,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_37952)
{
    #define segred_group_sizze_26303 (mainDetailedzisegred_group_sizze_26159)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_37961_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_37961_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_37959_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37959_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37954;
    int32_t local_tid_37955;
    int64_t group_sizze_37958;
    int32_t wave_sizze_37957;
    int32_t group_tid_37956;
    
    global_tid_37954 = get_global_id(0);
    local_tid_37955 = get_local_id(0);
    group_sizze_37958 = get_local_size(0);
    wave_sizze_37957 = LOCKSTEP_WIDTH;
    group_tid_37956 = get_group_id(0);
    
    int32_t phys_tid_26165;
    
    phys_tid_26165 = global_tid_37954;
    
    __local char *red_arr_mem_37959;
    
    red_arr_mem_37959 = (__local char *) red_arr_mem_37959_backing_0;
    
    __local char *sync_arr_mem_37961;
    
    sync_arr_mem_37961 = (__local char *) sync_arr_mem_37961_backing_1;
    
    int32_t phys_group_id_37963;
    
    phys_group_id_37963 = get_group_id(0);
    for (int32_t i_37964 = 0; i_37964 <
         sdiv_up32(sext_i64_i32(virt_num_groups_37947) - phys_group_id_37963,
                   sext_i64_i32(num_groups_26304)); i_37964++) {
        int32_t virt_group_id_37965 = phys_group_id_37963 + i_37964 *
                sext_i64_i32(num_groups_26304);
        int32_t flat_segment_id_37966 = squot32(virt_group_id_37965,
                                                sext_i64_i32(groups_per_segment_37945));
        int64_t global_tid_37967 = srem64(sext_i32_i64(virt_group_id_37965) *
                                          segred_group_sizze_26303 +
                                          sext_i32_i64(local_tid_37955),
                                          segred_group_sizze_26303 *
                                          groups_per_segment_37945);
        int64_t gtid_26152 = squot64(sext_i32_i64(flat_segment_id_37966),
                                     res_24074 * res_24074);
        int64_t gtid_26153 = squot64(sext_i32_i64(flat_segment_id_37966) -
                                     squot64(sext_i32_i64(flat_segment_id_37966),
                                             res_24074 * res_24074) *
                                     (res_24074 * res_24074), res_24074);
        int64_t gtid_26154 = sext_i32_i64(flat_segment_id_37966) -
                squot64(sext_i32_i64(flat_segment_id_37966), res_24074 *
                        res_24074) * (res_24074 * res_24074) -
                squot64(sext_i32_i64(flat_segment_id_37966) -
                        squot64(sext_i32_i64(flat_segment_id_37966), res_24074 *
                                res_24074) * (res_24074 * res_24074),
                        res_24074) * res_24074;
        int64_t gtid_26164;
        float x_acc_37968;
        int64_t chunk_sizze_37969;
        
        chunk_sizze_37969 = smin64(elements_per_thread_37946,
                                   sdiv_up64(res_24068 -
                                             sext_i32_i64(sext_i64_i32(global_tid_37967)),
                                             threads_per_segment_37949));
        
        float x_26307;
        float x_26308;
        
        // neutral-initialise the accumulators
        {
            x_acc_37968 = 0.0F;
        }
        for (int64_t i_37973 = 0; i_37973 < chunk_sizze_37969; i_37973++) {
            gtid_26164 = sext_i32_i64(sext_i64_i32(global_tid_37967)) +
                threads_per_segment_37949 * i_37973;
            // apply map function
            {
                float x_26313 = ((__global
                                  float *) images_mem_36738)[gtid_26152 *
                                                             N_24056 +
                                                             gtid_26164];
                float x_26314 = ((__global
                                  float *) binop_p_mem_36747)[gtid_26153 *
                                                              N_24054 +
                                                              gtid_26164];
                float x_26315 = ((__global float *) mem_36830)[gtid_26154 *
                                                               N_24054 +
                                                               gtid_26164];
                float x_26316 = x_26314 * x_26315;
                bool res_26317;
                
                res_26317 = futrts_isnan32(x_26313);
                
                float y_26318;
                
                if (res_26317) {
                    y_26318 = 0.0F;
                } else {
                    y_26318 = 1.0F;
                }
                
                float res_26319 = x_26316 * y_26318;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_26307 = x_acc_37968;
                }
                // load new values
                {
                    x_26308 = res_26319;
                }
                // apply reduction operator
                {
                    float res_26309 = x_26307 + x_26308;
                    
                    // store in accumulator
                    {
                        x_acc_37968 = res_26309;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_26307 = x_acc_37968;
            ((__local
              float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955)] =
                x_26307;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_37974;
        int32_t skip_waves_37975;
        
        skip_waves_37975 = 1;
        
        float x_37970;
        float x_37971;
        
        offset_37974 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_37955,
                      sext_i64_i32(segred_group_sizze_26303))) {
                x_37970 = ((__local
                            float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955 +
                                                        offset_37974)];
            }
        }
        offset_37974 = 1;
        while (slt32(offset_37974, wave_sizze_37957)) {
            if (slt32(local_tid_37955 + offset_37974,
                      sext_i64_i32(segred_group_sizze_26303)) &&
                ((local_tid_37955 - squot32(local_tid_37955, wave_sizze_37957) *
                  wave_sizze_37957) & (2 * offset_37974 - 1)) == 0) {
                // read array element
                {
                    x_37971 = ((volatile __local
                                float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955 +
                                                            offset_37974)];
                }
                // apply reduction operation
                {
                    float res_37972 = x_37970 + x_37971;
                    
                    x_37970 = res_37972;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955)] =
                        x_37970;
                }
            }
            offset_37974 *= 2;
        }
        while (slt32(skip_waves_37975,
                     squot32(sext_i64_i32(segred_group_sizze_26303) +
                             wave_sizze_37957 - 1, wave_sizze_37957))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_37974 = skip_waves_37975 * wave_sizze_37957;
            if (slt32(local_tid_37955 + offset_37974,
                      sext_i64_i32(segred_group_sizze_26303)) &&
                ((local_tid_37955 - squot32(local_tid_37955, wave_sizze_37957) *
                  wave_sizze_37957) == 0 && (squot32(local_tid_37955,
                                                     wave_sizze_37957) & (2 *
                                                                          skip_waves_37975 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_37971 = ((__local
                                float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955 +
                                                            offset_37974)];
                }
                // apply reduction operation
                {
                    float res_37972 = x_37970 + x_37971;
                    
                    x_37970 = res_37972;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955)] =
                        x_37970;
                }
            }
            skip_waves_37975 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_37955) == 0) {
                x_acc_37968 = x_37970;
            }
        }
        if (groups_per_segment_37945 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_37955 == 0) {
                    ((__global float *) mem_36835)[gtid_26152 * (res_24074 *
                                                                 res_24074) +
                                                   gtid_26153 * res_24074 +
                                                   gtid_26154] = x_acc_37968;
                }
            }
        } else {
            int32_t old_counter_37976;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_37955 == 0) {
                    ((__global
                      float *) group_res_arr_mem_37950)[sext_i32_i64(virt_group_id_37965) *
                                                        segred_group_sizze_26303] =
                        x_acc_37968;
                    mem_fence_global();
                    old_counter_37976 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_37952)[sext_i32_i64(srem32(flat_segment_id_37966,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_37961)[0] =
                        old_counter_37976 == groups_per_segment_37945 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_37977;
            
            is_last_group_37977 = ((__local bool *) sync_arr_mem_37961)[0];
            if (is_last_group_37977) {
                if (local_tid_37955 == 0) {
                    old_counter_37976 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_37952)[sext_i32_i64(srem32(flat_segment_id_37966,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_37945));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_37978 =
                            sdiv_up64(groups_per_segment_37945,
                                      segred_group_sizze_26303);
                    
                    x_26307 = 0.0F;
                    for (int64_t i_37979 = 0; i_37979 < read_per_thread_37978;
                         i_37979++) {
                        int64_t group_res_id_37980 =
                                sext_i32_i64(local_tid_37955) *
                                read_per_thread_37978 + i_37979;
                        int64_t index_of_group_res_37981 =
                                sext_i32_i64(flat_segment_id_37966) *
                                groups_per_segment_37945 + group_res_id_37980;
                        
                        if (slt64(group_res_id_37980,
                                  groups_per_segment_37945)) {
                            x_26308 = ((__global
                                        float *) group_res_arr_mem_37950)[index_of_group_res_37981 *
                                                                          segred_group_sizze_26303];
                            
                            float res_26309;
                            
                            res_26309 = x_26307 + x_26308;
                            x_26307 = res_26309;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955)] =
                    x_26307;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_37982;
                    int32_t skip_waves_37983;
                    
                    skip_waves_37983 = 1;
                    
                    float x_37970;
                    float x_37971;
                    
                    offset_37982 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_37955,
                                  sext_i64_i32(segred_group_sizze_26303))) {
                            x_37970 = ((__local
                                        float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955 +
                                                                    offset_37982)];
                        }
                    }
                    offset_37982 = 1;
                    while (slt32(offset_37982, wave_sizze_37957)) {
                        if (slt32(local_tid_37955 + offset_37982,
                                  sext_i64_i32(segred_group_sizze_26303)) &&
                            ((local_tid_37955 - squot32(local_tid_37955,
                                                        wave_sizze_37957) *
                              wave_sizze_37957) & (2 * offset_37982 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_37971 = ((volatile __local
                                            float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955 +
                                                                        offset_37982)];
                            }
                            // apply reduction operation
                            {
                                float res_37972 = x_37970 + x_37971;
                                
                                x_37970 = res_37972;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955)] =
                                    x_37970;
                            }
                        }
                        offset_37982 *= 2;
                    }
                    while (slt32(skip_waves_37983,
                                 squot32(sext_i64_i32(segred_group_sizze_26303) +
                                         wave_sizze_37957 - 1,
                                         wave_sizze_37957))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_37982 = skip_waves_37983 * wave_sizze_37957;
                        if (slt32(local_tid_37955 + offset_37982,
                                  sext_i64_i32(segred_group_sizze_26303)) &&
                            ((local_tid_37955 - squot32(local_tid_37955,
                                                        wave_sizze_37957) *
                              wave_sizze_37957) == 0 &&
                             (squot32(local_tid_37955, wave_sizze_37957) & (2 *
                                                                            skip_waves_37983 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_37971 = ((__local
                                            float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955 +
                                                                        offset_37982)];
                            }
                            // apply reduction operation
                            {
                                float res_37972 = x_37970 + x_37971;
                                
                                x_37970 = res_37972;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_37959)[sext_i32_i64(local_tid_37955)] =
                                    x_37970;
                            }
                        }
                        skip_waves_37983 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_37955 == 0) {
                            ((__global float *) mem_36835)[gtid_26152 *
                                                           (res_24074 *
                                                            res_24074) +
                                                           gtid_26153 *
                                                           res_24074 +
                                                           gtid_26154] =
                                x_37970;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_26303
}
__kernel void mainDetailedzisegred_large_27338(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38115_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38113_backing_aligned_1,
                                               int64_t N_24054, int64_t N_24056,
                                               int64_t res_24068,
                                               int64_t res_24074,
                                               int64_t num_groups_27391,
                                               __global
                                               unsigned char *images_mem_36738,
                                               __global
                                               unsigned char *binop_p_mem_36747,
                                               __global
                                               unsigned char *mem_37016,
                                               int64_t groups_per_segment_38099,
                                               int64_t elements_per_thread_38100,
                                               int64_t virt_num_groups_38101,
                                               int64_t threads_per_segment_38103,
                                               __global
                                               unsigned char *group_res_arr_mem_38104,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38106)
{
    #define segred_group_sizze_27390 (mainDetailedzisegred_group_sizze_27332)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38115_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38115_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38113_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38113_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38108;
    int32_t local_tid_38109;
    int64_t group_sizze_38112;
    int32_t wave_sizze_38111;
    int32_t group_tid_38110;
    
    global_tid_38108 = get_global_id(0);
    local_tid_38109 = get_local_id(0);
    group_sizze_38112 = get_local_size(0);
    wave_sizze_38111 = LOCKSTEP_WIDTH;
    group_tid_38110 = get_group_id(0);
    
    int32_t phys_tid_27338;
    
    phys_tid_27338 = global_tid_38108;
    
    __local char *red_arr_mem_38113;
    
    red_arr_mem_38113 = (__local char *) red_arr_mem_38113_backing_0;
    
    __local char *sync_arr_mem_38115;
    
    sync_arr_mem_38115 = (__local char *) sync_arr_mem_38115_backing_1;
    
    int32_t phys_group_id_38117;
    
    phys_group_id_38117 = get_group_id(0);
    for (int32_t i_38118 = 0; i_38118 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38101) - phys_group_id_38117,
                   sext_i64_i32(num_groups_27391)); i_38118++) {
        int32_t virt_group_id_38119 = phys_group_id_38117 + i_38118 *
                sext_i64_i32(num_groups_27391);
        int32_t flat_segment_id_38120 = squot32(virt_group_id_38119,
                                                sext_i64_i32(groups_per_segment_38099));
        int64_t global_tid_38121 = srem64(sext_i32_i64(virt_group_id_38119) *
                                          segred_group_sizze_27390 +
                                          sext_i32_i64(local_tid_38109),
                                          segred_group_sizze_27390 *
                                          groups_per_segment_38099);
        int64_t gtid_27327 = squot64(sext_i32_i64(flat_segment_id_38120),
                                     res_24074);
        int64_t gtid_27328 = sext_i32_i64(flat_segment_id_38120) -
                squot64(sext_i32_i64(flat_segment_id_38120), res_24074) *
                res_24074;
        int64_t gtid_27337;
        float x_acc_38122;
        int64_t chunk_sizze_38123;
        
        chunk_sizze_38123 = smin64(elements_per_thread_38100,
                                   sdiv_up64(res_24068 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38121)),
                                             threads_per_segment_38103));
        
        float x_27394;
        float x_27395;
        
        // neutral-initialise the accumulators
        {
            x_acc_38122 = 0.0F;
        }
        for (int64_t i_38127 = 0; i_38127 < chunk_sizze_38123; i_38127++) {
            gtid_27337 = sext_i32_i64(sext_i64_i32(global_tid_38121)) +
                threads_per_segment_38103 * i_38127;
            // apply map function
            {
                float x_27400 = ((__global
                                  float *) images_mem_36738)[gtid_27327 *
                                                             N_24056 +
                                                             gtid_27337];
                bool res_27401;
                
                res_27401 = futrts_isnan32(x_27400);
                
                float res_27402;
                
                if (res_27401) {
                    res_27402 = 0.0F;
                } else {
                    float x_27399 = ((__global
                                      float *) binop_p_mem_36747)[gtid_27328 *
                                                                  N_24054 +
                                                                  gtid_27337];
                    float res_27403 = x_27399 * x_27400;
                    
                    res_27402 = res_27403;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_27394 = x_acc_38122;
                }
                // load new values
                {
                    x_27395 = res_27402;
                }
                // apply reduction operator
                {
                    float res_27396 = x_27394 + x_27395;
                    
                    // store in accumulator
                    {
                        x_acc_38122 = res_27396;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27394 = x_acc_38122;
            ((__local
              float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109)] =
                x_27394;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38128;
        int32_t skip_waves_38129;
        
        skip_waves_38129 = 1;
        
        float x_38124;
        float x_38125;
        
        offset_38128 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38109,
                      sext_i64_i32(segred_group_sizze_27390))) {
                x_38124 = ((__local
                            float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109 +
                                                        offset_38128)];
            }
        }
        offset_38128 = 1;
        while (slt32(offset_38128, wave_sizze_38111)) {
            if (slt32(local_tid_38109 + offset_38128,
                      sext_i64_i32(segred_group_sizze_27390)) &&
                ((local_tid_38109 - squot32(local_tid_38109, wave_sizze_38111) *
                  wave_sizze_38111) & (2 * offset_38128 - 1)) == 0) {
                // read array element
                {
                    x_38125 = ((volatile __local
                                float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109 +
                                                            offset_38128)];
                }
                // apply reduction operation
                {
                    float res_38126 = x_38124 + x_38125;
                    
                    x_38124 = res_38126;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109)] =
                        x_38124;
                }
            }
            offset_38128 *= 2;
        }
        while (slt32(skip_waves_38129,
                     squot32(sext_i64_i32(segred_group_sizze_27390) +
                             wave_sizze_38111 - 1, wave_sizze_38111))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38128 = skip_waves_38129 * wave_sizze_38111;
            if (slt32(local_tid_38109 + offset_38128,
                      sext_i64_i32(segred_group_sizze_27390)) &&
                ((local_tid_38109 - squot32(local_tid_38109, wave_sizze_38111) *
                  wave_sizze_38111) == 0 && (squot32(local_tid_38109,
                                                     wave_sizze_38111) & (2 *
                                                                          skip_waves_38129 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38125 = ((__local
                                float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109 +
                                                            offset_38128)];
                }
                // apply reduction operation
                {
                    float res_38126 = x_38124 + x_38125;
                    
                    x_38124 = res_38126;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109)] =
                        x_38124;
                }
            }
            skip_waves_38129 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38109) == 0) {
                x_acc_38122 = x_38124;
            }
        }
        if (groups_per_segment_38099 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38109 == 0) {
                    ((__global float *) mem_37016)[gtid_27327 * res_24074 +
                                                   gtid_27328] = x_acc_38122;
                }
            }
        } else {
            int32_t old_counter_38130;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38109 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38104)[sext_i32_i64(virt_group_id_38119) *
                                                        segred_group_sizze_27390] =
                        x_acc_38122;
                    mem_fence_global();
                    old_counter_38130 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38106)[sext_i32_i64(srem32(flat_segment_id_38120,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38115)[0] =
                        old_counter_38130 == groups_per_segment_38099 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38131;
            
            is_last_group_38131 = ((__local bool *) sync_arr_mem_38115)[0];
            if (is_last_group_38131) {
                if (local_tid_38109 == 0) {
                    old_counter_38130 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38106)[sext_i32_i64(srem32(flat_segment_id_38120,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38099));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38132 =
                            sdiv_up64(groups_per_segment_38099,
                                      segred_group_sizze_27390);
                    
                    x_27394 = 0.0F;
                    for (int64_t i_38133 = 0; i_38133 < read_per_thread_38132;
                         i_38133++) {
                        int64_t group_res_id_38134 =
                                sext_i32_i64(local_tid_38109) *
                                read_per_thread_38132 + i_38133;
                        int64_t index_of_group_res_38135 =
                                sext_i32_i64(flat_segment_id_38120) *
                                groups_per_segment_38099 + group_res_id_38134;
                        
                        if (slt64(group_res_id_38134,
                                  groups_per_segment_38099)) {
                            x_27395 = ((__global
                                        float *) group_res_arr_mem_38104)[index_of_group_res_38135 *
                                                                          segred_group_sizze_27390];
                            
                            float res_27396;
                            
                            res_27396 = x_27394 + x_27395;
                            x_27394 = res_27396;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109)] =
                    x_27394;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38136;
                    int32_t skip_waves_38137;
                    
                    skip_waves_38137 = 1;
                    
                    float x_38124;
                    float x_38125;
                    
                    offset_38136 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38109,
                                  sext_i64_i32(segred_group_sizze_27390))) {
                            x_38124 = ((__local
                                        float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109 +
                                                                    offset_38136)];
                        }
                    }
                    offset_38136 = 1;
                    while (slt32(offset_38136, wave_sizze_38111)) {
                        if (slt32(local_tid_38109 + offset_38136,
                                  sext_i64_i32(segred_group_sizze_27390)) &&
                            ((local_tid_38109 - squot32(local_tid_38109,
                                                        wave_sizze_38111) *
                              wave_sizze_38111) & (2 * offset_38136 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38125 = ((volatile __local
                                            float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109 +
                                                                        offset_38136)];
                            }
                            // apply reduction operation
                            {
                                float res_38126 = x_38124 + x_38125;
                                
                                x_38124 = res_38126;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109)] =
                                    x_38124;
                            }
                        }
                        offset_38136 *= 2;
                    }
                    while (slt32(skip_waves_38137,
                                 squot32(sext_i64_i32(segred_group_sizze_27390) +
                                         wave_sizze_38111 - 1,
                                         wave_sizze_38111))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38136 = skip_waves_38137 * wave_sizze_38111;
                        if (slt32(local_tid_38109 + offset_38136,
                                  sext_i64_i32(segred_group_sizze_27390)) &&
                            ((local_tid_38109 - squot32(local_tid_38109,
                                                        wave_sizze_38111) *
                              wave_sizze_38111) == 0 &&
                             (squot32(local_tid_38109, wave_sizze_38111) & (2 *
                                                                            skip_waves_38137 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38125 = ((__local
                                            float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109 +
                                                                        offset_38136)];
                            }
                            // apply reduction operation
                            {
                                float res_38126 = x_38124 + x_38125;
                                
                                x_38124 = res_38126;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38113)[sext_i32_i64(local_tid_38109)] =
                                    x_38124;
                            }
                        }
                        skip_waves_38137 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38109 == 0) {
                            ((__global float *) mem_37016)[gtid_27327 *
                                                           res_24074 +
                                                           gtid_27328] =
                                x_38124;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27390
}
__kernel void mainDetailedzisegred_large_27475(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38196_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38194_backing_aligned_1,
                                               int64_t res_24074,
                                               int64_t num_groups_27524,
                                               __global
                                               unsigned char *res_mem_36931,
                                               __global
                                               unsigned char *res_mem_37022,
                                               __global
                                               unsigned char *mem_37059,
                                               int64_t groups_per_segment_38180,
                                               int64_t elements_per_thread_38181,
                                               int64_t virt_num_groups_38182,
                                               int64_t threads_per_segment_38184,
                                               __global
                                               unsigned char *group_res_arr_mem_38185,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38187)
{
    #define segred_group_sizze_27523 (mainDetailedzisegred_group_sizze_27469)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38196_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38196_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38194_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38194_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38189;
    int32_t local_tid_38190;
    int64_t group_sizze_38193;
    int32_t wave_sizze_38192;
    int32_t group_tid_38191;
    
    global_tid_38189 = get_global_id(0);
    local_tid_38190 = get_local_id(0);
    group_sizze_38193 = get_local_size(0);
    wave_sizze_38192 = LOCKSTEP_WIDTH;
    group_tid_38191 = get_group_id(0);
    
    int32_t phys_tid_27475;
    
    phys_tid_27475 = global_tid_38189;
    
    __local char *red_arr_mem_38194;
    
    red_arr_mem_38194 = (__local char *) red_arr_mem_38194_backing_0;
    
    __local char *sync_arr_mem_38196;
    
    sync_arr_mem_38196 = (__local char *) sync_arr_mem_38196_backing_1;
    
    int32_t phys_group_id_38198;
    
    phys_group_id_38198 = get_group_id(0);
    for (int32_t i_38199 = 0; i_38199 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38182) - phys_group_id_38198,
                   sext_i64_i32(num_groups_27524)); i_38199++) {
        int32_t virt_group_id_38200 = phys_group_id_38198 + i_38199 *
                sext_i64_i32(num_groups_27524);
        int32_t flat_segment_id_38201 = squot32(virt_group_id_38200,
                                                sext_i64_i32(groups_per_segment_38180));
        int64_t global_tid_38202 = srem64(sext_i32_i64(virt_group_id_38200) *
                                          segred_group_sizze_27523 +
                                          sext_i32_i64(local_tid_38190),
                                          segred_group_sizze_27523 *
                                          groups_per_segment_38180);
        int64_t gtid_27464 = squot64(sext_i32_i64(flat_segment_id_38201),
                                     res_24074);
        int64_t gtid_27465 = sext_i32_i64(flat_segment_id_38201) -
                squot64(sext_i32_i64(flat_segment_id_38201), res_24074) *
                res_24074;
        int64_t gtid_27474;
        float x_acc_38203;
        int64_t chunk_sizze_38204;
        
        chunk_sizze_38204 = smin64(elements_per_thread_38181,
                                   sdiv_up64(res_24074 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38202)),
                                             threads_per_segment_38184));
        
        float x_27527;
        float x_27528;
        
        // neutral-initialise the accumulators
        {
            x_acc_38203 = 0.0F;
        }
        for (int64_t i_38208 = 0; i_38208 < chunk_sizze_38204; i_38208++) {
            gtid_27474 = sext_i32_i64(sext_i64_i32(global_tid_38202)) +
                threads_per_segment_38184 * i_38208;
            // apply map function
            {
                float x_27533 = ((__global float *) res_mem_37022)[gtid_27464 *
                                                                   res_24074 +
                                                                   gtid_27474];
                float x_27534 = ((__global float *) res_mem_36931)[gtid_27464 *
                                                                   (res_24074 *
                                                                    res_24074) +
                                                                   gtid_27465 *
                                                                   res_24074 +
                                                                   gtid_27474];
                float res_27535 = x_27533 * x_27534;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27527 = x_acc_38203;
                }
                // load new values
                {
                    x_27528 = res_27535;
                }
                // apply reduction operator
                {
                    float res_27529 = x_27527 + x_27528;
                    
                    // store in accumulator
                    {
                        x_acc_38203 = res_27529;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27527 = x_acc_38203;
            ((__local
              float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190)] =
                x_27527;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38209;
        int32_t skip_waves_38210;
        
        skip_waves_38210 = 1;
        
        float x_38205;
        float x_38206;
        
        offset_38209 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38190,
                      sext_i64_i32(segred_group_sizze_27523))) {
                x_38205 = ((__local
                            float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190 +
                                                        offset_38209)];
            }
        }
        offset_38209 = 1;
        while (slt32(offset_38209, wave_sizze_38192)) {
            if (slt32(local_tid_38190 + offset_38209,
                      sext_i64_i32(segred_group_sizze_27523)) &&
                ((local_tid_38190 - squot32(local_tid_38190, wave_sizze_38192) *
                  wave_sizze_38192) & (2 * offset_38209 - 1)) == 0) {
                // read array element
                {
                    x_38206 = ((volatile __local
                                float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190 +
                                                            offset_38209)];
                }
                // apply reduction operation
                {
                    float res_38207 = x_38205 + x_38206;
                    
                    x_38205 = res_38207;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190)] =
                        x_38205;
                }
            }
            offset_38209 *= 2;
        }
        while (slt32(skip_waves_38210,
                     squot32(sext_i64_i32(segred_group_sizze_27523) +
                             wave_sizze_38192 - 1, wave_sizze_38192))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38209 = skip_waves_38210 * wave_sizze_38192;
            if (slt32(local_tid_38190 + offset_38209,
                      sext_i64_i32(segred_group_sizze_27523)) &&
                ((local_tid_38190 - squot32(local_tid_38190, wave_sizze_38192) *
                  wave_sizze_38192) == 0 && (squot32(local_tid_38190,
                                                     wave_sizze_38192) & (2 *
                                                                          skip_waves_38210 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38206 = ((__local
                                float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190 +
                                                            offset_38209)];
                }
                // apply reduction operation
                {
                    float res_38207 = x_38205 + x_38206;
                    
                    x_38205 = res_38207;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190)] =
                        x_38205;
                }
            }
            skip_waves_38210 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38190) == 0) {
                x_acc_38203 = x_38205;
            }
        }
        if (groups_per_segment_38180 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38190 == 0) {
                    ((__global float *) mem_37059)[gtid_27464 * res_24074 +
                                                   gtid_27465] = x_acc_38203;
                }
            }
        } else {
            int32_t old_counter_38211;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38190 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38185)[sext_i32_i64(virt_group_id_38200) *
                                                        segred_group_sizze_27523] =
                        x_acc_38203;
                    mem_fence_global();
                    old_counter_38211 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38187)[sext_i32_i64(srem32(flat_segment_id_38201,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38196)[0] =
                        old_counter_38211 == groups_per_segment_38180 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38212;
            
            is_last_group_38212 = ((__local bool *) sync_arr_mem_38196)[0];
            if (is_last_group_38212) {
                if (local_tid_38190 == 0) {
                    old_counter_38211 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38187)[sext_i32_i64(srem32(flat_segment_id_38201,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38180));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38213 =
                            sdiv_up64(groups_per_segment_38180,
                                      segred_group_sizze_27523);
                    
                    x_27527 = 0.0F;
                    for (int64_t i_38214 = 0; i_38214 < read_per_thread_38213;
                         i_38214++) {
                        int64_t group_res_id_38215 =
                                sext_i32_i64(local_tid_38190) *
                                read_per_thread_38213 + i_38214;
                        int64_t index_of_group_res_38216 =
                                sext_i32_i64(flat_segment_id_38201) *
                                groups_per_segment_38180 + group_res_id_38215;
                        
                        if (slt64(group_res_id_38215,
                                  groups_per_segment_38180)) {
                            x_27528 = ((__global
                                        float *) group_res_arr_mem_38185)[index_of_group_res_38216 *
                                                                          segred_group_sizze_27523];
                            
                            float res_27529;
                            
                            res_27529 = x_27527 + x_27528;
                            x_27527 = res_27529;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190)] =
                    x_27527;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38217;
                    int32_t skip_waves_38218;
                    
                    skip_waves_38218 = 1;
                    
                    float x_38205;
                    float x_38206;
                    
                    offset_38217 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38190,
                                  sext_i64_i32(segred_group_sizze_27523))) {
                            x_38205 = ((__local
                                        float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190 +
                                                                    offset_38217)];
                        }
                    }
                    offset_38217 = 1;
                    while (slt32(offset_38217, wave_sizze_38192)) {
                        if (slt32(local_tid_38190 + offset_38217,
                                  sext_i64_i32(segred_group_sizze_27523)) &&
                            ((local_tid_38190 - squot32(local_tid_38190,
                                                        wave_sizze_38192) *
                              wave_sizze_38192) & (2 * offset_38217 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38206 = ((volatile __local
                                            float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190 +
                                                                        offset_38217)];
                            }
                            // apply reduction operation
                            {
                                float res_38207 = x_38205 + x_38206;
                                
                                x_38205 = res_38207;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190)] =
                                    x_38205;
                            }
                        }
                        offset_38217 *= 2;
                    }
                    while (slt32(skip_waves_38218,
                                 squot32(sext_i64_i32(segred_group_sizze_27523) +
                                         wave_sizze_38192 - 1,
                                         wave_sizze_38192))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38217 = skip_waves_38218 * wave_sizze_38192;
                        if (slt32(local_tid_38190 + offset_38217,
                                  sext_i64_i32(segred_group_sizze_27523)) &&
                            ((local_tid_38190 - squot32(local_tid_38190,
                                                        wave_sizze_38192) *
                              wave_sizze_38192) == 0 &&
                             (squot32(local_tid_38190, wave_sizze_38192) & (2 *
                                                                            skip_waves_38218 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38206 = ((__local
                                            float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190 +
                                                                        offset_38217)];
                            }
                            // apply reduction operation
                            {
                                float res_38207 = x_38205 + x_38206;
                                
                                x_38205 = res_38207;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38194)[sext_i32_i64(local_tid_38190)] =
                                    x_38205;
                            }
                        }
                        skip_waves_38218 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38190 == 0) {
                            ((__global float *) mem_37059)[gtid_27464 *
                                                           res_24074 +
                                                           gtid_27465] =
                                x_38205;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27523
}
__kernel void mainDetailedzisegred_large_27605(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38284_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38282_backing_aligned_1,
                                               int64_t N_24054,
                                               int64_t res_24074,
                                               int64_t num_groups_27652,
                                               __global
                                               unsigned char *mem_36754,
                                               __global
                                               unsigned char *res_mem_37065,
                                               __global
                                               unsigned char *mem_37153,
                                               int64_t groups_per_segment_38268,
                                               int64_t elements_per_thread_38269,
                                               int64_t virt_num_groups_38270,
                                               int64_t threads_per_segment_38272,
                                               __global
                                               unsigned char *group_res_arr_mem_38273,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38275)
{
    #define segred_group_sizze_27651 (mainDetailedzisegred_group_sizze_27599)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38284_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38284_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38282_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38282_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38277;
    int32_t local_tid_38278;
    int64_t group_sizze_38281;
    int32_t wave_sizze_38280;
    int32_t group_tid_38279;
    
    global_tid_38277 = get_global_id(0);
    local_tid_38278 = get_local_id(0);
    group_sizze_38281 = get_local_size(0);
    wave_sizze_38280 = LOCKSTEP_WIDTH;
    group_tid_38279 = get_group_id(0);
    
    int32_t phys_tid_27605;
    
    phys_tid_27605 = global_tid_38277;
    
    __local char *red_arr_mem_38282;
    
    red_arr_mem_38282 = (__local char *) red_arr_mem_38282_backing_0;
    
    __local char *sync_arr_mem_38284;
    
    sync_arr_mem_38284 = (__local char *) sync_arr_mem_38284_backing_1;
    
    int32_t phys_group_id_38286;
    
    phys_group_id_38286 = get_group_id(0);
    for (int32_t i_38287 = 0; i_38287 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38270) - phys_group_id_38286,
                   sext_i64_i32(num_groups_27652)); i_38287++) {
        int32_t virt_group_id_38288 = phys_group_id_38286 + i_38287 *
                sext_i64_i32(num_groups_27652);
        int32_t flat_segment_id_38289 = squot32(virt_group_id_38288,
                                                sext_i64_i32(groups_per_segment_38268));
        int64_t global_tid_38290 = srem64(sext_i32_i64(virt_group_id_38288) *
                                          segred_group_sizze_27651 +
                                          sext_i32_i64(local_tid_38278),
                                          segred_group_sizze_27651 *
                                          groups_per_segment_38268);
        int64_t gtid_27594 = squot64(sext_i32_i64(flat_segment_id_38289),
                                     N_24054);
        int64_t gtid_27595 = sext_i32_i64(flat_segment_id_38289) -
                squot64(sext_i32_i64(flat_segment_id_38289), N_24054) * N_24054;
        int64_t gtid_27604;
        float x_acc_38291;
        int64_t chunk_sizze_38292;
        
        chunk_sizze_38292 = smin64(elements_per_thread_38269,
                                   sdiv_up64(res_24074 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38290)),
                                             threads_per_segment_38272));
        
        float x_27655;
        float x_27656;
        
        // neutral-initialise the accumulators
        {
            x_acc_38291 = 0.0F;
        }
        for (int64_t i_38296 = 0; i_38296 < chunk_sizze_38292; i_38296++) {
            gtid_27604 = sext_i32_i64(sext_i64_i32(global_tid_38290)) +
                threads_per_segment_38272 * i_38296;
            // apply map function
            {
                float x_27660 = ((__global float *) res_mem_37065)[gtid_27594 *
                                                                   res_24074 +
                                                                   gtid_27604];
                float x_27661 = ((__global float *) mem_36754)[gtid_27595 *
                                                               res_24074 +
                                                               gtid_27604];
                float res_27662 = x_27660 * x_27661;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27655 = x_acc_38291;
                }
                // load new values
                {
                    x_27656 = res_27662;
                }
                // apply reduction operator
                {
                    float res_27657 = x_27655 + x_27656;
                    
                    // store in accumulator
                    {
                        x_acc_38291 = res_27657;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27655 = x_acc_38291;
            ((__local
              float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278)] =
                x_27655;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38297;
        int32_t skip_waves_38298;
        
        skip_waves_38298 = 1;
        
        float x_38293;
        float x_38294;
        
        offset_38297 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38278,
                      sext_i64_i32(segred_group_sizze_27651))) {
                x_38293 = ((__local
                            float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278 +
                                                        offset_38297)];
            }
        }
        offset_38297 = 1;
        while (slt32(offset_38297, wave_sizze_38280)) {
            if (slt32(local_tid_38278 + offset_38297,
                      sext_i64_i32(segred_group_sizze_27651)) &&
                ((local_tid_38278 - squot32(local_tid_38278, wave_sizze_38280) *
                  wave_sizze_38280) & (2 * offset_38297 - 1)) == 0) {
                // read array element
                {
                    x_38294 = ((volatile __local
                                float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278 +
                                                            offset_38297)];
                }
                // apply reduction operation
                {
                    float res_38295 = x_38293 + x_38294;
                    
                    x_38293 = res_38295;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278)] =
                        x_38293;
                }
            }
            offset_38297 *= 2;
        }
        while (slt32(skip_waves_38298,
                     squot32(sext_i64_i32(segred_group_sizze_27651) +
                             wave_sizze_38280 - 1, wave_sizze_38280))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38297 = skip_waves_38298 * wave_sizze_38280;
            if (slt32(local_tid_38278 + offset_38297,
                      sext_i64_i32(segred_group_sizze_27651)) &&
                ((local_tid_38278 - squot32(local_tid_38278, wave_sizze_38280) *
                  wave_sizze_38280) == 0 && (squot32(local_tid_38278,
                                                     wave_sizze_38280) & (2 *
                                                                          skip_waves_38298 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38294 = ((__local
                                float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278 +
                                                            offset_38297)];
                }
                // apply reduction operation
                {
                    float res_38295 = x_38293 + x_38294;
                    
                    x_38293 = res_38295;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278)] =
                        x_38293;
                }
            }
            skip_waves_38298 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38278) == 0) {
                x_acc_38291 = x_38293;
            }
        }
        if (groups_per_segment_38268 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38278 == 0) {
                    ((__global float *) mem_37153)[gtid_27594 * N_24054 +
                                                   gtid_27595] = x_acc_38291;
                }
            }
        } else {
            int32_t old_counter_38299;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38278 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38273)[sext_i32_i64(virt_group_id_38288) *
                                                        segred_group_sizze_27651] =
                        x_acc_38291;
                    mem_fence_global();
                    old_counter_38299 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38275)[sext_i32_i64(srem32(flat_segment_id_38289,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38284)[0] =
                        old_counter_38299 == groups_per_segment_38268 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38300;
            
            is_last_group_38300 = ((__local bool *) sync_arr_mem_38284)[0];
            if (is_last_group_38300) {
                if (local_tid_38278 == 0) {
                    old_counter_38299 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38275)[sext_i32_i64(srem32(flat_segment_id_38289,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38268));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38301 =
                            sdiv_up64(groups_per_segment_38268,
                                      segred_group_sizze_27651);
                    
                    x_27655 = 0.0F;
                    for (int64_t i_38302 = 0; i_38302 < read_per_thread_38301;
                         i_38302++) {
                        int64_t group_res_id_38303 =
                                sext_i32_i64(local_tid_38278) *
                                read_per_thread_38301 + i_38302;
                        int64_t index_of_group_res_38304 =
                                sext_i32_i64(flat_segment_id_38289) *
                                groups_per_segment_38268 + group_res_id_38303;
                        
                        if (slt64(group_res_id_38303,
                                  groups_per_segment_38268)) {
                            x_27656 = ((__global
                                        float *) group_res_arr_mem_38273)[index_of_group_res_38304 *
                                                                          segred_group_sizze_27651];
                            
                            float res_27657;
                            
                            res_27657 = x_27655 + x_27656;
                            x_27655 = res_27657;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278)] =
                    x_27655;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38305;
                    int32_t skip_waves_38306;
                    
                    skip_waves_38306 = 1;
                    
                    float x_38293;
                    float x_38294;
                    
                    offset_38305 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38278,
                                  sext_i64_i32(segred_group_sizze_27651))) {
                            x_38293 = ((__local
                                        float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278 +
                                                                    offset_38305)];
                        }
                    }
                    offset_38305 = 1;
                    while (slt32(offset_38305, wave_sizze_38280)) {
                        if (slt32(local_tid_38278 + offset_38305,
                                  sext_i64_i32(segred_group_sizze_27651)) &&
                            ((local_tid_38278 - squot32(local_tid_38278,
                                                        wave_sizze_38280) *
                              wave_sizze_38280) & (2 * offset_38305 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38294 = ((volatile __local
                                            float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278 +
                                                                        offset_38305)];
                            }
                            // apply reduction operation
                            {
                                float res_38295 = x_38293 + x_38294;
                                
                                x_38293 = res_38295;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278)] =
                                    x_38293;
                            }
                        }
                        offset_38305 *= 2;
                    }
                    while (slt32(skip_waves_38306,
                                 squot32(sext_i64_i32(segred_group_sizze_27651) +
                                         wave_sizze_38280 - 1,
                                         wave_sizze_38280))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38305 = skip_waves_38306 * wave_sizze_38280;
                        if (slt32(local_tid_38278 + offset_38305,
                                  sext_i64_i32(segred_group_sizze_27651)) &&
                            ((local_tid_38278 - squot32(local_tid_38278,
                                                        wave_sizze_38280) *
                              wave_sizze_38280) == 0 &&
                             (squot32(local_tid_38278, wave_sizze_38280) & (2 *
                                                                            skip_waves_38306 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38294 = ((__local
                                            float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278 +
                                                                        offset_38305)];
                            }
                            // apply reduction operation
                            {
                                float res_38295 = x_38293 + x_38294;
                                
                                x_38293 = res_38295;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38282)[sext_i32_i64(local_tid_38278)] =
                                    x_38293;
                            }
                        }
                        skip_waves_38306 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38278 == 0) {
                            ((__global float *) mem_37153)[gtid_27594 *
                                                           N_24054 +
                                                           gtid_27595] =
                                x_38293;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27651
}
__kernel void mainDetailedzisegred_large_28171(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38538_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38536_backing_aligned_1,
                                               int64_t N_24054,
                                               int64_t res_24068,
                                               int64_t num_groups_28218,
                                               __global
                                               unsigned char *res_mem_37197,
                                               __global
                                               unsigned char *mem_37264,
                                               __global
                                               unsigned char *mem_37267,
                                               int64_t groups_per_segment_38522,
                                               int64_t elements_per_thread_38523,
                                               int64_t virt_num_groups_38524,
                                               int64_t threads_per_segment_38526,
                                               __global
                                               unsigned char *group_res_arr_mem_38527,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38529)
{
    #define segred_group_sizze_28217 (mainDetailedzisegred_group_sizze_28165)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38538_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38538_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38536_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38536_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38531;
    int32_t local_tid_38532;
    int64_t group_sizze_38535;
    int32_t wave_sizze_38534;
    int32_t group_tid_38533;
    
    global_tid_38531 = get_global_id(0);
    local_tid_38532 = get_local_id(0);
    group_sizze_38535 = get_local_size(0);
    wave_sizze_38534 = LOCKSTEP_WIDTH;
    group_tid_38533 = get_group_id(0);
    
    int32_t phys_tid_28171;
    
    phys_tid_28171 = global_tid_38531;
    
    __local char *red_arr_mem_38536;
    
    red_arr_mem_38536 = (__local char *) red_arr_mem_38536_backing_0;
    
    __local char *sync_arr_mem_38538;
    
    sync_arr_mem_38538 = (__local char *) sync_arr_mem_38538_backing_1;
    
    int32_t phys_group_id_38540;
    
    phys_group_id_38540 = get_group_id(0);
    for (int32_t i_38541 = 0; i_38541 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38524) - phys_group_id_38540,
                   sext_i64_i32(num_groups_28218)); i_38541++) {
        int32_t virt_group_id_38542 = phys_group_id_38540 + i_38541 *
                sext_i64_i32(num_groups_28218);
        int32_t flat_segment_id_38543 = squot32(virt_group_id_38542,
                                                sext_i64_i32(groups_per_segment_38522));
        int64_t global_tid_38544 = srem64(sext_i32_i64(virt_group_id_38542) *
                                          segred_group_sizze_28217 +
                                          sext_i32_i64(local_tid_38532),
                                          segred_group_sizze_28217 *
                                          groups_per_segment_38522);
        int64_t gtid_28162 = sext_i32_i64(flat_segment_id_38543);
        int64_t gtid_28170;
        float x_acc_38545;
        int64_t chunk_sizze_38546;
        
        chunk_sizze_38546 = smin64(elements_per_thread_38523,
                                   sdiv_up64(res_24068 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38544)),
                                             threads_per_segment_38526));
        
        float x_28221;
        float x_28222;
        
        // neutral-initialise the accumulators
        {
            x_acc_38545 = 0.0F;
        }
        for (int64_t i_38550 = 0; i_38550 < chunk_sizze_38546; i_38550++) {
            gtid_28170 = sext_i32_i64(sext_i64_i32(global_tid_38544)) +
                threads_per_segment_38526 * i_38550;
            // apply map function
            {
                int32_t res_28225 = ((__global
                                      int32_t *) mem_37264)[gtid_28162];
                int32_t index_primexp_35444 = sext_i64_i32(gtid_28170);
                bool cond_28227 = slt32(index_primexp_35444, res_28225);
                float res_28228;
                
                if (cond_28227) {
                    int64_t i_28229 = sext_i32_i64(index_primexp_35444);
                    float res_28230 = ((__global
                                        float *) res_mem_37197)[gtid_28162 *
                                                                N_24054 +
                                                                i_28229];
                    
                    res_28228 = res_28230;
                } else {
                    res_28228 = 0.0F;
                }
                
                float res_28231 = res_28228 * res_28228;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_28221 = x_acc_38545;
                }
                // load new values
                {
                    x_28222 = res_28231;
                }
                // apply reduction operator
                {
                    float res_28223 = x_28221 + x_28222;
                    
                    // store in accumulator
                    {
                        x_acc_38545 = res_28223;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_28221 = x_acc_38545;
            ((__local
              float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532)] =
                x_28221;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38551;
        int32_t skip_waves_38552;
        
        skip_waves_38552 = 1;
        
        float x_38547;
        float x_38548;
        
        offset_38551 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38532,
                      sext_i64_i32(segred_group_sizze_28217))) {
                x_38547 = ((__local
                            float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532 +
                                                        offset_38551)];
            }
        }
        offset_38551 = 1;
        while (slt32(offset_38551, wave_sizze_38534)) {
            if (slt32(local_tid_38532 + offset_38551,
                      sext_i64_i32(segred_group_sizze_28217)) &&
                ((local_tid_38532 - squot32(local_tid_38532, wave_sizze_38534) *
                  wave_sizze_38534) & (2 * offset_38551 - 1)) == 0) {
                // read array element
                {
                    x_38548 = ((volatile __local
                                float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532 +
                                                            offset_38551)];
                }
                // apply reduction operation
                {
                    float res_38549 = x_38547 + x_38548;
                    
                    x_38547 = res_38549;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532)] =
                        x_38547;
                }
            }
            offset_38551 *= 2;
        }
        while (slt32(skip_waves_38552,
                     squot32(sext_i64_i32(segred_group_sizze_28217) +
                             wave_sizze_38534 - 1, wave_sizze_38534))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38551 = skip_waves_38552 * wave_sizze_38534;
            if (slt32(local_tid_38532 + offset_38551,
                      sext_i64_i32(segred_group_sizze_28217)) &&
                ((local_tid_38532 - squot32(local_tid_38532, wave_sizze_38534) *
                  wave_sizze_38534) == 0 && (squot32(local_tid_38532,
                                                     wave_sizze_38534) & (2 *
                                                                          skip_waves_38552 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38548 = ((__local
                                float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532 +
                                                            offset_38551)];
                }
                // apply reduction operation
                {
                    float res_38549 = x_38547 + x_38548;
                    
                    x_38547 = res_38549;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532)] =
                        x_38547;
                }
            }
            skip_waves_38552 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38532) == 0) {
                x_acc_38545 = x_38547;
            }
        }
        if (groups_per_segment_38522 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38532 == 0) {
                    ((__global float *) mem_37267)[gtid_28162] = x_acc_38545;
                }
            }
        } else {
            int32_t old_counter_38553;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38532 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38527)[sext_i32_i64(virt_group_id_38542) *
                                                        segred_group_sizze_28217] =
                        x_acc_38545;
                    mem_fence_global();
                    old_counter_38553 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38529)[sext_i32_i64(srem32(flat_segment_id_38543,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38538)[0] =
                        old_counter_38553 == groups_per_segment_38522 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38554;
            
            is_last_group_38554 = ((__local bool *) sync_arr_mem_38538)[0];
            if (is_last_group_38554) {
                if (local_tid_38532 == 0) {
                    old_counter_38553 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38529)[sext_i32_i64(srem32(flat_segment_id_38543,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38522));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38555 =
                            sdiv_up64(groups_per_segment_38522,
                                      segred_group_sizze_28217);
                    
                    x_28221 = 0.0F;
                    for (int64_t i_38556 = 0; i_38556 < read_per_thread_38555;
                         i_38556++) {
                        int64_t group_res_id_38557 =
                                sext_i32_i64(local_tid_38532) *
                                read_per_thread_38555 + i_38556;
                        int64_t index_of_group_res_38558 =
                                sext_i32_i64(flat_segment_id_38543) *
                                groups_per_segment_38522 + group_res_id_38557;
                        
                        if (slt64(group_res_id_38557,
                                  groups_per_segment_38522)) {
                            x_28222 = ((__global
                                        float *) group_res_arr_mem_38527)[index_of_group_res_38558 *
                                                                          segred_group_sizze_28217];
                            
                            float res_28223;
                            
                            res_28223 = x_28221 + x_28222;
                            x_28221 = res_28223;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532)] =
                    x_28221;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38559;
                    int32_t skip_waves_38560;
                    
                    skip_waves_38560 = 1;
                    
                    float x_38547;
                    float x_38548;
                    
                    offset_38559 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38532,
                                  sext_i64_i32(segred_group_sizze_28217))) {
                            x_38547 = ((__local
                                        float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532 +
                                                                    offset_38559)];
                        }
                    }
                    offset_38559 = 1;
                    while (slt32(offset_38559, wave_sizze_38534)) {
                        if (slt32(local_tid_38532 + offset_38559,
                                  sext_i64_i32(segred_group_sizze_28217)) &&
                            ((local_tid_38532 - squot32(local_tid_38532,
                                                        wave_sizze_38534) *
                              wave_sizze_38534) & (2 * offset_38559 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38548 = ((volatile __local
                                            float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532 +
                                                                        offset_38559)];
                            }
                            // apply reduction operation
                            {
                                float res_38549 = x_38547 + x_38548;
                                
                                x_38547 = res_38549;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532)] =
                                    x_38547;
                            }
                        }
                        offset_38559 *= 2;
                    }
                    while (slt32(skip_waves_38560,
                                 squot32(sext_i64_i32(segred_group_sizze_28217) +
                                         wave_sizze_38534 - 1,
                                         wave_sizze_38534))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38559 = skip_waves_38560 * wave_sizze_38534;
                        if (slt32(local_tid_38532 + offset_38559,
                                  sext_i64_i32(segred_group_sizze_28217)) &&
                            ((local_tid_38532 - squot32(local_tid_38532,
                                                        wave_sizze_38534) *
                              wave_sizze_38534) == 0 &&
                             (squot32(local_tid_38532, wave_sizze_38534) & (2 *
                                                                            skip_waves_38560 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38548 = ((__local
                                            float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532 +
                                                                        offset_38559)];
                            }
                            // apply reduction operation
                            {
                                float res_38549 = x_38547 + x_38548;
                                
                                x_38547 = res_38549;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38536)[sext_i32_i64(local_tid_38532)] =
                                    x_38547;
                            }
                        }
                        skip_waves_38560 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38532 == 0) {
                            ((__global float *) mem_37267)[gtid_28162] =
                                x_38547;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28217
}
__kernel void mainDetailedzisegred_large_28192(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38478_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38476_backing_aligned_1,
                                               int64_t N_24056,
                                               int64_t res_24068,
                                               int64_t num_groups_28204,
                                               __global
                                               unsigned char *images_mem_36738,
                                               __global
                                               unsigned char *mem_37264,
                                               int64_t groups_per_segment_38462,
                                               int64_t elements_per_thread_38463,
                                               int64_t virt_num_groups_38464,
                                               int64_t threads_per_segment_38466,
                                               __global
                                               unsigned char *group_res_arr_mem_38467,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38469)
{
    #define segred_group_sizze_28203 (mainDetailedzisegred_group_sizze_28186)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38478_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38478_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38476_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38476_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38471;
    int32_t local_tid_38472;
    int64_t group_sizze_38475;
    int32_t wave_sizze_38474;
    int32_t group_tid_38473;
    
    global_tid_38471 = get_global_id(0);
    local_tid_38472 = get_local_id(0);
    group_sizze_38475 = get_local_size(0);
    wave_sizze_38474 = LOCKSTEP_WIDTH;
    group_tid_38473 = get_group_id(0);
    
    int32_t phys_tid_28192;
    
    phys_tid_28192 = global_tid_38471;
    
    __local char *red_arr_mem_38476;
    
    red_arr_mem_38476 = (__local char *) red_arr_mem_38476_backing_0;
    
    __local char *sync_arr_mem_38478;
    
    sync_arr_mem_38478 = (__local char *) sync_arr_mem_38478_backing_1;
    
    int32_t phys_group_id_38480;
    
    phys_group_id_38480 = get_group_id(0);
    for (int32_t i_38481 = 0; i_38481 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38464) - phys_group_id_38480,
                   sext_i64_i32(num_groups_28204)); i_38481++) {
        int32_t virt_group_id_38482 = phys_group_id_38480 + i_38481 *
                sext_i64_i32(num_groups_28204);
        int32_t flat_segment_id_38483 = squot32(virt_group_id_38482,
                                                sext_i64_i32(groups_per_segment_38462));
        int64_t global_tid_38484 = srem64(sext_i32_i64(virt_group_id_38482) *
                                          segred_group_sizze_28203 +
                                          sext_i32_i64(local_tid_38472),
                                          segred_group_sizze_28203 *
                                          groups_per_segment_38462);
        int64_t gtid_28183 = sext_i32_i64(flat_segment_id_38483);
        int64_t gtid_28191;
        int32_t x_acc_38485;
        int64_t chunk_sizze_38486;
        
        chunk_sizze_38486 = smin64(elements_per_thread_38463,
                                   sdiv_up64(res_24068 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38484)),
                                             threads_per_segment_38466));
        
        int32_t x_28207;
        int32_t x_28208;
        
        // neutral-initialise the accumulators
        {
            x_acc_38485 = 0;
        }
        for (int64_t i_38490 = 0; i_38490 < chunk_sizze_38486; i_38490++) {
            gtid_28191 = sext_i32_i64(sext_i64_i32(global_tid_38484)) +
                threads_per_segment_38466 * i_38490;
            // apply map function
            {
                float x_28211 = ((__global
                                  float *) images_mem_36738)[gtid_28183 *
                                                             N_24056 +
                                                             gtid_28191];
                bool res_28212;
                
                res_28212 = futrts_isnan32(x_28211);
                
                bool cond_28213 = !res_28212;
                int32_t res_28214 = btoi_bool_i32(cond_28213);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_28207 = x_acc_38485;
                }
                // load new values
                {
                    x_28208 = res_28214;
                }
                // apply reduction operator
                {
                    int32_t res_28209 = add32(x_28207, x_28208);
                    
                    // store in accumulator
                    {
                        x_acc_38485 = res_28209;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_28207 = x_acc_38485;
            ((__local
              int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472)] =
                x_28207;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38491;
        int32_t skip_waves_38492;
        
        skip_waves_38492 = 1;
        
        int32_t x_38487;
        int32_t x_38488;
        
        offset_38491 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38472,
                      sext_i64_i32(segred_group_sizze_28203))) {
                x_38487 = ((__local
                            int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472 +
                                                          offset_38491)];
            }
        }
        offset_38491 = 1;
        while (slt32(offset_38491, wave_sizze_38474)) {
            if (slt32(local_tid_38472 + offset_38491,
                      sext_i64_i32(segred_group_sizze_28203)) &&
                ((local_tid_38472 - squot32(local_tid_38472, wave_sizze_38474) *
                  wave_sizze_38474) & (2 * offset_38491 - 1)) == 0) {
                // read array element
                {
                    x_38488 = ((volatile __local
                                int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472 +
                                                              offset_38491)];
                }
                // apply reduction operation
                {
                    int32_t res_38489 = add32(x_38487, x_38488);
                    
                    x_38487 = res_38489;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472)] =
                        x_38487;
                }
            }
            offset_38491 *= 2;
        }
        while (slt32(skip_waves_38492,
                     squot32(sext_i64_i32(segred_group_sizze_28203) +
                             wave_sizze_38474 - 1, wave_sizze_38474))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38491 = skip_waves_38492 * wave_sizze_38474;
            if (slt32(local_tid_38472 + offset_38491,
                      sext_i64_i32(segred_group_sizze_28203)) &&
                ((local_tid_38472 - squot32(local_tid_38472, wave_sizze_38474) *
                  wave_sizze_38474) == 0 && (squot32(local_tid_38472,
                                                     wave_sizze_38474) & (2 *
                                                                          skip_waves_38492 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38488 = ((__local
                                int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472 +
                                                              offset_38491)];
                }
                // apply reduction operation
                {
                    int32_t res_38489 = add32(x_38487, x_38488);
                    
                    x_38487 = res_38489;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472)] =
                        x_38487;
                }
            }
            skip_waves_38492 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38472) == 0) {
                x_acc_38485 = x_38487;
            }
        }
        if (groups_per_segment_38462 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38472 == 0) {
                    ((__global int32_t *) mem_37264)[gtid_28183] = x_acc_38485;
                }
            }
        } else {
            int32_t old_counter_38493;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38472 == 0) {
                    ((__global
                      int32_t *) group_res_arr_mem_38467)[sext_i32_i64(virt_group_id_38482) *
                                                          segred_group_sizze_28203] =
                        x_acc_38485;
                    mem_fence_global();
                    old_counter_38493 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38469)[sext_i32_i64(srem32(flat_segment_id_38483,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38478)[0] =
                        old_counter_38493 == groups_per_segment_38462 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38494;
            
            is_last_group_38494 = ((__local bool *) sync_arr_mem_38478)[0];
            if (is_last_group_38494) {
                if (local_tid_38472 == 0) {
                    old_counter_38493 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38469)[sext_i32_i64(srem32(flat_segment_id_38483,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38462));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38495 =
                            sdiv_up64(groups_per_segment_38462,
                                      segred_group_sizze_28203);
                    
                    x_28207 = 0;
                    for (int64_t i_38496 = 0; i_38496 < read_per_thread_38495;
                         i_38496++) {
                        int64_t group_res_id_38497 =
                                sext_i32_i64(local_tid_38472) *
                                read_per_thread_38495 + i_38496;
                        int64_t index_of_group_res_38498 =
                                sext_i32_i64(flat_segment_id_38483) *
                                groups_per_segment_38462 + group_res_id_38497;
                        
                        if (slt64(group_res_id_38497,
                                  groups_per_segment_38462)) {
                            x_28208 = ((__global
                                        int32_t *) group_res_arr_mem_38467)[index_of_group_res_38498 *
                                                                            segred_group_sizze_28203];
                            
                            int32_t res_28209;
                            
                            res_28209 = add32(x_28207, x_28208);
                            x_28207 = res_28209;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472)] =
                    x_28207;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38499;
                    int32_t skip_waves_38500;
                    
                    skip_waves_38500 = 1;
                    
                    int32_t x_38487;
                    int32_t x_38488;
                    
                    offset_38499 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38472,
                                  sext_i64_i32(segred_group_sizze_28203))) {
                            x_38487 = ((__local
                                        int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472 +
                                                                      offset_38499)];
                        }
                    }
                    offset_38499 = 1;
                    while (slt32(offset_38499, wave_sizze_38474)) {
                        if (slt32(local_tid_38472 + offset_38499,
                                  sext_i64_i32(segred_group_sizze_28203)) &&
                            ((local_tid_38472 - squot32(local_tid_38472,
                                                        wave_sizze_38474) *
                              wave_sizze_38474) & (2 * offset_38499 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38488 = ((volatile __local
                                            int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472 +
                                                                          offset_38499)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38489 = add32(x_38487, x_38488);
                                
                                x_38487 = res_38489;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472)] =
                                    x_38487;
                            }
                        }
                        offset_38499 *= 2;
                    }
                    while (slt32(skip_waves_38500,
                                 squot32(sext_i64_i32(segred_group_sizze_28203) +
                                         wave_sizze_38474 - 1,
                                         wave_sizze_38474))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38499 = skip_waves_38500 * wave_sizze_38474;
                        if (slt32(local_tid_38472 + offset_38499,
                                  sext_i64_i32(segred_group_sizze_28203)) &&
                            ((local_tid_38472 - squot32(local_tid_38472,
                                                        wave_sizze_38474) *
                              wave_sizze_38474) == 0 &&
                             (squot32(local_tid_38472, wave_sizze_38474) & (2 *
                                                                            skip_waves_38500 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38488 = ((__local
                                            int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472 +
                                                                          offset_38499)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38489 = add32(x_38487, x_38488);
                                
                                x_38487 = res_38489;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_38476)[sext_i32_i64(local_tid_38472)] =
                                    x_38487;
                            }
                        }
                        skip_waves_38500 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38472 == 0) {
                            ((__global int32_t *) mem_37264)[gtid_28183] =
                                x_38487;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28203
}
__kernel void mainDetailedzisegred_large_28343(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38647_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38645_backing_aligned_1,
                                               int64_t N_24054,
                                               int64_t res_24416,
                                               int64_t num_groups_28361,
                                               __global
                                               unsigned char *res_mem_37197,
                                               __global
                                               unsigned char *res_mem_37276,
                                               __global
                                               unsigned char *res_mem_37277,
                                               __global
                                               unsigned char *mem_37326,
                                               int64_t groups_per_segment_38631,
                                               int64_t elements_per_thread_38632,
                                               int64_t virt_num_groups_38633,
                                               int64_t threads_per_segment_38635,
                                               __global
                                               unsigned char *group_res_arr_mem_38636,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38638)
{
    #define segred_group_sizze_28360 (mainDetailedzisegred_group_sizze_28337)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38647_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38647_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38645_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38645_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38640;
    int32_t local_tid_38641;
    int64_t group_sizze_38644;
    int32_t wave_sizze_38643;
    int32_t group_tid_38642;
    
    global_tid_38640 = get_global_id(0);
    local_tid_38641 = get_local_id(0);
    group_sizze_38644 = get_local_size(0);
    wave_sizze_38643 = LOCKSTEP_WIDTH;
    group_tid_38642 = get_group_id(0);
    
    int32_t phys_tid_28343;
    
    phys_tid_28343 = global_tid_38640;
    
    __local char *red_arr_mem_38645;
    
    red_arr_mem_38645 = (__local char *) red_arr_mem_38645_backing_0;
    
    __local char *sync_arr_mem_38647;
    
    sync_arr_mem_38647 = (__local char *) sync_arr_mem_38647_backing_1;
    
    int32_t phys_group_id_38649;
    
    phys_group_id_38649 = get_group_id(0);
    for (int32_t i_38650 = 0; i_38650 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38633) - phys_group_id_38649,
                   sext_i64_i32(num_groups_28361)); i_38650++) {
        int32_t virt_group_id_38651 = phys_group_id_38649 + i_38650 *
                sext_i64_i32(num_groups_28361);
        int32_t flat_segment_id_38652 = squot32(virt_group_id_38651,
                                                sext_i64_i32(groups_per_segment_38631));
        int64_t global_tid_38653 = srem64(sext_i32_i64(virt_group_id_38651) *
                                          segred_group_sizze_28360 +
                                          sext_i32_i64(local_tid_38641),
                                          segred_group_sizze_28360 *
                                          groups_per_segment_38631);
        int64_t gtid_28334 = sext_i32_i64(flat_segment_id_38652);
        int64_t gtid_28342;
        float x_acc_38654;
        int64_t chunk_sizze_38655;
        
        chunk_sizze_38655 = smin64(elements_per_thread_38632,
                                   sdiv_up64(res_24416 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38653)),
                                             threads_per_segment_38635));
        
        float x_28364;
        float x_28365;
        
        // neutral-initialise the accumulators
        {
            x_acc_38654 = 0.0F;
        }
        for (int64_t i_38659 = 0; i_38659 < chunk_sizze_38655; i_38659++) {
            gtid_28342 = sext_i32_i64(sext_i64_i32(global_tid_38653)) +
                threads_per_segment_38635 * i_38659;
            // apply map function
            {
                int32_t x_28369 = ((__global
                                    int32_t *) res_mem_37276)[gtid_28334];
                int32_t index_primexp_35449 = sext_i64_i32(gtid_28342);
                bool cond_28371 = slt32(index_primexp_35449, x_28369);
                float res_28372;
                
                if (cond_28371) {
                    int32_t x_28368 = ((__global
                                        int32_t *) res_mem_37277)[gtid_28334];
                    int32_t x_28373 = add32(x_28368, index_primexp_35449);
                    int32_t x_28374 = sub32(x_28373, x_28369);
                    int32_t i_28375 = add32(1, x_28374);
                    int64_t i_28376 = sext_i32_i64(i_28375);
                    float res_28377 = ((__global
                                        float *) res_mem_37197)[gtid_28334 *
                                                                N_24054 +
                                                                i_28376];
                    
                    res_28372 = res_28377;
                } else {
                    res_28372 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_28364 = x_acc_38654;
                }
                // load new values
                {
                    x_28365 = res_28372;
                }
                // apply reduction operator
                {
                    float res_28366 = x_28364 + x_28365;
                    
                    // store in accumulator
                    {
                        x_acc_38654 = res_28366;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_28364 = x_acc_38654;
            ((__local
              float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641)] =
                x_28364;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38660;
        int32_t skip_waves_38661;
        
        skip_waves_38661 = 1;
        
        float x_38656;
        float x_38657;
        
        offset_38660 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38641,
                      sext_i64_i32(segred_group_sizze_28360))) {
                x_38656 = ((__local
                            float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641 +
                                                        offset_38660)];
            }
        }
        offset_38660 = 1;
        while (slt32(offset_38660, wave_sizze_38643)) {
            if (slt32(local_tid_38641 + offset_38660,
                      sext_i64_i32(segred_group_sizze_28360)) &&
                ((local_tid_38641 - squot32(local_tid_38641, wave_sizze_38643) *
                  wave_sizze_38643) & (2 * offset_38660 - 1)) == 0) {
                // read array element
                {
                    x_38657 = ((volatile __local
                                float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641 +
                                                            offset_38660)];
                }
                // apply reduction operation
                {
                    float res_38658 = x_38656 + x_38657;
                    
                    x_38656 = res_38658;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641)] =
                        x_38656;
                }
            }
            offset_38660 *= 2;
        }
        while (slt32(skip_waves_38661,
                     squot32(sext_i64_i32(segred_group_sizze_28360) +
                             wave_sizze_38643 - 1, wave_sizze_38643))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38660 = skip_waves_38661 * wave_sizze_38643;
            if (slt32(local_tid_38641 + offset_38660,
                      sext_i64_i32(segred_group_sizze_28360)) &&
                ((local_tid_38641 - squot32(local_tid_38641, wave_sizze_38643) *
                  wave_sizze_38643) == 0 && (squot32(local_tid_38641,
                                                     wave_sizze_38643) & (2 *
                                                                          skip_waves_38661 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38657 = ((__local
                                float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641 +
                                                            offset_38660)];
                }
                // apply reduction operation
                {
                    float res_38658 = x_38656 + x_38657;
                    
                    x_38656 = res_38658;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641)] =
                        x_38656;
                }
            }
            skip_waves_38661 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38641) == 0) {
                x_acc_38654 = x_38656;
            }
        }
        if (groups_per_segment_38631 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38641 == 0) {
                    ((__global float *) mem_37326)[gtid_28334] = x_acc_38654;
                }
            }
        } else {
            int32_t old_counter_38662;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38641 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38636)[sext_i32_i64(virt_group_id_38651) *
                                                        segred_group_sizze_28360] =
                        x_acc_38654;
                    mem_fence_global();
                    old_counter_38662 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38638)[sext_i32_i64(srem32(flat_segment_id_38652,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38647)[0] =
                        old_counter_38662 == groups_per_segment_38631 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38663;
            
            is_last_group_38663 = ((__local bool *) sync_arr_mem_38647)[0];
            if (is_last_group_38663) {
                if (local_tid_38641 == 0) {
                    old_counter_38662 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38638)[sext_i32_i64(srem32(flat_segment_id_38652,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38631));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38664 =
                            sdiv_up64(groups_per_segment_38631,
                                      segred_group_sizze_28360);
                    
                    x_28364 = 0.0F;
                    for (int64_t i_38665 = 0; i_38665 < read_per_thread_38664;
                         i_38665++) {
                        int64_t group_res_id_38666 =
                                sext_i32_i64(local_tid_38641) *
                                read_per_thread_38664 + i_38665;
                        int64_t index_of_group_res_38667 =
                                sext_i32_i64(flat_segment_id_38652) *
                                groups_per_segment_38631 + group_res_id_38666;
                        
                        if (slt64(group_res_id_38666,
                                  groups_per_segment_38631)) {
                            x_28365 = ((__global
                                        float *) group_res_arr_mem_38636)[index_of_group_res_38667 *
                                                                          segred_group_sizze_28360];
                            
                            float res_28366;
                            
                            res_28366 = x_28364 + x_28365;
                            x_28364 = res_28366;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641)] =
                    x_28364;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38668;
                    int32_t skip_waves_38669;
                    
                    skip_waves_38669 = 1;
                    
                    float x_38656;
                    float x_38657;
                    
                    offset_38668 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38641,
                                  sext_i64_i32(segred_group_sizze_28360))) {
                            x_38656 = ((__local
                                        float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641 +
                                                                    offset_38668)];
                        }
                    }
                    offset_38668 = 1;
                    while (slt32(offset_38668, wave_sizze_38643)) {
                        if (slt32(local_tid_38641 + offset_38668,
                                  sext_i64_i32(segred_group_sizze_28360)) &&
                            ((local_tid_38641 - squot32(local_tid_38641,
                                                        wave_sizze_38643) *
                              wave_sizze_38643) & (2 * offset_38668 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38657 = ((volatile __local
                                            float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641 +
                                                                        offset_38668)];
                            }
                            // apply reduction operation
                            {
                                float res_38658 = x_38656 + x_38657;
                                
                                x_38656 = res_38658;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641)] =
                                    x_38656;
                            }
                        }
                        offset_38668 *= 2;
                    }
                    while (slt32(skip_waves_38669,
                                 squot32(sext_i64_i32(segred_group_sizze_28360) +
                                         wave_sizze_38643 - 1,
                                         wave_sizze_38643))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38668 = skip_waves_38669 * wave_sizze_38643;
                        if (slt32(local_tid_38641 + offset_38668,
                                  sext_i64_i32(segred_group_sizze_28360)) &&
                            ((local_tid_38641 - squot32(local_tid_38641,
                                                        wave_sizze_38643) *
                              wave_sizze_38643) == 0 &&
                             (squot32(local_tid_38641, wave_sizze_38643) & (2 *
                                                                            skip_waves_38669 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38657 = ((__local
                                            float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641 +
                                                                        offset_38668)];
                            }
                            // apply reduction operation
                            {
                                float res_38658 = x_38656 + x_38657;
                                
                                x_38656 = res_38658;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38645)[sext_i32_i64(local_tid_38641)] =
                                    x_38656;
                            }
                        }
                        skip_waves_38669 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38641 == 0) {
                            ((__global float *) mem_37326)[gtid_28334] =
                                x_38656;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28360
}
__kernel void mainDetailedzisegred_large_30001(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38888_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38886_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_38884_backing_aligned_2,
                                               __local volatile
                                               int64_t *red_arr_mem_38882_backing_aligned_3,
                                               int64_t iota32_arg_24441,
                                               int64_t num_groups_30172,
                                               __global
                                               unsigned char *mem_37332,
                                               __global
                                               unsigned char *mem_37540,
                                               __global
                                               unsigned char *mem_37542,
                                               __global
                                               unsigned char *mem_37546,
                                               __global
                                               unsigned char *mem_37549,
                                               __global
                                               unsigned char *mem_37551,
                                               __global
                                               unsigned char *mem_37553,
                                               __global
                                               unsigned char *mem_37556,
                                               int64_t groups_per_segment_38864,
                                               int64_t elements_per_thread_38865,
                                               int64_t virt_num_groups_38866,
                                               __global
                                               unsigned char *group_res_arr_mem_38869,
                                               __global
                                               unsigned char *group_res_arr_mem_38871,
                                               __global
                                               unsigned char *group_res_arr_mem_38873,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38875)
{
    #define segred_group_sizze_30171 (mainDetailedzisegred_group_sizze_29995)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38888_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_38888_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38886_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38886_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38884_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38884_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_38882_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38882_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38877;
    int32_t local_tid_38878;
    int64_t group_sizze_38881;
    int32_t wave_sizze_38880;
    int32_t group_tid_38879;
    
    global_tid_38877 = get_global_id(0);
    local_tid_38878 = get_local_id(0);
    group_sizze_38881 = get_local_size(0);
    wave_sizze_38880 = LOCKSTEP_WIDTH;
    group_tid_38879 = get_group_id(0);
    
    int32_t phys_tid_30001;
    
    phys_tid_30001 = global_tid_38877;
    
    __local char *red_arr_mem_38882;
    
    red_arr_mem_38882 = (__local char *) red_arr_mem_38882_backing_0;
    
    __local char *red_arr_mem_38884;
    
    red_arr_mem_38884 = (__local char *) red_arr_mem_38884_backing_1;
    
    __local char *red_arr_mem_38886;
    
    red_arr_mem_38886 = (__local char *) red_arr_mem_38886_backing_2;
    
    __local char *sync_arr_mem_38888;
    
    sync_arr_mem_38888 = (__local char *) sync_arr_mem_38888_backing_3;
    
    int32_t phys_group_id_38890;
    
    phys_group_id_38890 = get_group_id(0);
    for (int32_t i_38891 = 0; i_38891 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38866) - phys_group_id_38890,
                   sext_i64_i32(num_groups_30172)); i_38891++) {
        int32_t virt_group_id_38892 = phys_group_id_38890 + i_38891 *
                sext_i64_i32(num_groups_30172);
        int32_t flat_segment_id_38893 = squot32(virt_group_id_38892,
                                                sext_i64_i32(groups_per_segment_38864));
        int64_t global_tid_38894 = srem64(sext_i32_i64(virt_group_id_38892) *
                                          segred_group_sizze_30171 +
                                          sext_i32_i64(local_tid_38878),
                                          segred_group_sizze_30171 *
                                          groups_per_segment_38864);
        int64_t gtid_29992 = sext_i32_i64(flat_segment_id_38893);
        int64_t gtid_30000;
        bool x_acc_38895;
        int32_t x_acc_38896;
        float x_acc_38897;
        int64_t chunk_sizze_38898;
        int64_t starting_point_38899;
        
        starting_point_38899 = sext_i32_i64(sext_i64_i32(global_tid_38894)) *
            elements_per_thread_38865;
        
        int64_t remaining_elements_38900;
        
        remaining_elements_38900 = iota32_arg_24441 - starting_point_38899;
        if (sle64(remaining_elements_38900, 0) || sle64(iota32_arg_24441,
                                                        starting_point_38899)) {
            chunk_sizze_38898 = 0;
        } else {
            if (slt64(iota32_arg_24441,
                      (sext_i32_i64(sext_i64_i32(global_tid_38894)) + 1) *
                      elements_per_thread_38865)) {
                chunk_sizze_38898 = iota32_arg_24441 -
                    sext_i32_i64(sext_i64_i32(global_tid_38894)) *
                    elements_per_thread_38865;
            } else {
                chunk_sizze_38898 = elements_per_thread_38865;
            }
        }
        
        bool x_30178;
        int32_t x_30179;
        float x_30180;
        bool x_30181;
        int32_t x_30182;
        float x_30183;
        
        // neutral-initialise the accumulators
        {
            x_acc_38895 = 0;
            x_acc_38896 = -1;
            x_acc_38897 = 0.0F;
        }
        for (int64_t i_38915 = 0; i_38915 < elements_per_thread_38865;
             i_38915++) {
            gtid_30000 = sext_i32_i64(local_tid_38878) +
                (sext_i32_i64(squot32(sext_i64_i32(global_tid_38894),
                                      sext_i64_i32(segred_group_sizze_30171))) *
                 elements_per_thread_38865 + i_38915) *
                segred_group_sizze_30171;
            if (slt64(gtid_30000, iota32_arg_24441)) {
                // apply map function
                {
                    int32_t y_30192 = ((__global
                                        int32_t *) mem_37542)[gtid_29992];
                    float y_30193 = ((__global float *) mem_37540)[gtid_29992];
                    float x_30197 = ((__global float *) mem_37546)[gtid_29992 *
                                                                   iota32_arg_24441 +
                                                                   gtid_30000];
                    float x_30198 = ((__global float *) mem_37332)[gtid_30000];
                    int32_t index_primexp_35469 = sext_i64_i32(gtid_30000);
                    float res_30201 = x_30197 / y_30193;
                    bool cond_30202 = slt32(index_primexp_35469, y_30192);
                    bool res_30203;
                    
                    res_30203 = futrts_isnan32(res_30201);
                    
                    bool res_30204 = !res_30203;
                    bool x_30205 = cond_30202 && res_30204;
                    float res_30206 = (float) fabs(res_30201);
                    bool res_30207 = x_30198 < res_30206;
                    bool x_30208 = x_30205 && res_30207;
                    float res_30209;
                    
                    if (cond_30202) {
                        res_30209 = res_30201;
                    } else {
                        res_30209 = 0.0F;
                    }
                    // save map-out results
                    {
                        ((__global float *) mem_37556)[gtid_29992 *
                                                       iota32_arg_24441 +
                                                       gtid_30000] = res_30201;
                    }
                    // load accumulator
                    {
                        x_30178 = x_acc_38895;
                        x_30179 = x_acc_38896;
                        x_30180 = x_acc_38897;
                    }
                    // load new values
                    {
                        x_30181 = x_30208;
                        x_30182 = index_primexp_35469;
                        x_30183 = res_30209;
                    }
                    // apply reduction operator
                    {
                        bool res_30184;
                        int32_t res_30185;
                        
                        if (x_30178) {
                            res_30184 = x_30178;
                            res_30185 = x_30179;
                        } else {
                            bool x_30186 = x_30181 && x_30181;
                            bool x_30187 = !x_30181;
                            bool y_30188 = x_30178 && x_30187;
                            bool res_30189 = x_30186 || y_30188;
                            int32_t res_30190;
                            
                            if (x_30181) {
                                res_30190 = x_30182;
                            } else {
                                res_30190 = x_30179;
                            }
                            res_30184 = res_30189;
                            res_30185 = res_30190;
                        }
                        
                        float res_30191 = x_30180 + x_30183;
                        
                        // store in accumulator
                        {
                            x_acc_38895 = res_30184;
                            x_acc_38896 = res_30185;
                            x_acc_38897 = res_30191;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_30178 = x_acc_38895;
                x_30179 = x_acc_38896;
                x_30180 = x_acc_38897;
                ((__local
                  bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878)] =
                    x_30178;
                ((__local
                  int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878)] =
                    x_30179;
                ((__local
                  float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878)] =
                    x_30180;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_38916;
            int32_t skip_waves_38917;
            
            skip_waves_38917 = 1;
            
            bool x_38901;
            int32_t x_38902;
            float x_38903;
            bool x_38904;
            int32_t x_38905;
            float x_38906;
            
            offset_38916 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38878,
                          sext_i64_i32(segred_group_sizze_30171))) {
                    x_38901 = ((__local
                                bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878 +
                                                           offset_38916)];
                    x_38902 = ((__local
                                int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878 +
                                                              offset_38916)];
                    x_38903 = ((__local
                                float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878 +
                                                            offset_38916)];
                }
            }
            offset_38916 = 1;
            while (slt32(offset_38916, wave_sizze_38880)) {
                if (slt32(local_tid_38878 + offset_38916,
                          sext_i64_i32(segred_group_sizze_30171)) &&
                    ((local_tid_38878 - squot32(local_tid_38878,
                                                wave_sizze_38880) *
                      wave_sizze_38880) & (2 * offset_38916 - 1)) == 0) {
                    // read array element
                    {
                        x_38904 = ((volatile __local
                                    bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878 +
                                                               offset_38916)];
                        x_38905 = ((volatile __local
                                    int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878 +
                                                                  offset_38916)];
                        x_38906 = ((volatile __local
                                    float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878 +
                                                                offset_38916)];
                    }
                    // apply reduction operation
                    {
                        bool res_38907;
                        int32_t res_38908;
                        
                        if (x_38901) {
                            res_38907 = x_38901;
                            res_38908 = x_38902;
                        } else {
                            bool x_38909 = x_38904 && x_38904;
                            bool x_38910 = !x_38904;
                            bool y_38911 = x_38901 && x_38910;
                            bool res_38912 = x_38909 || y_38911;
                            int32_t res_38913;
                            
                            if (x_38904) {
                                res_38913 = x_38905;
                            } else {
                                res_38913 = x_38902;
                            }
                            res_38907 = res_38912;
                            res_38908 = res_38913;
                        }
                        
                        float res_38914 = x_38903 + x_38906;
                        
                        x_38901 = res_38907;
                        x_38902 = res_38908;
                        x_38903 = res_38914;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878)] =
                            x_38901;
                        ((volatile __local
                          int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878)] =
                            x_38902;
                        ((volatile __local
                          float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878)] =
                            x_38903;
                    }
                }
                offset_38916 *= 2;
            }
            while (slt32(skip_waves_38917,
                         squot32(sext_i64_i32(segred_group_sizze_30171) +
                                 wave_sizze_38880 - 1, wave_sizze_38880))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38916 = skip_waves_38917 * wave_sizze_38880;
                if (slt32(local_tid_38878 + offset_38916,
                          sext_i64_i32(segred_group_sizze_30171)) &&
                    ((local_tid_38878 - squot32(local_tid_38878,
                                                wave_sizze_38880) *
                      wave_sizze_38880) == 0 && (squot32(local_tid_38878,
                                                         wave_sizze_38880) &
                                                 (2 * skip_waves_38917 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38904 = ((__local
                                    bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878 +
                                                               offset_38916)];
                        x_38905 = ((__local
                                    int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878 +
                                                                  offset_38916)];
                        x_38906 = ((__local
                                    float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878 +
                                                                offset_38916)];
                    }
                    // apply reduction operation
                    {
                        bool res_38907;
                        int32_t res_38908;
                        
                        if (x_38901) {
                            res_38907 = x_38901;
                            res_38908 = x_38902;
                        } else {
                            bool x_38909 = x_38904 && x_38904;
                            bool x_38910 = !x_38904;
                            bool y_38911 = x_38901 && x_38910;
                            bool res_38912 = x_38909 || y_38911;
                            int32_t res_38913;
                            
                            if (x_38904) {
                                res_38913 = x_38905;
                            } else {
                                res_38913 = x_38902;
                            }
                            res_38907 = res_38912;
                            res_38908 = res_38913;
                        }
                        
                        float res_38914 = x_38903 + x_38906;
                        
                        x_38901 = res_38907;
                        x_38902 = res_38908;
                        x_38903 = res_38914;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878)] =
                            x_38901;
                        ((__local
                          int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878)] =
                            x_38902;
                        ((__local
                          float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878)] =
                            x_38903;
                    }
                }
                skip_waves_38917 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_38878) == 0) {
                    x_acc_38895 = x_38901;
                    x_acc_38896 = x_38902;
                    x_acc_38897 = x_38903;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_38878) == 0)) {
                    x_acc_38895 = 0;
                    x_acc_38896 = -1;
                    x_acc_38897 = 0.0F;
                }
            }
        }
        x_30178 = x_acc_38895;
        x_30179 = x_acc_38896;
        x_30180 = x_acc_38897;
        if (groups_per_segment_38864 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38878 == 0) {
                    ((__global bool *) mem_37549)[gtid_29992] = x_acc_38895;
                    ((__global int32_t *) mem_37551)[gtid_29992] = x_acc_38896;
                    ((__global float *) mem_37553)[gtid_29992] = x_acc_38897;
                }
            }
        } else {
            int32_t old_counter_38918;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38878 == 0) {
                    ((__global
                      bool *) group_res_arr_mem_38869)[sext_i32_i64(virt_group_id_38892) *
                                                       segred_group_sizze_30171] =
                        x_acc_38895;
                    ((__global
                      int32_t *) group_res_arr_mem_38871)[sext_i32_i64(virt_group_id_38892) *
                                                          segred_group_sizze_30171] =
                        x_acc_38896;
                    ((__global
                      float *) group_res_arr_mem_38873)[sext_i32_i64(virt_group_id_38892) *
                                                        segred_group_sizze_30171] =
                        x_acc_38897;
                    mem_fence_global();
                    old_counter_38918 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38875)[sext_i32_i64(srem32(flat_segment_id_38893,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38888)[0] =
                        old_counter_38918 == groups_per_segment_38864 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38919;
            
            is_last_group_38919 = ((__local bool *) sync_arr_mem_38888)[0];
            if (is_last_group_38919) {
                if (local_tid_38878 == 0) {
                    old_counter_38918 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38875)[sext_i32_i64(srem32(flat_segment_id_38893,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38864));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38920 =
                            sdiv_up64(groups_per_segment_38864,
                                      segred_group_sizze_30171);
                    
                    x_30178 = 0;
                    x_30179 = -1;
                    x_30180 = 0.0F;
                    for (int64_t i_38921 = 0; i_38921 < read_per_thread_38920;
                         i_38921++) {
                        int64_t group_res_id_38922 =
                                sext_i32_i64(local_tid_38878) *
                                read_per_thread_38920 + i_38921;
                        int64_t index_of_group_res_38923 =
                                sext_i32_i64(flat_segment_id_38893) *
                                groups_per_segment_38864 + group_res_id_38922;
                        
                        if (slt64(group_res_id_38922,
                                  groups_per_segment_38864)) {
                            x_30181 = ((__global
                                        bool *) group_res_arr_mem_38869)[index_of_group_res_38923 *
                                                                         segred_group_sizze_30171];
                            x_30182 = ((__global
                                        int32_t *) group_res_arr_mem_38871)[index_of_group_res_38923 *
                                                                            segred_group_sizze_30171];
                            x_30183 = ((__global
                                        float *) group_res_arr_mem_38873)[index_of_group_res_38923 *
                                                                          segred_group_sizze_30171];
                            
                            bool res_30184;
                            int32_t res_30185;
                            
                            if (x_30178) {
                                res_30184 = x_30178;
                                res_30185 = x_30179;
                            } else {
                                bool x_30186 = x_30181 && x_30181;
                                bool x_30187 = !x_30181;
                                bool y_30188 = x_30178 && x_30187;
                                bool res_30189 = x_30186 || y_30188;
                                int32_t res_30190;
                                
                                if (x_30181) {
                                    res_30190 = x_30182;
                                } else {
                                    res_30190 = x_30179;
                                }
                                res_30184 = res_30189;
                                res_30185 = res_30190;
                            }
                            
                            float res_30191 = x_30180 + x_30183;
                            
                            x_30178 = res_30184;
                            x_30179 = res_30185;
                            x_30180 = res_30191;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878)] =
                    x_30178;
                ((__local
                  int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878)] =
                    x_30179;
                ((__local
                  float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878)] =
                    x_30180;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38924;
                    int32_t skip_waves_38925;
                    
                    skip_waves_38925 = 1;
                    
                    bool x_38901;
                    int32_t x_38902;
                    float x_38903;
                    bool x_38904;
                    int32_t x_38905;
                    float x_38906;
                    
                    offset_38924 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38878,
                                  sext_i64_i32(segred_group_sizze_30171))) {
                            x_38901 = ((__local
                                        bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878 +
                                                                   offset_38924)];
                            x_38902 = ((__local
                                        int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878 +
                                                                      offset_38924)];
                            x_38903 = ((__local
                                        float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878 +
                                                                    offset_38924)];
                        }
                    }
                    offset_38924 = 1;
                    while (slt32(offset_38924, wave_sizze_38880)) {
                        if (slt32(local_tid_38878 + offset_38924,
                                  sext_i64_i32(segred_group_sizze_30171)) &&
                            ((local_tid_38878 - squot32(local_tid_38878,
                                                        wave_sizze_38880) *
                              wave_sizze_38880) & (2 * offset_38924 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38904 = ((volatile __local
                                            bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878 +
                                                                       offset_38924)];
                                x_38905 = ((volatile __local
                                            int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878 +
                                                                          offset_38924)];
                                x_38906 = ((volatile __local
                                            float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878 +
                                                                        offset_38924)];
                            }
                            // apply reduction operation
                            {
                                bool res_38907;
                                int32_t res_38908;
                                
                                if (x_38901) {
                                    res_38907 = x_38901;
                                    res_38908 = x_38902;
                                } else {
                                    bool x_38909 = x_38904 && x_38904;
                                    bool x_38910 = !x_38904;
                                    bool y_38911 = x_38901 && x_38910;
                                    bool res_38912 = x_38909 || y_38911;
                                    int32_t res_38913;
                                    
                                    if (x_38904) {
                                        res_38913 = x_38905;
                                    } else {
                                        res_38913 = x_38902;
                                    }
                                    res_38907 = res_38912;
                                    res_38908 = res_38913;
                                }
                                
                                float res_38914 = x_38903 + x_38906;
                                
                                x_38901 = res_38907;
                                x_38902 = res_38908;
                                x_38903 = res_38914;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878)] =
                                    x_38901;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878)] =
                                    x_38902;
                                ((volatile __local
                                  float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878)] =
                                    x_38903;
                            }
                        }
                        offset_38924 *= 2;
                    }
                    while (slt32(skip_waves_38925,
                                 squot32(sext_i64_i32(segred_group_sizze_30171) +
                                         wave_sizze_38880 - 1,
                                         wave_sizze_38880))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38924 = skip_waves_38925 * wave_sizze_38880;
                        if (slt32(local_tid_38878 + offset_38924,
                                  sext_i64_i32(segred_group_sizze_30171)) &&
                            ((local_tid_38878 - squot32(local_tid_38878,
                                                        wave_sizze_38880) *
                              wave_sizze_38880) == 0 &&
                             (squot32(local_tid_38878, wave_sizze_38880) & (2 *
                                                                            skip_waves_38925 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38904 = ((__local
                                            bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878 +
                                                                       offset_38924)];
                                x_38905 = ((__local
                                            int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878 +
                                                                          offset_38924)];
                                x_38906 = ((__local
                                            float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878 +
                                                                        offset_38924)];
                            }
                            // apply reduction operation
                            {
                                bool res_38907;
                                int32_t res_38908;
                                
                                if (x_38901) {
                                    res_38907 = x_38901;
                                    res_38908 = x_38902;
                                } else {
                                    bool x_38909 = x_38904 && x_38904;
                                    bool x_38910 = !x_38904;
                                    bool y_38911 = x_38901 && x_38910;
                                    bool res_38912 = x_38909 || y_38911;
                                    int32_t res_38913;
                                    
                                    if (x_38904) {
                                        res_38913 = x_38905;
                                    } else {
                                        res_38913 = x_38902;
                                    }
                                    res_38907 = res_38912;
                                    res_38908 = res_38913;
                                }
                                
                                float res_38914 = x_38903 + x_38906;
                                
                                x_38901 = res_38907;
                                x_38902 = res_38908;
                                x_38903 = res_38914;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_38882)[sext_i32_i64(local_tid_38878)] =
                                    x_38901;
                                ((__local
                                  int32_t *) red_arr_mem_38884)[sext_i32_i64(local_tid_38878)] =
                                    x_38902;
                                ((__local
                                  float *) red_arr_mem_38886)[sext_i32_i64(local_tid_38878)] =
                                    x_38903;
                            }
                        }
                        skip_waves_38925 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38878 == 0) {
                            ((__global bool *) mem_37549)[gtid_29992] = x_38901;
                            ((__global int32_t *) mem_37551)[gtid_29992] =
                                x_38902;
                            ((__global float *) mem_37553)[gtid_29992] =
                                x_38903;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_30171
}
__kernel void mainDetailedzisegred_nonseg_28261(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_38581_backing_aligned_0,
                                                __local volatile
                                                int64_t *sync_arr_mem_38579_backing_aligned_1,
                                                int64_t m_24055,
                                                int64_t num_groups_28256,
                                                __global
                                                unsigned char *res_mem_37276,
                                                __global
                                                unsigned char *mem_37281,
                                                __global
                                                unsigned char *mainDetailedzicounter_mem_38569,
                                                __global
                                                unsigned char *group_res_arr_mem_38571,
                                                int64_t num_threads_38573)
{
    #define segred_group_sizze_28254 (mainDetailedzisegred_group_sizze_28253)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38581_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38581_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_38579_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_38579_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38574;
    int32_t local_tid_38575;
    int64_t group_sizze_38578;
    int32_t wave_sizze_38577;
    int32_t group_tid_38576;
    
    global_tid_38574 = get_global_id(0);
    local_tid_38575 = get_local_id(0);
    group_sizze_38578 = get_local_size(0);
    wave_sizze_38577 = LOCKSTEP_WIDTH;
    group_tid_38576 = get_group_id(0);
    
    int32_t phys_tid_28261;
    
    phys_tid_28261 = global_tid_38574;
    
    __local char *sync_arr_mem_38579;
    
    sync_arr_mem_38579 = (__local char *) sync_arr_mem_38579_backing_0;
    
    __local char *red_arr_mem_38581;
    
    red_arr_mem_38581 = (__local char *) red_arr_mem_38581_backing_1;
    
    int64_t dummy_28259;
    
    dummy_28259 = 0;
    
    int64_t gtid_28260;
    
    gtid_28260 = 0;
    
    int32_t x_acc_38583;
    int64_t chunk_sizze_38584;
    
    chunk_sizze_38584 = smin64(sdiv_up64(m_24055,
                                         sext_i32_i64(sext_i64_i32(segred_group_sizze_28254 *
                                         num_groups_28256))),
                               sdiv_up64(m_24055 - sext_i32_i64(phys_tid_28261),
                                         num_threads_38573));
    
    int32_t x_24412;
    int32_t x_24413;
    
    // neutral-initialise the accumulators
    {
        x_acc_38583 = 0;
    }
    for (int64_t i_38588 = 0; i_38588 < chunk_sizze_38584; i_38588++) {
        gtid_28260 = sext_i32_i64(phys_tid_28261) + num_threads_38573 * i_38588;
        // apply map function
        {
            int32_t x_24415 = ((__global int32_t *) res_mem_37276)[gtid_28260];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_24412 = x_acc_38583;
            }
            // load new values
            {
                x_24413 = x_24415;
            }
            // apply reduction operator
            {
                int32_t res_24414 = smax32(x_24412, x_24413);
                
                // store in accumulator
                {
                    x_acc_38583 = res_24414;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_24412 = x_acc_38583;
        ((__local int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575)] =
            x_24412;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38589;
    int32_t skip_waves_38590;
    
    skip_waves_38590 = 1;
    
    int32_t x_38585;
    int32_t x_38586;
    
    offset_38589 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38575, sext_i64_i32(segred_group_sizze_28254))) {
            x_38585 = ((__local
                        int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575 +
                                                      offset_38589)];
        }
    }
    offset_38589 = 1;
    while (slt32(offset_38589, wave_sizze_38577)) {
        if (slt32(local_tid_38575 + offset_38589,
                  sext_i64_i32(segred_group_sizze_28254)) && ((local_tid_38575 -
                                                               squot32(local_tid_38575,
                                                                       wave_sizze_38577) *
                                                               wave_sizze_38577) &
                                                              (2 *
                                                               offset_38589 -
                                                               1)) == 0) {
            // read array element
            {
                x_38586 = ((volatile __local
                            int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575 +
                                                          offset_38589)];
            }
            // apply reduction operation
            {
                int32_t res_38587 = smax32(x_38585, x_38586);
                
                x_38585 = res_38587;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575)] =
                    x_38585;
            }
        }
        offset_38589 *= 2;
    }
    while (slt32(skip_waves_38590,
                 squot32(sext_i64_i32(segred_group_sizze_28254) +
                         wave_sizze_38577 - 1, wave_sizze_38577))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38589 = skip_waves_38590 * wave_sizze_38577;
        if (slt32(local_tid_38575 + offset_38589,
                  sext_i64_i32(segred_group_sizze_28254)) && ((local_tid_38575 -
                                                               squot32(local_tid_38575,
                                                                       wave_sizze_38577) *
                                                               wave_sizze_38577) ==
                                                              0 &&
                                                              (squot32(local_tid_38575,
                                                                       wave_sizze_38577) &
                                                               (2 *
                                                                skip_waves_38590 -
                                                                1)) == 0)) {
            // read array element
            {
                x_38586 = ((__local
                            int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575 +
                                                          offset_38589)];
            }
            // apply reduction operation
            {
                int32_t res_38587 = smax32(x_38585, x_38586);
                
                x_38585 = res_38587;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575)] =
                    x_38585;
            }
        }
        skip_waves_38590 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_38575) == 0) {
            x_acc_38583 = x_38585;
        }
    }
    
    int32_t old_counter_38591;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_38575 == 0) {
            ((__global
              int32_t *) group_res_arr_mem_38571)[sext_i32_i64(group_tid_38576) *
                                                  segred_group_sizze_28254] =
                x_acc_38583;
            mem_fence_global();
            old_counter_38591 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_38569)[0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_38579)[0] = old_counter_38591 ==
                num_groups_28256 - 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_38592;
    
    is_last_group_38592 = ((__local bool *) sync_arr_mem_38579)[0];
    if (is_last_group_38592) {
        if (local_tid_38575 == 0) {
            old_counter_38591 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_38569)[0],
                                                      (int) (0 -
                                                             num_groups_28256));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_38593 = sdiv_up64(num_groups_28256,
                                                      segred_group_sizze_28254);
            
            x_24412 = 0;
            for (int64_t i_38594 = 0; i_38594 < read_per_thread_38593;
                 i_38594++) {
                int64_t group_res_id_38595 = sext_i32_i64(local_tid_38575) *
                        read_per_thread_38593 + i_38594;
                int64_t index_of_group_res_38596 = group_res_id_38595;
                
                if (slt64(group_res_id_38595, num_groups_28256)) {
                    x_24413 = ((__global
                                int32_t *) group_res_arr_mem_38571)[index_of_group_res_38596 *
                                                                    segred_group_sizze_28254];
                    
                    int32_t res_24414;
                    
                    res_24414 = smax32(x_24412, x_24413);
                    x_24412 = res_24414;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575)] =
            x_24412;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_38597;
            int32_t skip_waves_38598;
            
            skip_waves_38598 = 1;
            
            int32_t x_38585;
            int32_t x_38586;
            
            offset_38597 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38575,
                          sext_i64_i32(segred_group_sizze_28254))) {
                    x_38585 = ((__local
                                int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575 +
                                                              offset_38597)];
                }
            }
            offset_38597 = 1;
            while (slt32(offset_38597, wave_sizze_38577)) {
                if (slt32(local_tid_38575 + offset_38597,
                          sext_i64_i32(segred_group_sizze_28254)) &&
                    ((local_tid_38575 - squot32(local_tid_38575,
                                                wave_sizze_38577) *
                      wave_sizze_38577) & (2 * offset_38597 - 1)) == 0) {
                    // read array element
                    {
                        x_38586 = ((volatile __local
                                    int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575 +
                                                                  offset_38597)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38587 = smax32(x_38585, x_38586);
                        
                        x_38585 = res_38587;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575)] =
                            x_38585;
                    }
                }
                offset_38597 *= 2;
            }
            while (slt32(skip_waves_38598,
                         squot32(sext_i64_i32(segred_group_sizze_28254) +
                                 wave_sizze_38577 - 1, wave_sizze_38577))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38597 = skip_waves_38598 * wave_sizze_38577;
                if (slt32(local_tid_38575 + offset_38597,
                          sext_i64_i32(segred_group_sizze_28254)) &&
                    ((local_tid_38575 - squot32(local_tid_38575,
                                                wave_sizze_38577) *
                      wave_sizze_38577) == 0 && (squot32(local_tid_38575,
                                                         wave_sizze_38577) &
                                                 (2 * skip_waves_38598 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38586 = ((__local
                                    int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575 +
                                                                  offset_38597)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38587 = smax32(x_38585, x_38586);
                        
                        x_38585 = res_38587;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_38581)[sext_i32_i64(local_tid_38575)] =
                            x_38585;
                    }
                }
                skip_waves_38598 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_38575 == 0) {
                    ((__global int32_t *) mem_37281)[0] = x_38585;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28254
}
__kernel void mainDetailedzisegred_small_26165(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_37931_backing_aligned_0,
                                               int64_t N_24054, int64_t m_24055,
                                               int64_t N_24056,
                                               int64_t res_24068,
                                               int64_t res_24074,
                                               int64_t num_groups_26304,
                                               __global
                                               unsigned char *images_mem_36738,
                                               __global
                                               unsigned char *binop_p_mem_36747,
                                               __global
                                               unsigned char *mem_36830,
                                               __global
                                               unsigned char *mem_36835,
                                               int64_t segment_sizze_nonzzero_37924)
{
    #define segred_group_sizze_26303 (mainDetailedzisegred_group_sizze_26159)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_37931_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37931_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37926;
    int32_t local_tid_37927;
    int64_t group_sizze_37930;
    int32_t wave_sizze_37929;
    int32_t group_tid_37928;
    
    global_tid_37926 = get_global_id(0);
    local_tid_37927 = get_local_id(0);
    group_sizze_37930 = get_local_size(0);
    wave_sizze_37929 = LOCKSTEP_WIDTH;
    group_tid_37928 = get_group_id(0);
    
    int32_t phys_tid_26165;
    
    phys_tid_26165 = global_tid_37926;
    
    __local char *red_arr_mem_37931;
    
    red_arr_mem_37931 = (__local char *) red_arr_mem_37931_backing_0;
    
    int32_t phys_group_id_37933;
    
    phys_group_id_37933 = get_group_id(0);
    for (int32_t i_37934 = 0; i_37934 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055 * res_24074 * res_24074,
                                          squot64(segred_group_sizze_26303,
                                                  segment_sizze_nonzzero_37924))) -
                   phys_group_id_37933, sext_i64_i32(num_groups_26304));
         i_37934++) {
        int32_t virt_group_id_37935 = phys_group_id_37933 + i_37934 *
                sext_i64_i32(num_groups_26304);
        int64_t gtid_26152 = squot64(squot64(sext_i32_i64(local_tid_37927),
                                             segment_sizze_nonzzero_37924) +
                                     sext_i32_i64(virt_group_id_37935) *
                                     squot64(segred_group_sizze_26303,
                                             segment_sizze_nonzzero_37924),
                                     res_24074 * res_24074);
        int64_t gtid_26153 = squot64(squot64(sext_i32_i64(local_tid_37927),
                                             segment_sizze_nonzzero_37924) +
                                     sext_i32_i64(virt_group_id_37935) *
                                     squot64(segred_group_sizze_26303,
                                             segment_sizze_nonzzero_37924) -
                                     squot64(squot64(sext_i32_i64(local_tid_37927),
                                                     segment_sizze_nonzzero_37924) +
                                             sext_i32_i64(virt_group_id_37935) *
                                             squot64(segred_group_sizze_26303,
                                                     segment_sizze_nonzzero_37924),
                                             res_24074 * res_24074) *
                                     (res_24074 * res_24074), res_24074);
        int64_t gtid_26154 = squot64(sext_i32_i64(local_tid_37927),
                                     segment_sizze_nonzzero_37924) +
                sext_i32_i64(virt_group_id_37935) *
                squot64(segred_group_sizze_26303,
                        segment_sizze_nonzzero_37924) -
                squot64(squot64(sext_i32_i64(local_tid_37927),
                                segment_sizze_nonzzero_37924) +
                        sext_i32_i64(virt_group_id_37935) *
                        squot64(segred_group_sizze_26303,
                                segment_sizze_nonzzero_37924), res_24074 *
                        res_24074) * (res_24074 * res_24074) -
                squot64(squot64(sext_i32_i64(local_tid_37927),
                                segment_sizze_nonzzero_37924) +
                        sext_i32_i64(virt_group_id_37935) *
                        squot64(segred_group_sizze_26303,
                                segment_sizze_nonzzero_37924) -
                        squot64(squot64(sext_i32_i64(local_tid_37927),
                                        segment_sizze_nonzzero_37924) +
                                sext_i32_i64(virt_group_id_37935) *
                                squot64(segred_group_sizze_26303,
                                        segment_sizze_nonzzero_37924),
                                res_24074 * res_24074) * (res_24074 *
                                                          res_24074),
                        res_24074) * res_24074;
        int64_t gtid_26164 = srem64(sext_i32_i64(local_tid_37927), res_24068);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24068) && (((slt64(gtid_26152, m_24055) &&
                                          slt64(gtid_26153, res_24074)) &&
                                         slt64(gtid_26154, res_24074)) &&
                                        slt64(sext_i32_i64(local_tid_37927),
                                              res_24068 *
                                              squot64(segred_group_sizze_26303,
                                                      segment_sizze_nonzzero_37924)))) {
                float x_26313 = ((__global
                                  float *) images_mem_36738)[gtid_26152 *
                                                             N_24056 +
                                                             gtid_26164];
                float x_26314 = ((__global
                                  float *) binop_p_mem_36747)[gtid_26153 *
                                                              N_24054 +
                                                              gtid_26164];
                float x_26315 = ((__global float *) mem_36830)[gtid_26154 *
                                                               N_24054 +
                                                               gtid_26164];
                float x_26316 = x_26314 * x_26315;
                bool res_26317;
                
                res_26317 = futrts_isnan32(x_26313);
                
                float y_26318;
                
                if (res_26317) {
                    y_26318 = 0.0F;
                } else {
                    y_26318 = 1.0F;
                }
                
                float res_26319 = x_26316 * y_26318;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)] =
                        res_26319;
                }
            } else {
                ((__local
                  float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24068)) {
            // perform segmented scan to imitate reduction
            {
                float x_26307;
                float x_26308;
                float x_37936;
                float x_37937;
                bool ltid_in_bounds_37939;
                
                ltid_in_bounds_37939 = slt64(sext_i32_i64(local_tid_37927),
                                             res_24068 *
                                             squot64(segred_group_sizze_26303,
                                                     segment_sizze_nonzzero_37924));
                
                int32_t skip_threads_37940;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_37939) {
                        x_26308 = ((volatile __local
                                    float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)];
                        if ((local_tid_37927 - squot32(local_tid_37927, 32) *
                             32) == 0) {
                            x_26307 = x_26308;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_37940 = 1;
                    while (slt32(skip_threads_37940, 32)) {
                        if (sle32(skip_threads_37940, local_tid_37927 -
                                  squot32(local_tid_37927, 32) * 32) &&
                            ltid_in_bounds_37939) {
                            // read operands
                            {
                                x_26307 = ((volatile __local
                                            float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927) -
                                                                        sext_i32_i64(skip_threads_37940)];
                            }
                            // perform operation
                            {
                                bool inactive_37941 =
                                     slt64(srem64(sext_i32_i64(local_tid_37927),
                                                  res_24068),
                                           sext_i32_i64(local_tid_37927) -
                                           sext_i32_i64(local_tid_37927 -
                                           skip_threads_37940));
                                
                                if (inactive_37941) {
                                    x_26307 = x_26308;
                                }
                                if (!inactive_37941) {
                                    float res_26309 = x_26307 + x_26308;
                                    
                                    x_26307 = res_26309;
                                }
                            }
                        }
                        if (sle32(wave_sizze_37929, skip_threads_37940)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_37940, local_tid_37927 -
                                  squot32(local_tid_37927, 32) * 32) &&
                            ltid_in_bounds_37939) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)] =
                                    x_26307;
                                x_26308 = x_26307;
                            }
                        }
                        if (sle32(wave_sizze_37929, skip_threads_37940)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_37940 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_37927 - squot32(local_tid_37927, 32) * 32) ==
                        31 && ltid_in_bounds_37939) {
                        ((volatile __local
                          float *) red_arr_mem_37931)[sext_i32_i64(squot32(local_tid_37927,
                                                                           32))] =
                            x_26307;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_37942;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_37927, 32) == 0 &&
                            ltid_in_bounds_37939) {
                            x_37937 = ((volatile __local
                                        float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)];
                            if ((local_tid_37927 - squot32(local_tid_37927,
                                                           32) * 32) == 0) {
                                x_37936 = x_37937;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_37942 = 1;
                        while (slt32(skip_threads_37942, 32)) {
                            if (sle32(skip_threads_37942, local_tid_37927 -
                                      squot32(local_tid_37927, 32) * 32) &&
                                (squot32(local_tid_37927, 32) == 0 &&
                                 ltid_in_bounds_37939)) {
                                // read operands
                                {
                                    x_37936 = ((volatile __local
                                                float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927) -
                                                                            sext_i32_i64(skip_threads_37942)];
                                }
                                // perform operation
                                {
                                    bool inactive_37943 =
                                         slt64(srem64(sext_i32_i64(local_tid_37927 *
                                                      32 + 32 - 1), res_24068),
                                               sext_i32_i64(local_tid_37927 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_37927 -
                                                             skip_threads_37942) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_37943) {
                                        x_37936 = x_37937;
                                    }
                                    if (!inactive_37943) {
                                        float res_37938 = x_37936 + x_37937;
                                        
                                        x_37936 = res_37938;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_37929, skip_threads_37942)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_37942, local_tid_37927 -
                                      squot32(local_tid_37927, 32) * 32) &&
                                (squot32(local_tid_37927, 32) == 0 &&
                                 ltid_in_bounds_37939)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)] =
                                        x_37936;
                                    x_37937 = x_37936;
                                }
                            }
                            if (sle32(wave_sizze_37929, skip_threads_37942)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_37942 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_37927, 32) == 0 ||
                          !ltid_in_bounds_37939)) {
                        // read operands
                        {
                            x_26308 = x_26307;
                            x_26307 = ((__local
                                        float *) red_arr_mem_37931)[sext_i32_i64(squot32(local_tid_37927,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_37944 =
                                 slt64(srem64(sext_i32_i64(local_tid_37927),
                                              res_24068),
                                       sext_i32_i64(local_tid_37927) -
                                       sext_i32_i64(squot32(local_tid_37927,
                                                            32) * 32 - 1));
                            
                            if (inactive_37944) {
                                x_26307 = x_26308;
                            }
                            if (!inactive_37944) {
                                float res_26309 = x_26307 + x_26308;
                                
                                x_26307 = res_26309;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)] =
                                x_26307;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_37927, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_37931)[sext_i32_i64(local_tid_37927)] =
                            x_26308;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_37935) *
                      squot64(segred_group_sizze_26303,
                              segment_sizze_nonzzero_37924) +
                      sext_i32_i64(local_tid_37927), m_24055 * res_24074 *
                      res_24074) && slt64(sext_i32_i64(local_tid_37927),
                                          squot64(segred_group_sizze_26303,
                                                  segment_sizze_nonzzero_37924))) {
                ((__global
                  float *) mem_36835)[squot64(sext_i32_i64(virt_group_id_37935) *
                                              squot64(segred_group_sizze_26303,
                                                      segment_sizze_nonzzero_37924) +
                                              sext_i32_i64(local_tid_37927),
                                              res_24074 * res_24074) *
                                      (res_24074 * res_24074) +
                                      squot64(sext_i32_i64(virt_group_id_37935) *
                                              squot64(segred_group_sizze_26303,
                                                      segment_sizze_nonzzero_37924) +
                                              sext_i32_i64(local_tid_37927) -
                                              squot64(sext_i32_i64(virt_group_id_37935) *
                                                      squot64(segred_group_sizze_26303,
                                                              segment_sizze_nonzzero_37924) +
                                                      sext_i32_i64(local_tid_37927),
                                                      res_24074 * res_24074) *
                                              (res_24074 * res_24074),
                                              res_24074) * res_24074 +
                                      (sext_i32_i64(virt_group_id_37935) *
                                       squot64(segred_group_sizze_26303,
                                               segment_sizze_nonzzero_37924) +
                                       sext_i32_i64(local_tid_37927) -
                                       squot64(sext_i32_i64(virt_group_id_37935) *
                                               squot64(segred_group_sizze_26303,
                                                       segment_sizze_nonzzero_37924) +
                                               sext_i32_i64(local_tid_37927),
                                               res_24074 * res_24074) *
                                       (res_24074 * res_24074) -
                                       squot64(sext_i32_i64(virt_group_id_37935) *
                                               squot64(segred_group_sizze_26303,
                                                       segment_sizze_nonzzero_37924) +
                                               sext_i32_i64(local_tid_37927) -
                                               squot64(sext_i32_i64(virt_group_id_37935) *
                                                       squot64(segred_group_sizze_26303,
                                                               segment_sizze_nonzzero_37924) +
                                                       sext_i32_i64(local_tid_37927),
                                                       res_24074 * res_24074) *
                                               (res_24074 * res_24074),
                                               res_24074) * res_24074)] =
                    ((__local
                      float *) red_arr_mem_37931)[(sext_i32_i64(local_tid_37927) +
                                                   1) *
                                                  segment_sizze_nonzzero_37924 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_26303
}
__kernel void mainDetailedzisegred_small_27338(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38085_backing_aligned_0,
                                               int64_t N_24054, int64_t m_24055,
                                               int64_t N_24056,
                                               int64_t res_24068,
                                               int64_t res_24074,
                                               int64_t num_groups_27391,
                                               __global
                                               unsigned char *images_mem_36738,
                                               __global
                                               unsigned char *binop_p_mem_36747,
                                               __global
                                               unsigned char *mem_37016,
                                               int64_t segment_sizze_nonzzero_38078)
{
    #define segred_group_sizze_27390 (mainDetailedzisegred_group_sizze_27332)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38085_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38085_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38080;
    int32_t local_tid_38081;
    int64_t group_sizze_38084;
    int32_t wave_sizze_38083;
    int32_t group_tid_38082;
    
    global_tid_38080 = get_global_id(0);
    local_tid_38081 = get_local_id(0);
    group_sizze_38084 = get_local_size(0);
    wave_sizze_38083 = LOCKSTEP_WIDTH;
    group_tid_38082 = get_group_id(0);
    
    int32_t phys_tid_27338;
    
    phys_tid_27338 = global_tid_38080;
    
    __local char *red_arr_mem_38085;
    
    red_arr_mem_38085 = (__local char *) red_arr_mem_38085_backing_0;
    
    int32_t phys_group_id_38087;
    
    phys_group_id_38087 = get_group_id(0);
    for (int32_t i_38088 = 0; i_38088 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055 * res_24074,
                                          squot64(segred_group_sizze_27390,
                                                  segment_sizze_nonzzero_38078))) -
                   phys_group_id_38087, sext_i64_i32(num_groups_27391));
         i_38088++) {
        int32_t virt_group_id_38089 = phys_group_id_38087 + i_38088 *
                sext_i64_i32(num_groups_27391);
        int64_t gtid_27327 = squot64(squot64(sext_i32_i64(local_tid_38081),
                                             segment_sizze_nonzzero_38078) +
                                     sext_i32_i64(virt_group_id_38089) *
                                     squot64(segred_group_sizze_27390,
                                             segment_sizze_nonzzero_38078),
                                     res_24074);
        int64_t gtid_27328 = squot64(sext_i32_i64(local_tid_38081),
                                     segment_sizze_nonzzero_38078) +
                sext_i32_i64(virt_group_id_38089) *
                squot64(segred_group_sizze_27390,
                        segment_sizze_nonzzero_38078) -
                squot64(squot64(sext_i32_i64(local_tid_38081),
                                segment_sizze_nonzzero_38078) +
                        sext_i32_i64(virt_group_id_38089) *
                        squot64(segred_group_sizze_27390,
                                segment_sizze_nonzzero_38078), res_24074) *
                res_24074;
        int64_t gtid_27337 = srem64(sext_i32_i64(local_tid_38081), res_24068);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24068) && ((slt64(gtid_27327, m_24055) &&
                                         slt64(gtid_27328, res_24074)) &&
                                        slt64(sext_i32_i64(local_tid_38081),
                                              res_24068 *
                                              squot64(segred_group_sizze_27390,
                                                      segment_sizze_nonzzero_38078)))) {
                float x_27400 = ((__global
                                  float *) images_mem_36738)[gtid_27327 *
                                                             N_24056 +
                                                             gtid_27337];
                bool res_27401;
                
                res_27401 = futrts_isnan32(x_27400);
                
                float res_27402;
                
                if (res_27401) {
                    res_27402 = 0.0F;
                } else {
                    float x_27399 = ((__global
                                      float *) binop_p_mem_36747)[gtid_27328 *
                                                                  N_24054 +
                                                                  gtid_27337];
                    float res_27403 = x_27399 * x_27400;
                    
                    res_27402 = res_27403;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)] =
                        res_27402;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24068)) {
            // perform segmented scan to imitate reduction
            {
                float x_27394;
                float x_27395;
                float x_38090;
                float x_38091;
                bool ltid_in_bounds_38093;
                
                ltid_in_bounds_38093 = slt64(sext_i32_i64(local_tid_38081),
                                             res_24068 *
                                             squot64(segred_group_sizze_27390,
                                                     segment_sizze_nonzzero_38078));
                
                int32_t skip_threads_38094;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38093) {
                        x_27395 = ((volatile __local
                                    float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)];
                        if ((local_tid_38081 - squot32(local_tid_38081, 32) *
                             32) == 0) {
                            x_27394 = x_27395;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38094 = 1;
                    while (slt32(skip_threads_38094, 32)) {
                        if (sle32(skip_threads_38094, local_tid_38081 -
                                  squot32(local_tid_38081, 32) * 32) &&
                            ltid_in_bounds_38093) {
                            // read operands
                            {
                                x_27394 = ((volatile __local
                                            float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081) -
                                                                        sext_i32_i64(skip_threads_38094)];
                            }
                            // perform operation
                            {
                                bool inactive_38095 =
                                     slt64(srem64(sext_i32_i64(local_tid_38081),
                                                  res_24068),
                                           sext_i32_i64(local_tid_38081) -
                                           sext_i32_i64(local_tid_38081 -
                                           skip_threads_38094));
                                
                                if (inactive_38095) {
                                    x_27394 = x_27395;
                                }
                                if (!inactive_38095) {
                                    float res_27396 = x_27394 + x_27395;
                                    
                                    x_27394 = res_27396;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38083, skip_threads_38094)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38094, local_tid_38081 -
                                  squot32(local_tid_38081, 32) * 32) &&
                            ltid_in_bounds_38093) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)] =
                                    x_27394;
                                x_27395 = x_27394;
                            }
                        }
                        if (sle32(wave_sizze_38083, skip_threads_38094)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38094 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38081 - squot32(local_tid_38081, 32) * 32) ==
                        31 && ltid_in_bounds_38093) {
                        ((volatile __local
                          float *) red_arr_mem_38085)[sext_i32_i64(squot32(local_tid_38081,
                                                                           32))] =
                            x_27394;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38096;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38081, 32) == 0 &&
                            ltid_in_bounds_38093) {
                            x_38091 = ((volatile __local
                                        float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)];
                            if ((local_tid_38081 - squot32(local_tid_38081,
                                                           32) * 32) == 0) {
                                x_38090 = x_38091;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38096 = 1;
                        while (slt32(skip_threads_38096, 32)) {
                            if (sle32(skip_threads_38096, local_tid_38081 -
                                      squot32(local_tid_38081, 32) * 32) &&
                                (squot32(local_tid_38081, 32) == 0 &&
                                 ltid_in_bounds_38093)) {
                                // read operands
                                {
                                    x_38090 = ((volatile __local
                                                float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081) -
                                                                            sext_i32_i64(skip_threads_38096)];
                                }
                                // perform operation
                                {
                                    bool inactive_38097 =
                                         slt64(srem64(sext_i32_i64(local_tid_38081 *
                                                      32 + 32 - 1), res_24068),
                                               sext_i32_i64(local_tid_38081 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38081 -
                                                             skip_threads_38096) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38097) {
                                        x_38090 = x_38091;
                                    }
                                    if (!inactive_38097) {
                                        float res_38092 = x_38090 + x_38091;
                                        
                                        x_38090 = res_38092;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38083, skip_threads_38096)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38096, local_tid_38081 -
                                      squot32(local_tid_38081, 32) * 32) &&
                                (squot32(local_tid_38081, 32) == 0 &&
                                 ltid_in_bounds_38093)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)] =
                                        x_38090;
                                    x_38091 = x_38090;
                                }
                            }
                            if (sle32(wave_sizze_38083, skip_threads_38096)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38096 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38081, 32) == 0 ||
                          !ltid_in_bounds_38093)) {
                        // read operands
                        {
                            x_27395 = x_27394;
                            x_27394 = ((__local
                                        float *) red_arr_mem_38085)[sext_i32_i64(squot32(local_tid_38081,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38098 =
                                 slt64(srem64(sext_i32_i64(local_tid_38081),
                                              res_24068),
                                       sext_i32_i64(local_tid_38081) -
                                       sext_i32_i64(squot32(local_tid_38081,
                                                            32) * 32 - 1));
                            
                            if (inactive_38098) {
                                x_27394 = x_27395;
                            }
                            if (!inactive_38098) {
                                float res_27396 = x_27394 + x_27395;
                                
                                x_27394 = res_27396;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)] =
                                x_27394;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38081, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38085)[sext_i32_i64(local_tid_38081)] =
                            x_27395;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38089) *
                      squot64(segred_group_sizze_27390,
                              segment_sizze_nonzzero_38078) +
                      sext_i32_i64(local_tid_38081), m_24055 * res_24074) &&
                slt64(sext_i32_i64(local_tid_38081),
                      squot64(segred_group_sizze_27390,
                              segment_sizze_nonzzero_38078))) {
                ((__global
                  float *) mem_37016)[squot64(sext_i32_i64(virt_group_id_38089) *
                                              squot64(segred_group_sizze_27390,
                                                      segment_sizze_nonzzero_38078) +
                                              sext_i32_i64(local_tid_38081),
                                              res_24074) * res_24074 +
                                      (sext_i32_i64(virt_group_id_38089) *
                                       squot64(segred_group_sizze_27390,
                                               segment_sizze_nonzzero_38078) +
                                       sext_i32_i64(local_tid_38081) -
                                       squot64(sext_i32_i64(virt_group_id_38089) *
                                               squot64(segred_group_sizze_27390,
                                                       segment_sizze_nonzzero_38078) +
                                               sext_i32_i64(local_tid_38081),
                                               res_24074) * res_24074)] =
                    ((__local
                      float *) red_arr_mem_38085)[(sext_i32_i64(local_tid_38081) +
                                                   1) *
                                                  segment_sizze_nonzzero_38078 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27390
}
__kernel void mainDetailedzisegred_small_27475(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38166_backing_aligned_0,
                                               int64_t m_24055,
                                               int64_t res_24074,
                                               int64_t num_groups_27524,
                                               __global
                                               unsigned char *res_mem_36931,
                                               __global
                                               unsigned char *res_mem_37022,
                                               __global
                                               unsigned char *mem_37059,
                                               int64_t segment_sizze_nonzzero_38159)
{
    #define segred_group_sizze_27523 (mainDetailedzisegred_group_sizze_27469)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38166_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38166_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38161;
    int32_t local_tid_38162;
    int64_t group_sizze_38165;
    int32_t wave_sizze_38164;
    int32_t group_tid_38163;
    
    global_tid_38161 = get_global_id(0);
    local_tid_38162 = get_local_id(0);
    group_sizze_38165 = get_local_size(0);
    wave_sizze_38164 = LOCKSTEP_WIDTH;
    group_tid_38163 = get_group_id(0);
    
    int32_t phys_tid_27475;
    
    phys_tid_27475 = global_tid_38161;
    
    __local char *red_arr_mem_38166;
    
    red_arr_mem_38166 = (__local char *) red_arr_mem_38166_backing_0;
    
    int32_t phys_group_id_38168;
    
    phys_group_id_38168 = get_group_id(0);
    for (int32_t i_38169 = 0; i_38169 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055 * res_24074,
                                          squot64(segred_group_sizze_27523,
                                                  segment_sizze_nonzzero_38159))) -
                   phys_group_id_38168, sext_i64_i32(num_groups_27524));
         i_38169++) {
        int32_t virt_group_id_38170 = phys_group_id_38168 + i_38169 *
                sext_i64_i32(num_groups_27524);
        int64_t gtid_27464 = squot64(squot64(sext_i32_i64(local_tid_38162),
                                             segment_sizze_nonzzero_38159) +
                                     sext_i32_i64(virt_group_id_38170) *
                                     squot64(segred_group_sizze_27523,
                                             segment_sizze_nonzzero_38159),
                                     res_24074);
        int64_t gtid_27465 = squot64(sext_i32_i64(local_tid_38162),
                                     segment_sizze_nonzzero_38159) +
                sext_i32_i64(virt_group_id_38170) *
                squot64(segred_group_sizze_27523,
                        segment_sizze_nonzzero_38159) -
                squot64(squot64(sext_i32_i64(local_tid_38162),
                                segment_sizze_nonzzero_38159) +
                        sext_i32_i64(virt_group_id_38170) *
                        squot64(segred_group_sizze_27523,
                                segment_sizze_nonzzero_38159), res_24074) *
                res_24074;
        int64_t gtid_27474 = srem64(sext_i32_i64(local_tid_38162), res_24074);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24074) && ((slt64(gtid_27464, m_24055) &&
                                         slt64(gtid_27465, res_24074)) &&
                                        slt64(sext_i32_i64(local_tid_38162),
                                              res_24074 *
                                              squot64(segred_group_sizze_27523,
                                                      segment_sizze_nonzzero_38159)))) {
                float x_27533 = ((__global float *) res_mem_37022)[gtid_27464 *
                                                                   res_24074 +
                                                                   gtid_27474];
                float x_27534 = ((__global float *) res_mem_36931)[gtid_27464 *
                                                                   (res_24074 *
                                                                    res_24074) +
                                                                   gtid_27465 *
                                                                   res_24074 +
                                                                   gtid_27474];
                float res_27535 = x_27533 * x_27534;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)] =
                        res_27535;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24074)) {
            // perform segmented scan to imitate reduction
            {
                float x_27527;
                float x_27528;
                float x_38171;
                float x_38172;
                bool ltid_in_bounds_38174;
                
                ltid_in_bounds_38174 = slt64(sext_i32_i64(local_tid_38162),
                                             res_24074 *
                                             squot64(segred_group_sizze_27523,
                                                     segment_sizze_nonzzero_38159));
                
                int32_t skip_threads_38175;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38174) {
                        x_27528 = ((volatile __local
                                    float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)];
                        if ((local_tid_38162 - squot32(local_tid_38162, 32) *
                             32) == 0) {
                            x_27527 = x_27528;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38175 = 1;
                    while (slt32(skip_threads_38175, 32)) {
                        if (sle32(skip_threads_38175, local_tid_38162 -
                                  squot32(local_tid_38162, 32) * 32) &&
                            ltid_in_bounds_38174) {
                            // read operands
                            {
                                x_27527 = ((volatile __local
                                            float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162) -
                                                                        sext_i32_i64(skip_threads_38175)];
                            }
                            // perform operation
                            {
                                bool inactive_38176 =
                                     slt64(srem64(sext_i32_i64(local_tid_38162),
                                                  res_24074),
                                           sext_i32_i64(local_tid_38162) -
                                           sext_i32_i64(local_tid_38162 -
                                           skip_threads_38175));
                                
                                if (inactive_38176) {
                                    x_27527 = x_27528;
                                }
                                if (!inactive_38176) {
                                    float res_27529 = x_27527 + x_27528;
                                    
                                    x_27527 = res_27529;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38164, skip_threads_38175)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38175, local_tid_38162 -
                                  squot32(local_tid_38162, 32) * 32) &&
                            ltid_in_bounds_38174) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)] =
                                    x_27527;
                                x_27528 = x_27527;
                            }
                        }
                        if (sle32(wave_sizze_38164, skip_threads_38175)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38175 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38162 - squot32(local_tid_38162, 32) * 32) ==
                        31 && ltid_in_bounds_38174) {
                        ((volatile __local
                          float *) red_arr_mem_38166)[sext_i32_i64(squot32(local_tid_38162,
                                                                           32))] =
                            x_27527;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38177;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38162, 32) == 0 &&
                            ltid_in_bounds_38174) {
                            x_38172 = ((volatile __local
                                        float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)];
                            if ((local_tid_38162 - squot32(local_tid_38162,
                                                           32) * 32) == 0) {
                                x_38171 = x_38172;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38177 = 1;
                        while (slt32(skip_threads_38177, 32)) {
                            if (sle32(skip_threads_38177, local_tid_38162 -
                                      squot32(local_tid_38162, 32) * 32) &&
                                (squot32(local_tid_38162, 32) == 0 &&
                                 ltid_in_bounds_38174)) {
                                // read operands
                                {
                                    x_38171 = ((volatile __local
                                                float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162) -
                                                                            sext_i32_i64(skip_threads_38177)];
                                }
                                // perform operation
                                {
                                    bool inactive_38178 =
                                         slt64(srem64(sext_i32_i64(local_tid_38162 *
                                                      32 + 32 - 1), res_24074),
                                               sext_i32_i64(local_tid_38162 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38162 -
                                                             skip_threads_38177) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38178) {
                                        x_38171 = x_38172;
                                    }
                                    if (!inactive_38178) {
                                        float res_38173 = x_38171 + x_38172;
                                        
                                        x_38171 = res_38173;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38164, skip_threads_38177)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38177, local_tid_38162 -
                                      squot32(local_tid_38162, 32) * 32) &&
                                (squot32(local_tid_38162, 32) == 0 &&
                                 ltid_in_bounds_38174)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)] =
                                        x_38171;
                                    x_38172 = x_38171;
                                }
                            }
                            if (sle32(wave_sizze_38164, skip_threads_38177)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38177 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38162, 32) == 0 ||
                          !ltid_in_bounds_38174)) {
                        // read operands
                        {
                            x_27528 = x_27527;
                            x_27527 = ((__local
                                        float *) red_arr_mem_38166)[sext_i32_i64(squot32(local_tid_38162,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38179 =
                                 slt64(srem64(sext_i32_i64(local_tid_38162),
                                              res_24074),
                                       sext_i32_i64(local_tid_38162) -
                                       sext_i32_i64(squot32(local_tid_38162,
                                                            32) * 32 - 1));
                            
                            if (inactive_38179) {
                                x_27527 = x_27528;
                            }
                            if (!inactive_38179) {
                                float res_27529 = x_27527 + x_27528;
                                
                                x_27527 = res_27529;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)] =
                                x_27527;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38162, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38166)[sext_i32_i64(local_tid_38162)] =
                            x_27528;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38170) *
                      squot64(segred_group_sizze_27523,
                              segment_sizze_nonzzero_38159) +
                      sext_i32_i64(local_tid_38162), m_24055 * res_24074) &&
                slt64(sext_i32_i64(local_tid_38162),
                      squot64(segred_group_sizze_27523,
                              segment_sizze_nonzzero_38159))) {
                ((__global
                  float *) mem_37059)[squot64(sext_i32_i64(virt_group_id_38170) *
                                              squot64(segred_group_sizze_27523,
                                                      segment_sizze_nonzzero_38159) +
                                              sext_i32_i64(local_tid_38162),
                                              res_24074) * res_24074 +
                                      (sext_i32_i64(virt_group_id_38170) *
                                       squot64(segred_group_sizze_27523,
                                               segment_sizze_nonzzero_38159) +
                                       sext_i32_i64(local_tid_38162) -
                                       squot64(sext_i32_i64(virt_group_id_38170) *
                                               squot64(segred_group_sizze_27523,
                                                       segment_sizze_nonzzero_38159) +
                                               sext_i32_i64(local_tid_38162),
                                               res_24074) * res_24074)] =
                    ((__local
                      float *) red_arr_mem_38166)[(sext_i32_i64(local_tid_38162) +
                                                   1) *
                                                  segment_sizze_nonzzero_38159 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27523
}
__kernel void mainDetailedzisegred_small_27605(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38254_backing_aligned_0,
                                               int64_t N_24054, int64_t m_24055,
                                               int64_t res_24074,
                                               int64_t num_groups_27652,
                                               __global
                                               unsigned char *mem_36754,
                                               __global
                                               unsigned char *res_mem_37065,
                                               __global
                                               unsigned char *mem_37153,
                                               int64_t segment_sizze_nonzzero_38247)
{
    #define segred_group_sizze_27651 (mainDetailedzisegred_group_sizze_27599)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38254_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38254_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38249;
    int32_t local_tid_38250;
    int64_t group_sizze_38253;
    int32_t wave_sizze_38252;
    int32_t group_tid_38251;
    
    global_tid_38249 = get_global_id(0);
    local_tid_38250 = get_local_id(0);
    group_sizze_38253 = get_local_size(0);
    wave_sizze_38252 = LOCKSTEP_WIDTH;
    group_tid_38251 = get_group_id(0);
    
    int32_t phys_tid_27605;
    
    phys_tid_27605 = global_tid_38249;
    
    __local char *red_arr_mem_38254;
    
    red_arr_mem_38254 = (__local char *) red_arr_mem_38254_backing_0;
    
    int32_t phys_group_id_38256;
    
    phys_group_id_38256 = get_group_id(0);
    for (int32_t i_38257 = 0; i_38257 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055 * N_24054,
                                          squot64(segred_group_sizze_27651,
                                                  segment_sizze_nonzzero_38247))) -
                   phys_group_id_38256, sext_i64_i32(num_groups_27652));
         i_38257++) {
        int32_t virt_group_id_38258 = phys_group_id_38256 + i_38257 *
                sext_i64_i32(num_groups_27652);
        int64_t gtid_27594 = squot64(squot64(sext_i32_i64(local_tid_38250),
                                             segment_sizze_nonzzero_38247) +
                                     sext_i32_i64(virt_group_id_38258) *
                                     squot64(segred_group_sizze_27651,
                                             segment_sizze_nonzzero_38247),
                                     N_24054);
        int64_t gtid_27595 = squot64(sext_i32_i64(local_tid_38250),
                                     segment_sizze_nonzzero_38247) +
                sext_i32_i64(virt_group_id_38258) *
                squot64(segred_group_sizze_27651,
                        segment_sizze_nonzzero_38247) -
                squot64(squot64(sext_i32_i64(local_tid_38250),
                                segment_sizze_nonzzero_38247) +
                        sext_i32_i64(virt_group_id_38258) *
                        squot64(segred_group_sizze_27651,
                                segment_sizze_nonzzero_38247), N_24054) *
                N_24054;
        int64_t gtid_27604 = srem64(sext_i32_i64(local_tid_38250), res_24074);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24074) && ((slt64(gtid_27594, m_24055) &&
                                         slt64(gtid_27595, N_24054)) &&
                                        slt64(sext_i32_i64(local_tid_38250),
                                              res_24074 *
                                              squot64(segred_group_sizze_27651,
                                                      segment_sizze_nonzzero_38247)))) {
                float x_27660 = ((__global float *) res_mem_37065)[gtid_27594 *
                                                                   res_24074 +
                                                                   gtid_27604];
                float x_27661 = ((__global float *) mem_36754)[gtid_27595 *
                                                               res_24074 +
                                                               gtid_27604];
                float res_27662 = x_27660 * x_27661;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)] =
                        res_27662;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24074)) {
            // perform segmented scan to imitate reduction
            {
                float x_27655;
                float x_27656;
                float x_38259;
                float x_38260;
                bool ltid_in_bounds_38262;
                
                ltid_in_bounds_38262 = slt64(sext_i32_i64(local_tid_38250),
                                             res_24074 *
                                             squot64(segred_group_sizze_27651,
                                                     segment_sizze_nonzzero_38247));
                
                int32_t skip_threads_38263;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38262) {
                        x_27656 = ((volatile __local
                                    float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)];
                        if ((local_tid_38250 - squot32(local_tid_38250, 32) *
                             32) == 0) {
                            x_27655 = x_27656;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38263 = 1;
                    while (slt32(skip_threads_38263, 32)) {
                        if (sle32(skip_threads_38263, local_tid_38250 -
                                  squot32(local_tid_38250, 32) * 32) &&
                            ltid_in_bounds_38262) {
                            // read operands
                            {
                                x_27655 = ((volatile __local
                                            float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250) -
                                                                        sext_i32_i64(skip_threads_38263)];
                            }
                            // perform operation
                            {
                                bool inactive_38264 =
                                     slt64(srem64(sext_i32_i64(local_tid_38250),
                                                  res_24074),
                                           sext_i32_i64(local_tid_38250) -
                                           sext_i32_i64(local_tid_38250 -
                                           skip_threads_38263));
                                
                                if (inactive_38264) {
                                    x_27655 = x_27656;
                                }
                                if (!inactive_38264) {
                                    float res_27657 = x_27655 + x_27656;
                                    
                                    x_27655 = res_27657;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38252, skip_threads_38263)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38263, local_tid_38250 -
                                  squot32(local_tid_38250, 32) * 32) &&
                            ltid_in_bounds_38262) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)] =
                                    x_27655;
                                x_27656 = x_27655;
                            }
                        }
                        if (sle32(wave_sizze_38252, skip_threads_38263)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38263 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38250 - squot32(local_tid_38250, 32) * 32) ==
                        31 && ltid_in_bounds_38262) {
                        ((volatile __local
                          float *) red_arr_mem_38254)[sext_i32_i64(squot32(local_tid_38250,
                                                                           32))] =
                            x_27655;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38265;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38250, 32) == 0 &&
                            ltid_in_bounds_38262) {
                            x_38260 = ((volatile __local
                                        float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)];
                            if ((local_tid_38250 - squot32(local_tid_38250,
                                                           32) * 32) == 0) {
                                x_38259 = x_38260;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38265 = 1;
                        while (slt32(skip_threads_38265, 32)) {
                            if (sle32(skip_threads_38265, local_tid_38250 -
                                      squot32(local_tid_38250, 32) * 32) &&
                                (squot32(local_tid_38250, 32) == 0 &&
                                 ltid_in_bounds_38262)) {
                                // read operands
                                {
                                    x_38259 = ((volatile __local
                                                float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250) -
                                                                            sext_i32_i64(skip_threads_38265)];
                                }
                                // perform operation
                                {
                                    bool inactive_38266 =
                                         slt64(srem64(sext_i32_i64(local_tid_38250 *
                                                      32 + 32 - 1), res_24074),
                                               sext_i32_i64(local_tid_38250 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38250 -
                                                             skip_threads_38265) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38266) {
                                        x_38259 = x_38260;
                                    }
                                    if (!inactive_38266) {
                                        float res_38261 = x_38259 + x_38260;
                                        
                                        x_38259 = res_38261;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38252, skip_threads_38265)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38265, local_tid_38250 -
                                      squot32(local_tid_38250, 32) * 32) &&
                                (squot32(local_tid_38250, 32) == 0 &&
                                 ltid_in_bounds_38262)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)] =
                                        x_38259;
                                    x_38260 = x_38259;
                                }
                            }
                            if (sle32(wave_sizze_38252, skip_threads_38265)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38265 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38250, 32) == 0 ||
                          !ltid_in_bounds_38262)) {
                        // read operands
                        {
                            x_27656 = x_27655;
                            x_27655 = ((__local
                                        float *) red_arr_mem_38254)[sext_i32_i64(squot32(local_tid_38250,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38267 =
                                 slt64(srem64(sext_i32_i64(local_tid_38250),
                                              res_24074),
                                       sext_i32_i64(local_tid_38250) -
                                       sext_i32_i64(squot32(local_tid_38250,
                                                            32) * 32 - 1));
                            
                            if (inactive_38267) {
                                x_27655 = x_27656;
                            }
                            if (!inactive_38267) {
                                float res_27657 = x_27655 + x_27656;
                                
                                x_27655 = res_27657;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)] =
                                x_27655;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38250, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38254)[sext_i32_i64(local_tid_38250)] =
                            x_27656;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38258) *
                      squot64(segred_group_sizze_27651,
                              segment_sizze_nonzzero_38247) +
                      sext_i32_i64(local_tid_38250), m_24055 * N_24054) &&
                slt64(sext_i32_i64(local_tid_38250),
                      squot64(segred_group_sizze_27651,
                              segment_sizze_nonzzero_38247))) {
                ((__global
                  float *) mem_37153)[squot64(sext_i32_i64(virt_group_id_38258) *
                                              squot64(segred_group_sizze_27651,
                                                      segment_sizze_nonzzero_38247) +
                                              sext_i32_i64(local_tid_38250),
                                              N_24054) * N_24054 +
                                      (sext_i32_i64(virt_group_id_38258) *
                                       squot64(segred_group_sizze_27651,
                                               segment_sizze_nonzzero_38247) +
                                       sext_i32_i64(local_tid_38250) -
                                       squot64(sext_i32_i64(virt_group_id_38258) *
                                               squot64(segred_group_sizze_27651,
                                                       segment_sizze_nonzzero_38247) +
                                               sext_i32_i64(local_tid_38250),
                                               N_24054) * N_24054)] = ((__local
                                                                        float *) red_arr_mem_38254)[(sext_i32_i64(local_tid_38250) +
                                                                                                     1) *
                                                                                                    segment_sizze_nonzzero_38247 -
                                                                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27651
}
__kernel void mainDetailedzisegred_small_28171(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38508_backing_aligned_0,
                                               int64_t N_24054, int64_t m_24055,
                                               int64_t res_24068,
                                               int64_t num_groups_28218,
                                               __global
                                               unsigned char *res_mem_37197,
                                               __global
                                               unsigned char *mem_37264,
                                               __global
                                               unsigned char *mem_37267,
                                               int64_t segment_sizze_nonzzero_38501)
{
    #define segred_group_sizze_28217 (mainDetailedzisegred_group_sizze_28165)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38508_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38508_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38503;
    int32_t local_tid_38504;
    int64_t group_sizze_38507;
    int32_t wave_sizze_38506;
    int32_t group_tid_38505;
    
    global_tid_38503 = get_global_id(0);
    local_tid_38504 = get_local_id(0);
    group_sizze_38507 = get_local_size(0);
    wave_sizze_38506 = LOCKSTEP_WIDTH;
    group_tid_38505 = get_group_id(0);
    
    int32_t phys_tid_28171;
    
    phys_tid_28171 = global_tid_38503;
    
    __local char *red_arr_mem_38508;
    
    red_arr_mem_38508 = (__local char *) red_arr_mem_38508_backing_0;
    
    int32_t phys_group_id_38510;
    
    phys_group_id_38510 = get_group_id(0);
    for (int32_t i_38511 = 0; i_38511 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055,
                                          squot64(segred_group_sizze_28217,
                                                  segment_sizze_nonzzero_38501))) -
                   phys_group_id_38510, sext_i64_i32(num_groups_28218));
         i_38511++) {
        int32_t virt_group_id_38512 = phys_group_id_38510 + i_38511 *
                sext_i64_i32(num_groups_28218);
        int64_t gtid_28162 = squot64(sext_i32_i64(local_tid_38504),
                                     segment_sizze_nonzzero_38501) +
                sext_i32_i64(virt_group_id_38512) *
                squot64(segred_group_sizze_28217, segment_sizze_nonzzero_38501);
        int64_t gtid_28170 = srem64(sext_i32_i64(local_tid_38504), res_24068);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24068) && (slt64(gtid_28162, m_24055) &&
                                        slt64(sext_i32_i64(local_tid_38504),
                                              res_24068 *
                                              squot64(segred_group_sizze_28217,
                                                      segment_sizze_nonzzero_38501)))) {
                int32_t res_28225 = ((__global
                                      int32_t *) mem_37264)[gtid_28162];
                int32_t index_primexp_35444 = sext_i64_i32(gtid_28170);
                bool cond_28227 = slt32(index_primexp_35444, res_28225);
                float res_28228;
                
                if (cond_28227) {
                    int64_t i_28229 = sext_i32_i64(index_primexp_35444);
                    float res_28230 = ((__global
                                        float *) res_mem_37197)[gtid_28162 *
                                                                N_24054 +
                                                                i_28229];
                    
                    res_28228 = res_28230;
                } else {
                    res_28228 = 0.0F;
                }
                
                float res_28231 = res_28228 * res_28228;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)] =
                        res_28231;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24068)) {
            // perform segmented scan to imitate reduction
            {
                float x_28221;
                float x_28222;
                float x_38513;
                float x_38514;
                bool ltid_in_bounds_38516;
                
                ltid_in_bounds_38516 = slt64(sext_i32_i64(local_tid_38504),
                                             res_24068 *
                                             squot64(segred_group_sizze_28217,
                                                     segment_sizze_nonzzero_38501));
                
                int32_t skip_threads_38517;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38516) {
                        x_28222 = ((volatile __local
                                    float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)];
                        if ((local_tid_38504 - squot32(local_tid_38504, 32) *
                             32) == 0) {
                            x_28221 = x_28222;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38517 = 1;
                    while (slt32(skip_threads_38517, 32)) {
                        if (sle32(skip_threads_38517, local_tid_38504 -
                                  squot32(local_tid_38504, 32) * 32) &&
                            ltid_in_bounds_38516) {
                            // read operands
                            {
                                x_28221 = ((volatile __local
                                            float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504) -
                                                                        sext_i32_i64(skip_threads_38517)];
                            }
                            // perform operation
                            {
                                bool inactive_38518 =
                                     slt64(srem64(sext_i32_i64(local_tid_38504),
                                                  res_24068),
                                           sext_i32_i64(local_tid_38504) -
                                           sext_i32_i64(local_tid_38504 -
                                           skip_threads_38517));
                                
                                if (inactive_38518) {
                                    x_28221 = x_28222;
                                }
                                if (!inactive_38518) {
                                    float res_28223 = x_28221 + x_28222;
                                    
                                    x_28221 = res_28223;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38506, skip_threads_38517)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38517, local_tid_38504 -
                                  squot32(local_tid_38504, 32) * 32) &&
                            ltid_in_bounds_38516) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)] =
                                    x_28221;
                                x_28222 = x_28221;
                            }
                        }
                        if (sle32(wave_sizze_38506, skip_threads_38517)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38517 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38504 - squot32(local_tid_38504, 32) * 32) ==
                        31 && ltid_in_bounds_38516) {
                        ((volatile __local
                          float *) red_arr_mem_38508)[sext_i32_i64(squot32(local_tid_38504,
                                                                           32))] =
                            x_28221;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38519;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38504, 32) == 0 &&
                            ltid_in_bounds_38516) {
                            x_38514 = ((volatile __local
                                        float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)];
                            if ((local_tid_38504 - squot32(local_tid_38504,
                                                           32) * 32) == 0) {
                                x_38513 = x_38514;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38519 = 1;
                        while (slt32(skip_threads_38519, 32)) {
                            if (sle32(skip_threads_38519, local_tid_38504 -
                                      squot32(local_tid_38504, 32) * 32) &&
                                (squot32(local_tid_38504, 32) == 0 &&
                                 ltid_in_bounds_38516)) {
                                // read operands
                                {
                                    x_38513 = ((volatile __local
                                                float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504) -
                                                                            sext_i32_i64(skip_threads_38519)];
                                }
                                // perform operation
                                {
                                    bool inactive_38520 =
                                         slt64(srem64(sext_i32_i64(local_tid_38504 *
                                                      32 + 32 - 1), res_24068),
                                               sext_i32_i64(local_tid_38504 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38504 -
                                                             skip_threads_38519) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38520) {
                                        x_38513 = x_38514;
                                    }
                                    if (!inactive_38520) {
                                        float res_38515 = x_38513 + x_38514;
                                        
                                        x_38513 = res_38515;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38506, skip_threads_38519)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38519, local_tid_38504 -
                                      squot32(local_tid_38504, 32) * 32) &&
                                (squot32(local_tid_38504, 32) == 0 &&
                                 ltid_in_bounds_38516)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)] =
                                        x_38513;
                                    x_38514 = x_38513;
                                }
                            }
                            if (sle32(wave_sizze_38506, skip_threads_38519)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38519 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38504, 32) == 0 ||
                          !ltid_in_bounds_38516)) {
                        // read operands
                        {
                            x_28222 = x_28221;
                            x_28221 = ((__local
                                        float *) red_arr_mem_38508)[sext_i32_i64(squot32(local_tid_38504,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38521 =
                                 slt64(srem64(sext_i32_i64(local_tid_38504),
                                              res_24068),
                                       sext_i32_i64(local_tid_38504) -
                                       sext_i32_i64(squot32(local_tid_38504,
                                                            32) * 32 - 1));
                            
                            if (inactive_38521) {
                                x_28221 = x_28222;
                            }
                            if (!inactive_38521) {
                                float res_28223 = x_28221 + x_28222;
                                
                                x_28221 = res_28223;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)] =
                                x_28221;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38504, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38508)[sext_i32_i64(local_tid_38504)] =
                            x_28222;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38512) *
                      squot64(segred_group_sizze_28217,
                              segment_sizze_nonzzero_38501) +
                      sext_i32_i64(local_tid_38504), m_24055) &&
                slt64(sext_i32_i64(local_tid_38504),
                      squot64(segred_group_sizze_28217,
                              segment_sizze_nonzzero_38501))) {
                ((__global
                  float *) mem_37267)[sext_i32_i64(virt_group_id_38512) *
                                      squot64(segred_group_sizze_28217,
                                              segment_sizze_nonzzero_38501) +
                                      sext_i32_i64(local_tid_38504)] = ((__local
                                                                         float *) red_arr_mem_38508)[(sext_i32_i64(local_tid_38504) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38501 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28217
}
__kernel void mainDetailedzisegred_small_28192(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38448_backing_aligned_0,
                                               int64_t m_24055, int64_t N_24056,
                                               int64_t res_24068,
                                               int64_t num_groups_28204,
                                               __global
                                               unsigned char *images_mem_36738,
                                               __global
                                               unsigned char *mem_37264,
                                               int64_t segment_sizze_nonzzero_38441)
{
    #define segred_group_sizze_28203 (mainDetailedzisegred_group_sizze_28186)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38448_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38448_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38443;
    int32_t local_tid_38444;
    int64_t group_sizze_38447;
    int32_t wave_sizze_38446;
    int32_t group_tid_38445;
    
    global_tid_38443 = get_global_id(0);
    local_tid_38444 = get_local_id(0);
    group_sizze_38447 = get_local_size(0);
    wave_sizze_38446 = LOCKSTEP_WIDTH;
    group_tid_38445 = get_group_id(0);
    
    int32_t phys_tid_28192;
    
    phys_tid_28192 = global_tid_38443;
    
    __local char *red_arr_mem_38448;
    
    red_arr_mem_38448 = (__local char *) red_arr_mem_38448_backing_0;
    
    int32_t phys_group_id_38450;
    
    phys_group_id_38450 = get_group_id(0);
    for (int32_t i_38451 = 0; i_38451 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055,
                                          squot64(segred_group_sizze_28203,
                                                  segment_sizze_nonzzero_38441))) -
                   phys_group_id_38450, sext_i64_i32(num_groups_28204));
         i_38451++) {
        int32_t virt_group_id_38452 = phys_group_id_38450 + i_38451 *
                sext_i64_i32(num_groups_28204);
        int64_t gtid_28183 = squot64(sext_i32_i64(local_tid_38444),
                                     segment_sizze_nonzzero_38441) +
                sext_i32_i64(virt_group_id_38452) *
                squot64(segred_group_sizze_28203, segment_sizze_nonzzero_38441);
        int64_t gtid_28191 = srem64(sext_i32_i64(local_tid_38444), res_24068);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24068) && (slt64(gtid_28183, m_24055) &&
                                        slt64(sext_i32_i64(local_tid_38444),
                                              res_24068 *
                                              squot64(segred_group_sizze_28203,
                                                      segment_sizze_nonzzero_38441)))) {
                float x_28211 = ((__global
                                  float *) images_mem_36738)[gtid_28183 *
                                                             N_24056 +
                                                             gtid_28191];
                bool res_28212;
                
                res_28212 = futrts_isnan32(x_28211);
                
                bool cond_28213 = !res_28212;
                int32_t res_28214 = btoi_bool_i32(cond_28213);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)] =
                        res_28214;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24068)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_28207;
                int32_t x_28208;
                int32_t x_38453;
                int32_t x_38454;
                bool ltid_in_bounds_38456;
                
                ltid_in_bounds_38456 = slt64(sext_i32_i64(local_tid_38444),
                                             res_24068 *
                                             squot64(segred_group_sizze_28203,
                                                     segment_sizze_nonzzero_38441));
                
                int32_t skip_threads_38457;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38456) {
                        x_28208 = ((volatile __local
                                    int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)];
                        if ((local_tid_38444 - squot32(local_tid_38444, 32) *
                             32) == 0) {
                            x_28207 = x_28208;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38457 = 1;
                    while (slt32(skip_threads_38457, 32)) {
                        if (sle32(skip_threads_38457, local_tid_38444 -
                                  squot32(local_tid_38444, 32) * 32) &&
                            ltid_in_bounds_38456) {
                            // read operands
                            {
                                x_28207 = ((volatile __local
                                            int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444) -
                                                                          sext_i32_i64(skip_threads_38457)];
                            }
                            // perform operation
                            {
                                bool inactive_38458 =
                                     slt64(srem64(sext_i32_i64(local_tid_38444),
                                                  res_24068),
                                           sext_i32_i64(local_tid_38444) -
                                           sext_i32_i64(local_tid_38444 -
                                           skip_threads_38457));
                                
                                if (inactive_38458) {
                                    x_28207 = x_28208;
                                }
                                if (!inactive_38458) {
                                    int32_t res_28209 = add32(x_28207, x_28208);
                                    
                                    x_28207 = res_28209;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38446, skip_threads_38457)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38457, local_tid_38444 -
                                  squot32(local_tid_38444, 32) * 32) &&
                            ltid_in_bounds_38456) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)] =
                                    x_28207;
                                x_28208 = x_28207;
                            }
                        }
                        if (sle32(wave_sizze_38446, skip_threads_38457)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38457 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38444 - squot32(local_tid_38444, 32) * 32) ==
                        31 && ltid_in_bounds_38456) {
                        ((volatile __local
                          int32_t *) red_arr_mem_38448)[sext_i32_i64(squot32(local_tid_38444,
                                                                             32))] =
                            x_28207;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38459;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38444, 32) == 0 &&
                            ltid_in_bounds_38456) {
                            x_38454 = ((volatile __local
                                        int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)];
                            if ((local_tid_38444 - squot32(local_tid_38444,
                                                           32) * 32) == 0) {
                                x_38453 = x_38454;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38459 = 1;
                        while (slt32(skip_threads_38459, 32)) {
                            if (sle32(skip_threads_38459, local_tid_38444 -
                                      squot32(local_tid_38444, 32) * 32) &&
                                (squot32(local_tid_38444, 32) == 0 &&
                                 ltid_in_bounds_38456)) {
                                // read operands
                                {
                                    x_38453 = ((volatile __local
                                                int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444) -
                                                                              sext_i32_i64(skip_threads_38459)];
                                }
                                // perform operation
                                {
                                    bool inactive_38460 =
                                         slt64(srem64(sext_i32_i64(local_tid_38444 *
                                                      32 + 32 - 1), res_24068),
                                               sext_i32_i64(local_tid_38444 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38444 -
                                                             skip_threads_38459) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38460) {
                                        x_38453 = x_38454;
                                    }
                                    if (!inactive_38460) {
                                        int32_t res_38455 = add32(x_38453,
                                                                  x_38454);
                                        
                                        x_38453 = res_38455;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38446, skip_threads_38459)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38459, local_tid_38444 -
                                      squot32(local_tid_38444, 32) * 32) &&
                                (squot32(local_tid_38444, 32) == 0 &&
                                 ltid_in_bounds_38456)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)] =
                                        x_38453;
                                    x_38454 = x_38453;
                                }
                            }
                            if (sle32(wave_sizze_38446, skip_threads_38459)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38459 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38444, 32) == 0 ||
                          !ltid_in_bounds_38456)) {
                        // read operands
                        {
                            x_28208 = x_28207;
                            x_28207 = ((__local
                                        int32_t *) red_arr_mem_38448)[sext_i32_i64(squot32(local_tid_38444,
                                                                                           32)) -
                                                                      1];
                        }
                        // perform operation
                        {
                            bool inactive_38461 =
                                 slt64(srem64(sext_i32_i64(local_tid_38444),
                                              res_24068),
                                       sext_i32_i64(local_tid_38444) -
                                       sext_i32_i64(squot32(local_tid_38444,
                                                            32) * 32 - 1));
                            
                            if (inactive_38461) {
                                x_28207 = x_28208;
                            }
                            if (!inactive_38461) {
                                int32_t res_28209 = add32(x_28207, x_28208);
                                
                                x_28207 = res_28209;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)] =
                                x_28207;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38444, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_38448)[sext_i32_i64(local_tid_38444)] =
                            x_28208;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38452) *
                      squot64(segred_group_sizze_28203,
                              segment_sizze_nonzzero_38441) +
                      sext_i32_i64(local_tid_38444), m_24055) &&
                slt64(sext_i32_i64(local_tid_38444),
                      squot64(segred_group_sizze_28203,
                              segment_sizze_nonzzero_38441))) {
                ((__global
                  int32_t *) mem_37264)[sext_i32_i64(virt_group_id_38452) *
                                        squot64(segred_group_sizze_28203,
                                                segment_sizze_nonzzero_38441) +
                                        sext_i32_i64(local_tid_38444)] =
                    ((__local
                      int32_t *) red_arr_mem_38448)[(sext_i32_i64(local_tid_38444) +
                                                     1) *
                                                    segment_sizze_nonzzero_38441 -
                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28203
}
__kernel void mainDetailedzisegred_small_28343(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38617_backing_aligned_0,
                                               int64_t N_24054, int64_t m_24055,
                                               int64_t res_24416,
                                               int64_t num_groups_28361,
                                               __global
                                               unsigned char *res_mem_37197,
                                               __global
                                               unsigned char *res_mem_37276,
                                               __global
                                               unsigned char *res_mem_37277,
                                               __global
                                               unsigned char *mem_37326,
                                               int64_t segment_sizze_nonzzero_38610)
{
    #define segred_group_sizze_28360 (mainDetailedzisegred_group_sizze_28337)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38617_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38617_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38612;
    int32_t local_tid_38613;
    int64_t group_sizze_38616;
    int32_t wave_sizze_38615;
    int32_t group_tid_38614;
    
    global_tid_38612 = get_global_id(0);
    local_tid_38613 = get_local_id(0);
    group_sizze_38616 = get_local_size(0);
    wave_sizze_38615 = LOCKSTEP_WIDTH;
    group_tid_38614 = get_group_id(0);
    
    int32_t phys_tid_28343;
    
    phys_tid_28343 = global_tid_38612;
    
    __local char *red_arr_mem_38617;
    
    red_arr_mem_38617 = (__local char *) red_arr_mem_38617_backing_0;
    
    int32_t phys_group_id_38619;
    
    phys_group_id_38619 = get_group_id(0);
    for (int32_t i_38620 = 0; i_38620 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055,
                                          squot64(segred_group_sizze_28360,
                                                  segment_sizze_nonzzero_38610))) -
                   phys_group_id_38619, sext_i64_i32(num_groups_28361));
         i_38620++) {
        int32_t virt_group_id_38621 = phys_group_id_38619 + i_38620 *
                sext_i64_i32(num_groups_28361);
        int64_t gtid_28334 = squot64(sext_i32_i64(local_tid_38613),
                                     segment_sizze_nonzzero_38610) +
                sext_i32_i64(virt_group_id_38621) *
                squot64(segred_group_sizze_28360, segment_sizze_nonzzero_38610);
        int64_t gtid_28342 = srem64(sext_i32_i64(local_tid_38613), res_24416);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24416) && (slt64(gtid_28334, m_24055) &&
                                        slt64(sext_i32_i64(local_tid_38613),
                                              res_24416 *
                                              squot64(segred_group_sizze_28360,
                                                      segment_sizze_nonzzero_38610)))) {
                int32_t x_28369 = ((__global
                                    int32_t *) res_mem_37276)[gtid_28334];
                int32_t index_primexp_35449 = sext_i64_i32(gtid_28342);
                bool cond_28371 = slt32(index_primexp_35449, x_28369);
                float res_28372;
                
                if (cond_28371) {
                    int32_t x_28368 = ((__global
                                        int32_t *) res_mem_37277)[gtid_28334];
                    int32_t x_28373 = add32(x_28368, index_primexp_35449);
                    int32_t x_28374 = sub32(x_28373, x_28369);
                    int32_t i_28375 = add32(1, x_28374);
                    int64_t i_28376 = sext_i32_i64(i_28375);
                    float res_28377 = ((__global
                                        float *) res_mem_37197)[gtid_28334 *
                                                                N_24054 +
                                                                i_28376];
                    
                    res_28372 = res_28377;
                } else {
                    res_28372 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)] =
                        res_28372;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24416)) {
            // perform segmented scan to imitate reduction
            {
                float x_28364;
                float x_28365;
                float x_38622;
                float x_38623;
                bool ltid_in_bounds_38625;
                
                ltid_in_bounds_38625 = slt64(sext_i32_i64(local_tid_38613),
                                             res_24416 *
                                             squot64(segred_group_sizze_28360,
                                                     segment_sizze_nonzzero_38610));
                
                int32_t skip_threads_38626;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38625) {
                        x_28365 = ((volatile __local
                                    float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)];
                        if ((local_tid_38613 - squot32(local_tid_38613, 32) *
                             32) == 0) {
                            x_28364 = x_28365;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38626 = 1;
                    while (slt32(skip_threads_38626, 32)) {
                        if (sle32(skip_threads_38626, local_tid_38613 -
                                  squot32(local_tid_38613, 32) * 32) &&
                            ltid_in_bounds_38625) {
                            // read operands
                            {
                                x_28364 = ((volatile __local
                                            float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613) -
                                                                        sext_i32_i64(skip_threads_38626)];
                            }
                            // perform operation
                            {
                                bool inactive_38627 =
                                     slt64(srem64(sext_i32_i64(local_tid_38613),
                                                  res_24416),
                                           sext_i32_i64(local_tid_38613) -
                                           sext_i32_i64(local_tid_38613 -
                                           skip_threads_38626));
                                
                                if (inactive_38627) {
                                    x_28364 = x_28365;
                                }
                                if (!inactive_38627) {
                                    float res_28366 = x_28364 + x_28365;
                                    
                                    x_28364 = res_28366;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38615, skip_threads_38626)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38626, local_tid_38613 -
                                  squot32(local_tid_38613, 32) * 32) &&
                            ltid_in_bounds_38625) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)] =
                                    x_28364;
                                x_28365 = x_28364;
                            }
                        }
                        if (sle32(wave_sizze_38615, skip_threads_38626)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38626 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38613 - squot32(local_tid_38613, 32) * 32) ==
                        31 && ltid_in_bounds_38625) {
                        ((volatile __local
                          float *) red_arr_mem_38617)[sext_i32_i64(squot32(local_tid_38613,
                                                                           32))] =
                            x_28364;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38628;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38613, 32) == 0 &&
                            ltid_in_bounds_38625) {
                            x_38623 = ((volatile __local
                                        float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)];
                            if ((local_tid_38613 - squot32(local_tid_38613,
                                                           32) * 32) == 0) {
                                x_38622 = x_38623;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38628 = 1;
                        while (slt32(skip_threads_38628, 32)) {
                            if (sle32(skip_threads_38628, local_tid_38613 -
                                      squot32(local_tid_38613, 32) * 32) &&
                                (squot32(local_tid_38613, 32) == 0 &&
                                 ltid_in_bounds_38625)) {
                                // read operands
                                {
                                    x_38622 = ((volatile __local
                                                float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613) -
                                                                            sext_i32_i64(skip_threads_38628)];
                                }
                                // perform operation
                                {
                                    bool inactive_38629 =
                                         slt64(srem64(sext_i32_i64(local_tid_38613 *
                                                      32 + 32 - 1), res_24416),
                                               sext_i32_i64(local_tid_38613 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38613 -
                                                             skip_threads_38628) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38629) {
                                        x_38622 = x_38623;
                                    }
                                    if (!inactive_38629) {
                                        float res_38624 = x_38622 + x_38623;
                                        
                                        x_38622 = res_38624;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38615, skip_threads_38628)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38628, local_tid_38613 -
                                      squot32(local_tid_38613, 32) * 32) &&
                                (squot32(local_tid_38613, 32) == 0 &&
                                 ltid_in_bounds_38625)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)] =
                                        x_38622;
                                    x_38623 = x_38622;
                                }
                            }
                            if (sle32(wave_sizze_38615, skip_threads_38628)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38628 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38613, 32) == 0 ||
                          !ltid_in_bounds_38625)) {
                        // read operands
                        {
                            x_28365 = x_28364;
                            x_28364 = ((__local
                                        float *) red_arr_mem_38617)[sext_i32_i64(squot32(local_tid_38613,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38630 =
                                 slt64(srem64(sext_i32_i64(local_tid_38613),
                                              res_24416),
                                       sext_i32_i64(local_tid_38613) -
                                       sext_i32_i64(squot32(local_tid_38613,
                                                            32) * 32 - 1));
                            
                            if (inactive_38630) {
                                x_28364 = x_28365;
                            }
                            if (!inactive_38630) {
                                float res_28366 = x_28364 + x_28365;
                                
                                x_28364 = res_28366;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)] =
                                x_28364;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38613, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38617)[sext_i32_i64(local_tid_38613)] =
                            x_28365;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38621) *
                      squot64(segred_group_sizze_28360,
                              segment_sizze_nonzzero_38610) +
                      sext_i32_i64(local_tid_38613), m_24055) &&
                slt64(sext_i32_i64(local_tid_38613),
                      squot64(segred_group_sizze_28360,
                              segment_sizze_nonzzero_38610))) {
                ((__global
                  float *) mem_37326)[sext_i32_i64(virt_group_id_38621) *
                                      squot64(segred_group_sizze_28360,
                                              segment_sizze_nonzzero_38610) +
                                      sext_i32_i64(local_tid_38613)] = ((__local
                                                                         float *) red_arr_mem_38617)[(sext_i32_i64(local_tid_38613) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38610 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28360
}
__kernel void mainDetailedzisegred_small_30001(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38839_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38837_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_38835_backing_aligned_2,
                                               int64_t m_24055,
                                               int64_t iota32_arg_24441,
                                               int64_t num_groups_30172,
                                               __global
                                               unsigned char *mem_37332,
                                               __global
                                               unsigned char *mem_37540,
                                               __global
                                               unsigned char *mem_37542,
                                               __global
                                               unsigned char *mem_37546,
                                               __global
                                               unsigned char *mem_37549,
                                               __global
                                               unsigned char *mem_37551,
                                               __global
                                               unsigned char *mem_37553,
                                               __global
                                               unsigned char *mem_37556,
                                               int64_t segment_sizze_nonzzero_38828)
{
    #define segred_group_sizze_30171 (mainDetailedzisegred_group_sizze_29995)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38839_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38839_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38837_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38837_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38835_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38835_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38830;
    int32_t local_tid_38831;
    int64_t group_sizze_38834;
    int32_t wave_sizze_38833;
    int32_t group_tid_38832;
    
    global_tid_38830 = get_global_id(0);
    local_tid_38831 = get_local_id(0);
    group_sizze_38834 = get_local_size(0);
    wave_sizze_38833 = LOCKSTEP_WIDTH;
    group_tid_38832 = get_group_id(0);
    
    int32_t phys_tid_30001;
    
    phys_tid_30001 = global_tid_38830;
    
    __local char *red_arr_mem_38835;
    
    red_arr_mem_38835 = (__local char *) red_arr_mem_38835_backing_0;
    
    __local char *red_arr_mem_38837;
    
    red_arr_mem_38837 = (__local char *) red_arr_mem_38837_backing_1;
    
    __local char *red_arr_mem_38839;
    
    red_arr_mem_38839 = (__local char *) red_arr_mem_38839_backing_2;
    
    int32_t phys_group_id_38841;
    
    phys_group_id_38841 = get_group_id(0);
    for (int32_t i_38842 = 0; i_38842 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24055,
                                          squot64(segred_group_sizze_30171,
                                                  segment_sizze_nonzzero_38828))) -
                   phys_group_id_38841, sext_i64_i32(num_groups_30172));
         i_38842++) {
        int32_t virt_group_id_38843 = phys_group_id_38841 + i_38842 *
                sext_i64_i32(num_groups_30172);
        int64_t gtid_29992 = squot64(sext_i32_i64(local_tid_38831),
                                     segment_sizze_nonzzero_38828) +
                sext_i32_i64(virt_group_id_38843) *
                squot64(segred_group_sizze_30171, segment_sizze_nonzzero_38828);
        int64_t gtid_30000 = srem64(sext_i32_i64(local_tid_38831),
                                    iota32_arg_24441);
        
        // apply map function if in bounds
        {
            if (slt64(0, iota32_arg_24441) && (slt64(gtid_29992, m_24055) &&
                                               slt64(sext_i32_i64(local_tid_38831),
                                                     iota32_arg_24441 *
                                                     squot64(segred_group_sizze_30171,
                                                             segment_sizze_nonzzero_38828)))) {
                int32_t y_30192 = ((__global int32_t *) mem_37542)[gtid_29992];
                float y_30193 = ((__global float *) mem_37540)[gtid_29992];
                float x_30197 = ((__global float *) mem_37546)[gtid_29992 *
                                                               iota32_arg_24441 +
                                                               gtid_30000];
                float x_30198 = ((__global float *) mem_37332)[gtid_30000];
                int32_t index_primexp_35469 = sext_i64_i32(gtid_30000);
                float res_30201 = x_30197 / y_30193;
                bool cond_30202 = slt32(index_primexp_35469, y_30192);
                bool res_30203;
                
                res_30203 = futrts_isnan32(res_30201);
                
                bool res_30204 = !res_30203;
                bool x_30205 = cond_30202 && res_30204;
                float res_30206 = (float) fabs(res_30201);
                bool res_30207 = x_30198 < res_30206;
                bool x_30208 = x_30205 && res_30207;
                float res_30209;
                
                if (cond_30202) {
                    res_30209 = res_30201;
                } else {
                    res_30209 = 0.0F;
                }
                // save map-out results
                {
                    ((__global float *) mem_37556)[gtid_29992 *
                                                   iota32_arg_24441 +
                                                   gtid_30000] = res_30201;
                }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)] =
                        x_30208;
                    ((__local
                      int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)] =
                        index_primexp_35469;
                    ((__local
                      float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)] =
                        res_30209;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)] = 0;
                ((__local
                  int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)] =
                    -1;
                ((__local
                  float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, iota32_arg_24441)) {
            // perform segmented scan to imitate reduction
            {
                bool x_30178;
                int32_t x_30179;
                float x_30180;
                bool x_30181;
                int32_t x_30182;
                float x_30183;
                bool x_38844;
                int32_t x_38845;
                float x_38846;
                bool x_38847;
                int32_t x_38848;
                float x_38849;
                bool ltid_in_bounds_38858;
                
                ltid_in_bounds_38858 = slt64(sext_i32_i64(local_tid_38831),
                                             iota32_arg_24441 *
                                             squot64(segred_group_sizze_30171,
                                                     segment_sizze_nonzzero_38828));
                
                int32_t skip_threads_38859;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38858) {
                        x_30181 = ((volatile __local
                                    bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)];
                        x_30182 = ((volatile __local
                                    int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)];
                        x_30183 = ((volatile __local
                                    float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)];
                        if ((local_tid_38831 - squot32(local_tid_38831, 32) *
                             32) == 0) {
                            x_30178 = x_30181;
                            x_30179 = x_30182;
                            x_30180 = x_30183;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38859 = 1;
                    while (slt32(skip_threads_38859, 32)) {
                        if (sle32(skip_threads_38859, local_tid_38831 -
                                  squot32(local_tid_38831, 32) * 32) &&
                            ltid_in_bounds_38858) {
                            // read operands
                            {
                                x_30178 = ((volatile __local
                                            bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831) -
                                                                       sext_i32_i64(skip_threads_38859)];
                                x_30179 = ((volatile __local
                                            int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831) -
                                                                          sext_i32_i64(skip_threads_38859)];
                                x_30180 = ((volatile __local
                                            float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831) -
                                                                        sext_i32_i64(skip_threads_38859)];
                            }
                            // perform operation
                            {
                                bool inactive_38860 =
                                     slt64(srem64(sext_i32_i64(local_tid_38831),
                                                  iota32_arg_24441),
                                           sext_i32_i64(local_tid_38831) -
                                           sext_i32_i64(local_tid_38831 -
                                           skip_threads_38859));
                                
                                if (inactive_38860) {
                                    x_30178 = x_30181;
                                    x_30179 = x_30182;
                                    x_30180 = x_30183;
                                }
                                if (!inactive_38860) {
                                    bool res_30184;
                                    int32_t res_30185;
                                    
                                    if (x_30178) {
                                        res_30184 = x_30178;
                                        res_30185 = x_30179;
                                    } else {
                                        bool x_30186 = x_30181 && x_30181;
                                        bool x_30187 = !x_30181;
                                        bool y_30188 = x_30178 && x_30187;
                                        bool res_30189 = x_30186 || y_30188;
                                        int32_t res_30190;
                                        
                                        if (x_30181) {
                                            res_30190 = x_30182;
                                        } else {
                                            res_30190 = x_30179;
                                        }
                                        res_30184 = res_30189;
                                        res_30185 = res_30190;
                                    }
                                    
                                    float res_30191 = x_30180 + x_30183;
                                    
                                    x_30178 = res_30184;
                                    x_30179 = res_30185;
                                    x_30180 = res_30191;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38833, skip_threads_38859)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38859, local_tid_38831 -
                                  squot32(local_tid_38831, 32) * 32) &&
                            ltid_in_bounds_38858) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)] =
                                    x_30178;
                                x_30181 = x_30178;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)] =
                                    x_30179;
                                x_30182 = x_30179;
                                ((volatile __local
                                  float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)] =
                                    x_30180;
                                x_30183 = x_30180;
                            }
                        }
                        if (sle32(wave_sizze_38833, skip_threads_38859)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38859 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38831 - squot32(local_tid_38831, 32) * 32) ==
                        31 && ltid_in_bounds_38858) {
                        ((volatile __local
                          bool *) red_arr_mem_38835)[sext_i32_i64(squot32(local_tid_38831,
                                                                          32))] =
                            x_30178;
                        ((volatile __local
                          int32_t *) red_arr_mem_38837)[sext_i32_i64(squot32(local_tid_38831,
                                                                             32))] =
                            x_30179;
                        ((volatile __local
                          float *) red_arr_mem_38839)[sext_i32_i64(squot32(local_tid_38831,
                                                                           32))] =
                            x_30180;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38861;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38831, 32) == 0 &&
                            ltid_in_bounds_38858) {
                            x_38847 = ((volatile __local
                                        bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)];
                            x_38848 = ((volatile __local
                                        int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)];
                            x_38849 = ((volatile __local
                                        float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)];
                            if ((local_tid_38831 - squot32(local_tid_38831,
                                                           32) * 32) == 0) {
                                x_38844 = x_38847;
                                x_38845 = x_38848;
                                x_38846 = x_38849;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38861 = 1;
                        while (slt32(skip_threads_38861, 32)) {
                            if (sle32(skip_threads_38861, local_tid_38831 -
                                      squot32(local_tid_38831, 32) * 32) &&
                                (squot32(local_tid_38831, 32) == 0 &&
                                 ltid_in_bounds_38858)) {
                                // read operands
                                {
                                    x_38844 = ((volatile __local
                                                bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831) -
                                                                           sext_i32_i64(skip_threads_38861)];
                                    x_38845 = ((volatile __local
                                                int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831) -
                                                                              sext_i32_i64(skip_threads_38861)];
                                    x_38846 = ((volatile __local
                                                float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831) -
                                                                            sext_i32_i64(skip_threads_38861)];
                                }
                                // perform operation
                                {
                                    bool inactive_38862 =
                                         slt64(srem64(sext_i32_i64(local_tid_38831 *
                                                      32 + 32 - 1),
                                                      iota32_arg_24441),
                                               sext_i32_i64(local_tid_38831 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38831 -
                                                             skip_threads_38861) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38862) {
                                        x_38844 = x_38847;
                                        x_38845 = x_38848;
                                        x_38846 = x_38849;
                                    }
                                    if (!inactive_38862) {
                                        bool res_38850;
                                        int32_t res_38851;
                                        
                                        if (x_38844) {
                                            res_38850 = x_38844;
                                            res_38851 = x_38845;
                                        } else {
                                            bool x_38852 = x_38847 && x_38847;
                                            bool x_38853 = !x_38847;
                                            bool y_38854 = x_38844 && x_38853;
                                            bool res_38855 = x_38852 || y_38854;
                                            int32_t res_38856;
                                            
                                            if (x_38847) {
                                                res_38856 = x_38848;
                                            } else {
                                                res_38856 = x_38845;
                                            }
                                            res_38850 = res_38855;
                                            res_38851 = res_38856;
                                        }
                                        
                                        float res_38857 = x_38846 + x_38849;
                                        
                                        x_38844 = res_38850;
                                        x_38845 = res_38851;
                                        x_38846 = res_38857;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38833, skip_threads_38861)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38861, local_tid_38831 -
                                      squot32(local_tid_38831, 32) * 32) &&
                                (squot32(local_tid_38831, 32) == 0 &&
                                 ltid_in_bounds_38858)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)] =
                                        x_38844;
                                    x_38847 = x_38844;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)] =
                                        x_38845;
                                    x_38848 = x_38845;
                                    ((volatile __local
                                      float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)] =
                                        x_38846;
                                    x_38849 = x_38846;
                                }
                            }
                            if (sle32(wave_sizze_38833, skip_threads_38861)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38861 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38831, 32) == 0 ||
                          !ltid_in_bounds_38858)) {
                        // read operands
                        {
                            x_30181 = x_30178;
                            x_30182 = x_30179;
                            x_30183 = x_30180;
                            x_30178 = ((__local
                                        bool *) red_arr_mem_38835)[sext_i32_i64(squot32(local_tid_38831,
                                                                                        32)) -
                                                                   1];
                            x_30179 = ((__local
                                        int32_t *) red_arr_mem_38837)[sext_i32_i64(squot32(local_tid_38831,
                                                                                           32)) -
                                                                      1];
                            x_30180 = ((__local
                                        float *) red_arr_mem_38839)[sext_i32_i64(squot32(local_tid_38831,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38863 =
                                 slt64(srem64(sext_i32_i64(local_tid_38831),
                                              iota32_arg_24441),
                                       sext_i32_i64(local_tid_38831) -
                                       sext_i32_i64(squot32(local_tid_38831,
                                                            32) * 32 - 1));
                            
                            if (inactive_38863) {
                                x_30178 = x_30181;
                                x_30179 = x_30182;
                                x_30180 = x_30183;
                            }
                            if (!inactive_38863) {
                                bool res_30184;
                                int32_t res_30185;
                                
                                if (x_30178) {
                                    res_30184 = x_30178;
                                    res_30185 = x_30179;
                                } else {
                                    bool x_30186 = x_30181 && x_30181;
                                    bool x_30187 = !x_30181;
                                    bool y_30188 = x_30178 && x_30187;
                                    bool res_30189 = x_30186 || y_30188;
                                    int32_t res_30190;
                                    
                                    if (x_30181) {
                                        res_30190 = x_30182;
                                    } else {
                                        res_30190 = x_30179;
                                    }
                                    res_30184 = res_30189;
                                    res_30185 = res_30190;
                                }
                                
                                float res_30191 = x_30180 + x_30183;
                                
                                x_30178 = res_30184;
                                x_30179 = res_30185;
                                x_30180 = res_30191;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)] =
                                x_30178;
                            ((__local
                              int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)] =
                                x_30179;
                            ((__local
                              float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)] =
                                x_30180;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38831, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_38835)[sext_i32_i64(local_tid_38831)] =
                            x_30181;
                        ((__local
                          int32_t *) red_arr_mem_38837)[sext_i32_i64(local_tid_38831)] =
                            x_30182;
                        ((__local
                          float *) red_arr_mem_38839)[sext_i32_i64(local_tid_38831)] =
                            x_30183;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38843) *
                      squot64(segred_group_sizze_30171,
                              segment_sizze_nonzzero_38828) +
                      sext_i32_i64(local_tid_38831), m_24055) &&
                slt64(sext_i32_i64(local_tid_38831),
                      squot64(segred_group_sizze_30171,
                              segment_sizze_nonzzero_38828))) {
                ((__global
                  bool *) mem_37549)[sext_i32_i64(virt_group_id_38843) *
                                     squot64(segred_group_sizze_30171,
                                             segment_sizze_nonzzero_38828) +
                                     sext_i32_i64(local_tid_38831)] = ((__local
                                                                        bool *) red_arr_mem_38835)[(sext_i32_i64(local_tid_38831) +
                                                                                                    1) *
                                                                                                   segment_sizze_nonzzero_38828 -
                                                                                                   1];
                ((__global
                  int32_t *) mem_37551)[sext_i32_i64(virt_group_id_38843) *
                                        squot64(segred_group_sizze_30171,
                                                segment_sizze_nonzzero_38828) +
                                        sext_i32_i64(local_tid_38831)] =
                    ((__local
                      int32_t *) red_arr_mem_38837)[(sext_i32_i64(local_tid_38831) +
                                                     1) *
                                                    segment_sizze_nonzzero_38828 -
                                                    1];
                ((__global
                  float *) mem_37553)[sext_i32_i64(virt_group_id_38843) *
                                      squot64(segred_group_sizze_30171,
                                              segment_sizze_nonzzero_38828) +
                                      sext_i32_i64(local_tid_38831)] = ((__local
                                                                         float *) red_arr_mem_38839)[(sext_i32_i64(local_tid_38831) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38828 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_30171
}
__kernel void remove_nanszisegmap_25552(__global int *global_failure,
                                        int64_t m_24040, int64_t n_24041,
                                        int64_t p_24042,
                                        int16_t nan_value_24043, __global
                                        unsigned char *images_mem_36737,
                                        __global unsigned char *mem_36742)
{
    #define segmap_group_sizze_25613 (remove_nanszisegmap_group_sizze_25556)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37852;
    int32_t local_tid_37853;
    int64_t group_sizze_37856;
    int32_t wave_sizze_37855;
    int32_t group_tid_37854;
    
    global_tid_37852 = get_global_id(0);
    local_tid_37853 = get_local_id(0);
    group_sizze_37856 = get_local_size(0);
    wave_sizze_37855 = LOCKSTEP_WIDTH;
    group_tid_37854 = get_group_id(0);
    
    int32_t phys_tid_25552;
    
    phys_tid_25552 = global_tid_37852;
    
    int64_t gtid_25549;
    
    gtid_25549 = squot64(sext_i32_i64(group_tid_37854) *
                         segmap_group_sizze_25613 +
                         sext_i32_i64(local_tid_37853), n_24041 * p_24042);
    
    int64_t gtid_25550;
    
    gtid_25550 = squot64(sext_i32_i64(group_tid_37854) *
                         segmap_group_sizze_25613 +
                         sext_i32_i64(local_tid_37853) -
                         squot64(sext_i32_i64(group_tid_37854) *
                                 segmap_group_sizze_25613 +
                                 sext_i32_i64(local_tid_37853), n_24041 *
                                 p_24042) * (n_24041 * p_24042), p_24042);
    
    int64_t gtid_25551;
    
    gtid_25551 = sext_i32_i64(group_tid_37854) * segmap_group_sizze_25613 +
        sext_i32_i64(local_tid_37853) - squot64(sext_i32_i64(group_tid_37854) *
                                                segmap_group_sizze_25613 +
                                                sext_i32_i64(local_tid_37853),
                                                n_24041 * p_24042) * (n_24041 *
                                                                      p_24042) -
        squot64(sext_i32_i64(group_tid_37854) * segmap_group_sizze_25613 +
                sext_i32_i64(local_tid_37853) -
                squot64(sext_i32_i64(group_tid_37854) *
                        segmap_group_sizze_25613 +
                        sext_i32_i64(local_tid_37853), n_24041 * p_24042) *
                (n_24041 * p_24042), p_24042) * p_24042;
    if ((slt64(gtid_25549, m_24040) && slt64(gtid_25550, n_24041)) &&
        slt64(gtid_25551, p_24042)) {
        int16_t x_25616 = ((__global int16_t *) images_mem_36737)[gtid_25549 *
                                                                  (p_24042 *
                                                                   n_24041) +
                                                                  gtid_25550 *
                                                                  p_24042 +
                                                                  gtid_25551];
        bool cond_25617 = x_25616 == nan_value_24043;
        float res_25618;
        
        if (cond_25617) {
            res_25618 = NAN;
        } else {
            float res_25619 = sitofp_i16_f32(x_25616);
            
            res_25618 = res_25619;
        }
        ((__global float *) mem_36742)[gtid_25549 * (p_24042 * n_24041) +
                                       gtid_25550 * p_24042 + gtid_25551] =
            res_25618;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25613
}
"""
# Start of values.py.

# Hacky parser/reader/writer for values written in Futhark syntax.
# Used for reading stdin when compiling standalone programs with the
# Python code generator.

import numpy as np
import string
import struct
import sys

class ReaderInput:
    def __init__(self, f):
        self.f = f
        self.lookahead_buffer = []

    def get_char(self):
        if len(self.lookahead_buffer) == 0:
            return self.f.read(1)
        else:
            c = self.lookahead_buffer[0]
            self.lookahead_buffer = self.lookahead_buffer[1:]
            return c

    def unget_char(self, c):
        self.lookahead_buffer = [c] + self.lookahead_buffer

    def get_chars(self, n):
        n1 = min(n, len(self.lookahead_buffer))
        s = b''.join(self.lookahead_buffer[:n1])
        self.lookahead_buffer = self.lookahead_buffer[n1:]
        n2 = n - n1
        if n2 > 0:
            s += self.f.read(n2)
        return s

    def peek_char(self):
        c = self.get_char()
        if c:
            self.unget_char(c)
        return c

def skip_spaces(f):
    c = f.get_char()
    while c != None:
        if c.isspace():
            c = f.get_char()
        elif c == b'-':
          # May be line comment.
          if f.peek_char() == b'-':
            # Yes, line comment. Skip to end of line.
            while (c != b'\n' and c != None):
              c = f.get_char()
          else:
            break
        else:
          break
    if c:
        f.unget_char(c)

def parse_specific_char(f, expected):
    got = f.get_char()
    if got != expected:
        f.unget_char(got)
        raise ValueError
    return True

def parse_specific_string(f, s):
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    read = []
    try:
        for c in bs:
            parse_specific_char(f, c)
            read.append(c)
        return True
    except ValueError:
        for c in read[::-1]:
            f.unget_char(c)
        raise

def optional(p, *args):
    try:
        return p(*args)
    except ValueError:
        return None

def optional_specific_string(f, s):
    c = f.peek_char()
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    if c == bs[0]:
        return parse_specific_string(f, s)
    else:
        return False

def sepBy(p, sep, *args):
    elems = []
    x = optional(p, *args)
    if x != None:
        elems += [x]
        while optional(sep, *args) != None:
            x = p(*args)
            elems += [x]
    return elems

# Assumes '0x' has already been read
def parse_hex_int(f):
    s = b''
    c = f.get_char()
    while c != None:
        if c in b'01234556789ABCDEFabcdef':
            s += c
            c = f.get_char()
        elif c == b'_':
            c = f.get_char() # skip _
        else:
            f.unget_char(c)
            break
    return str(int(s, 16)).encode('utf8') # ugh

def parse_int(f):
    s = b''
    c = f.get_char()
    if c == b'0' and f.peek_char() in b'xX':
        c = f.get_char() # skip X
        return parse_hex_int(f)
    else:
        while c != None:
            if c.isdigit():
                s += c
                c = f.get_char()
            elif c == b'_':
                c = f.get_char() # skip _
            else:
                f.unget_char(c)
                break
        if len(s) == 0:
            raise ValueError
        return s

def parse_int_signed(f):
    s = b''
    c = f.get_char()

    if c == b'-' and f.peek_char().isdigit():
      return c + parse_int(f)
    else:
      if c != b'+':
          f.unget_char(c)
      return parse_int(f)

def read_str_comma(f):
    skip_spaces(f)
    parse_specific_char(f, b',')
    return b','

def read_str_int(f, s):
    skip_spaces(f)
    x = int(parse_int_signed(f))
    optional_specific_string(f, s)
    return x

def read_str_uint(f, s):
    skip_spaces(f)
    x = int(parse_int(f))
    optional_specific_string(f, s)
    return x

def read_str_i8(f):
    return np.int8(read_str_int(f, 'i8'))
def read_str_i16(f):
    return np.int16(read_str_int(f, 'i16'))
def read_str_i32(f):
    return np.int32(read_str_int(f, 'i32'))
def read_str_i64(f):
    return np.int64(read_str_int(f, 'i64'))

def read_str_u8(f):
    return np.uint8(read_str_int(f, 'u8'))
def read_str_u16(f):
    return np.uint16(read_str_int(f, 'u16'))
def read_str_u32(f):
    return np.uint32(read_str_int(f, 'u32'))
def read_str_u64(f):
    return np.uint64(read_str_int(f, 'u64'))

def read_char(f):
    skip_spaces(f)
    parse_specific_char(f, b'\'')
    c = f.get_char()
    parse_specific_char(f, b'\'')
    return c

def read_str_hex_float(f, sign):
    int_part = parse_hex_int(f)
    parse_specific_char(f, b'.')
    frac_part = parse_hex_int(f)
    parse_specific_char(f, b'p')
    exponent = parse_int(f)

    int_val = int(int_part, 16)
    frac_val = float(int(frac_part, 16)) / (16 ** len(frac_part))
    exp_val = int(exponent)

    total_val = (int_val + frac_val) * (2.0 ** exp_val)
    if sign == b'-':
        total_val = -1 * total_val

    return float(total_val)


def read_str_decimal(f):
    skip_spaces(f)
    c = f.get_char()
    if (c == b'-'):
      sign = b'-'
    else:
      f.unget_char(c)
      sign = b''

    # Check for hexadecimal float
    c = f.get_char()
    if (c == '0' and (f.peek_char() in ['x', 'X'])):
        f.get_char()
        return read_str_hex_float(f, sign)
    else:
        f.unget_char(c)

    bef = optional(parse_int, f)
    if bef == None:
        bef = b'0'
        parse_specific_char(f, b'.')
        aft = parse_int(f)
    elif optional(parse_specific_char, f, b'.'):
        aft = parse_int(f)
    else:
        aft = b'0'
    if (optional(parse_specific_char, f, b'E') or
        optional(parse_specific_char, f, b'e')):
        expt = parse_int_signed(f)
    else:
        expt = b'0'
    return float(sign + bef + b'.' + aft + b'E' + expt)

def read_str_f32(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f32.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f32.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f32.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f32')
               return x

def read_str_f64(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f64.nan')
        return np.float64(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f64.inf')
            return np.float64(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f64.inf')
               return np.float64(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f64')
               return x

def read_str_bool(f):
    skip_spaces(f)
    if f.peek_char() == b't':
        parse_specific_string(f, 'true')
        return True
    elif f.peek_char() == b'f':
        parse_specific_string(f, 'false')
        return False
    else:
        raise ValueError

def read_str_empty_array(f, type_name, rank):
    parse_specific_string(f, 'empty')
    parse_specific_char(f, b'(')
    dims = []
    for i in range(rank):
        parse_specific_string(f, '[')
        dims += [int(parse_int(f))]
        parse_specific_string(f, ']')
    if np.product(dims) != 0:
        raise ValueError
    parse_specific_string(f, type_name)
    parse_specific_char(f, b')')

    return tuple(dims)

def read_str_array_elems(f, elem_reader, type_name, rank):
    skip_spaces(f)
    try:
        parse_specific_char(f, b'[')
    except ValueError:
        return read_str_empty_array(f, type_name, rank)
    else:
        xs = sepBy(elem_reader, read_str_comma, f)
        skip_spaces(f)
        parse_specific_char(f, b']')
        return xs

def read_str_array_helper(f, elem_reader, type_name, rank):
    def nested_row_reader(_):
        return read_str_array_helper(f, elem_reader, type_name, rank-1)
    if rank == 1:
        row_reader = elem_reader
    else:
        row_reader = nested_row_reader
    return read_str_array_elems(f, row_reader, type_name, rank)

def expected_array_dims(l, rank):
  if rank > 1:
      n = len(l)
      if n == 0:
          elem = []
      else:
          elem = l[0]
      return [n] + expected_array_dims(elem, rank-1)
  else:
      return [len(l)]

def verify_array_dims(l, dims):
    if dims[0] != len(l):
        raise ValueError
    if len(dims) > 1:
        for x in l:
            verify_array_dims(x, dims[1:])

def read_str_array(f, elem_reader, type_name, rank, bt):
    elems = read_str_array_helper(f, elem_reader, type_name, rank)
    if type(elems) == tuple:
        # Empty array
        return np.empty(elems, dtype=bt)
    else:
        dims = expected_array_dims(elems, rank)
        verify_array_dims(elems, dims)
        return np.array(elems, dtype=bt)

################################################################################

READ_BINARY_VERSION = 2

# struct format specified at
# https://docs.python.org/2/library/struct.html#format-characters

def mk_bin_scalar_reader(t):
    def bin_reader(f):
        fmt = FUTHARK_PRIMTYPES[t]['bin_format']
        size = FUTHARK_PRIMTYPES[t]['size']
        return struct.unpack('<' + fmt, f.get_chars(size))[0]
    return bin_reader

read_bin_i8 = mk_bin_scalar_reader('i8')
read_bin_i16 = mk_bin_scalar_reader('i16')
read_bin_i32 = mk_bin_scalar_reader('i32')
read_bin_i64 = mk_bin_scalar_reader('i64')

read_bin_u8 = mk_bin_scalar_reader('u8')
read_bin_u16 = mk_bin_scalar_reader('u16')
read_bin_u32 = mk_bin_scalar_reader('u32')
read_bin_u64 = mk_bin_scalar_reader('u64')

read_bin_f32 = mk_bin_scalar_reader('f32')
read_bin_f64 = mk_bin_scalar_reader('f64')

read_bin_bool = mk_bin_scalar_reader('bool')

def read_is_binary(f):
    skip_spaces(f)
    c = f.get_char()
    if c == b'b':
        bin_version = read_bin_u8(f)
        if bin_version != READ_BINARY_VERSION:
            panic(1, "binary-input: File uses version %i, but I only understand version %i.\n",
                  bin_version, READ_BINARY_VERSION)
        return True
    else:
        f.unget_char(c)
        return False

FUTHARK_PRIMTYPES = {
    'i8':  {'binname' : b"  i8",
            'size' : 1,
            'bin_reader': read_bin_i8,
            'str_reader': read_str_i8,
            'bin_format': 'b',
            'numpy_type': np.int8 },

    'i16': {'binname' : b" i16",
            'size' : 2,
            'bin_reader': read_bin_i16,
            'str_reader': read_str_i16,
            'bin_format': 'h',
            'numpy_type': np.int16 },

    'i32': {'binname' : b" i32",
            'size' : 4,
            'bin_reader': read_bin_i32,
            'str_reader': read_str_i32,
            'bin_format': 'i',
            'numpy_type': np.int32 },

    'i64': {'binname' : b" i64",
            'size' : 8,
            'bin_reader': read_bin_i64,
            'str_reader': read_str_i64,
            'bin_format': 'q',
            'numpy_type': np.int64},

    'u8':  {'binname' : b"  u8",
            'size' : 1,
            'bin_reader': read_bin_u8,
            'str_reader': read_str_u8,
            'bin_format': 'B',
            'numpy_type': np.uint8 },

    'u16': {'binname' : b" u16",
            'size' : 2,
            'bin_reader': read_bin_u16,
            'str_reader': read_str_u16,
            'bin_format': 'H',
            'numpy_type': np.uint16 },

    'u32': {'binname' : b" u32",
            'size' : 4,
            'bin_reader': read_bin_u32,
            'str_reader': read_str_u32,
            'bin_format': 'I',
            'numpy_type': np.uint32 },

    'u64': {'binname' : b" u64",
            'size' : 8,
            'bin_reader': read_bin_u64,
            'str_reader': read_str_u64,
            'bin_format': 'Q',
            'numpy_type': np.uint64 },

    'f32': {'binname' : b" f32",
            'size' : 4,
            'bin_reader': read_bin_f32,
            'str_reader': read_str_f32,
            'bin_format': 'f',
            'numpy_type': np.float32 },

    'f64': {'binname' : b" f64",
            'size' : 8,
            'bin_reader': read_bin_f64,
            'str_reader': read_str_f64,
            'bin_format': 'd',
            'numpy_type': np.float64 },

    'bool': {'binname' : b"bool",
             'size' : 1,
             'bin_reader': read_bin_bool,
             'str_reader': read_str_bool,
             'bin_format': 'b',
             'numpy_type': np.bool }
}

def read_bin_read_type(f):
    read_binname = f.get_chars(4)

    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['binname'] == read_binname:
            return k
    panic(1, "binary-input: Did not recognize the type '%s'.\n", read_binname)

def numpy_type_to_type_name(t):
    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['numpy_type'] == t:
            return k
    raise Exception('Unknown Numpy type: {}'.format(t))

def read_bin_ensure_scalar(f, expected_type):
  dims = read_bin_i8(f)

  if dims != 0:
      panic(1, "binary-input: Expected scalar (0 dimensions), but got array with %i dimensions.\n", dims)

  bin_type = read_bin_read_type(f)
  if bin_type != expected_type:
      panic(1, "binary-input: Expected scalar of type %s but got scalar of type %s.\n",
            expected_type, bin_type)

# ------------------------------------------------------------------------------
# General interface for reading Primitive Futhark Values
# ------------------------------------------------------------------------------

def read_scalar(f, ty):
    if read_is_binary(f):
        read_bin_ensure_scalar(f, ty)
        return FUTHARK_PRIMTYPES[ty]['bin_reader'](f)
    return FUTHARK_PRIMTYPES[ty]['str_reader'](f)

def read_array(f, expected_type, rank):
    if not read_is_binary(f):
        str_reader = FUTHARK_PRIMTYPES[expected_type]['str_reader']
        return read_str_array(f, str_reader, expected_type, rank,
                              FUTHARK_PRIMTYPES[expected_type]['numpy_type'])

    bin_rank = read_bin_u8(f)

    if bin_rank != rank:
        panic(1, "binary-input: Expected %i dimensions, but got array with %i dimensions.\n",
              rank, bin_rank)

    bin_type_enum = read_bin_read_type(f)
    if expected_type != bin_type_enum:
        panic(1, "binary-input: Expected %iD-array with element type '%s' but got %iD-array with element type '%s'.\n",
              rank, expected_type, bin_rank, bin_type_enum)

    shape = []
    elem_count = 1
    for i in range(rank):
        bin_size = read_bin_u64(f)
        elem_count *= bin_size
        shape.append(bin_size)

    bin_fmt = FUTHARK_PRIMTYPES[bin_type_enum]['bin_format']

    # We first read the expected number of types into a bytestring,
    # then use np.fromstring.  This is because np.fromfile does not
    # work on things that are insufficiently file-like, like a network
    # stream.
    bytes = f.get_chars(elem_count * FUTHARK_PRIMTYPES[expected_type]['size'])
    arr = np.fromstring(bytes, dtype=FUTHARK_PRIMTYPES[bin_type_enum]['numpy_type'])
    arr.shape = shape

    return arr

if sys.version_info >= (3,0):
    input_reader = ReaderInput(sys.stdin.buffer)
else:
    input_reader = ReaderInput(sys.stdin)

import re

def read_value(type_desc, reader=input_reader):
    """Read a value of the given type.  The type is a string
representation of the Futhark type."""
    m = re.match(r'((?:\[\])*)([a-z0-9]+)$', type_desc)
    if m:
        dims = int(len(m.group(1))/2)
        basetype = m.group(2)
        assert basetype in FUTHARK_PRIMTYPES, "Unknown type: {}".format(type_desc)
        if dims > 0:
            return read_array(reader, basetype, dims)
        else:
            return read_scalar(reader, basetype)
        return (dims, basetype)

def end_of_input(entry, f=input_reader):
    skip_spaces(f)
    if f.get_char() != b'':
        panic(1, "Expected EOF on stdin after reading input for \"%s\".", entry)

def write_value_text(v, out=sys.stdout):
    if type(v) == np.uint8:
        out.write("%uu8" % v)
    elif type(v) == np.uint16:
        out.write("%uu16" % v)
    elif type(v) == np.uint32:
        out.write("%uu32" % v)
    elif type(v) == np.uint64:
        out.write("%uu64" % v)
    elif type(v) == np.int8:
        out.write("%di8" % v)
    elif type(v) == np.int16:
        out.write("%di16" % v)
    elif type(v) == np.int32:
        out.write("%di32" % v)
    elif type(v) == np.int64:
        out.write("%di64" % v)
    elif type(v) in [np.bool, np.bool_]:
        if v:
            out.write("true")
        else:
            out.write("false")
    elif type(v) == np.float32:
        if np.isnan(v):
            out.write('f32.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f32.inf')
            else:
                out.write('-f32.inf')
        else:
            out.write("%.6ff32" % v)
    elif type(v) == np.float64:
        if np.isnan(v):
            out.write('f64.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f64.inf')
            else:
                out.write('-f64.inf')
        else:
            out.write("%.6ff64" % v)
    elif type(v) == np.ndarray:
        if np.product(v.shape) == 0:
            tname = numpy_type_to_type_name(v.dtype)
            out.write('empty({}{})'.format(''.join(['[{}]'.format(d)
                                                    for d in v.shape]), tname))
        else:
            first = True
            out.write('[')
            for x in v:
                if not first: out.write(', ')
                first = False
                write_value(x, out=out)
            out.write(']')
    else:
        raise Exception("Cannot print value of type {}: {}".format(type(v), v))

type_strs = { np.dtype('int8'): b'  i8',
              np.dtype('int16'): b' i16',
              np.dtype('int32'): b' i32',
              np.dtype('int64'): b' i64',
              np.dtype('uint8'): b'  u8',
              np.dtype('uint16'): b' u16',
              np.dtype('uint32'): b' u32',
              np.dtype('uint64'): b' u64',
              np.dtype('float32'): b' f32',
              np.dtype('float64'): b' f64',
              np.dtype('bool'): b'bool'}

def construct_binary_value(v):
    t = v.dtype
    shape = v.shape

    elems = 1
    for d in shape:
        elems *= d

    num_bytes = 1 + 1 + 1 + 4 + len(shape) * 8 + elems * t.itemsize
    bytes = bytearray(num_bytes)
    bytes[0] = np.int8(ord('b'))
    bytes[1] = 2
    bytes[2] = np.int8(len(shape))
    bytes[3:7] = type_strs[t]

    for i in range(len(shape)):
        bytes[7+i*8:7+(i+1)*8] = np.int64(shape[i]).tostring()

    bytes[7+len(shape)*8:] = np.ascontiguousarray(v).tostring()

    return bytes

def write_value_binary(v, out=sys.stdout):
    if sys.version_info >= (3,0):
        out = out.buffer
    out.write(construct_binary_value(v))

def write_value(v, out=sys.stdout, binary=False):
    if binary:
        return write_value_binary(v, out=out)
    else:
        return write_value_text(v, out=out)

# End of values.py.
# Start of memory.py.

import ctypes as ct

def addressOffset(x, offset, bt):
  return ct.cast(ct.addressof(x.contents)+int(offset), ct.POINTER(bt))

def allocateMem(size):
  return ct.cast((ct.c_byte * max(0,size))(), ct.POINTER(ct.c_byte))

# Copy an array if its is not-None.  This is important for treating
# Numpy arrays as flat memory, but has some overhead.
def normaliseArray(x):
  if (x.base is x) or (x.base is None):
    return x
  else:
    return x.copy()

def unwrapArray(x):
  return normaliseArray(x).ctypes.data_as(ct.POINTER(ct.c_byte))

def createArray(x, shape):
  # HACK: np.ctypeslib.as_array may fail if the shape contains zeroes,
  # for some reason.
  if any(map(lambda x: x == 0, shape)):
      return np.ndarray(shape, dtype=x._type_)
  else:
      return np.ctypeslib.as_array(x, shape=shape)

def indexArray(x, offset, bt, nptype):
  return nptype(addressOffset(x, offset*ct.sizeof(bt), bt)[0])

def writeScalarArray(x, offset, v):
  ct.memmove(ct.addressof(x.contents)+int(offset)*ct.sizeof(v), ct.addressof(v), ct.sizeof(v))

# An opaque Futhark value.
class opaque(object):
  def __init__(self, desc, *payload):
    self.data = payload
    self.desc = desc

  def __repr__(self):
    return "<opaque Futhark value of type {}>".format(self.desc)

# End of memory.py.
# Start of panic.py.

def panic(exitcode, fmt, *args):
    sys.stderr.write('%s: ' % sys.argv[0])
    sys.stderr.write(fmt % args)
    sys.stderr.write('\n')
    sys.exit(exitcode)

# End of panic.py.
# Start of tuning.py

def read_tuning_file(kvs, f):
    for line in f.read().splitlines():
        size, value = line.split('=')
        kvs[size] = int(value)
    return kvs

# End of tuning.py.
# Start of scalar.py.

import numpy as np
import math
import struct

def intlit(t, x):
  if t == np.int8:
    return np.int8(x)
  elif t == np.int16:
    return np.int16(x)
  elif t == np.int32:
    return np.int32(x)
  else:
    return np.int64(x)

def signed(x):
  if type(x) == np.uint8:
    return np.int8(x)
  elif type(x) == np.uint16:
    return np.int16(x)
  elif type(x) == np.uint32:
    return np.int32(x)
  else:
    return np.int64(x)

def unsigned(x):
  if type(x) == np.int8:
    return np.uint8(x)
  elif type(x) == np.int16:
    return np.uint16(x)
  elif type(x) == np.int32:
    return np.uint32(x)
  else:
    return np.uint64(x)

def shlN(x,y):
  return x << y

def ashrN(x,y):
  return x >> y

# Python is so slow that we just make all the unsafe operations safe,
# always.

def sdivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x // y

def sdiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return (x+y-intlit(type(x), 1)) // y

def smodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x % y

def udivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) // unsigned(y))

def udiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed((unsigned(x)+unsigned(y)-unsigned(intlit(type(x),1))) // unsigned(y))

def umodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) % unsigned(y))

def squotN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.floor_divide(np.abs(x), np.abs(y)) * np.sign(x) * np.sign(y)

def sremN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.remainder(np.abs(x), np.abs(y)) * np.sign(x)

def sminN(x,y):
  return min(x,y)

def smaxN(x,y):
  return max(x,y)

def uminN(x,y):
  return signed(min(unsigned(x),unsigned(y)))

def umaxN(x,y):
  return signed(max(unsigned(x),unsigned(y)))

def fminN(x,y):
  return min(x,y)

def fmaxN(x,y):
  return max(x,y)

def powN(x,y):
  return x ** y

def fpowN(x,y):
  return x ** y

def sleN(x,y):
  return x <= y

def sltN(x,y):
  return x < y

def uleN(x,y):
  return unsigned(x) <= unsigned(y)

def ultN(x,y):
  return unsigned(x) < unsigned(y)

def lshr8(x,y):
  return np.int8(np.uint8(x) >> np.uint8(y))

def lshr16(x,y):
  return np.int16(np.uint16(x) >> np.uint16(y))

def lshr32(x,y):
  return np.int32(np.uint32(x) >> np.uint32(y))

def lshr64(x,y):
  return np.int64(np.uint64(x) >> np.uint64(y))

def sext_T_i8(x):
  return np.int8(x)

def sext_T_i16(x):
  return np.int16(x)

def sext_T_i32(x):
  return np.int32(x)

def sext_T_i64(x):
  return np.int64(x)

def itob_T_bool(x):
  return np.bool(x)

def btoi_bool_i8(x):
  return np.int8(x)

def btoi_bool_i16(x):
  return np.int8(x)

def btoi_bool_i32(x):
  return np.int8(x)

def btoi_bool_i64(x):
  return np.int8(x)

def zext_i8_i8(x):
  return np.int8(np.uint8(x))

def zext_i8_i16(x):
  return np.int16(np.uint8(x))

def zext_i8_i32(x):
  return np.int32(np.uint8(x))

def zext_i8_i64(x):
  return np.int64(np.uint8(x))

def zext_i16_i8(x):
  return np.int8(np.uint16(x))

def zext_i16_i16(x):
  return np.int16(np.uint16(x))

def zext_i16_i32(x):
  return np.int32(np.uint16(x))

def zext_i16_i64(x):
  return np.int64(np.uint16(x))

def zext_i32_i8(x):
  return np.int8(np.uint32(x))

def zext_i32_i16(x):
  return np.int16(np.uint32(x))

def zext_i32_i32(x):
  return np.int32(np.uint32(x))

def zext_i32_i64(x):
  return np.int64(np.uint32(x))

def zext_i64_i8(x):
  return np.int8(np.uint64(x))

def zext_i64_i16(x):
  return np.int16(np.uint64(x))

def zext_i64_i32(x):
  return np.int32(np.uint64(x))

def zext_i64_i64(x):
  return np.int64(np.uint64(x))

sdiv8 = sdiv16 = sdiv32 = sdiv64 = sdivN
sdiv_up8 = sdiv1_up6 = sdiv_up32 = sdiv_up64 = sdiv_upN
sdiv_safe8 = sdiv1_safe6 = sdiv_safe32 = sdiv_safe64 = sdivN
sdiv_up_safe8 = sdiv_up1_safe6 = sdiv_up_safe32 = sdiv_up_safe64 = sdiv_upN
smod8 = smod16 = smod32 = smod64 = smodN
smod_safe8 = smod_safe16 = smod_safe32 = smod_safe64 = smodN
udiv8 = udiv16 = udiv32 = udiv64 = udivN
udiv_up8 = udiv_up16 = udiv_up32 = udiv_up64 = udivN
udiv_safe8 = udiv_safe16 = udiv_safe32 = udiv_safe64 = udiv_upN
udiv_up_safe8 = udiv_up_safe16 = udiv_up_safe32 = udiv_up_safe64 = udiv_upN
umod8 = umod16 = umod32 = umod64 = umodN
umod_safe8 = umod_safe16 = umod_safe32 = umod_safe64 = umodN
squot8 = squot16 = squot32 = squot64 = squotN
squot_safe8 = squot_safe16 = squot_safe32 = squot_safe64 = squotN
srem8 = srem16 = srem32 = srem64 = sremN
srem_safe8 = srem_safe16 = srem_safe32 = srem_safe64 = sremN

shl8 = shl16 = shl32 = shl64 = shlN
ashr8 = ashr16 = ashr32 = ashr64 = ashrN
smax8 = smax16 = smax32 = smax64 = smaxN
smin8 = smin16 = smin32 = smin64 = sminN
umax8 = umax16 = umax32 = umax64 = umaxN
umin8 = umin16 = umin32 = umin64 = uminN
pow8 = pow16 = pow32 = pow64 = powN
fpow32 = fpow64 = fpowN
fmax32 = fmax64 = fmaxN
fmin32 = fmin64 = fminN
sle8 = sle16 = sle32 = sle64 = sleN
slt8 = slt16 = slt32 = slt64 = sltN
ule8 = ule16 = ule32 = ule64 = uleN
ult8 = ult16 = ult32 = ult64 = ultN
sext_i8_i8 = sext_i16_i8 = sext_i32_i8 = sext_i64_i8 = sext_T_i8
sext_i8_i16 = sext_i16_i16 = sext_i32_i16 = sext_i64_i16 = sext_T_i16
sext_i8_i32 = sext_i16_i32 = sext_i32_i32 = sext_i64_i32 = sext_T_i32
sext_i8_i64 = sext_i16_i64 = sext_i32_i64 = sext_i64_i64 = sext_T_i64
itob_i8_bool = itob_i16_bool = itob_i32_bool = itob_i64_bool = itob_T_bool

def clz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if x < 0:
      break
    n += 1
    x <<= np.int8(1)
  return n

def ctz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if (x & 1) == 1:
      break
    n += 1
    x >>= np.int8(1)
  return n

def popc_T(x):
  c = np.int32(0)
  while x != 0:
    x &= x - np.int8(1)
    c += np.int8(1)
  return c

futhark_popc8 = futhark_popc16 = futhark_popc32 = futhark_popc64 = popc_T
futhark_clzz8 = futhark_clzz16 = futhark_clzz32 = futhark_clzz64 = clz_T
futhark_ctzz8 = futhark_ctzz16 = futhark_ctzz32 = futhark_ctzz64 = ctz_T

def ssignum(x):
  return np.sign(x)

def usignum(x):
  if x < 0:
    return ssignum(-x)
  else:
    return ssignum(x)

def sitofp_T_f32(x):
  return np.float32(x)
sitofp_i8_f32 = sitofp_i16_f32 = sitofp_i32_f32 = sitofp_i64_f32 = sitofp_T_f32

def sitofp_T_f64(x):
  return np.float64(x)
sitofp_i8_f64 = sitofp_i16_f64 = sitofp_i32_f64 = sitofp_i64_f64 = sitofp_T_f64

def uitofp_T_f32(x):
  return np.float32(unsigned(x))
uitofp_i8_f32 = uitofp_i16_f32 = uitofp_i32_f32 = uitofp_i64_f32 = uitofp_T_f32

def uitofp_T_f64(x):
  return np.float64(unsigned(x))
uitofp_i8_f64 = uitofp_i16_f64 = uitofp_i32_f64 = uitofp_i64_f64 = uitofp_T_f64

def fptosi_T_i8(x):
  return np.int8(np.trunc(x))
fptosi_f32_i8 = fptosi_f64_i8 = fptosi_T_i8

def fptosi_T_i16(x):
  return np.int16(np.trunc(x))
fptosi_f32_i16 = fptosi_f64_i16 = fptosi_T_i16

def fptosi_T_i32(x):
  return np.int32(np.trunc(x))
fptosi_f32_i32 = fptosi_f64_i32 = fptosi_T_i32

def fptosi_T_i64(x):
  return np.int64(np.trunc(x))
fptosi_f32_i64 = fptosi_f64_i64 = fptosi_T_i64

def fptoui_T_i8(x):
  return np.uint8(np.trunc(x))
fptoui_f32_i8 = fptoui_f64_i8 = fptoui_T_i8

def fptoui_T_i16(x):
  return np.uint16(np.trunc(x))
fptoui_f32_i16 = fptoui_f64_i16 = fptoui_T_i16

def fptoui_T_i32(x):
  return np.uint32(np.trunc(x))
fptoui_f32_i32 = fptoui_f64_i32 = fptoui_T_i32

def fptoui_T_i64(x):
  return np.uint64(np.trunc(x))
fptoui_f32_i64 = fptoui_f64_i64 = fptoui_T_i64

def fpconv_f32_f64(x):
  return np.float64(x)

def fpconv_f64_f32(x):
  return np.float32(x)

def futhark_mul_hi8(a, b):
  a = np.uint64(np.uint8(a))
  b = np.uint64(np.uint8(b))
  return np.int8((a*b) >> np.uint64(8))

def futhark_mul_hi16(a, b):
  a = np.uint64(np.uint16(a))
  b = np.uint64(np.uint16(b))
  return np.int16((a*b) >> np.uint64(16))

def futhark_mul_hi32(a, b):
  a = np.uint64(np.uint32(a))
  b = np.uint64(np.uint32(b))
  return np.int32((a*b) >> np.uint64(32))

# This one is done with arbitrary-precision integers.
def futhark_mul_hi64(a, b):
  a = int(np.uint64(a))
  b = int(np.uint64(b))
  return np.int64(np.uint64(a*b >> 64))

def futhark_mad_hi8(a, b, c):
  return futhark_mul_hi8(a,b) + c

def futhark_mad_hi16(a, b, c):
  return futhark_mul_hi16(a,b) + c

def futhark_mad_hi32(a, b, c):
  return futhark_mul_hi32(a,b) + c

def futhark_mad_hi64(a, b, c):
  return futhark_mul_hi64(a,b) + c

def futhark_log64(x):
  return np.float64(np.log(x))

def futhark_log2_64(x):
  return np.float64(np.log2(x))

def futhark_log10_64(x):
  return np.float64(np.log10(x))

def futhark_sqrt64(x):
  return np.sqrt(x)

def futhark_exp64(x):
  return np.exp(x)

def futhark_cos64(x):
  return np.cos(x)

def futhark_sin64(x):
  return np.sin(x)

def futhark_tan64(x):
  return np.tan(x)

def futhark_acos64(x):
  return np.arccos(x)

def futhark_asin64(x):
  return np.arcsin(x)

def futhark_atan64(x):
  return np.arctan(x)

def futhark_cosh64(x):
  return np.cosh(x)

def futhark_sinh64(x):
  return np.sinh(x)

def futhark_tanh64(x):
  return np.tanh(x)

def futhark_acosh64(x):
  return np.arccosh(x)

def futhark_asinh64(x):
  return np.arcsinh(x)

def futhark_atanh64(x):
  return np.arctanh(x)

def futhark_atan2_64(x, y):
  return np.arctan2(x, y)

def futhark_gamma64(x):
  return np.float64(math.gamma(x))

def futhark_lgamma64(x):
  return np.float64(math.lgamma(x))

def futhark_round64(x):
  return np.round(x)

def futhark_ceil64(x):
  return np.ceil(x)

def futhark_floor64(x):
  return np.floor(x)

def futhark_isnan64(x):
  return np.isnan(x)

def futhark_isinf64(x):
  return np.isinf(x)

def futhark_to_bits64(x):
  s = struct.pack('>d', x)
  return np.int64(struct.unpack('>q', s)[0])

def futhark_from_bits64(x):
  s = struct.pack('>q', x)
  return np.float64(struct.unpack('>d', s)[0])

def futhark_log32(x):
  return np.float32(np.log(x))

def futhark_log2_32(x):
  return np.float32(np.log2(x))

def futhark_log10_32(x):
  return np.float32(np.log10(x))

def futhark_sqrt32(x):
  return np.float32(np.sqrt(x))

def futhark_exp32(x):
  return np.exp(x)

def futhark_cos32(x):
  return np.cos(x)

def futhark_sin32(x):
  return np.sin(x)

def futhark_tan32(x):
  return np.tan(x)

def futhark_acos32(x):
  return np.arccos(x)

def futhark_asin32(x):
  return np.arcsin(x)

def futhark_atan32(x):
  return np.arctan(x)

def futhark_cosh32(x):
  return np.cosh(x)

def futhark_sinh32(x):
  return np.sinh(x)

def futhark_tanh32(x):
  return np.tanh(x)

def futhark_acosh32(x):
  return np.arccosh(x)

def futhark_asinh32(x):
  return np.arcsinh(x)

def futhark_atanh32(x):
  return np.arctanh(x)

def futhark_atan2_32(x, y):
  return np.arctan2(x, y)

def futhark_gamma32(x):
  return np.float32(math.gamma(x))

def futhark_lgamma32(x):
  return np.float32(math.lgamma(x))

def futhark_round32(x):
  return np.round(x)

def futhark_ceil32(x):
  return np.ceil(x)

def futhark_floor32(x):
  return np.floor(x)

def futhark_isnan32(x):
  return np.isnan(x)

def futhark_isinf32(x):
  return np.isinf(x)

def futhark_to_bits32(x):
  s = struct.pack('>f', x)
  return np.int32(struct.unpack('>l', s)[0])

def futhark_from_bits32(x):
  s = struct.pack('>l', x)
  return np.float32(struct.unpack('>f', s)[0])

def futhark_lerp32(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp64(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_mad32(a, b, c):
  return a * b + c

def futhark_mad64(a, b, c):
  return a * b + c

def futhark_fma32(a, b, c):
  return a * b + c

def futhark_fma64(a, b, c):
  return a * b + c

# End of scalar.py.
class bfastfinal:
  entry_points = {"main": (["i32", "i32", "i32", "f32", "f32", "f32", "[]i32",
                            "[][]f32"], ["[]i32", "[]f32", "[]f32"]),
                  "mainDetailed": (["i32", "i32", "i32", "f32", "f32", "f32",
                                    "[]i32", "[][]f32"], ["[]f32", "[]i32",
                                                          "[]i32", "[]f32",
                                                          "[][]f32", "[][]f32",
                                                          "[]f32", "[]i32",
                                                          "[]f32", "[]f32",
                                                          "[][]f32",
                                                          "[][]f32"]),
                  "remove_nans": (["i16", "[][][]i16"], ["[][][]f32"]),
                  "reshapeTransp": (["[][][]f32"], ["[][]f32"])}
  def __init__(self, command_queue=None, interactive=False,
               platform_pref=preferred_platform, device_pref=preferred_device,
               default_group_size=default_group_size,
               default_num_groups=default_num_groups,
               default_tile_size=default_tile_size,
               default_threshold=default_threshold, sizes=sizes):
    size_heuristics=[("NVIDIA CUDA", cl.device_type.GPU, "lockstep_width",
      lambda device: np.int32(32)), ("AMD Accelerated Parallel Processing",
                                     cl.device_type.GPU, "lockstep_width",
                                     lambda device: np.int32(32)), ("",
                                                                    cl.device_type.GPU,
                                                                    "lockstep_width",
                                                                    lambda device: np.int32(1)),
     ("", cl.device_type.GPU, "num_groups",
      lambda device: (np.int32(4) * device.get_info(getattr(cl.device_info,
                                                            "MAX_COMPUTE_UNITS")))),
     ("", cl.device_type.GPU, "group_size", lambda device: np.int32(256)), ("",
                                                                            cl.device_type.GPU,
                                                                            "tile_size",
                                                                            lambda device: np.int32(32)),
     ("", cl.device_type.GPU, "threshold", lambda device: np.int32(32768)), ("",
                                                                             cl.device_type.CPU,
                                                                             "lockstep_width",
                                                                             lambda device: np.int32(1)),
     ("", cl.device_type.CPU, "num_groups",
      lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS"))),
     ("", cl.device_type.CPU, "group_size", lambda device: np.int32(32)), ("",
                                                                           cl.device_type.CPU,
                                                                           "tile_size",
                                                                           lambda device: np.int32(4)),
     ("", cl.device_type.CPU, "threshold",
      lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))]
    self.global_failure_args_max = 2
    self.failure_msgs=["Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:180:5-58\n   #4  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:142:70-84\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:143:45-59\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:51-55\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:59-63\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:155:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:142:70-84\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:143:45-59\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:51-55\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:59-63\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:155:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:142:70-84\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:143:45-59\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:51-55\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:59-63\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:155:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:173:3-56\n   #4  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:142:70-84\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:143:45-59\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:51-55\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:59-63\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:155:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:142:70-84\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:143:45-59\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:51-55\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:59-63\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:155:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:142:70-84\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:143:45-59\n   #1  bfastfinal.fut:142:29-145:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:120:50-163:9\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:51-55\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:154:59-63\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:155:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:142:29-155:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n"]
    program = initialise_opencl_object(self,
                                       program_src=fut_opencl_src,
                                       command_queue=command_queue,
                                       interactive=interactive,
                                       platform_pref=platform_pref,
                                       device_pref=device_pref,
                                       default_group_size=default_group_size,
                                       default_num_groups=default_num_groups,
                                       default_tile_size=default_tile_size,
                                       default_threshold=default_threshold,
                                       size_heuristics=size_heuristics,
                                       required_types=["i16", "i32", "i64", "f32", "bool", "cert"],
                                       user_sizes=sizes,
                                       all_sizes={"builtin#replicate_f32.group_size_38295": {"class": "group_size",
                                                                                   "value": None},
                                        "builtin#replicate_i32.group_size_38304": {"class": "group_size",
                                                                                   "value": None},
                                        "main.group_size_37999": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30670": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30848": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30976": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31008": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31055": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31086": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31590": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31808": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31862": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31929": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32021": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32226": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32367": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32404": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32499": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32780": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32855": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33004": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33106": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33253": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33377": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33450": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34170": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34500": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34750": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34811": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34937": {"class": "group_size", "value": None},
                                        "main.segmap_num_groups_31010": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_31057": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_32228": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_32369": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_32501": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_34939": {"class": "num_groups", "value": None},
                                        "main.segred_group_size_31115": {"class": "group_size", "value": None},
                                        "main.segred_group_size_32288": {"class": "group_size", "value": None},
                                        "main.segred_group_size_32425": {"class": "group_size", "value": None},
                                        "main.segred_group_size_32555": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33121": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33142": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33209": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33293": {"class": "group_size", "value": None},
                                        "main.segred_group_size_34842": {"class": "group_size", "value": None},
                                        "main.segred_num_groups_31117": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_32290": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_32427": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_32557": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33123": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33144": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33211": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33295": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_34844": {"class": "num_groups", "value": None},
                                        "main.segscan_group_size_32864": {"class": "group_size", "value": None},
                                        "main.segscan_group_size_34550": {"class": "group_size", "value": None},
                                        "main.segscan_group_size_34896": {"class": "group_size", "value": None},
                                        "main.segscan_num_groups_32866": {"class": "num_groups", "value": None},
                                        "main.segscan_num_groups_34552": {"class": "num_groups", "value": None},
                                        "main.segscan_num_groups_34898": {"class": "num_groups", "value": None},
                                        "main.suff_intra_par_10": {"class": "threshold ()", "value": 32},
                                        "main.suff_intra_par_14": {"class": "threshold (!main.suff_intra_par_10)",
                                                                   "value": 32},
                                        "main.suff_intra_par_25": {"class": "threshold ()", "value": 32},
                                        "main.suff_intra_par_30": {"class": "threshold (!main.suff_outer_par_29)",
                                                                   "value": 32},
                                        "main.suff_intra_par_35": {"class": "threshold (!main.suff_outer_par_34)",
                                                                   "value": 32},
                                        "main.suff_intra_par_37": {"class": "threshold (!main.suff_outer_par_34 !main.suff_intra_par_35)",
                                                                   "value": 32},
                                        "main.suff_outer_par_17": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_18": {"class": "threshold (!main.suff_outer_par_17)",
                                                                   "value": None},
                                        "main.suff_outer_par_19": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_20": {"class": "threshold (!main.suff_outer_par_19)",
                                                                   "value": None},
                                        "main.suff_outer_par_21": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_22": {"class": "threshold (!main.suff_outer_par_21)",
                                                                   "value": None},
                                        "main.suff_outer_par_29": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_32": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_34": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_6": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_7": {"class": "threshold (!main.suff_outer_par_6)",
                                                                  "value": None},
                                        "main.suff_outer_par_8": {"class": "threshold (!main.suff_outer_par_7 !main.suff_outer_par_6)",
                                                                  "value": None},
                                        "main.tile_size_35547": {"class": "tile_size", "value": None},
                                        "main.tile_size_35869": {"class": "tile_size", "value": None},
                                        "mainDetailed.group_size_38021": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_25714": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_25892": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26020": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26052": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26099": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26130": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26634": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26852": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26906": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26973": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27065": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27270": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27411": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27448": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27543": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27824": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27899": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28048": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28150": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28297": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28421": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28496": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29262": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29314": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29644": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29894": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29952": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29969": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_30090": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_num_groups_26054": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_26101": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_27272": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_27413": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_27545": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_28498": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_30092": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_group_size_26159": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_27332": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_27469": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_27599": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28165": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28186": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28253": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28337": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_29995": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_num_groups_26161": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_27334": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_27471": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_27601": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28167": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28188": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28255": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28339": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_29997": {"class": "num_groups", "value": None},
                                        "mainDetailed.segscan_group_size_27908": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_group_size_29694": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_group_size_30049": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_27910": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_29696": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_30051": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.suff_intra_par_10": {"class": "threshold ()", "value": 32},
                                        "mainDetailed.suff_intra_par_14": {"class": "threshold (!mainDetailed.suff_intra_par_10)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_25": {"class": "threshold ()", "value": 32},
                                        "mainDetailed.suff_intra_par_30": {"class": "threshold (!mainDetailed.suff_outer_par_29)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_35": {"class": "threshold (!mainDetailed.suff_outer_par_34)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_38": {"class": "threshold (!mainDetailed.suff_outer_par_34 !mainDetailed.suff_intra_par_35)",
                                                                           "value": 32},
                                        "mainDetailed.suff_outer_par_17": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_18": {"class": "threshold (!mainDetailed.suff_outer_par_17)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_19": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_20": {"class": "threshold (!mainDetailed.suff_outer_par_19)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_21": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_22": {"class": "threshold (!mainDetailed.suff_outer_par_21)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_29": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_32": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_34": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_6": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_7": {"class": "threshold (!mainDetailed.suff_outer_par_6)",
                                                                          "value": None},
                                        "mainDetailed.suff_outer_par_8": {"class": "threshold (!mainDetailed.suff_outer_par_7 !mainDetailed.suff_outer_par_6)",
                                                                          "value": None},
                                        "mainDetailed.tile_size_35547": {"class": "tile_size", "value": None},
                                        "mainDetailed.tile_size_35869": {"class": "tile_size", "value": None},
                                        "remove_nans.segmap_group_size_25556": {"class": "group_size", "value": None}})
    self.builtinzhreplicate_f32zireplicate_38292_var = program.builtinzhreplicate_f32zireplicate_38292
    self.builtinzhreplicate_i32zireplicate_38301_var = program.builtinzhreplicate_i32zireplicate_38301
    self.gpu_map_transpose_f32_var = program.gpu_map_transpose_f32
    self.gpu_map_transpose_f32_low_height_var = program.gpu_map_transpose_f32_low_height
    self.gpu_map_transpose_f32_low_width_var = program.gpu_map_transpose_f32_low_width
    self.gpu_map_transpose_f32_small_var = program.gpu_map_transpose_f32_small
    self.mainzicopy_37996_var = program.mainzicopy_37996
    self.mainziscan_stage1_32870_var = program.mainziscan_stage1_32870
    self.mainziscan_stage1_34556_var = program.mainziscan_stage1_34556
    self.mainziscan_stage1_34902_var = program.mainziscan_stage1_34902
    self.mainziscan_stage2_32870_var = program.mainziscan_stage2_32870
    self.mainziscan_stage2_34556_var = program.mainziscan_stage2_34556
    self.mainziscan_stage2_34902_var = program.mainziscan_stage2_34902
    self.mainziscan_stage3_32870_var = program.mainziscan_stage3_32870
    self.mainziscan_stage3_34556_var = program.mainziscan_stage3_34556
    self.mainziscan_stage3_34902_var = program.mainziscan_stage3_34902
    self.mainzisegmap_30667_var = program.mainzisegmap_30667
    self.mainzisegmap_30845_var = program.mainzisegmap_30845
    self.mainzisegmap_30973_var = program.mainzisegmap_30973
    self.mainzisegmap_31006_var = program.mainzisegmap_31006
    self.mainzisegmap_31052_var = program.mainzisegmap_31052
    self.mainzisegmap_31082_var = program.mainzisegmap_31082
    self.mainzisegmap_31586_var = program.mainzisegmap_31586
    self.mainzisegmap_31805_var = program.mainzisegmap_31805
    self.mainzisegmap_31859_var = program.mainzisegmap_31859
    self.mainzisegmap_31927_var = program.mainzisegmap_31927
    self.mainzisegmap_32018_var = program.mainzisegmap_32018
    self.mainzisegmap_32224_var = program.mainzisegmap_32224
    self.mainzisegmap_32365_var = program.mainzisegmap_32365
    self.mainzisegmap_32401_var = program.mainzisegmap_32401
    self.mainzisegmap_32497_var = program.mainzisegmap_32497
    self.mainzisegmap_32777_var = program.mainzisegmap_32777
    self.mainzisegmap_32853_var = program.mainzisegmap_32853
    self.mainzisegmap_33104_var = program.mainzisegmap_33104
    self.mainzisegmap_33375_var = program.mainzisegmap_33375
    self.mainzisegmap_33448_var = program.mainzisegmap_33448
    self.mainzisegmap_34168_var = program.mainzisegmap_34168
    self.mainzisegmap_34497_var = program.mainzisegmap_34497
    self.mainzisegmap_34747_var = program.mainzisegmap_34747
    self.mainzisegmap_34809_var = program.mainzisegmap_34809
    self.mainzisegmap_34935_var = program.mainzisegmap_34935
    self.mainzisegmap_intragroup_31342_var = program.mainzisegmap_intragroup_31342
    self.mainzisegmap_intragroup_31686_var = program.mainzisegmap_intragroup_31686
    self.mainzisegmap_intragroup_32660_var = program.mainzisegmap_intragroup_32660
    self.mainzisegmap_intragroup_33000_var = program.mainzisegmap_intragroup_33000
    self.mainzisegmap_intragroup_33446_var = program.mainzisegmap_intragroup_33446
    self.mainzisegmap_intragroup_34232_var = program.mainzisegmap_intragroup_34232
    self.mainzisegmap_intragroup_35553_var = program.mainzisegmap_intragroup_35553
    self.mainzisegmap_intragroup_35875_var = program.mainzisegmap_intragroup_35875
    self.mainzisegmap_intragroup_36180_var = program.mainzisegmap_intragroup_36180
    self.mainzisegmap_intragroup_36412_var = program.mainzisegmap_intragroup_36412
    self.mainzisegred_large_31121_var = program.mainzisegred_large_31121
    self.mainzisegred_large_32294_var = program.mainzisegred_large_32294
    self.mainzisegred_large_32431_var = program.mainzisegred_large_32431
    self.mainzisegred_large_32561_var = program.mainzisegred_large_32561
    self.mainzisegred_large_33127_var = program.mainzisegred_large_33127
    self.mainzisegred_large_33148_var = program.mainzisegred_large_33148
    self.mainzisegred_large_33299_var = program.mainzisegred_large_33299
    self.mainzisegred_large_34848_var = program.mainzisegred_large_34848
    self.mainzisegred_nonseg_33217_var = program.mainzisegred_nonseg_33217
    self.mainzisegred_small_31121_var = program.mainzisegred_small_31121
    self.mainzisegred_small_32294_var = program.mainzisegred_small_32294
    self.mainzisegred_small_32431_var = program.mainzisegred_small_32431
    self.mainzisegred_small_32561_var = program.mainzisegred_small_32561
    self.mainzisegred_small_33127_var = program.mainzisegred_small_33127
    self.mainzisegred_small_33148_var = program.mainzisegred_small_33148
    self.mainzisegred_small_33299_var = program.mainzisegred_small_33299
    self.mainzisegred_small_34848_var = program.mainzisegred_small_34848
    self.mainDetailedzicopy_38018_var = program.mainDetailedzicopy_38018
    self.mainDetailedziscan_stage1_27914_var = program.mainDetailedziscan_stage1_27914
    self.mainDetailedziscan_stage1_29700_var = program.mainDetailedziscan_stage1_29700
    self.mainDetailedziscan_stage1_30055_var = program.mainDetailedziscan_stage1_30055
    self.mainDetailedziscan_stage2_27914_var = program.mainDetailedziscan_stage2_27914
    self.mainDetailedziscan_stage2_29700_var = program.mainDetailedziscan_stage2_29700
    self.mainDetailedziscan_stage2_30055_var = program.mainDetailedziscan_stage2_30055
    self.mainDetailedziscan_stage3_27914_var = program.mainDetailedziscan_stage3_27914
    self.mainDetailedziscan_stage3_29700_var = program.mainDetailedziscan_stage3_29700
    self.mainDetailedziscan_stage3_30055_var = program.mainDetailedziscan_stage3_30055
    self.mainDetailedzisegmap_25711_var = program.mainDetailedzisegmap_25711
    self.mainDetailedzisegmap_25889_var = program.mainDetailedzisegmap_25889
    self.mainDetailedzisegmap_26017_var = program.mainDetailedzisegmap_26017
    self.mainDetailedzisegmap_26050_var = program.mainDetailedzisegmap_26050
    self.mainDetailedzisegmap_26096_var = program.mainDetailedzisegmap_26096
    self.mainDetailedzisegmap_26126_var = program.mainDetailedzisegmap_26126
    self.mainDetailedzisegmap_26630_var = program.mainDetailedzisegmap_26630
    self.mainDetailedzisegmap_26849_var = program.mainDetailedzisegmap_26849
    self.mainDetailedzisegmap_26903_var = program.mainDetailedzisegmap_26903
    self.mainDetailedzisegmap_26971_var = program.mainDetailedzisegmap_26971
    self.mainDetailedzisegmap_27062_var = program.mainDetailedzisegmap_27062
    self.mainDetailedzisegmap_27268_var = program.mainDetailedzisegmap_27268
    self.mainDetailedzisegmap_27409_var = program.mainDetailedzisegmap_27409
    self.mainDetailedzisegmap_27445_var = program.mainDetailedzisegmap_27445
    self.mainDetailedzisegmap_27541_var = program.mainDetailedzisegmap_27541
    self.mainDetailedzisegmap_27821_var = program.mainDetailedzisegmap_27821
    self.mainDetailedzisegmap_27897_var = program.mainDetailedzisegmap_27897
    self.mainDetailedzisegmap_28148_var = program.mainDetailedzisegmap_28148
    self.mainDetailedzisegmap_28419_var = program.mainDetailedzisegmap_28419
    self.mainDetailedzisegmap_28494_var = program.mainDetailedzisegmap_28494
    self.mainDetailedzisegmap_29259_var = program.mainDetailedzisegmap_29259
    self.mainDetailedzisegmap_29312_var = program.mainDetailedzisegmap_29312
    self.mainDetailedzisegmap_29641_var = program.mainDetailedzisegmap_29641
    self.mainDetailedzisegmap_29891_var = program.mainDetailedzisegmap_29891
    self.mainDetailedzisegmap_29950_var = program.mainDetailedzisegmap_29950
    self.mainDetailedzisegmap_29967_var = program.mainDetailedzisegmap_29967
    self.mainDetailedzisegmap_30088_var = program.mainDetailedzisegmap_30088
    self.mainDetailedzisegmap_intragroup_26386_var = program.mainDetailedzisegmap_intragroup_26386
    self.mainDetailedzisegmap_intragroup_26730_var = program.mainDetailedzisegmap_intragroup_26730
    self.mainDetailedzisegmap_intragroup_27704_var = program.mainDetailedzisegmap_intragroup_27704
    self.mainDetailedzisegmap_intragroup_28044_var = program.mainDetailedzisegmap_intragroup_28044
    self.mainDetailedzisegmap_intragroup_28492_var = program.mainDetailedzisegmap_intragroup_28492
    self.mainDetailedzisegmap_intragroup_29376_var = program.mainDetailedzisegmap_intragroup_29376
    self.mainDetailedzisegmap_intragroup_35553_var = program.mainDetailedzisegmap_intragroup_35553
    self.mainDetailedzisegmap_intragroup_35875_var = program.mainDetailedzisegmap_intragroup_35875
    self.mainDetailedzisegmap_intragroup_36180_var = program.mainDetailedzisegmap_intragroup_36180
    self.mainDetailedzisegmap_intragroup_36412_var = program.mainDetailedzisegmap_intragroup_36412
    self.mainDetailedzisegred_large_26165_var = program.mainDetailedzisegred_large_26165
    self.mainDetailedzisegred_large_27338_var = program.mainDetailedzisegred_large_27338
    self.mainDetailedzisegred_large_27475_var = program.mainDetailedzisegred_large_27475
    self.mainDetailedzisegred_large_27605_var = program.mainDetailedzisegred_large_27605
    self.mainDetailedzisegred_large_28171_var = program.mainDetailedzisegred_large_28171
    self.mainDetailedzisegred_large_28192_var = program.mainDetailedzisegred_large_28192
    self.mainDetailedzisegred_large_28343_var = program.mainDetailedzisegred_large_28343
    self.mainDetailedzisegred_large_30001_var = program.mainDetailedzisegred_large_30001
    self.mainDetailedzisegred_nonseg_28261_var = program.mainDetailedzisegred_nonseg_28261
    self.mainDetailedzisegred_small_26165_var = program.mainDetailedzisegred_small_26165
    self.mainDetailedzisegred_small_27338_var = program.mainDetailedzisegred_small_27338
    self.mainDetailedzisegred_small_27475_var = program.mainDetailedzisegred_small_27475
    self.mainDetailedzisegred_small_27605_var = program.mainDetailedzisegred_small_27605
    self.mainDetailedzisegred_small_28171_var = program.mainDetailedzisegred_small_28171
    self.mainDetailedzisegred_small_28192_var = program.mainDetailedzisegred_small_28192
    self.mainDetailedzisegred_small_28343_var = program.mainDetailedzisegred_small_28343
    self.mainDetailedzisegred_small_30001_var = program.mainDetailedzisegred_small_30001
    self.remove_nanszisegmap_25552_var = program.remove_nanszisegmap_25552
    self.constants = {}
    mainzicounter_mem_37930 = np.zeros(10240, dtype=np.int32)
    static_mem_39085 = opencl_alloc(self, 40960, "static_mem_39085")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39085,
                      normaliseArray(mainzicounter_mem_37930),
                      is_blocking=synchronous)
    self.mainzicounter_mem_37930 = static_mem_39085
    mainzicounter_mem_38084 = np.zeros(10240, dtype=np.int32)
    static_mem_39088 = opencl_alloc(self, 40960, "static_mem_39088")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39088,
                      normaliseArray(mainzicounter_mem_38084),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38084 = static_mem_39088
    mainzicounter_mem_38165 = np.zeros(10240, dtype=np.int32)
    static_mem_39089 = opencl_alloc(self, 40960, "static_mem_39089")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39089,
                      normaliseArray(mainzicounter_mem_38165),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38165 = static_mem_39089
    mainzicounter_mem_38253 = np.zeros(10240, dtype=np.int32)
    static_mem_39090 = opencl_alloc(self, 40960, "static_mem_39090")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39090,
                      normaliseArray(mainzicounter_mem_38253),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38253 = static_mem_39090
    mainzicounter_mem_38447 = np.zeros(10240, dtype=np.int32)
    static_mem_39091 = opencl_alloc(self, 40960, "static_mem_39091")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39091,
                      normaliseArray(mainzicounter_mem_38447),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38447 = static_mem_39091
    mainzicounter_mem_38507 = np.zeros(10240, dtype=np.int32)
    static_mem_39092 = opencl_alloc(self, 40960, "static_mem_39092")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39092,
                      normaliseArray(mainzicounter_mem_38507),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38507 = static_mem_39092
    mainzicounter_mem_38547 = np.array([np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0)], dtype=np.int32)
    static_mem_39093 = opencl_alloc(self, 40, "static_mem_39093")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_39093,
                      normaliseArray(mainzicounter_mem_38547),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38547 = static_mem_39093
    mainzicounter_mem_38616 = np.zeros(10240, dtype=np.int32)
    static_mem_39095 = opencl_alloc(self, 40960, "static_mem_39095")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39095,
                      normaliseArray(mainzicounter_mem_38616),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38616 = static_mem_39095
    mainzicounter_mem_38843 = np.zeros(10240, dtype=np.int32)
    static_mem_39097 = opencl_alloc(self, 40960, "static_mem_39097")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39097,
                      normaliseArray(mainzicounter_mem_38843),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38843 = static_mem_39097
    mainDetailedzicounter_mem_37952 = np.zeros(10240, dtype=np.int32)
    static_mem_39100 = opencl_alloc(self, 40960, "static_mem_39100")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39100,
                      normaliseArray(mainDetailedzicounter_mem_37952),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_37952 = static_mem_39100
    mainDetailedzicounter_mem_38106 = np.zeros(10240, dtype=np.int32)
    static_mem_39103 = opencl_alloc(self, 40960, "static_mem_39103")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39103,
                      normaliseArray(mainDetailedzicounter_mem_38106),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38106 = static_mem_39103
    mainDetailedzicounter_mem_38187 = np.zeros(10240, dtype=np.int32)
    static_mem_39104 = opencl_alloc(self, 40960, "static_mem_39104")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39104,
                      normaliseArray(mainDetailedzicounter_mem_38187),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38187 = static_mem_39104
    mainDetailedzicounter_mem_38275 = np.zeros(10240, dtype=np.int32)
    static_mem_39105 = opencl_alloc(self, 40960, "static_mem_39105")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39105,
                      normaliseArray(mainDetailedzicounter_mem_38275),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38275 = static_mem_39105
    mainDetailedzicounter_mem_38469 = np.zeros(10240, dtype=np.int32)
    static_mem_39106 = opencl_alloc(self, 40960, "static_mem_39106")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39106,
                      normaliseArray(mainDetailedzicounter_mem_38469),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38469 = static_mem_39106
    mainDetailedzicounter_mem_38529 = np.zeros(10240, dtype=np.int32)
    static_mem_39107 = opencl_alloc(self, 40960, "static_mem_39107")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39107,
                      normaliseArray(mainDetailedzicounter_mem_38529),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38529 = static_mem_39107
    mainDetailedzicounter_mem_38569 = np.array([np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0)],
                                               dtype=np.int32)
    static_mem_39108 = opencl_alloc(self, 40, "static_mem_39108")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_39108,
                      normaliseArray(mainDetailedzicounter_mem_38569),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38569 = static_mem_39108
    mainDetailedzicounter_mem_38638 = np.zeros(10240, dtype=np.int32)
    static_mem_39110 = opencl_alloc(self, 40960, "static_mem_39110")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39110,
                      normaliseArray(mainDetailedzicounter_mem_38638),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38638 = static_mem_39110
    mainDetailedzicounter_mem_38875 = np.zeros(10240, dtype=np.int32)
    static_mem_39112 = opencl_alloc(self, 40960, "static_mem_39112")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39112,
                      normaliseArray(mainDetailedzicounter_mem_38875),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38875 = static_mem_39112
  def futhark_builtinzhgpu_map_transpose_f32(self, destmem_0, destoffset_1,
                                             srcmem_2, srcoffset_3,
                                             num_arrays_4, x_elems_5,
                                             y_elems_6):
    if ((num_arrays_4 == np.int32(0)) or ((x_elems_5 == np.int32(0)) or (y_elems_6 == np.int32(0)))):
      pass
    else:
      muly_8 = squot32(np.int32(16), x_elems_5)
      mulx_7 = squot32(np.int32(16), y_elems_6)
      if ((num_arrays_4 == np.int32(1)) and ((x_elems_5 == np.int32(1)) or (y_elems_6 == np.int32(1)))):
        if (sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4))) != 0):
          cl.enqueue_copy(self.queue, destmem_0, srcmem_2,
                          dest_offset=np.long(sext_i32_i64(destoffset_1)),
                          src_offset=np.long(sext_i32_i64(srcoffset_3)),
                          byte_count=np.long(sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4)))))
        if synchronous:
          sync(self)
      else:
        if (sle32(x_elems_5, np.int32(8)) and slt32(np.int32(16), y_elems_6)):
          if ((((1 * (np.long(sdiv_up32(x_elems_5,
                                        np.int32(16))) * np.long(np.int32(16)))) * (np.long(sdiv_up32(sdiv_up32(y_elems_6,
                                                                                                                muly_8),
                                                                                                      np.int32(16))) * np.long(np.int32(16)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
            self.gpu_map_transpose_f32_low_width_var.set_args(cl.LocalMemory(np.long(np.int64(1088))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.gpu_map_transpose_f32_low_width_var,
                                       ((np.long(sdiv_up32(x_elems_5,
                                                           np.int32(16))) * np.long(np.int32(16))),
                                        (np.long(sdiv_up32(sdiv_up32(y_elems_6,
                                                                     muly_8),
                                                           np.int32(16))) * np.long(np.int32(16))),
                                        (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                       (np.long(np.int32(16)),
                                        np.long(np.int32(16)),
                                        np.long(np.int32(1))))
            if synchronous:
              sync(self)
        else:
          if (sle32(y_elems_6, np.int32(8)) and slt32(np.int32(16), x_elems_5)):
            if ((((1 * (np.long(sdiv_up32(sdiv_up32(x_elems_5, mulx_7),
                                          np.int32(16))) * np.long(np.int32(16)))) * (np.long(sdiv_up32(y_elems_6,
                                                                                                        np.int32(16))) * np.long(np.int32(16)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
              self.gpu_map_transpose_f32_low_height_var.set_args(cl.LocalMemory(np.long(np.int64(1088))),
                                                                 np.int32(destoffset_1),
                                                                 np.int32(srcoffset_3),
                                                                 np.int32(num_arrays_4),
                                                                 np.int32(x_elems_5),
                                                                 np.int32(y_elems_6),
                                                                 np.int32(mulx_7),
                                                                 np.int32(muly_8),
                                                                 destmem_0,
                                                                 srcmem_2)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.gpu_map_transpose_f32_low_height_var,
                                         ((np.long(sdiv_up32(sdiv_up32(x_elems_5,
                                                                       mulx_7),
                                                             np.int32(16))) * np.long(np.int32(16))),
                                          (np.long(sdiv_up32(y_elems_6,
                                                             np.int32(16))) * np.long(np.int32(16))),
                                          (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                         (np.long(np.int32(16)),
                                          np.long(np.int32(16)),
                                          np.long(np.int32(1))))
              if synchronous:
                sync(self)
          else:
            if (sle32(x_elems_5, np.int32(8)) and sle32(y_elems_6,
                                                        np.int32(8))):
              if ((1 * (np.long(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                          np.int32(256))) * np.long(np.int32(256)))) != 0):
                self.gpu_map_transpose_f32_small_var.set_args(cl.LocalMemory(np.long(np.int64(1))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_small_var,
                                           ((np.long(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                                               np.int32(256))) * np.long(np.int32(256))),),
                                           (np.long(np.int32(256)),))
                if synchronous:
                  sync(self)
            else:
              if ((((1 * (np.long(sdiv_up32(x_elems_5,
                                            np.int32(32))) * np.long(np.int32(32)))) * (np.long(sdiv_up32(y_elems_6,
                                                                                                          np.int32(32))) * np.long(np.int32(8)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
                self.gpu_map_transpose_f32_var.set_args(cl.LocalMemory(np.long(np.int64(4224))),
                                                        np.int32(destoffset_1),
                                                        np.int32(srcoffset_3),
                                                        np.int32(num_arrays_4),
                                                        np.int32(x_elems_5),
                                                        np.int32(y_elems_6),
                                                        np.int32(mulx_7),
                                                        np.int32(muly_8),
                                                        destmem_0, srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_var,
                                           ((np.long(sdiv_up32(x_elems_5,
                                                               np.int32(32))) * np.long(np.int32(32))),
                                            (np.long(sdiv_up32(y_elems_6,
                                                               np.int32(32))) * np.long(np.int32(8))),
                                            (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                           (np.long(np.int32(32)),
                                            np.long(np.int32(8)),
                                            np.long(np.int32(1))))
                if synchronous:
                  sync(self)
    return ()
  def futhark_builtinzhreplicate_f32(self, mem_38288, num_elems_38289,
                                     val_38290):
    group_sizze_38295 = self.sizes["builtin#replicate_f32.group_size_38295"]
    num_groups_38296 = sdiv_up64(num_elems_38289, group_sizze_38295)
    if ((1 * (np.long(num_groups_38296) * np.long(group_sizze_38295))) != 0):
      self.builtinzhreplicate_f32zireplicate_38292_var.set_args(mem_38288,
                                                                np.int32(num_elems_38289),
                                                                np.float32(val_38290))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_f32zireplicate_38292_var,
                                 ((np.long(num_groups_38296) * np.long(group_sizze_38295)),),
                                 (np.long(group_sizze_38295),))
      if synchronous:
        sync(self)
    return ()
  def futhark_builtinzhreplicate_i32(self, mem_38297, num_elems_38298,
                                     val_38299):
    group_sizze_38304 = self.sizes["builtin#replicate_i32.group_size_38304"]
    num_groups_38305 = sdiv_up64(num_elems_38298, group_sizze_38304)
    if ((1 * (np.long(num_groups_38305) * np.long(group_sizze_38304))) != 0):
      self.builtinzhreplicate_i32zireplicate_38301_var.set_args(mem_38297,
                                                                np.int32(num_elems_38298),
                                                                np.int32(val_38299))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_i32zireplicate_38301_var,
                                 ((np.long(num_groups_38305) * np.long(group_sizze_38304)),),
                                 (np.long(group_sizze_38304),))
      if synchronous:
        sync(self)
    return ()
  def futhark_main(self, mappingindices_mem_36737, images_mem_36738, N_24796,
                   m_24797, N_24798, trend_24799, k_24800, n_24801, freq_24802,
                   hfrac_24803, lam_24804):
    dim_match_24807 = (N_24796 == N_24798)
    empty_or_match_cert_24808 = True
    assert dim_match_24807, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:175:1-181:32\n" % ("function arguments of wrong shape",))
    res_24810 = sext_i32_i64(n_24801)
    x_24811 = (np.int32(2) * k_24800)
    k2p2_24812 = (np.int32(2) + x_24811)
    cond_24813 = slt32(np.int32(0), trend_24799)
    if cond_24813:
      k2p2zq_24814 = k2p2_24812
    else:
      res_24815 = (k2p2_24812 - np.int32(1))
      k2p2zq_24814 = res_24815
    res_24816 = sext_i32_i64(k2p2zq_24814)
    binop_x_36741 = (N_24796 * res_24816)
    bytes_36740 = (np.int64(4) * binop_x_36741)
    if cond_24813:
      bounds_invalid_upwards_24818 = slt64(res_24816, np.int64(0))
      valid_24819 = not(bounds_invalid_upwards_24818)
      range_valid_c_24820 = True
      assert valid_24819, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:30:17-66\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24816,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_30740 = self.sizes["main.segmap_group_size_30670"]
      segmap_usable_groups_30741 = sdiv_up64(binop_x_36741,
                                             segmap_group_sizze_30740)
      mem_36742 = opencl_alloc(self, bytes_36740, "mem_36742")
      if ((1 * (np.long(segmap_usable_groups_30741) * np.long(segmap_group_sizze_30740))) != 0):
        self.mainzisegmap_30667_var.set_args(self.global_failure,
                                             np.int64(N_24796),
                                             np.float32(freq_24802),
                                             np.int64(res_24816),
                                             mappingindices_mem_36737,
                                             mem_36742)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30667_var,
                                   ((np.long(segmap_usable_groups_30741) * np.long(segmap_group_sizze_30740)),),
                                   (np.long(segmap_group_sizze_30740),))
        if synchronous:
          sync(self)
      binop_p_mem_36747 = mem_36742
    else:
      bounds_invalid_upwards_24844 = slt64(res_24816, np.int64(0))
      valid_24845 = not(bounds_invalid_upwards_24844)
      range_valid_c_24846 = True
      assert valid_24845, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:49:10-22\n   #3  bfastfinal.fut:31:17-64\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24816,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_30914 = self.sizes["main.segmap_group_size_30848"]
      segmap_usable_groups_30915 = sdiv_up64(binop_x_36741,
                                             segmap_group_sizze_30914)
      mem_36746 = opencl_alloc(self, bytes_36740, "mem_36746")
      if ((1 * (np.long(segmap_usable_groups_30915) * np.long(segmap_group_sizze_30914))) != 0):
        self.mainzisegmap_30845_var.set_args(self.global_failure,
                                             np.int64(N_24796),
                                             np.float32(freq_24802),
                                             np.int64(res_24816),
                                             mappingindices_mem_36737,
                                             mem_36746)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30845_var,
                                   ((np.long(segmap_usable_groups_30915) * np.long(segmap_group_sizze_30914)),),
                                   (np.long(segmap_group_sizze_30914),))
        if synchronous:
          sync(self)
      binop_p_mem_36747 = mem_36746
    x_24869 = (N_24796 * N_24796)
    y_24870 = (np.int64(2) * N_24796)
    x_24871 = (x_24869 + y_24870)
    x_24872 = (np.int64(1) + x_24871)
    y_24873 = (np.int64(1) + N_24796)
    zzero_24874 = (y_24873 == np.int64(0))
    nonzzero_24875 = not(zzero_24874)
    nonzzero_cert_24876 = True
    assert nonzzero_24875, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:37:32-60\n   #1  bfastfinal.fut:180:5-58\n   #2  bfastfinal.fut:175:1-181:32\n" % ("division by zero",))
    x_24877 = sdiv64(x_24872, y_24873)
    x_24878 = (x_24877 - N_24796)
    binop_p_24879 = (x_24878 - np.int64(1))
    res_24880 = sext_i64_i32(binop_p_24879)
    res_24881 = sitofp_i32_f32(res_24880)
    segmap_group_sizze_30997 = self.sizes["main.segmap_group_size_30976"]
    segmap_usable_groups_30998 = sdiv_up64(binop_x_36741,
                                           segmap_group_sizze_30997)
    mem_36750 = opencl_alloc(self, bytes_36740, "mem_36750")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_36750, np.int64(0),
                                                binop_p_mem_36747, np.int64(0),
                                                np.int64(1), N_24796, res_24816)
    mem_36754 = opencl_alloc(self, bytes_36740, "mem_36754")
    if ((1 * (np.long(segmap_usable_groups_30998) * np.long(segmap_group_sizze_30997))) != 0):
      self.mainzisegmap_30973_var.set_args(self.global_failure,
                                           np.int64(N_24796),
                                           np.int64(res_24816),
                                           np.float32(res_24881), mem_36750,
                                           mem_36754)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30973_var,
                                 ((np.long(segmap_usable_groups_30998) * np.long(segmap_group_sizze_30997)),),
                                 (np.long(segmap_group_sizze_30997),))
      if synchronous:
        sync(self)
    eq_x_y_24889 = (np.int64(0) == res_24816)
    p_and_eq_x_y_24890 = (cond_24813 and eq_x_y_24889)
    not_p_24891 = not(cond_24813)
    p_and_eq_x_y_24892 = (eq_x_y_24889 and not_p_24891)
    empty_slice_24893 = (p_and_eq_x_y_24890 or p_and_eq_x_y_24892)
    m_24894 = (res_24816 - np.int64(1))
    zzero_leq_i_p_m_t_s_24895 = sle64(np.int64(0), m_24894)
    i_p_m_t_s_leq_w_24896 = slt64(m_24894, res_24816)
    i_lte_j_24897 = sle64(np.int64(0), res_24816)
    y_24898 = (zzero_leq_i_p_m_t_s_24895 and i_p_m_t_s_leq_w_24896)
    y_24899 = (i_lte_j_24897 and y_24898)
    ok_or_empty_24900 = (empty_slice_24893 or y_24899)
    empty_slice_24901 = (res_24810 == np.int64(0))
    m_24902 = (res_24810 - np.int64(1))
    zzero_leq_i_p_m_t_s_24903 = sle64(np.int64(0), m_24902)
    i_p_m_t_s_leq_w_24904 = slt64(m_24902, N_24796)
    i_lte_j_24905 = sle64(np.int64(0), res_24810)
    y_24906 = (zzero_leq_i_p_m_t_s_24903 and i_p_m_t_s_leq_w_24904)
    y_24907 = (i_lte_j_24905 and y_24906)
    ok_or_empty_24908 = (empty_slice_24901 or y_24907)
    index_ok_24909 = (ok_or_empty_24900 and ok_or_empty_24908)
    index_certs_24910 = True
    assert index_ok_24909, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:40:15-23\n   #1  bfastfinal.fut:180:5-58\n   #2  bfastfinal.fut:175:1-181:32\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24810,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               res_24816,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24796,
                                                                                                                                                                               "]."))
    empty_slice_24912 = (res_24816 == np.int64(0))
    ok_or_empty_24913 = (y_24899 or empty_slice_24912)
    index_ok_24914 = (ok_or_empty_24908 and ok_or_empty_24913)
    index_certs_24915 = True
    assert index_ok_24914, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:41:15-24\n   #1  bfastfinal.fut:180:5-58\n   #2  bfastfinal.fut:175:1-181:32\n" % ("Index [:",
                                                                                                                                                                               res_24810,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_24796,
                                                                                                                                                                               "][",
                                                                                                                                                                               res_24816,
                                                                                                                                                                               "]."))
    empty_slice_24917 = (m_24797 == np.int64(0))
    m_24918 = (m_24797 - np.int64(1))
    zzero_leq_i_p_m_t_s_24919 = sle64(np.int64(0), m_24918)
    i_p_m_t_s_leq_w_24920 = slt64(m_24918, m_24797)
    i_lte_j_24921 = sle64(np.int64(0), m_24797)
    y_24922 = (zzero_leq_i_p_m_t_s_24919 and i_p_m_t_s_leq_w_24920)
    y_24923 = (i_lte_j_24921 and y_24922)
    ok_or_empty_24924 = (empty_slice_24917 or y_24923)
    index_ok_24925 = (ok_or_empty_24908 and ok_or_empty_24924)
    index_certs_24926 = True
    assert index_ok_24925, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:42:15-28\n   #1  bfastfinal.fut:180:5-58\n   #2  bfastfinal.fut:175:1-181:32\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24810,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_24797,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24796,
                                                                                                                                                                               "]."))
    suff_outer_par_31004 = (self.sizes["main.suff_outer_par_6"] <= m_24797)
    segmap_group_sizze_31030 = self.sizes["main.segmap_group_size_31008"]
    max_num_groups_37869 = self.sizes["main.segmap_num_groups_31010"]
    num_groups_31031 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24797,
                                                            segmap_group_sizze_31030),
                                                  sext_i32_i64(max_num_groups_37869))))
    nest_sizze_31206 = (m_24797 * res_24816)
    segmap_group_sizze_31207 = self.sizes["main.segmap_group_size_31055"]
    max_num_groups_37870 = self.sizes["main.segmap_num_groups_31057"]
    num_groups_31208 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_31206,
                                                            segmap_group_sizze_31207),
                                                  sext_i32_i64(max_num_groups_37870))))
    suff_outer_par_31212 = (self.sizes["main.suff_outer_par_7"] <= nest_sizze_31206)
    y_31231 = (res_24816 * res_24816)
    nest_sizze_31232 = (m_24797 * y_31231)
    segmap_group_sizze_31233 = self.sizes["main.segmap_group_size_31086"]
    suff_outer_par_31238 = (self.sizes["main.suff_outer_par_8"] <= nest_sizze_31232)
    nest_sizze_31258 = (res_24810 * nest_sizze_31232)
    segred_group_sizze_31259 = self.sizes["main.segred_group_size_31115"]
    max_num_groups_37871 = self.sizes["main.segred_num_groups_31117"]
    num_groups_31260 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_31258,
                                                            segred_group_sizze_31259),
                                                  sext_i32_i64(max_num_groups_37871))))
    binop_x_36756 = (m_24797 * N_24798)
    bytes_36755 = (np.int64(4) * binop_x_36756)
    bytes_36800 = (np.int64(4) * nest_sizze_31232)
    bytes_36759 = (np.int64(4) * y_31231)
    binop_x_36845 = (res_24816 * nest_sizze_31206)
    bytes_36843 = (np.int64(4) * binop_x_36845)
    bytes_36805 = (np.int64(4) * res_24816)
    num_threads_37791 = (segmap_group_sizze_31030 * num_groups_31031)
    total_sizze_37792 = (bytes_36759 * num_threads_37791)
    num_threads_37793 = (segmap_group_sizze_31207 * num_groups_31208)
    total_sizze_37794 = (bytes_36805 * num_threads_37793)
    local_memory_capacity_37964 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_37964)) and suff_outer_par_31004):
      mem_36757 = opencl_alloc(self, bytes_36755, "mem_36757")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36757, np.int64(0),
                                                  images_mem_36738, np.int64(0),
                                                  np.int64(1), N_24798, m_24797)
      mem_36803 = opencl_alloc(self, bytes_36800, "mem_36803")
      mem_36761 = opencl_alloc(self, total_sizze_37792, "mem_36761")
      if ((1 * (np.long(num_groups_31031) * np.long(segmap_group_sizze_31030))) != 0):
        self.mainzisegmap_31006_var.set_args(self.global_failure,
                                             np.int64(N_24796),
                                             np.int64(m_24797),
                                             np.int32(n_24801),
                                             np.int32(k2p2zq_24814),
                                             np.int64(res_24816),
                                             np.int64(num_groups_31031),
                                             binop_p_mem_36747, mem_36754,
                                             mem_36757, mem_36761, mem_36803)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31006_var,
                                   ((np.long(num_groups_31031) * np.long(segmap_group_sizze_31030)),),
                                   (np.long(segmap_group_sizze_31030),))
        if synchronous:
          sync(self)
      mem_36757 = None
      mem_36761 = None
      mem_36846 = opencl_alloc(self, bytes_36843, "mem_36846")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36846, np.int64(0),
                                                  mem_36803, np.int64(0),
                                                  np.int64(1), m_24797,
                                                  (res_24816 * res_24816))
      mem_36803 = None
      res_mem_36848 = mem_36846
    else:
      local_memory_capacity_37963 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_37963)) and suff_outer_par_31212):
        mem_36822 = opencl_alloc(self, bytes_36843, "mem_36822")
        mem_36806 = opencl_alloc(self, total_sizze_37794, "mem_36806")
        if ((1 * (np.long(num_groups_31208) * np.long(segmap_group_sizze_31207))) != 0):
          self.mainzisegmap_31052_var.set_args(self.global_failure,
                                               np.int64(m_24797),
                                               np.int64(N_24798),
                                               np.int32(n_24801),
                                               np.int32(k2p2zq_24814),
                                               np.int64(res_24816),
                                               np.int64(num_groups_31208),
                                               images_mem_36738, mem_36750,
                                               mem_36754, mem_36806, mem_36822)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31052_var,
                                     ((np.long(num_groups_31208) * np.long(segmap_group_sizze_31207)),),
                                     (np.long(segmap_group_sizze_31207),))
          if synchronous:
            sync(self)
        mem_36806 = None
        mem_36840 = opencl_alloc(self, bytes_36843, "mem_36840")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_36840, np.int64(0),
                                                    mem_36822, np.int64(0),
                                                    np.int64(1),
                                                    (m_24797 * res_24816),
                                                    res_24816)
        mem_36822 = None
        res_mem_36842 = mem_36840
      else:
        segmap_usable_groups_31234 = sdiv_up64(nest_sizze_31232,
                                               segmap_group_sizze_31233)
        local_memory_capacity_37962 = self.max_local_memory
        if (sle64(np.int64(0),
                  sext_i32_i64(local_memory_capacity_37962)) and suff_outer_par_31238):
          mem_36827 = opencl_alloc(self, bytes_36843, "mem_36827")
          if ((1 * (np.long(segmap_usable_groups_31234) * np.long(segmap_group_sizze_31233))) != 0):
            self.mainzisegmap_31082_var.set_args(self.global_failure,
                                                 np.int64(m_24797),
                                                 np.int64(N_24798),
                                                 np.int32(n_24801),
                                                 np.int64(res_24816),
                                                 images_mem_36738, mem_36750,
                                                 mem_36754, mem_36827)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31082_var,
                                       ((np.long(segmap_usable_groups_31234) * np.long(segmap_group_sizze_31233)),),
                                       (np.long(segmap_group_sizze_31233),))
            if synchronous:
              sync(self)
          res_mem_36836 = mem_36827
        else:
          mem_36830 = opencl_alloc(self, bytes_36740, "mem_36830")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_36830, np.int64(0),
                                                      mem_36754, np.int64(0),
                                                      np.int64(1), res_24816,
                                                      N_24796)
          mem_36835 = opencl_alloc(self, bytes_36843, "mem_36835")
          if slt64((res_24810 * np.int64(2)), segred_group_sizze_31259):
            segment_sizze_nonzzero_37902 = smax64(np.int64(1), res_24810)
            num_threads_37903 = (num_groups_31260 * segred_group_sizze_31259)
            if ((1 * (np.long(num_groups_31260) * np.long(segred_group_sizze_31259))) != 0):
              self.mainzisegred_small_31121_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_31259))),
                                                         np.int64(N_24796),
                                                         np.int64(m_24797),
                                                         np.int64(N_24798),
                                                         np.int64(res_24810),
                                                         np.int64(res_24816),
                                                         np.int64(num_groups_31260),
                                                         images_mem_36738,
                                                         binop_p_mem_36747,
                                                         mem_36830, mem_36835,
                                                         np.int64(segment_sizze_nonzzero_37902))
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_small_31121_var,
                                         ((np.long(num_groups_31260) * np.long(segred_group_sizze_31259)),),
                                         (np.long(segred_group_sizze_31259),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_37923 = sdiv_up64(num_groups_31260,
                                                 smax64(np.int64(1),
                                                        ((m_24797 * res_24816) * res_24816)))
            elements_per_thread_37924 = sdiv_up64(res_24810,
                                                  (segred_group_sizze_31259 * groups_per_segment_37923))
            virt_num_groups_37925 = (groups_per_segment_37923 * ((m_24797 * res_24816) * res_24816))
            num_threads_37926 = (num_groups_31260 * segred_group_sizze_31259)
            threads_per_segment_37927 = (groups_per_segment_37923 * segred_group_sizze_31259)
            group_res_arr_mem_37928 = opencl_alloc(self,
                                                   (np.int32(4) * (segred_group_sizze_31259 * virt_num_groups_37925)),
                                                   "group_res_arr_mem_37928")
            mainzicounter_mem_37930 = self.mainzicounter_mem_37930
            if ((1 * (np.long(num_groups_31260) * np.long(segred_group_sizze_31259))) != 0):
              self.mainzisegred_large_31121_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.long(np.int32(1))),
                                                         cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_31259))),
                                                         np.int64(N_24796),
                                                         np.int64(N_24798),
                                                         np.int64(res_24810),
                                                         np.int64(res_24816),
                                                         np.int64(num_groups_31260),
                                                         images_mem_36738,
                                                         binop_p_mem_36747,
                                                         mem_36830, mem_36835,
                                                         np.int64(groups_per_segment_37923),
                                                         np.int64(elements_per_thread_37924),
                                                         np.int64(virt_num_groups_37925),
                                                         np.int64(threads_per_segment_37927),
                                                         group_res_arr_mem_37928,
                                                         mainzicounter_mem_37930)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_large_31121_var,
                                         ((np.long(num_groups_31260) * np.long(segred_group_sizze_31259)),),
                                         (np.long(segred_group_sizze_31259),))
              if synchronous:
                sync(self)
          mem_36830 = None
          res_mem_36836 = mem_36835
        res_mem_36842 = res_mem_36836
      res_mem_36848 = res_mem_36842
    m_24947 = (np.int64(2) * res_24816)
    nm_24948 = (res_24816 * m_24947)
    bounds_invalid_upwards_24949 = slt64(nm_24948, np.int64(0))
    valid_24950 = not(bounds_invalid_upwards_24949)
    range_valid_c_24951 = True
    assert valid_24950, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:77:21-27\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:180:5-58\n   #4  bfastfinal.fut:175:1-181:32\n" % ("Range ",
                                                                                                                                                                                                                                        np.int64(0),
                                                                                                                                                                                                                                        "..",
                                                                                                                                                                                                                                        np.int64(1),
                                                                                                                                                                                                                                        "..<",
                                                                                                                                                                                                                                        nm_24948,
                                                                                                                                                                                                                                        " is invalid."))
    zzero_24953 = (m_24947 == np.int64(0))
    nonzzero_24954 = not(zzero_24953)
    nonzzero_cert_24955 = True
    assert nonzzero_24954, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:72:41-47\n   #1  helpers.fut:72:14-77:28\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:180:5-58\n   #4  bfastfinal.fut:175:1-181:32\n" % ("division by zero",))
    res_24956 = sext_i64_i32(m_24947)
    loop_nonempty_24957 = slt32(np.int32(0), k2p2zq_24814)
    zzero_24958 = (res_24956 == np.int32(0))
    nonzzero_24959 = not(zzero_24958)
    loop_not_taken_24960 = not(loop_nonempty_24957)
    protect_assert_disj_24961 = (nonzzero_24959 or loop_not_taken_24960)
    nonzzero_cert_24962 = True
    assert protect_assert_disj_24961, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:59:43-49\n   #1  helpers.fut:59:16-65:32\n   #2  helpers.fut:78:15-53\n   #3  bfastfinal.fut:52:35-50\n   #4  bfastfinal.fut:180:5-58\n   #5  bfastfinal.fut:175:1-181:32\n" % ("division by zero",))
    y_31339 = smin64(res_24816, nm_24948)
    intra_avail_par_31340 = smin64(y_31231, y_31339)
    y_31341 = smax64(res_24816, nm_24948)
    computed_group_sizze_31283 = smax64(y_31231, y_31341)
    max_group_sizze_31474 = self.max_group_size
    fits_31475 = sle64(computed_group_sizze_31283, max_group_sizze_31474)
    suff_intra_par_31473 = (self.sizes["main.suff_intra_par_10"] <= intra_avail_par_31340)
    intra_suff_and_fits_31476 = (suff_intra_par_31473 and fits_31475)
    nest_sizze_32057 = (m_24797 * nm_24948)
    segmap_group_sizze_32058 = self.sizes["main.segmap_group_size_32021"]
    fits_32085 = sle64(nm_24948, max_group_sizze_31474)
    suff_intra_par_32087 = (self.sizes["main.suff_intra_par_14"] <= nm_24948)
    intra_suff_and_fits_32088 = (fits_32085 and suff_intra_par_32087)
    segmap_group_sizze_32124 = self.sizes["main.segmap_group_size_31929"]
    segmap_group_sizze_32140 = self.sizes["main.segmap_group_size_31862"]
    segmap_group_sizze_32174 = self.sizes["main.segmap_group_size_31808"]
    segmap_group_sizze_32209 = self.sizes["main.segmap_group_size_31590"]
    segmap_usable_groups_32125 = sdiv_up_safe64(m_24797,
                                                segmap_group_sizze_32124)
    segmap_usable_groups_32141 = sdiv_up_safe64(nest_sizze_32057,
                                                segmap_group_sizze_32140)
    segmap_usable_groups_32175 = sdiv_up_safe64(nest_sizze_32057,
                                                segmap_group_sizze_32174)
    bytes_36851 = (np.int64(4) * nm_24948)
    bytes_36878 = (np.int64(4) * nest_sizze_32057)
    local_memory_capacity_38029 = self.max_local_memory
    if (sle64(((bytes_36851 + bytes_36851) + bytes_36759),
              sext_i32_i64(local_memory_capacity_38029)) and intra_suff_and_fits_31476):
      mem_36876 = opencl_alloc(self, bytes_36843, "mem_36876")
      if ((1 * (np.long(m_24797) * np.long(computed_group_sizze_31283))) != 0):
        self.mainzisegmap_intragroup_31342_var.set_args(self.global_failure,
                                                        self.failure_is_an_option,
                                                        self.global_failure_args,
                                                        cl.LocalMemory(np.long(bytes_36759)),
                                                        cl.LocalMemory(np.long(bytes_36851)),
                                                        cl.LocalMemory(np.long(bytes_36851)),
                                                        np.int32(k2p2zq_24814),
                                                        np.int64(res_24816),
                                                        np.int64(m_24947),
                                                        np.int64(nm_24948),
                                                        np.int32(res_24956),
                                                        np.int64(computed_group_sizze_31283),
                                                        res_mem_36848,
                                                        mem_36876)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_31342_var,
                                   ((np.long(m_24797) * np.long(computed_group_sizze_31283)),),
                                   (np.long(computed_group_sizze_31283),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      res_mem_36931 = mem_36876
    else:
      segmap_usable_groups_32059 = sdiv_up64(nest_sizze_32057,
                                             segmap_group_sizze_32058)
      mem_36880 = opencl_alloc(self, bytes_36878, "mem_36880")
      if ((1 * (np.long(segmap_usable_groups_32059) * np.long(segmap_group_sizze_32058))) != 0):
        self.mainzisegmap_32018_var.set_args(self.global_failure,
                                             np.int64(m_24797),
                                             np.int64(res_24816),
                                             np.int64(m_24947),
                                             np.int64(nm_24948), res_mem_36848,
                                             mem_36880)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32018_var,
                                   ((np.long(segmap_usable_groups_32059) * np.long(segmap_group_sizze_32058)),),
                                   (np.long(segmap_group_sizze_32058),))
        if synchronous:
          sync(self)
      ctx_param_ext_36881 = m_24797
      ctx_param_ext_36882 = nm_24948
      ctx_param_ext_36883 = np.int64(0)
      ctx_param_ext_36884 = nm_24948
      ctx_param_ext_36885 = m_24797
      ctx_param_ext_36886 = np.int64(1)
      ctx_param_ext_36887 = nm_24948
      mem_param_36888 = mem_36880
      i_32073 = np.int32(0)
      one_39087 = np.int32(1)
      for counter_39086 in range(k2p2zq_24814):
        i_32075 = sext_i32_i64(i_32073)
        x_32076 = sle64(np.int64(0), i_32075)
        y_32077 = slt64(i_32075, nm_24948)
        bounds_check_32078 = (x_32076 and y_32077)
        index_certs_32079 = True
        assert bounds_check_32078, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:180:5-58\n   #4  bfastfinal.fut:175:1-181:32\n" % ("Index [",
                                                                                                                                                                                                                                         i_32075,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_24948,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_37989 = self.max_local_memory
        if intra_suff_and_fits_32088:
          res_ixfn_36910 = m_24797
        else:
          res_ixfn_36910 = ctx_param_ext_36885
        local_memory_capacity_37990 = self.max_local_memory
        if intra_suff_and_fits_32088:
          res_ixfn_36911 = nm_24948
        else:
          res_ixfn_36911 = ctx_param_ext_36887
        local_memory_capacity_37991 = self.max_local_memory
        if intra_suff_and_fits_32088:
          res_ixfn_36912 = m_24797
        else:
          res_ixfn_36912 = ctx_param_ext_36881
        local_memory_capacity_37992 = self.max_local_memory
        if intra_suff_and_fits_32088:
          res_ixfn_36913 = nm_24948
        else:
          res_ixfn_36913 = ctx_param_ext_36882
        local_memory_capacity_37993 = self.max_local_memory
        if intra_suff_and_fits_32088:
          res_ixfn_36914 = nm_24948
        else:
          res_ixfn_36914 = ctx_param_ext_36884
        local_memory_capacity_37994 = self.max_local_memory
        if intra_suff_and_fits_32088:
          res_ixfn_36915 = np.int64(1)
        else:
          res_ixfn_36915 = ctx_param_ext_36886
        local_memory_capacity_37995 = self.max_local_memory
        if intra_suff_and_fits_32088:
          res_ixfn_36916 = np.int64(0)
        else:
          res_ixfn_36916 = ctx_param_ext_36883
        local_memory_capacity_38023 = self.max_local_memory
        if ((sle64(np.int64(0),
                   sext_i32_i64(local_memory_capacity_38023)) and sle64(bytes_36851,
                                                                        sext_i32_i64(local_memory_capacity_38023))) and intra_suff_and_fits_32088):
          mem_36893 = opencl_alloc(self, bytes_36878, "mem_36893")
          group_sizze_37999 = self.sizes["main.group_size_37999"]
          num_groups_38000 = sdiv_up64((m_24797 * nm_24948), group_sizze_37999)
          if ((1 * (np.long(num_groups_38000) * np.long(group_sizze_37999))) != 0):
            self.mainzicopy_37996_var.set_args(np.int64(m_24797),
                                               np.int64(nm_24948),
                                               np.int64(ctx_param_ext_36883),
                                               np.int64(ctx_param_ext_36884),
                                               np.int64(ctx_param_ext_36886),
                                               mem_param_36888, mem_36893)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzicopy_37996_var,
                                       ((np.long(num_groups_38000) * np.long(group_sizze_37999)),),
                                       (np.long(group_sizze_37999),))
            if synchronous:
              sync(self)
          mem_36901 = opencl_alloc(self, bytes_36878, "mem_36901")
          if ((1 * (np.long(m_24797) * np.long(nm_24948))) != 0):
            self.mainzisegmap_intragroup_31686_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(bytes_36851)),
                                                            np.int64(m_24797),
                                                            np.int32(k2p2zq_24814),
                                                            np.int64(nm_24948),
                                                            np.int32(res_24956),
                                                            np.int32(i_32073),
                                                            np.int64(i_32075),
                                                            np.int64(ctx_param_ext_36883),
                                                            np.int64(ctx_param_ext_36884),
                                                            np.int64(ctx_param_ext_36886),
                                                            mem_param_36888,
                                                            mem_36893,
                                                            mem_36901)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegmap_intragroup_31686_var,
                                       ((np.long(m_24797) * np.long(nm_24948)),),
                                       (np.long(nm_24948),))
            if synchronous:
              sync(self)
          mem_36893 = None
          res_mem_36917 = mem_36901
        else:
          mem_36904 = opencl_alloc(self, m_24797, "mem_36904")
          if ((1 * (np.long(segmap_usable_groups_32125) * np.long(segmap_group_sizze_32124))) != 0):
            self.mainzisegmap_31927_var.set_args(self.global_failure,
                                                 np.int64(m_24797),
                                                 np.int64(i_32075),
                                                 np.int64(ctx_param_ext_36883),
                                                 np.int64(ctx_param_ext_36884),
                                                 np.int64(ctx_param_ext_36886),
                                                 mem_param_36888, mem_36904)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31927_var,
                                       ((np.long(segmap_usable_groups_32125) * np.long(segmap_group_sizze_32124)),),
                                       (np.long(segmap_group_sizze_32124),))
            if synchronous:
              sync(self)
          mem_36908 = opencl_alloc(self, bytes_36878, "mem_36908")
          if ((1 * (np.long(segmap_usable_groups_32141) * np.long(segmap_group_sizze_32140))) != 0):
            self.mainzisegmap_31859_var.set_args(self.global_failure,
                                                 np.int64(m_24797),
                                                 np.int32(k2p2zq_24814),
                                                 np.int64(nm_24948),
                                                 np.int32(res_24956),
                                                 np.int32(i_32073),
                                                 np.int64(i_32075),
                                                 np.int64(ctx_param_ext_36883),
                                                 np.int64(ctx_param_ext_36884),
                                                 np.int64(ctx_param_ext_36886),
                                                 mem_param_36888, mem_36904,
                                                 mem_36908)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31859_var,
                                       ((np.long(segmap_usable_groups_32141) * np.long(segmap_group_sizze_32140)),),
                                       (np.long(segmap_group_sizze_32140),))
            if synchronous:
              sync(self)
          mem_36904 = None
          if ((1 * (np.long(segmap_usable_groups_32175) * np.long(segmap_group_sizze_32174))) != 0):
            self.mainzisegmap_31805_var.set_args(self.global_failure,
                                                 np.int64(m_24797),
                                                 np.int64(nm_24948),
                                                 np.int64(ctx_param_ext_36883),
                                                 np.int64(ctx_param_ext_36884),
                                                 np.int64(ctx_param_ext_36886),
                                                 mem_param_36888, mem_36908)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31805_var,
                                       ((np.long(segmap_usable_groups_32175) * np.long(segmap_group_sizze_32174)),),
                                       (np.long(segmap_group_sizze_32174),))
            if synchronous:
              sync(self)
          mem_36908 = None
          res_mem_36917 = mem_param_36888
        ctx_param_ext_tmp_37980 = res_ixfn_36912
        ctx_param_ext_tmp_37981 = res_ixfn_36913
        ctx_param_ext_tmp_37982 = res_ixfn_36916
        ctx_param_ext_tmp_37983 = res_ixfn_36914
        ctx_param_ext_tmp_37984 = res_ixfn_36910
        ctx_param_ext_tmp_37985 = res_ixfn_36915
        ctx_param_ext_tmp_37986 = res_ixfn_36911
        mem_param_tmp_37987 = res_mem_36917
        ctx_param_ext_36881 = ctx_param_ext_tmp_37980
        ctx_param_ext_36882 = ctx_param_ext_tmp_37981
        ctx_param_ext_36883 = ctx_param_ext_tmp_37982
        ctx_param_ext_36884 = ctx_param_ext_tmp_37983
        ctx_param_ext_36885 = ctx_param_ext_tmp_37984
        ctx_param_ext_36886 = ctx_param_ext_tmp_37985
        ctx_param_ext_36887 = ctx_param_ext_tmp_37986
        mem_param_36888 = mem_param_tmp_37987
        i_32073 += one_39087
      res_r_ixfn_36918 = ctx_param_ext_36881
      res_r_ixfn_36919 = ctx_param_ext_36882
      res_r_ixfn_36920 = ctx_param_ext_36883
      res_r_ixfn_36921 = ctx_param_ext_36884
      res_r_ixfn_36922 = ctx_param_ext_36885
      res_r_ixfn_36923 = ctx_param_ext_36886
      res_r_ixfn_36924 = ctx_param_ext_36887
      res_r_mem_36925 = mem_param_36888
      mem_36880 = None
      segmap_usable_groups_32210 = sdiv_up64(nest_sizze_31232,
                                             segmap_group_sizze_32209)
      mem_36930 = opencl_alloc(self, bytes_36843, "mem_36930")
      if ((1 * (np.long(segmap_usable_groups_32210) * np.long(segmap_group_sizze_32209))) != 0):
        self.mainzisegmap_31586_var.set_args(self.global_failure,
                                             np.int64(m_24797),
                                             np.int64(res_24816),
                                             np.int64(m_24947),
                                             np.int64(res_r_ixfn_36920),
                                             np.int64(res_r_ixfn_36921),
                                             np.int64(res_r_ixfn_36923),
                                             res_r_mem_36925, mem_36930)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31586_var,
                                   ((np.long(segmap_usable_groups_32210) * np.long(segmap_group_sizze_32209)),),
                                   (np.long(segmap_group_sizze_32209),))
        if synchronous:
          sync(self)
      res_r_mem_36925 = None
      res_mem_36931 = mem_36930
    res_mem_36848 = None
    suff_outer_par_32222 = (self.sizes["main.suff_outer_par_17"] <= m_24797)
    segmap_group_sizze_32244 = self.sizes["main.segmap_group_size_32226"]
    max_num_groups_38030 = self.sizes["main.segmap_num_groups_32228"]
    num_groups_32245 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24797,
                                                            segmap_group_sizze_32244),
                                                  sext_i32_i64(max_num_groups_38030))))
    suff_outer_par_32329 = (self.sizes["main.suff_outer_par_18"] <= nest_sizze_31206)
    nest_sizze_32345 = (res_24810 * nest_sizze_31206)
    segred_group_sizze_32346 = self.sizes["main.segred_group_size_32288"]
    max_num_groups_38031 = self.sizes["main.segred_num_groups_32290"]
    num_groups_32347 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32345,
                                                            segred_group_sizze_32346),
                                                  sext_i32_i64(max_num_groups_38031))))
    tile_sizze_35548 = self.sizes["main.tile_size_35547"]
    group_sizze_35549 = (tile_sizze_35548 * tile_sizze_35548)
    bytes_36950 = (np.int64(4) * nest_sizze_31206)
    bytes_36955 = (np.int64(4) * group_sizze_35549)
    binop_x_37664 = (np.int64(4) * tile_sizze_35548)
    sizze_37665 = (tile_sizze_35548 * binop_x_37664)
    num_threads_37804 = (segmap_group_sizze_32244 * num_groups_32245)
    total_sizze_37805 = (bytes_36805 * num_threads_37804)
    local_memory_capacity_38117 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38117)) and suff_outer_par_32222):
      mem_36934 = opencl_alloc(self, bytes_36755, "mem_36934")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36934, np.int64(0),
                                                  images_mem_36738, np.int64(0),
                                                  np.int64(1), N_24798, m_24797)
      mem_36952 = opencl_alloc(self, bytes_36950, "mem_36952")
      mem_36937 = opencl_alloc(self, total_sizze_37805, "mem_36937")
      if ((1 * (np.long(num_groups_32245) * np.long(segmap_group_sizze_32244))) != 0):
        self.mainzisegmap_32224_var.set_args(self.global_failure,
                                             np.int64(N_24796),
                                             np.int64(m_24797),
                                             np.int32(n_24801),
                                             np.int32(k2p2zq_24814),
                                             np.int64(res_24816),
                                             np.int64(num_groups_32245),
                                             binop_p_mem_36747, mem_36934,
                                             mem_36937, mem_36952)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32224_var,
                                   ((np.long(num_groups_32245) * np.long(segmap_group_sizze_32244)),),
                                   (np.long(segmap_group_sizze_32244),))
        if synchronous:
          sync(self)
      mem_36934 = None
      mem_36937 = None
      mem_37020 = opencl_alloc(self, bytes_36950, "mem_37020")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37020, np.int64(0),
                                                  mem_36952, np.int64(0),
                                                  np.int64(1), m_24797,
                                                  res_24816)
      mem_36952 = None
      res_mem_37022 = mem_37020
    else:
      local_memory_capacity_38116 = self.max_local_memory
      if (sle64((((bytes_36955 + bytes_36955) + bytes_36955) + bytes_36955),
                sext_i32_i64(local_memory_capacity_38116)) and suff_outer_par_32329):
        num_groups_x_35550 = sdiv_up64(m_24797, tile_sizze_35548)
        num_groups_y_35551 = sdiv_up64(res_24816, tile_sizze_35548)
        num_groups_top_35552 = (num_groups_x_35550 * num_groups_y_35551)
        num_whole_tiles_35569 = squot64(res_24810, tile_sizze_35548)
        residual_input_35719 = srem64(res_24810, tile_sizze_35548)
        cond_35720 = (residual_input_35719 == np.int64(0))
        mem_37012 = opencl_alloc(self, bytes_36950, "mem_37012")
        if ((1 * (np.long(num_groups_top_35552) * np.long(group_sizze_35549))) != 0):
          self.mainzisegmap_intragroup_35553_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(bytes_36955)),
                                                          cl.LocalMemory(np.long(bytes_36955)),
                                                          cl.LocalMemory(np.long(bytes_36955)),
                                                          cl.LocalMemory(np.long(bytes_36955)),
                                                          np.int64(m_24797),
                                                          np.int64(N_24798),
                                                          np.int64(res_24810),
                                                          np.int64(res_24816),
                                                          np.int64(num_groups_y_35551),
                                                          np.int64(num_whole_tiles_35569),
                                                          np.int64(residual_input_35719),
                                                          np.byte(cond_35720),
                                                          images_mem_36738,
                                                          mem_36750, mem_37012)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_35553_var,
                                     ((np.long(num_groups_top_35552) * np.long(group_sizze_35549)),),
                                     (np.long(group_sizze_35549),))
          if synchronous:
            sync(self)
        res_mem_37017 = mem_37012
      else:
        mem_37016 = opencl_alloc(self, bytes_36950, "mem_37016")
        if slt64((res_24810 * np.int64(2)), segred_group_sizze_32346):
          segment_sizze_nonzzero_38056 = smax64(np.int64(1), res_24810)
          num_threads_38057 = (num_groups_32347 * segred_group_sizze_32346)
          if ((1 * (np.long(num_groups_32347) * np.long(segred_group_sizze_32346))) != 0):
            self.mainzisegred_small_32294_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32346))),
                                                       np.int64(N_24796),
                                                       np.int64(m_24797),
                                                       np.int64(N_24798),
                                                       np.int64(res_24810),
                                                       np.int64(res_24816),
                                                       np.int64(num_groups_32347),
                                                       images_mem_36738,
                                                       binop_p_mem_36747,
                                                       mem_37016,
                                                       np.int64(segment_sizze_nonzzero_38056))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_32294_var,
                                       ((np.long(num_groups_32347) * np.long(segred_group_sizze_32346)),),
                                       (np.long(segred_group_sizze_32346),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38077 = sdiv_up64(num_groups_32347,
                                               smax64(np.int64(1),
                                                      (m_24797 * res_24816)))
          elements_per_thread_38078 = sdiv_up64(res_24810,
                                                (segred_group_sizze_32346 * groups_per_segment_38077))
          virt_num_groups_38079 = (groups_per_segment_38077 * (m_24797 * res_24816))
          num_threads_38080 = (num_groups_32347 * segred_group_sizze_32346)
          threads_per_segment_38081 = (groups_per_segment_38077 * segred_group_sizze_32346)
          group_res_arr_mem_38082 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_32346 * virt_num_groups_38079)),
                                                 "group_res_arr_mem_38082")
          mainzicounter_mem_38084 = self.mainzicounter_mem_38084
          if ((1 * (np.long(num_groups_32347) * np.long(segred_group_sizze_32346))) != 0):
            self.mainzisegred_large_32294_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32346))),
                                                       np.int64(N_24796),
                                                       np.int64(N_24798),
                                                       np.int64(res_24810),
                                                       np.int64(res_24816),
                                                       np.int64(num_groups_32347),
                                                       images_mem_36738,
                                                       binop_p_mem_36747,
                                                       mem_37016,
                                                       np.int64(groups_per_segment_38077),
                                                       np.int64(elements_per_thread_38078),
                                                       np.int64(virt_num_groups_38079),
                                                       np.int64(threads_per_segment_38081),
                                                       group_res_arr_mem_38082,
                                                       mainzicounter_mem_38084)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_32294_var,
                                       ((np.long(num_groups_32347) * np.long(segred_group_sizze_32346)),),
                                       (np.long(segred_group_sizze_32346),))
            if synchronous:
              sync(self)
        res_mem_37017 = mem_37016
      res_mem_37022 = res_mem_37017
    binop_p_mem_36747 = None
    mem_36750 = None
    suff_outer_par_32363 = (self.sizes["main.suff_outer_par_19"] <= m_24797)
    segmap_group_sizze_32384 = self.sizes["main.segmap_group_size_32367"]
    max_num_groups_38118 = self.sizes["main.segmap_num_groups_32369"]
    num_groups_32385 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24797,
                                                            segmap_group_sizze_32384),
                                                  sext_i32_i64(max_num_groups_38118))))
    segmap_group_sizze_32460 = self.sizes["main.segmap_group_size_32404"]
    suff_outer_par_32464 = (self.sizes["main.suff_outer_par_20"] <= nest_sizze_31206)
    segred_group_sizze_32479 = self.sizes["main.segred_group_size_32425"]
    max_num_groups_38119 = self.sizes["main.segred_num_groups_32427"]
    num_groups_32480 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_36845,
                                                            segred_group_sizze_32479),
                                                  sext_i32_i64(max_num_groups_38119))))
    num_threads_37808 = (segmap_group_sizze_32384 * num_groups_32385)
    total_sizze_37809 = (bytes_36805 * num_threads_37808)
    local_memory_capacity_38198 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38198)) and suff_outer_par_32363):
      mem_37026 = opencl_alloc(self, bytes_36800, "mem_37026")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37026, np.int64(0),
                                                  res_mem_36931, np.int64(0),
                                                  np.int64(1),
                                                  (res_24816 * res_24816),
                                                  m_24797)
      mem_37029 = opencl_alloc(self, bytes_36950, "mem_37029")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37029, np.int64(0),
                                                  res_mem_37022, np.int64(0),
                                                  np.int64(1), res_24816,
                                                  m_24797)
      mem_37047 = opencl_alloc(self, bytes_36950, "mem_37047")
      mem_37032 = opencl_alloc(self, total_sizze_37809, "mem_37032")
      if ((1 * (np.long(num_groups_32385) * np.long(segmap_group_sizze_32384))) != 0):
        self.mainzisegmap_32365_var.set_args(self.global_failure,
                                             np.int64(m_24797),
                                             np.int32(k2p2zq_24814),
                                             np.int64(res_24816),
                                             np.int64(num_groups_32385),
                                             mem_37026, mem_37029, mem_37032,
                                             mem_37047)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32365_var,
                                   ((np.long(num_groups_32385) * np.long(segmap_group_sizze_32384)),),
                                   (np.long(segmap_group_sizze_32384),))
        if synchronous:
          sync(self)
      mem_37026 = None
      mem_37029 = None
      mem_37032 = None
      mem_37063 = opencl_alloc(self, bytes_36950, "mem_37063")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37063, np.int64(0),
                                                  mem_37047, np.int64(0),
                                                  np.int64(1), m_24797,
                                                  res_24816)
      mem_37047 = None
      res_mem_37065 = mem_37063
    else:
      segmap_usable_groups_32461 = sdiv_up64(nest_sizze_31206,
                                             segmap_group_sizze_32460)
      local_memory_capacity_38197 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_38197)) and suff_outer_par_32464):
        mem_37051 = opencl_alloc(self, bytes_36843, "mem_37051")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_37051, np.int64(0),
                                                    res_mem_36931, np.int64(0),
                                                    np.int64(1), res_24816,
                                                    (m_24797 * res_24816))
        mem_37055 = opencl_alloc(self, bytes_36950, "mem_37055")
        if ((1 * (np.long(segmap_usable_groups_32461) * np.long(segmap_group_sizze_32460))) != 0):
          self.mainzisegmap_32401_var.set_args(self.global_failure,
                                               np.int64(m_24797),
                                               np.int32(k2p2zq_24814),
                                               np.int64(res_24816),
                                               res_mem_37022, mem_37051,
                                               mem_37055)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32401_var,
                                     ((np.long(segmap_usable_groups_32461) * np.long(segmap_group_sizze_32460)),),
                                     (np.long(segmap_group_sizze_32460),))
          if synchronous:
            sync(self)
        mem_37051 = None
        res_mem_37060 = mem_37055
      else:
        mem_37059 = opencl_alloc(self, bytes_36950, "mem_37059")
        if slt64((res_24816 * np.int64(2)), segred_group_sizze_32479):
          segment_sizze_nonzzero_38137 = smax64(np.int64(1), res_24816)
          num_threads_38138 = (num_groups_32480 * segred_group_sizze_32479)
          if ((1 * (np.long(num_groups_32480) * np.long(segred_group_sizze_32479))) != 0):
            self.mainzisegred_small_32431_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32479))),
                                                       np.int64(m_24797),
                                                       np.int64(res_24816),
                                                       np.int64(num_groups_32480),
                                                       res_mem_36931,
                                                       res_mem_37022, mem_37059,
                                                       np.int64(segment_sizze_nonzzero_38137))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_32431_var,
                                       ((np.long(num_groups_32480) * np.long(segred_group_sizze_32479)),),
                                       (np.long(segred_group_sizze_32479),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38158 = sdiv_up64(num_groups_32480,
                                               smax64(np.int64(1),
                                                      (m_24797 * res_24816)))
          elements_per_thread_38159 = sdiv_up64(res_24816,
                                                (segred_group_sizze_32479 * groups_per_segment_38158))
          virt_num_groups_38160 = (groups_per_segment_38158 * (m_24797 * res_24816))
          num_threads_38161 = (num_groups_32480 * segred_group_sizze_32479)
          threads_per_segment_38162 = (groups_per_segment_38158 * segred_group_sizze_32479)
          group_res_arr_mem_38163 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_32479 * virt_num_groups_38160)),
                                                 "group_res_arr_mem_38163")
          mainzicounter_mem_38165 = self.mainzicounter_mem_38165
          if ((1 * (np.long(num_groups_32480) * np.long(segred_group_sizze_32479))) != 0):
            self.mainzisegred_large_32431_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32479))),
                                                       np.int64(res_24816),
                                                       np.int64(num_groups_32480),
                                                       res_mem_36931,
                                                       res_mem_37022, mem_37059,
                                                       np.int64(groups_per_segment_38158),
                                                       np.int64(elements_per_thread_38159),
                                                       np.int64(virt_num_groups_38160),
                                                       np.int64(threads_per_segment_38162),
                                                       group_res_arr_mem_38163,
                                                       mainzicounter_mem_38165)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_32431_var,
                                       ((np.long(num_groups_32480) * np.long(segred_group_sizze_32479)),),
                                       (np.long(segred_group_sizze_32479),))
            if synchronous:
              sync(self)
        res_mem_37060 = mem_37059
      res_mem_37065 = res_mem_37060
    res_mem_36931 = None
    res_mem_37022 = None
    suff_outer_par_32495 = (self.sizes["main.suff_outer_par_21"] <= m_24797)
    segmap_group_sizze_32515 = self.sizes["main.segmap_group_size_32499"]
    max_num_groups_38199 = self.sizes["main.segmap_num_groups_32501"]
    num_groups_32516 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24797,
                                                            segmap_group_sizze_32515),
                                                  sext_i32_i64(max_num_groups_38199))))
    comparatee_32591 = (N_24796 * m_24797)
    suff_outer_par_32592 = (self.sizes["main.suff_outer_par_22"] <= comparatee_32591)
    nest_sizze_32606 = (res_24816 * comparatee_32591)
    segred_group_sizze_32607 = self.sizes["main.segred_group_size_32555"]
    max_num_groups_38200 = self.sizes["main.segred_num_groups_32557"]
    num_groups_32608 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32606,
                                                            segred_group_sizze_32607),
                                                  sext_i32_i64(max_num_groups_38200))))
    tile_sizze_35870 = self.sizes["main.tile_size_35869"]
    group_sizze_35871 = (tile_sizze_35870 * tile_sizze_35870)
    bytes_37084 = (np.int64(4) * comparatee_32591)
    bytes_37070 = (np.int64(4) * N_24796)
    bytes_37092 = (np.int64(4) * group_sizze_35871)
    binop_x_37676 = (np.int64(4) * tile_sizze_35870)
    sizze_37677 = (tile_sizze_35870 * binop_x_37676)
    num_threads_37812 = (segmap_group_sizze_32515 * num_groups_32516)
    total_sizze_37813 = (bytes_37070 * num_threads_37812)
    local_memory_capacity_38286 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38286)) and suff_outer_par_32495):
      mem_37068 = opencl_alloc(self, bytes_36950, "mem_37068")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37068, np.int64(0),
                                                  res_mem_37065, np.int64(0),
                                                  np.int64(1), res_24816,
                                                  m_24797)
      mem_37086 = opencl_alloc(self, bytes_37084, "mem_37086")
      mem_37071 = opencl_alloc(self, total_sizze_37813, "mem_37071")
      if ((1 * (np.long(num_groups_32516) * np.long(segmap_group_sizze_32515))) != 0):
        self.mainzisegmap_32497_var.set_args(self.global_failure,
                                             np.int64(N_24796),
                                             np.int64(m_24797),
                                             np.int32(k2p2zq_24814),
                                             np.int64(res_24816),
                                             np.int64(num_groups_32516),
                                             mem_36754, mem_37068, mem_37071,
                                             mem_37086)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32497_var,
                                   ((np.long(num_groups_32516) * np.long(segmap_group_sizze_32515)),),
                                   (np.long(segmap_group_sizze_32515),))
        if synchronous:
          sync(self)
      mem_37068 = None
      mem_37071 = None
      mem_37157 = opencl_alloc(self, bytes_37084, "mem_37157")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37157, np.int64(0),
                                                  mem_37086, np.int64(0),
                                                  np.int64(1), m_24797, N_24796)
      mem_37086 = None
      res_mem_37159 = mem_37157
    else:
      local_memory_capacity_38285 = self.max_local_memory
      if (sle64((((bytes_37092 + bytes_37092) + bytes_37092) + bytes_37092),
                sext_i32_i64(local_memory_capacity_38285)) and suff_outer_par_32592):
        mem_37089 = opencl_alloc(self, bytes_36740, "mem_37089")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_37089, np.int64(0),
                                                    mem_36754, np.int64(0),
                                                    np.int64(1), res_24816,
                                                    N_24796)
        num_groups_x_35872 = sdiv_up64(m_24797, tile_sizze_35870)
        num_groups_y_35873 = sdiv_up64(N_24796, tile_sizze_35870)
        num_groups_top_35874 = (num_groups_x_35872 * num_groups_y_35873)
        num_whole_tiles_35891 = squot64(res_24816, tile_sizze_35870)
        residual_input_36035 = srem64(res_24816, tile_sizze_35870)
        cond_36036 = (residual_input_36035 == np.int64(0))
        mem_37149 = opencl_alloc(self, bytes_37084, "mem_37149")
        if ((1 * (np.long(num_groups_top_35874) * np.long(group_sizze_35871))) != 0):
          self.mainzisegmap_intragroup_35875_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(bytes_37092)),
                                                          cl.LocalMemory(np.long(bytes_37092)),
                                                          cl.LocalMemory(np.long(bytes_37092)),
                                                          cl.LocalMemory(np.long(bytes_37092)),
                                                          np.int64(N_24796),
                                                          np.int64(m_24797),
                                                          np.int64(res_24816),
                                                          np.int64(num_groups_y_35873),
                                                          np.int64(num_whole_tiles_35891),
                                                          np.int64(residual_input_36035),
                                                          np.byte(cond_36036),
                                                          res_mem_37065,
                                                          mem_37089, mem_37149)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_35875_var,
                                     ((np.long(num_groups_top_35874) * np.long(group_sizze_35871)),),
                                     (np.long(group_sizze_35871),))
          if synchronous:
            sync(self)
        mem_37089 = None
        res_mem_37154 = mem_37149
      else:
        mem_37153 = opencl_alloc(self, bytes_37084, "mem_37153")
        if slt64((res_24816 * np.int64(2)), segred_group_sizze_32607):
          segment_sizze_nonzzero_38225 = smax64(np.int64(1), res_24816)
          num_threads_38226 = (num_groups_32608 * segred_group_sizze_32607)
          if ((1 * (np.long(num_groups_32608) * np.long(segred_group_sizze_32607))) != 0):
            self.mainzisegred_small_32561_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32607))),
                                                       np.int64(N_24796),
                                                       np.int64(m_24797),
                                                       np.int64(res_24816),
                                                       np.int64(num_groups_32608),
                                                       mem_36754, res_mem_37065,
                                                       mem_37153,
                                                       np.int64(segment_sizze_nonzzero_38225))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_32561_var,
                                       ((np.long(num_groups_32608) * np.long(segred_group_sizze_32607)),),
                                       (np.long(segred_group_sizze_32607),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38246 = sdiv_up64(num_groups_32608,
                                               smax64(np.int64(1),
                                                      (m_24797 * N_24796)))
          elements_per_thread_38247 = sdiv_up64(res_24816,
                                                (segred_group_sizze_32607 * groups_per_segment_38246))
          virt_num_groups_38248 = (groups_per_segment_38246 * (m_24797 * N_24796))
          num_threads_38249 = (num_groups_32608 * segred_group_sizze_32607)
          threads_per_segment_38250 = (groups_per_segment_38246 * segred_group_sizze_32607)
          group_res_arr_mem_38251 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_32607 * virt_num_groups_38248)),
                                                 "group_res_arr_mem_38251")
          mainzicounter_mem_38253 = self.mainzicounter_mem_38253
          if ((1 * (np.long(num_groups_32608) * np.long(segred_group_sizze_32607))) != 0):
            self.mainzisegred_large_32561_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32607))),
                                                       np.int64(N_24796),
                                                       np.int64(res_24816),
                                                       np.int64(num_groups_32608),
                                                       mem_36754, res_mem_37065,
                                                       mem_37153,
                                                       np.int64(groups_per_segment_38246),
                                                       np.int64(elements_per_thread_38247),
                                                       np.int64(virt_num_groups_38248),
                                                       np.int64(threads_per_segment_38250),
                                                       group_res_arr_mem_38251,
                                                       mainzicounter_mem_38253)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_32561_var,
                                       ((np.long(num_groups_32608) * np.long(segred_group_sizze_32607)),),
                                       (np.long(segred_group_sizze_32607),))
            if synchronous:
              sync(self)
        res_mem_37154 = mem_37153
      res_mem_37159 = res_mem_37154
    mem_36754 = None
    res_mem_37065 = None
    i_25063 = (N_24796 - np.int64(1))
    x_25064 = sle64(np.int64(0), i_25063)
    y_25065 = slt64(i_25063, N_24796)
    bounds_check_25066 = (x_25064 and y_25065)
    index_certs_25067 = True
    assert bounds_check_25066, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:79:30-91\n   #3  /prelude/soacs.fut:56:19-23\n   #4  /prelude/soacs.fut:56:3-37\n   #5  bfastfinal.fut:73:5-82:25\n   #6  bfastfinal.fut:180:5-58\n   #7  bfastfinal.fut:175:1-181:32\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_25063,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_24796,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_32737 = sle64(N_24796, max_group_sizze_31474)
    suff_intra_par_32735 = (self.sizes["main.suff_intra_par_25"] <= N_24796)
    intra_suff_and_fits_32738 = (suff_intra_par_32735 and fits_32737)
    segscan_group_sizze_32887 = self.sizes["main.segscan_group_size_32864"]
    max_num_groups_38287 = self.sizes["main.segscan_num_groups_32866"]
    num_groups_32888 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(comparatee_32591,
                                                            segscan_group_sizze_32887),
                                                  sext_i32_i64(max_num_groups_38287))))
    segmap_group_sizze_32907 = self.sizes["main.segmap_group_size_32855"]
    mem_37162 = opencl_alloc(self, bytes_37084, "mem_37162")
    self.futhark_builtinzhreplicate_f32(mem_37162, (m_24797 * N_24796), np.nan)
    mem_37165 = opencl_alloc(self, bytes_37084, "mem_37165")
    self.futhark_builtinzhreplicate_i32(mem_37165, (m_24797 * N_24796),
                                        np.int32(0))
    segmap_group_sizze_32943 = self.sizes["main.segmap_group_size_32780"]
    bytes_37177 = (np.int64(4) * m_24797)
    bytes_37168 = (np.int64(8) * N_24796)
    bytes_37186 = (np.int64(8) * comparatee_32591)
    local_memory_capacity_38389 = self.max_local_memory
    if (sle64((((bytes_37168 + bytes_37070) + bytes_37070) + bytes_37070),
              sext_i32_i64(local_memory_capacity_38389)) and intra_suff_and_fits_32738):
      mem_37178 = opencl_alloc(self, bytes_37177, "mem_37178")
      mem_37181 = opencl_alloc(self, bytes_37084, "mem_37181")
      mem_37184 = opencl_alloc(self, bytes_37084, "mem_37184")
      if ((1 * (np.long(m_24797) * np.long(N_24796))) != 0):
        self.mainzisegmap_intragroup_32660_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_37070)),
                                                        cl.LocalMemory(np.long(bytes_37070)),
                                                        cl.LocalMemory(np.long(bytes_37070)),
                                                        cl.LocalMemory(np.long(bytes_37168)),
                                                        np.int64(N_24796),
                                                        np.int64(N_24798),
                                                        np.int64(i_25063),
                                                        images_mem_36738,
                                                        res_mem_37159,
                                                        mem_37178, mem_37181,
                                                        mem_37184)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_32660_var,
                                   ((np.long(m_24797) * np.long(N_24796)),),
                                   (np.long(N_24796),))
        if synchronous:
          sync(self)
      res_mem_37196 = mem_37178
      res_mem_37197 = mem_37181
      res_mem_37198 = mem_37184
    else:
      mem_37188 = opencl_alloc(self, bytes_37186, "mem_37188")
      mem_37191 = opencl_alloc(self, bytes_37084, "mem_37191")
      if slt64(np.int64(0), (m_24797 * N_24796)):
        stage1_max_num_groups_38323 = self.max_group_size
        stage1_num_groups_38324 = smin64(stage1_max_num_groups_38323,
                                         num_groups_32888)
        num_threads_38325 = sext_i64_i32((stage1_num_groups_38324 * segscan_group_sizze_32887))
        if ((1 * (np.long(stage1_num_groups_38324) * np.long(segscan_group_sizze_32887))) != 0):
          self.mainziscan_stage1_32870_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(8) * segscan_group_sizze_32887)))),
                                                    np.int64(N_24796),
                                                    np.int64(m_24797),
                                                    np.int64(N_24798),
                                                    images_mem_36738,
                                                    res_mem_37159, mem_37188,
                                                    mem_37191,
                                                    np.int32(num_threads_38325))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage1_32870_var,
                                     ((np.long(stage1_num_groups_38324) * np.long(segscan_group_sizze_32887)),),
                                     (np.long(segscan_group_sizze_32887),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38324))) != 0):
          self.mainziscan_stage2_32870_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(8) * stage1_num_groups_38324)))),
                                                    np.int64(N_24796),
                                                    np.int64(m_24797),
                                                    mem_37188,
                                                    np.int64(stage1_num_groups_38324),
                                                    np.int32(num_threads_38325))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage2_32870_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_38324)),),
                                     (np.long(stage1_num_groups_38324),))
          if synchronous:
            sync(self)
        required_groups_38367 = sext_i64_i32(sdiv_up64((m_24797 * N_24796),
                                                       segscan_group_sizze_32887))
        if ((1 * (np.long(num_groups_32888) * np.long(segscan_group_sizze_32887))) != 0):
          self.mainziscan_stage3_32870_var.set_args(self.global_failure,
                                                    np.int64(N_24796),
                                                    np.int64(m_24797),
                                                    np.int64(num_groups_32888),
                                                    mem_37188,
                                                    np.int32(num_threads_38325),
                                                    np.int32(required_groups_38367))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage3_32870_var,
                                     ((np.long(num_groups_32888) * np.long(segscan_group_sizze_32887)),),
                                     (np.long(segscan_group_sizze_32887),))
          if synchronous:
            sync(self)
      segmap_usable_groups_32908 = sdiv_up64(m_24797, segmap_group_sizze_32907)
      mem_37194 = opencl_alloc(self, bytes_37177, "mem_37194")
      if ((1 * (np.long(segmap_usable_groups_32908) * np.long(segmap_group_sizze_32907))) != 0):
        self.mainzisegmap_32853_var.set_args(self.global_failure,
                                             np.int64(N_24796),
                                             np.int64(m_24797),
                                             np.int64(i_25063), mem_37188,
                                             mem_37194)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32853_var,
                                   ((np.long(segmap_usable_groups_32908) * np.long(segmap_group_sizze_32907)),),
                                   (np.long(segmap_group_sizze_32907),))
        if synchronous:
          sync(self)
      segmap_usable_groups_32944 = sdiv_up64(comparatee_32591,
                                             segmap_group_sizze_32943)
      if ((1 * (np.long(segmap_usable_groups_32944) * np.long(segmap_group_sizze_32943))) != 0):
        self.mainzisegmap_32777_var.set_args(self.global_failure,
                                             np.int64(N_24796),
                                             np.int64(m_24797), mem_37162,
                                             mem_37165, mem_37188, mem_37191)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32777_var,
                                   ((np.long(segmap_usable_groups_32944) * np.long(segmap_group_sizze_32943)),),
                                   (np.long(segmap_group_sizze_32943),))
        if synchronous:
          sync(self)
      mem_37188 = None
      mem_37191 = None
      res_mem_37196 = mem_37194
      res_mem_37197 = mem_37162
      res_mem_37198 = mem_37165
    res_mem_37159 = None
    mem_37162 = None
    mem_37165 = None
    suff_outer_par_32992 = (self.sizes["main.suff_outer_par_29"] <= m_24797)
    fits_33070 = sle64(res_24810, max_group_sizze_31474)
    suff_intra_par_33068 = (self.sizes["main.suff_intra_par_30"] <= res_24810)
    intra_suff_and_fits_33071 = (suff_intra_par_33068 and fits_33070)
    segmap_group_sizze_33035 = self.sizes["main.segmap_group_size_33004"]
    nest_sizze_33158 = (m_24797 * res_24810)
    segred_group_sizze_33159 = self.sizes["main.segred_group_size_33142"]
    max_num_groups_38390 = self.sizes["main.segred_num_groups_33144"]
    num_groups_33160 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33158,
                                                            segred_group_sizze_33159),
                                                  sext_i32_i64(max_num_groups_38390))))
    segred_group_sizze_33173 = self.sizes["main.segred_group_size_33121"]
    max_num_groups_38391 = self.sizes["main.segred_num_groups_33123"]
    num_groups_33174 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33158,
                                                            segred_group_sizze_33173),
                                                  sext_i32_i64(max_num_groups_38391))))
    segmap_group_sizze_33189 = self.sizes["main.segmap_group_size_33106"]
    bytes_37207 = (np.int64(4) * segmap_group_sizze_33035)
    local_memory_capacity_38545 = self.max_local_memory
    if (sle64((bytes_37207 + bytes_37207),
              sext_i32_i64(local_memory_capacity_38545)) and suff_outer_par_32992):
      segmap_usable_groups_33036 = sdiv_up64(m_24797, segmap_group_sizze_33035)
      mem_37201 = opencl_alloc(self, bytes_36755, "mem_37201")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37201, np.int64(0),
                                                  images_mem_36738, np.int64(0),
                                                  np.int64(1), N_24798, m_24797)
      mem_37204 = opencl_alloc(self, bytes_37084, "mem_37204")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37204, np.int64(0),
                                                  res_mem_37197, np.int64(0),
                                                  np.int64(1), N_24796, m_24797)
      num_whole_tiles_36188 = squot64(res_24810, segmap_group_sizze_33035)
      residual_input_36309 = srem64(res_24810, segmap_group_sizze_33035)
      cond_36310 = (residual_input_36309 == np.int64(0))
      mem_37248 = opencl_alloc(self, bytes_37177, "mem_37248")
      mem_37250 = opencl_alloc(self, bytes_37177, "mem_37250")
      mem_37252 = opencl_alloc(self, bytes_37177, "mem_37252")
      if ((1 * (np.long(segmap_usable_groups_33036) * np.long(segmap_group_sizze_33035))) != 0):
        self.mainzisegmap_intragroup_36180_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_37207)),
                                                        cl.LocalMemory(np.long(bytes_37207)),
                                                        np.int64(m_24797),
                                                        np.int32(n_24801),
                                                        np.float32(hfrac_24803),
                                                        np.int64(res_24810),
                                                        np.int32(k2p2_24812),
                                                        np.int64(num_whole_tiles_36188),
                                                        np.int64(residual_input_36309),
                                                        np.byte(cond_36310),
                                                        mem_37201, mem_37204,
                                                        mem_37248, mem_37250,
                                                        mem_37252)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_36180_var,
                                   ((np.long(segmap_usable_groups_33036) * np.long(segmap_group_sizze_33035)),),
                                   (np.long(segmap_group_sizze_33035),))
        if synchronous:
          sync(self)
      mem_37201 = None
      mem_37204 = None
      res_mem_37276 = mem_37248
      res_mem_37277 = mem_37250
      res_mem_37278 = mem_37252
    else:
      local_memory_capacity_38544 = self.max_local_memory
      if (sle64(((np.int32(4) * res_24810) + (np.int32(4) * res_24810)),
                sext_i32_i64(local_memory_capacity_38544)) and intra_suff_and_fits_33071):
        mem_37257 = opencl_alloc(self, bytes_37177, "mem_37257")
        mem_37259 = opencl_alloc(self, bytes_37177, "mem_37259")
        mem_37261 = opencl_alloc(self, bytes_37177, "mem_37261")
        if ((1 * (np.long(m_24797) * np.long(res_24810))) != 0):
          self.mainzisegmap_intragroup_33000_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long((np.int32(4) * res_24810))),
                                                          cl.LocalMemory(np.long((np.int32(4) * res_24810))),
                                                          np.int64(N_24796),
                                                          np.int64(N_24798),
                                                          np.float32(hfrac_24803),
                                                          np.int64(res_24810),
                                                          np.int32(k2p2_24812),
                                                          images_mem_36738,
                                                          res_mem_37197,
                                                          mem_37257, mem_37259,
                                                          mem_37261)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_33000_var,
                                     ((np.long(m_24797) * np.long(res_24810)),),
                                     (np.long(res_24810),))
          if synchronous:
            sync(self)
        res_mem_37273 = mem_37257
        res_mem_37274 = mem_37259
        res_mem_37275 = mem_37261
      else:
        mem_37264 = opencl_alloc(self, bytes_37177, "mem_37264")
        if slt64((res_24810 * np.int64(2)), segred_group_sizze_33159):
          segment_sizze_nonzzero_38419 = smax64(np.int64(1), res_24810)
          num_threads_38420 = (num_groups_33160 * segred_group_sizze_33159)
          if ((1 * (np.long(num_groups_33160) * np.long(segred_group_sizze_33159))) != 0):
            self.mainzisegred_small_33148_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33159))),
                                                       np.int64(m_24797),
                                                       np.int64(N_24798),
                                                       np.int64(res_24810),
                                                       np.int64(num_groups_33160),
                                                       images_mem_36738,
                                                       mem_37264,
                                                       np.int64(segment_sizze_nonzzero_38419))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_33148_var,
                                       ((np.long(num_groups_33160) * np.long(segred_group_sizze_33159)),),
                                       (np.long(segred_group_sizze_33159),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38440 = sdiv_up64(num_groups_33160,
                                               smax64(np.int64(1), m_24797))
          elements_per_thread_38441 = sdiv_up64(res_24810,
                                                (segred_group_sizze_33159 * groups_per_segment_38440))
          virt_num_groups_38442 = (groups_per_segment_38440 * m_24797)
          num_threads_38443 = (num_groups_33160 * segred_group_sizze_33159)
          threads_per_segment_38444 = (groups_per_segment_38440 * segred_group_sizze_33159)
          group_res_arr_mem_38445 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_33159 * virt_num_groups_38442)),
                                                 "group_res_arr_mem_38445")
          mainzicounter_mem_38447 = self.mainzicounter_mem_38447
          if ((1 * (np.long(num_groups_33160) * np.long(segred_group_sizze_33159))) != 0):
            self.mainzisegred_large_33148_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33159))),
                                                       np.int64(N_24798),
                                                       np.int64(res_24810),
                                                       np.int64(num_groups_33160),
                                                       images_mem_36738,
                                                       mem_37264,
                                                       np.int64(groups_per_segment_38440),
                                                       np.int64(elements_per_thread_38441),
                                                       np.int64(virt_num_groups_38442),
                                                       np.int64(threads_per_segment_38444),
                                                       group_res_arr_mem_38445,
                                                       mainzicounter_mem_38447)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_33148_var,
                                       ((np.long(num_groups_33160) * np.long(segred_group_sizze_33159)),),
                                       (np.long(segred_group_sizze_33159),))
            if synchronous:
              sync(self)
        mem_37267 = opencl_alloc(self, bytes_37177, "mem_37267")
        if slt64((res_24810 * np.int64(2)), segred_group_sizze_33173):
          segment_sizze_nonzzero_38479 = smax64(np.int64(1), res_24810)
          num_threads_38480 = (num_groups_33174 * segred_group_sizze_33173)
          if ((1 * (np.long(num_groups_33174) * np.long(segred_group_sizze_33173))) != 0):
            self.mainzisegred_small_33127_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33173))),
                                                       np.int64(N_24796),
                                                       np.int64(m_24797),
                                                       np.int64(res_24810),
                                                       np.int64(num_groups_33174),
                                                       res_mem_37197, mem_37264,
                                                       mem_37267,
                                                       np.int64(segment_sizze_nonzzero_38479))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_33127_var,
                                       ((np.long(num_groups_33174) * np.long(segred_group_sizze_33173)),),
                                       (np.long(segred_group_sizze_33173),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38500 = sdiv_up64(num_groups_33174,
                                               smax64(np.int64(1), m_24797))
          elements_per_thread_38501 = sdiv_up64(res_24810,
                                                (segred_group_sizze_33173 * groups_per_segment_38500))
          virt_num_groups_38502 = (groups_per_segment_38500 * m_24797)
          num_threads_38503 = (num_groups_33174 * segred_group_sizze_33173)
          threads_per_segment_38504 = (groups_per_segment_38500 * segred_group_sizze_33173)
          group_res_arr_mem_38505 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_33173 * virt_num_groups_38502)),
                                                 "group_res_arr_mem_38505")
          mainzicounter_mem_38507 = self.mainzicounter_mem_38507
          if ((1 * (np.long(num_groups_33174) * np.long(segred_group_sizze_33173))) != 0):
            self.mainzisegred_large_33127_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33173))),
                                                       np.int64(N_24796),
                                                       np.int64(res_24810),
                                                       np.int64(num_groups_33174),
                                                       res_mem_37197, mem_37264,
                                                       mem_37267,
                                                       np.int64(groups_per_segment_38500),
                                                       np.int64(elements_per_thread_38501),
                                                       np.int64(virt_num_groups_38502),
                                                       np.int64(threads_per_segment_38504),
                                                       group_res_arr_mem_38505,
                                                       mainzicounter_mem_38507)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_33127_var,
                                       ((np.long(num_groups_33174) * np.long(segred_group_sizze_33173)),),
                                       (np.long(segred_group_sizze_33173),))
            if synchronous:
              sync(self)
        segmap_usable_groups_33190 = sdiv_up64(m_24797,
                                               segmap_group_sizze_33189)
        mem_37270 = opencl_alloc(self, bytes_37177, "mem_37270")
        mem_37272 = opencl_alloc(self, bytes_37177, "mem_37272")
        if ((1 * (np.long(segmap_usable_groups_33190) * np.long(segmap_group_sizze_33189))) != 0):
          self.mainzisegmap_33104_var.set_args(self.global_failure,
                                               np.int64(m_24797),
                                               np.float32(hfrac_24803),
                                               np.int32(k2p2_24812), mem_37264,
                                               mem_37267, mem_37270, mem_37272)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_33104_var,
                                     ((np.long(segmap_usable_groups_33190) * np.long(segmap_group_sizze_33189)),),
                                     (np.long(segmap_group_sizze_33189),))
          if synchronous:
            sync(self)
        mem_37267 = None
        res_mem_37273 = mem_37270
        res_mem_37274 = mem_37264
        res_mem_37275 = mem_37272
      res_mem_37276 = res_mem_37273
      res_mem_37277 = res_mem_37274
      res_mem_37278 = res_mem_37275
    segred_group_sizze_33210 = self.sizes["main.segred_group_size_33209"]
    max_num_groups_38546 = self.sizes["main.segred_num_groups_33211"]
    num_groups_33212 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24797,
                                                            segred_group_sizze_33210),
                                                  sext_i32_i64(max_num_groups_38546))))
    mem_37281 = opencl_alloc(self, np.int64(4), "mem_37281")
    mainzicounter_mem_38547 = self.mainzicounter_mem_38547
    group_res_arr_mem_38549 = opencl_alloc(self,
                                           (np.int32(4) * (segred_group_sizze_33210 * num_groups_33212)),
                                           "group_res_arr_mem_38549")
    num_threads_38551 = (num_groups_33212 * segred_group_sizze_33210)
    if ((1 * (np.long(num_groups_33212) * np.long(segred_group_sizze_33210))) != 0):
      self.mainzisegred_nonseg_33217_var.set_args(self.global_failure,
                                                  cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33210))),
                                                  cl.LocalMemory(np.long(np.int32(1))),
                                                  np.int64(m_24797),
                                                  np.int64(num_groups_33212),
                                                  res_mem_37276, mem_37281,
                                                  mainzicounter_mem_38547,
                                                  group_res_arr_mem_38549,
                                                  np.int64(num_threads_38551))
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegred_nonseg_33217_var,
                                 ((np.long(num_groups_33212) * np.long(segred_group_sizze_33210)),),
                                 (np.long(segred_group_sizze_33210),))
      if synchronous:
        sync(self)
    read_res_39094 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39094, mem_37281,
                    device_offset=(np.long(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    res_25153 = read_res_39094[0]
    mem_37281 = None
    res_25158 = sext_i32_i64(res_25153)
    bounds_invalid_upwards_25159 = slt64(res_25158, np.int64(0))
    valid_25160 = not(bounds_invalid_upwards_25159)
    range_valid_c_25161 = True
    assert valid_25160, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:5:3-18\n   #2  bfastfinal.fut:107:34-46\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:102:17-109:24\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                                                                    res_25158,
                                                                                                                                                                                                                                                                                                                    " is invalid."))
    suff_outer_par_33249 = (self.sizes["main.suff_outer_par_32"] <= m_24797)
    segmap_group_sizze_33272 = self.sizes["main.segmap_group_size_33253"]
    nest_sizze_33315 = (m_24797 * res_25158)
    segred_group_sizze_33316 = self.sizes["main.segred_group_size_33293"]
    max_num_groups_38577 = self.sizes["main.segred_num_groups_33295"]
    num_groups_33317 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33315,
                                                            segred_group_sizze_33316),
                                                  sext_i32_i64(max_num_groups_38577))))
    bytes_37284 = (np.int64(4) * segmap_group_sizze_33272)
    local_memory_capacity_38648 = self.max_local_memory
    if (sle64((bytes_37284 + bytes_37284),
              sext_i32_i64(local_memory_capacity_38648)) and suff_outer_par_33249):
      segmap_usable_groups_33273 = sdiv_up64(m_24797, segmap_group_sizze_33272)
      num_whole_tiles_36432 = squot64(res_25158, segmap_group_sizze_33272)
      residual_input_36531 = srem64(res_25158, segmap_group_sizze_33272)
      cond_36532 = (residual_input_36531 == np.int64(0))
      mem_37323 = opencl_alloc(self, bytes_37177, "mem_37323")
      if ((1 * (np.long(segmap_usable_groups_33273) * np.long(segmap_group_sizze_33272))) != 0):
        self.mainzisegmap_intragroup_36412_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_37284)),
                                                        cl.LocalMemory(np.long(bytes_37284)),
                                                        np.int64(N_24796),
                                                        np.int64(m_24797),
                                                        np.int64(res_25158),
                                                        np.int64(num_whole_tiles_36432),
                                                        np.int64(residual_input_36531),
                                                        np.byte(cond_36532),
                                                        res_mem_37197,
                                                        res_mem_37276,
                                                        res_mem_37277,
                                                        mem_37323)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_36412_var,
                                   ((np.long(segmap_usable_groups_33273) * np.long(segmap_group_sizze_33272)),),
                                   (np.long(segmap_group_sizze_33272),))
        if synchronous:
          sync(self)
      res_mem_37327 = mem_37323
    else:
      mem_37326 = opencl_alloc(self, bytes_37177, "mem_37326")
      if slt64((res_25158 * np.int64(2)), segred_group_sizze_33316):
        segment_sizze_nonzzero_38588 = smax64(np.int64(1), res_25158)
        num_threads_38589 = (num_groups_33317 * segred_group_sizze_33316)
        if ((1 * (np.long(num_groups_33317) * np.long(segred_group_sizze_33316))) != 0):
          self.mainzisegred_small_33299_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33316))),
                                                     np.int64(N_24796),
                                                     np.int64(m_24797),
                                                     np.int64(res_25158),
                                                     np.int64(num_groups_33317),
                                                     res_mem_37197,
                                                     res_mem_37276,
                                                     res_mem_37277, mem_37326,
                                                     np.int64(segment_sizze_nonzzero_38588))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_small_33299_var,
                                     ((np.long(num_groups_33317) * np.long(segred_group_sizze_33316)),),
                                     (np.long(segred_group_sizze_33316),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_38609 = sdiv_up64(num_groups_33317,
                                             smax64(np.int64(1), m_24797))
        elements_per_thread_38610 = sdiv_up64(res_25158,
                                              (segred_group_sizze_33316 * groups_per_segment_38609))
        virt_num_groups_38611 = (groups_per_segment_38609 * m_24797)
        num_threads_38612 = (num_groups_33317 * segred_group_sizze_33316)
        threads_per_segment_38613 = (groups_per_segment_38609 * segred_group_sizze_33316)
        group_res_arr_mem_38614 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_33316 * virt_num_groups_38611)),
                                               "group_res_arr_mem_38614")
        mainzicounter_mem_38616 = self.mainzicounter_mem_38616
        if ((1 * (np.long(num_groups_33317) * np.long(segred_group_sizze_33316))) != 0):
          self.mainzisegred_large_33299_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long(np.int32(1))),
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33316))),
                                                     np.int64(N_24796),
                                                     np.int64(res_25158),
                                                     np.int64(num_groups_33317),
                                                     res_mem_37197,
                                                     res_mem_37276,
                                                     res_mem_37277, mem_37326,
                                                     np.int64(groups_per_segment_38609),
                                                     np.int64(elements_per_thread_38610),
                                                     np.int64(virt_num_groups_38611),
                                                     np.int64(threads_per_segment_38613),
                                                     group_res_arr_mem_38614,
                                                     mainzicounter_mem_38616)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_large_33299_var,
                                     ((np.long(num_groups_33317) * np.long(segred_group_sizze_33316)),),
                                     (np.long(segred_group_sizze_33316),))
          if synchronous:
            sync(self)
      res_mem_37327 = mem_37326
    iota32_arg_25183 = (N_24796 - res_24810)
    bounds_invalid_upwards_25184 = slt64(iota32_arg_25183, np.int64(0))
    valid_25185 = not(bounds_invalid_upwards_25184)
    range_valid_c_25186 = True
    assert valid_25185, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:115:22-35\n   #3  bfastfinal.fut:180:5-58\n   #4  bfastfinal.fut:175:1-181:32\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_25183,
                                                                                                                                                                                                                                      " is invalid."))
    x_25188 = (np.int32(1) + n_24801)
    index_certs_25189 = True
    assert bounds_check_25066, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:113:64-84\n   #1  bfastfinal.fut:111:15-115:36\n   #2  bfastfinal.fut:180:5-58\n   #3  bfastfinal.fut:175:1-181:32\n" % ("Index [",
                                                                                                                                                                                                                 i_25063,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_24796,
                                                                                                                                                                                                                 "]."))
    read_res_39096 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39096, mappingindices_mem_36737,
                    device_offset=(np.long(i_25063) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_25190 = read_res_39096[0]
    res_25191 = sitofp_i32_f32(r32_arg_25190)
    range_valid_c_25192 = True
    assert valid_25185, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:127:29-44\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:180:5-58\n   #6  bfastfinal.fut:175:1-181:32\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_25183,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_33394 = self.sizes["main.segmap_group_size_33377"]
    segmap_usable_groups_33395 = sdiv_up64(iota32_arg_25183,
                                           segmap_group_sizze_33394)
    bytes_37329 = (np.int64(4) * iota32_arg_25183)
    mem_37330 = opencl_alloc(self, bytes_37329, "mem_37330")
    mem_37332 = opencl_alloc(self, bytes_37329, "mem_37332")
    if ((1 * (np.long(segmap_usable_groups_33395) * np.long(segmap_group_sizze_33394))) != 0):
      self.mainzisegmap_33375_var.set_args(self.global_failure,
                                           np.float32(lam_24804),
                                           np.int64(iota32_arg_25183),
                                           np.int32(x_25188),
                                           np.float32(res_25191),
                                           mappingindices_mem_36737, mem_37330,
                                           mem_37332)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_33375_var,
                                 ((np.long(segmap_usable_groups_33395) * np.long(segmap_group_sizze_33394)),),
                                 (np.long(segmap_group_sizze_33394),))
      if synchronous:
        sync(self)
    mem_37330 = None
    cond_25208 = (iota32_arg_25183 == np.int64(0))
    if cond_25208:
      iters_25209 = np.int32(0)
    else:
      iters_25209 = np.int32(16)
    loop_nonempty_25210 = slt32(np.int32(0), iters_25209)
    i_25211 = (iota32_arg_25183 - np.int64(1))
    x_25212 = sle64(np.int64(0), i_25211)
    y_25213 = slt64(i_25211, iota32_arg_25183)
    bounds_check_25214 = (x_25212 and y_25213)
    loop_not_taken_25215 = not(loop_nonempty_25210)
    protect_assert_disj_25216 = (bounds_check_25214 or loop_not_taken_25215)
    index_certs_25217 = True
    assert protect_assert_disj_25216, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  lib/github.com/diku-dk/sorts/radix_sort.fut:25:24-35\n   #2  lib/github.com/diku-dk/sorts/radix_sort.fut:53:31-62\n   #3  lib/github.com/diku-dk/sorts/radix_sort.fut:104:6-36\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:142:29-147:72\n   #6  /prelude/functional.fut:9:42-44\n   #7  bfastfinal.fut:120:50-163:9\n   #8  bfastfinal.fut:180:5-58\n   #9  bfastfinal.fut:175:1-181:32\n" % ("Index [",
i_25211,
out of bounds for array of shape [",
iota32_arg_25183,

    suff_outer_par_33412 = (self.sizes["main.suff_outer_par_34"] <= m_24797)
    fits_33926 = sle64(iota32_arg_25183, max_group_sizze_31474)
    suff_intra_par_33924 = (self.sizes["main.suff_intra_par_35"] <= iota32_arg_25183)
    intra_suff_and_fits_33927 = (suff_intra_par_33924 and fits_33926)
    segmap_group_sizze_33686 = self.sizes["main.segmap_group_size_33450"]
    segmap_group_sizze_34957 = self.sizes["main.segmap_group_size_34937"]
    max_num_groups_38654 = self.sizes["main.segmap_num_groups_34939"]
    num_groups_34958 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24797,
                                                            segmap_group_sizze_34957),
                                                  sext_i32_i64(max_num_groups_38654))))
    nest_sizze_34979 = (m_24797 * iota32_arg_25183)
    segscan_group_sizze_34980 = self.sizes["main.segscan_group_size_34896"]
    max_num_groups_38655 = self.sizes["main.segscan_num_groups_34898"]
    num_groups_34981 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34979,
                                                            segscan_group_sizze_34980),
                                                  sext_i32_i64(max_num_groups_38655))))
    segred_group_sizze_35018 = self.sizes["main.segred_group_size_34842"]
    max_num_groups_38656 = self.sizes["main.segred_num_groups_34844"]
    num_groups_35019 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34979,
                                                            segred_group_sizze_35018),
                                                  sext_i32_i64(max_num_groups_38656))))
    segmap_group_sizze_35057 = self.sizes["main.segmap_group_size_34811"]
    segmap_group_sizze_35092 = self.sizes["main.segmap_group_size_34750"]
    suff_intra_par_35133 = (self.sizes["main.suff_intra_par_37"] <= iota32_arg_25183)
    intra_suff_and_fits_35134 = (fits_33926 and suff_intra_par_35133)
    segscan_group_sizze_35217 = self.sizes["main.segscan_group_size_34550"]
    max_num_groups_38657 = self.sizes["main.segscan_num_groups_34552"]
    num_groups_35218 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34979,
                                                            segscan_group_sizze_35217),
                                                  sext_i32_i64(max_num_groups_38657))))
    segmap_group_sizze_35286 = self.sizes["main.segmap_group_size_34500"]
    segmap_group_sizze_35323 = self.sizes["main.segmap_group_size_34170"]
    segmap_usable_groups_35287 = sdiv_up_safe64(nest_sizze_34979,
                                                segmap_group_sizze_35286)
    bytes_37353 = (np.int64(8) * iota32_arg_25183)
    bytes_37496 = (np.int64(4) * nest_sizze_34979)
    bytes_37549 = (np.int64(8) * nest_sizze_34979)
    double_buffer_sizze_37713 = (np.int64(4) * iota32_arg_25183)
    double_buffer_sizze_37717 = (np.int64(4) * iota32_arg_25183)
    local_memory_capacity_39042 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_39042)) and suff_outer_par_33412):
      segmap_usable_groups_33687 = sdiv_up64(m_24797, segmap_group_sizze_33686)
      mem_37443 = opencl_alloc(self, bytes_37177, "mem_37443")
      mem_37445 = opencl_alloc(self, bytes_37177, "mem_37445")
      mem_37447 = opencl_alloc(self, bytes_37177, "mem_37447")
      num_threads_37829 = (segmap_group_sizze_33686 * segmap_usable_groups_33687)
      total_sizze_37830 = (bytes_37329 * num_threads_37829)
      mem_37335 = opencl_alloc(self, total_sizze_37830, "mem_37335")
      total_sizze_37831 = (bytes_37353 * num_threads_37829)
      mem_37354 = opencl_alloc(self, total_sizze_37831, "mem_37354")
      total_sizze_37832 = (bytes_37353 * num_threads_37829)
      mem_37356 = opencl_alloc(self, total_sizze_37832, "mem_37356")
      total_sizze_37833 = (bytes_37353 * num_threads_37829)
      mem_37358 = opencl_alloc(self, total_sizze_37833, "mem_37358")
      total_sizze_37834 = (bytes_37353 * num_threads_37829)
      mem_37360 = opencl_alloc(self, total_sizze_37834, "mem_37360")
      total_sizze_37835 = (bytes_37329 * num_threads_37829)
      mem_37362 = opencl_alloc(self, total_sizze_37835, "mem_37362")
      total_sizze_37836 = (bytes_37329 * num_threads_37829)
      mem_37424 = opencl_alloc(self, total_sizze_37836, "mem_37424")
      total_sizze_37837 = (double_buffer_sizze_37713 * num_threads_37829)
      double_buffer_mem_37711 = opencl_alloc(self, total_sizze_37837,
                                             "double_buffer_mem_37711")
      if ((1 * (np.long(segmap_usable_groups_33687) * np.long(segmap_group_sizze_33686))) != 0):
        self.mainzisegmap_33448_var.set_args(self.global_failure,
                                             self.failure_is_an_option,
                                             self.global_failure_args,
                                             np.int64(N_24796),
                                             np.int64(m_24797),
                                             np.int32(n_24801),
                                             np.int64(iota32_arg_25183),
                                             np.int32(iters_25209),
                                             np.int64(i_25211),
                                             np.int64(segmap_usable_groups_33687),
                                             res_mem_37196, res_mem_37197,
                                             res_mem_37198, res_mem_37276,
                                             res_mem_37277, res_mem_37278,
                                             res_mem_37327, mem_37332,
                                             mem_37335, mem_37354, mem_37356,
                                             mem_37358, mem_37360, mem_37362,
                                             mem_37424, mem_37443, mem_37445,
                                             mem_37447, double_buffer_mem_37711)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_33448_var,
                                   ((np.long(segmap_usable_groups_33687) * np.long(segmap_group_sizze_33686)),),
                                   (np.long(segmap_group_sizze_33686),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_37335 = None
      mem_37354 = None
      mem_37356 = None
      mem_37358 = None
      mem_37360 = None
      mem_37362 = None
      mem_37424 = None
      double_buffer_mem_37711 = None
      res_mem_37587 = mem_37443
      res_mem_37588 = mem_37445
      res_mem_37589 = mem_37447
    else:
      local_memory_capacity_39041 = self.max_local_memory
      if (sle64((((((((((((bytes_37329 + (np.int32(1) * iota32_arg_25183)) + (np.int32(4) * iota32_arg_25183)) + (np.int32(4) * iota32_arg_25183)) + bytes_37329) + bytes_37353) + bytes_37353) + bytes_37353) + bytes_37353) + bytes_37329) + double_buffer_sizze_37717) + bytes_37329),
                sext_i32_i64(local_memory_capacity_39041)) and intra_suff_and_fits_33927):
        mem_37485 = opencl_alloc(self, bytes_37177, "mem_37485")
        mem_37487 = opencl_alloc(self, bytes_37177, "mem_37487")
        mem_37489 = opencl_alloc(self, bytes_37177, "mem_37489")
        if ((1 * (np.long(m_24797) * np.long(iota32_arg_25183))) != 0):
          self.mainzisegmap_intragroup_33446_var.set_args(self.global_failure,
                                                          self.failure_is_an_option,
                                                          self.global_failure_args,
                                                          cl.LocalMemory(np.long(bytes_37329)),
                                                          cl.LocalMemory(np.long(double_buffer_sizze_37717)),
                                                          cl.LocalMemory(np.long(bytes_37329)),
                                                          cl.LocalMemory(np.long(bytes_37353)),
                                                          cl.LocalMemory(np.long(bytes_37353)),
                                                          cl.LocalMemory(np.long(bytes_37353)),
                                                          cl.LocalMemory(np.long(bytes_37353)),
                                                          cl.LocalMemory(np.long(bytes_37329)),
                                                          cl.LocalMemory(np.long((np.int32(4) * iota32_arg_25183))),
                                                          cl.LocalMemory(np.long((np.int32(4) * iota32_arg_25183))),
                                                          cl.LocalMemory(np.long((np.int32(1) * iota32_arg_25183))),
                                                          cl.LocalMemory(np.long(bytes_37329)),
                                                          np.int64(N_24796),
                                                          np.int32(n_24801),
                                                          np.int64(iota32_arg_25183),
                                                          np.int32(iters_25209),
                                                          np.int64(i_25211),
                                                          res_mem_37196,
                                                          res_mem_37197,
                                                          res_mem_37198,
                                                          res_mem_37276,
                                                          res_mem_37277,
                                                          res_mem_37278,
                                                          res_mem_37327,
                                                          mem_37332, mem_37485,
                                                          mem_37487, mem_37489)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_33446_var,
                                     ((np.long(m_24797) * np.long(iota32_arg_25183)),),
                                     (np.long(iota32_arg_25183),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        res_mem_37584 = mem_37485
        res_mem_37585 = mem_37487
        res_mem_37586 = mem_37489
      else:
        mem_37492 = opencl_alloc(self, bytes_37177, "mem_37492")
        mem_37494 = opencl_alloc(self, bytes_37177, "mem_37494")
        if ((1 * (np.long(num_groups_34958) * np.long(segmap_group_sizze_34957))) != 0):
          self.mainzisegmap_34935_var.set_args(self.global_failure,
                                               np.int64(m_24797),
                                               np.int64(num_groups_34958),
                                               res_mem_37196, res_mem_37277,
                                               res_mem_37278, mem_37492,
                                               mem_37494)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34935_var,
                                     ((np.long(num_groups_34958) * np.long(segmap_group_sizze_34957)),),
                                     (np.long(segmap_group_sizze_34957),))
          if synchronous:
            sync(self)
        mem_37498 = opencl_alloc(self, bytes_37496, "mem_37498")
        if slt64(np.int64(0), (m_24797 * iota32_arg_25183)):
          stage1_max_num_groups_38740 = self.max_group_size
          stage1_num_groups_38741 = smin64(stage1_max_num_groups_38740,
                                           num_groups_34981)
          num_threads_38742 = sext_i64_i32((stage1_num_groups_38741 * segscan_group_sizze_34980))
          if ((1 * (np.long(stage1_num_groups_38741) * np.long(segscan_group_sizze_34980))) != 0):
            self.mainziscan_stage1_34902_var.set_args(self.global_failure,
                                                      cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                    (np.int32(4) * segscan_group_sizze_34980)))),
                                                      np.int64(N_24796),
                                                      np.int64(m_24797),
                                                      np.int64(iota32_arg_25183),
                                                      res_mem_37197,
                                                      res_mem_37276,
                                                      res_mem_37277,
                                                      res_mem_37327, mem_37494,
                                                      mem_37498,
                                                      np.int32(num_threads_38742))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainziscan_stage1_34902_var,
                                       ((np.long(stage1_num_groups_38741) * np.long(segscan_group_sizze_34980)),),
                                       (np.long(segscan_group_sizze_34980),))
            if synchronous:
              sync(self)
          if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38741))) != 0):
            self.mainziscan_stage2_34902_var.set_args(self.global_failure,
                                                      cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                    (np.int32(4) * stage1_num_groups_38741)))),
                                                      np.int64(m_24797),
                                                      np.int64(iota32_arg_25183),
                                                      mem_37498,
                                                      np.int64(stage1_num_groups_38741),
                                                      np.int32(num_threads_38742))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainziscan_stage2_34902_var,
                                       ((np.long(np.int64(1)) * np.long(stage1_num_groups_38741)),),
                                       (np.long(stage1_num_groups_38741),))
            if synchronous:
              sync(self)
          required_groups_38784 = sext_i64_i32(sdiv_up64((m_24797 * iota32_arg_25183),
                                                         segscan_group_sizze_34980))
          if ((1 * (np.long(num_groups_34981) * np.long(segscan_group_sizze_34980))) != 0):
            self.mainziscan_stage3_34902_var.set_args(self.global_failure,
                                                      np.int64(m_24797),
                                                      np.int64(iota32_arg_25183),
                                                      np.int64(num_groups_34981),
                                                      mem_37498,
                                                      np.int32(num_threads_38742),
                                                      np.int32(required_groups_38784))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainziscan_stage3_34902_var,
                                       ((np.long(num_groups_34981) * np.long(segscan_group_sizze_34980)),),
                                       (np.long(segscan_group_sizze_34980),))
            if synchronous:
              sync(self)
        mem_37501 = opencl_alloc(self, m_24797, "mem_37501")
        mem_37503 = opencl_alloc(self, bytes_37177, "mem_37503")
        mem_37505 = opencl_alloc(self, bytes_37177, "mem_37505")
        if slt64((iota32_arg_25183 * np.int64(2)), segred_group_sizze_35018):
          segment_sizze_nonzzero_38796 = smax64(np.int64(1), iota32_arg_25183)
          num_threads_38797 = (num_groups_35019 * segred_group_sizze_35018)
          if ((1 * (np.long(num_groups_35019) * np.long(segred_group_sizze_35018))) != 0):
            self.mainzisegred_small_34848_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_35018))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_35018))),
                                                       cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_35018))),
                                                       np.int64(m_24797),
                                                       np.int64(iota32_arg_25183),
                                                       np.int64(num_groups_35019),
                                                       mem_37332, mem_37492,
                                                       mem_37494, mem_37498,
                                                       mem_37501, mem_37503,
                                                       mem_37505,
                                                       np.int64(segment_sizze_nonzzero_38796))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_34848_var,
                                       ((np.long(num_groups_35019) * np.long(segred_group_sizze_35018)),),
                                       (np.long(segred_group_sizze_35018),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38832 = sdiv_up64(num_groups_35019,
                                               smax64(np.int64(1), m_24797))
          elements_per_thread_38833 = sdiv_up64(iota32_arg_25183,
                                                (segred_group_sizze_35018 * groups_per_segment_38832))
          virt_num_groups_38834 = (groups_per_segment_38832 * m_24797)
          num_threads_38835 = (num_groups_35019 * segred_group_sizze_35018)
          threads_per_segment_38836 = (groups_per_segment_38832 * segred_group_sizze_35018)
          group_res_arr_mem_38837 = opencl_alloc(self,
                                                 (np.int32(1) * (segred_group_sizze_35018 * virt_num_groups_38834)),
                                                 "group_res_arr_mem_38837")
          group_res_arr_mem_38839 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_35018 * virt_num_groups_38834)),
                                                 "group_res_arr_mem_38839")
          group_res_arr_mem_38841 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_35018 * virt_num_groups_38834)),
                                                 "group_res_arr_mem_38841")
          mainzicounter_mem_38843 = self.mainzicounter_mem_38843
          if ((1 * (np.long(num_groups_35019) * np.long(segred_group_sizze_35018))) != 0):
            self.mainzisegred_large_34848_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_35018))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_35018))),
                                                       cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_35018))),
                                                       np.int64(iota32_arg_25183),
                                                       np.int64(num_groups_35019),
                                                       mem_37332, mem_37492,
                                                       mem_37494, mem_37498,
                                                       mem_37501, mem_37503,
                                                       mem_37505,
                                                       np.int64(groups_per_segment_38832),
                                                       np.int64(elements_per_thread_38833),
                                                       np.int64(virt_num_groups_38834),
                                                       group_res_arr_mem_38837,
                                                       group_res_arr_mem_38839,
                                                       group_res_arr_mem_38841,
                                                       mainzicounter_mem_38843)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_34848_var,
                                       ((np.long(num_groups_35019) * np.long(segred_group_sizze_35018)),),
                                       (np.long(segred_group_sizze_35018),))
            if synchronous:
              sync(self)
        mem_37492 = None
        mem_37498 = None
        segmap_usable_groups_35058 = sdiv_up64(m_24797,
                                               segmap_group_sizze_35057)
        mem_37508 = opencl_alloc(self, m_24797, "mem_37508")
        mem_37510 = opencl_alloc(self, bytes_37177, "mem_37510")
        mem_37512 = opencl_alloc(self, bytes_37177, "mem_37512")
        if ((1 * (np.long(segmap_usable_groups_35058) * np.long(segmap_group_sizze_35057))) != 0):
          self.mainzisegmap_34809_var.set_args(self.global_failure,
                                               np.int64(m_24797), mem_37494,
                                               mem_37501, mem_37503, mem_37505,
                                               mem_37508, mem_37510, mem_37512)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34809_var,
                                     ((np.long(segmap_usable_groups_35058) * np.long(segmap_group_sizze_35057)),),
                                     (np.long(segmap_group_sizze_35057),))
          if synchronous:
            sync(self)
        mem_37501 = None
        mem_37503 = None
        mem_37505 = None
        segmap_usable_groups_35093 = sdiv_up64(nest_sizze_34979,
                                               segmap_group_sizze_35092)
        mem_37516 = opencl_alloc(self, bytes_37496, "mem_37516")
        if ((1 * (np.long(segmap_usable_groups_35093) * np.long(segmap_group_sizze_35092))) != 0):
          self.mainzisegmap_34747_var.set_args(self.global_failure,
                                               self.failure_is_an_option,
                                               self.global_failure_args,
                                               np.int64(N_24796),
                                               np.int64(m_24797),
                                               np.int64(iota32_arg_25183),
                                               res_mem_37197, res_mem_37277,
                                               mem_37494, mem_37516)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34747_var,
                                     ((np.long(segmap_usable_groups_35093) * np.long(segmap_group_sizze_35092)),),
                                     (np.long(segmap_group_sizze_35092),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_param_37524 = mem_37516
        i_35120 = np.int32(0)
        one_39099 = np.int32(1)
        for counter_39098 in range(iters_25209):
          lifted_2_radix_sort_step_arg_35122 = (np.int32(2) * i_35120)
          lifted_0_get_bit_arg_35123 = (np.int32(1) + lifted_2_radix_sort_step_arg_35122)
          res_35124 = (lifted_0_get_bit_arg_35123 == np.int32(31))
          res_35125 = (lifted_2_radix_sort_step_arg_35122 == np.int32(31))
          local_memory_capacity_39035 = self.max_local_memory
          if (sle64((((((bytes_37353 + bytes_37353) + bytes_37353) + bytes_37353) + bytes_37329) + bytes_37329),
                    sext_i32_i64(local_memory_capacity_39035)) and intra_suff_and_fits_35134):
            mem_37529 = opencl_alloc(self, bytes_37496, "mem_37529")
            self.futhark_builtinzhgpu_map_transpose_f32(mem_37529, np.int64(0),
                                                        mem_param_37524,
                                                        np.int64(0),
                                                        np.int64(1),
                                                        iota32_arg_25183,
                                                        m_24797)
            mem_37547 = opencl_alloc(self, bytes_37496, "mem_37547")
            if ((1 * (np.long(m_24797) * np.long(iota32_arg_25183))) != 0):
              self.mainzisegmap_intragroup_34232_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.long(bytes_37329)),
                                                              cl.LocalMemory(np.long(bytes_37329)),
                                                              cl.LocalMemory(np.long(bytes_37353)),
                                                              cl.LocalMemory(np.long(bytes_37353)),
                                                              cl.LocalMemory(np.long(bytes_37353)),
                                                              cl.LocalMemory(np.long(bytes_37353)),
                                                              np.int64(m_24797),
                                                              np.int64(iota32_arg_25183),
                                                              np.int64(i_25211),
                                                              np.int32(lifted_2_radix_sort_step_arg_35122),
                                                              np.int32(lifted_0_get_bit_arg_35123),
                                                              np.byte(res_35124),
                                                              np.byte(res_35125),
                                                              mem_param_37524,
                                                              mem_37529,
                                                              mem_37547)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegmap_intragroup_34232_var,
                                         ((np.long(m_24797) * np.long(iota32_arg_25183)),),
                                         (np.long(iota32_arg_25183),))
              if synchronous:
                sync(self)
            mem_37529 = None
            res_mem_37568 = mem_37547
          else:
            mem_37551 = opencl_alloc(self, bytes_37549, "mem_37551")
            mem_37554 = opencl_alloc(self, bytes_37549, "mem_37554")
            mem_37557 = opencl_alloc(self, bytes_37549, "mem_37557")
            mem_37560 = opencl_alloc(self, bytes_37549, "mem_37560")
            mem_37563 = opencl_alloc(self, bytes_37496, "mem_37563")
            if slt64(np.int64(0), (m_24797 * iota32_arg_25183)):
              stage1_max_num_groups_38935 = self.max_group_size
              stage1_num_groups_38936 = smin64(stage1_max_num_groups_38935,
                                               num_groups_35218)
              num_threads_38937 = sext_i64_i32((stage1_num_groups_38936 * segscan_group_sizze_35217))
              if ((1 * (np.long(stage1_num_groups_38936) * np.long(segscan_group_sizze_35217))) != 0):
                self.mainziscan_stage1_34556_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35217)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35217)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35217)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35217)))),
                                                          np.int64(m_24797),
                                                          np.int64(iota32_arg_25183),
                                                          np.int32(lifted_2_radix_sort_step_arg_35122),
                                                          np.int32(lifted_0_get_bit_arg_35123),
                                                          np.byte(res_35124),
                                                          np.byte(res_35125),
                                                          mem_param_37524,
                                                          mem_37551, mem_37554,
                                                          mem_37557, mem_37560,
                                                          mem_37563,
                                                          np.int32(num_threads_38937))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainziscan_stage1_34556_var,
                                           ((np.long(stage1_num_groups_38936) * np.long(segscan_group_sizze_35217)),),
                                           (np.long(segscan_group_sizze_35217),))
                if synchronous:
                  sync(self)
              if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38936))) != 0):
                self.mainziscan_stage2_34556_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38936)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38936)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38936)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38936)))),
                                                          np.int64(m_24797),
                                                          np.int64(iota32_arg_25183),
                                                          mem_37551, mem_37554,
                                                          mem_37557, mem_37560,
                                                          np.int64(stage1_num_groups_38936),
                                                          np.int32(num_threads_38937))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainziscan_stage2_34556_var,
                                           ((np.long(np.int64(1)) * np.long(stage1_num_groups_38936)),),
                                           (np.long(stage1_num_groups_38936),))
                if synchronous:
                  sync(self)
              required_groups_39018 = sext_i64_i32(sdiv_up64((m_24797 * iota32_arg_25183),
                                                             segscan_group_sizze_35217))
              if ((1 * (np.long(num_groups_35218) * np.long(segscan_group_sizze_35217))) != 0):
                self.mainziscan_stage3_34556_var.set_args(self.global_failure,
                                                          np.int64(m_24797),
                                                          np.int64(iota32_arg_25183),
                                                          np.int64(num_groups_35218),
                                                          mem_37551, mem_37554,
                                                          mem_37557, mem_37560,
                                                          np.int32(num_threads_38937),
                                                          np.int32(required_groups_39018))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainziscan_stage3_34556_var,
                                           ((np.long(num_groups_35218) * np.long(segscan_group_sizze_35217)),),
                                           (np.long(segscan_group_sizze_35217),))
                if synchronous:
                  sync(self)
            mem_37566 = opencl_alloc(self, bytes_37496, "mem_37566")
            if (((m_24797 * iota32_arg_25183) * np.int32(4)) != 0):
              cl.enqueue_copy(self.queue, mem_37566, mem_param_37524,
                              dest_offset=np.long(np.int64(0)),
                              src_offset=np.long(np.int64(0)),
                              byte_count=np.long(((m_24797 * iota32_arg_25183) * np.int32(4))))
            if synchronous:
              sync(self)
            if ((1 * (np.long(segmap_usable_groups_35287) * np.long(segmap_group_sizze_35286))) != 0):
              self.mainzisegmap_34497_var.set_args(self.global_failure,
                                                   np.int64(m_24797),
                                                   np.int64(iota32_arg_25183),
                                                   np.int64(i_25211),
                                                   mem_param_37524, mem_37551,
                                                   mem_37554, mem_37557,
                                                   mem_37560, mem_37563,
                                                   mem_37566)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegmap_34497_var,
                                         ((np.long(segmap_usable_groups_35287) * np.long(segmap_group_sizze_35286)),),
                                         (np.long(segmap_group_sizze_35286),))
              if synchronous:
                sync(self)
            mem_37551 = None
            mem_37554 = None
            mem_37557 = None
            mem_37560 = None
            mem_37563 = None
            res_mem_37568 = mem_37566
          mem_param_tmp_38904 = res_mem_37568
          mem_param_37524 = mem_param_tmp_38904
          i_35120 += one_39099
        res_r_mem_37578 = mem_param_37524
        mem_37516 = None
        segmap_usable_groups_35324 = sdiv_up64(m_24797,
                                               segmap_group_sizze_35323)
        mem_37581 = opencl_alloc(self, bytes_37177, "mem_37581")
        mem_37583 = opencl_alloc(self, bytes_37177, "mem_37583")
        if ((1 * (np.long(segmap_usable_groups_35324) * np.long(segmap_group_sizze_35323))) != 0):
          self.mainzisegmap_34168_var.set_args(self.global_failure,
                                               self.failure_is_an_option,
                                               self.global_failure_args,
                                               np.int64(N_24796),
                                               np.int64(m_24797),
                                               np.int32(n_24801),
                                               np.int64(iota32_arg_25183),
                                               res_mem_37196, res_mem_37198,
                                               res_mem_37277, mem_37494,
                                               mem_37508, mem_37510,
                                               res_r_mem_37578, mem_37581,
                                               mem_37583)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34168_var,
                                     ((np.long(segmap_usable_groups_35324) * np.long(segmap_group_sizze_35323)),),
                                     (np.long(segmap_group_sizze_35323),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_37494 = None
        mem_37508 = None
        mem_37510 = None
        res_r_mem_37578 = None
        res_mem_37584 = mem_37581
        res_mem_37585 = mem_37512
        res_mem_37586 = mem_37583
      res_mem_37587 = res_mem_37584
      res_mem_37588 = res_mem_37585
      res_mem_37589 = res_mem_37586
    res_mem_37196 = None
    res_mem_37197 = None
    res_mem_37198 = None
    res_mem_37276 = None
    res_mem_37277 = None
    res_mem_37278 = None
    res_mem_37327 = None
    mem_37332 = None
    out_arrsizze_37849 = m_24797
    out_arrsizze_37851 = m_24797
    out_arrsizze_37853 = m_24797
    out_mem_37848 = res_mem_37587
    out_mem_37850 = res_mem_37588
    out_mem_37852 = res_mem_37589
    return (out_mem_37848, out_arrsizze_37849, out_mem_37850,
            out_arrsizze_37851, out_mem_37852, out_arrsizze_37853)
  def futhark_mainDetailed(self, mappingindices_mem_36737, images_mem_36738,
                           N_24054, m_24055, N_24056, trend_24057, k_24058,
                           n_24059, freq_24060, hfrac_24061, lam_24062):
    dim_match_24065 = (N_24054 == N_24056)
    empty_or_match_cert_24066 = True
    assert dim_match_24065, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:169:1-173:56\n" % ("function arguments of wrong shape",))
    res_24068 = sext_i32_i64(n_24059)
    x_24069 = (np.int32(2) * k_24058)
    k2p2_24070 = (np.int32(2) + x_24069)
    cond_24071 = slt32(np.int32(0), trend_24057)
    if cond_24071:
      k2p2zq_24072 = k2p2_24070
    else:
      res_24073 = (k2p2_24070 - np.int32(1))
      k2p2zq_24072 = res_24073
    res_24074 = sext_i32_i64(k2p2zq_24072)
    binop_x_36741 = (N_24054 * res_24074)
    bytes_36740 = (np.int64(4) * binop_x_36741)
    if cond_24071:
      bounds_invalid_upwards_24076 = slt64(res_24074, np.int64(0))
      valid_24077 = not(bounds_invalid_upwards_24076)
      range_valid_c_24078 = True
      assert valid_24077, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:30:17-66\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24074,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_25784 = self.sizes["mainDetailed.segmap_group_size_25714"]
      segmap_usable_groups_25785 = sdiv_up64(binop_x_36741,
                                             segmap_group_sizze_25784)
      mem_36742 = opencl_alloc(self, bytes_36740, "mem_36742")
      if ((1 * (np.long(segmap_usable_groups_25785) * np.long(segmap_group_sizze_25784))) != 0):
        self.mainDetailedzisegmap_25711_var.set_args(self.global_failure,
                                                     np.int64(N_24054),
                                                     np.float32(freq_24060),
                                                     np.int64(res_24074),
                                                     mappingindices_mem_36737,
                                                     mem_36742)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_25711_var,
                                   ((np.long(segmap_usable_groups_25785) * np.long(segmap_group_sizze_25784)),),
                                   (np.long(segmap_group_sizze_25784),))
        if synchronous:
          sync(self)
      binop_p_mem_36747 = mem_36742
    else:
      bounds_invalid_upwards_24102 = slt64(res_24074, np.int64(0))
      valid_24103 = not(bounds_invalid_upwards_24102)
      range_valid_c_24104 = True
      assert valid_24103, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:49:10-22\n   #3  bfastfinal.fut:31:17-64\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24074,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_25958 = self.sizes["mainDetailed.segmap_group_size_25892"]
      segmap_usable_groups_25959 = sdiv_up64(binop_x_36741,
                                             segmap_group_sizze_25958)
      mem_36746 = opencl_alloc(self, bytes_36740, "mem_36746")
      if ((1 * (np.long(segmap_usable_groups_25959) * np.long(segmap_group_sizze_25958))) != 0):
        self.mainDetailedzisegmap_25889_var.set_args(self.global_failure,
                                                     np.int64(N_24054),
                                                     np.float32(freq_24060),
                                                     np.int64(res_24074),
                                                     mappingindices_mem_36737,
                                                     mem_36746)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_25889_var,
                                   ((np.long(segmap_usable_groups_25959) * np.long(segmap_group_sizze_25958)),),
                                   (np.long(segmap_group_sizze_25958),))
        if synchronous:
          sync(self)
      binop_p_mem_36747 = mem_36746
    x_24127 = (N_24054 * N_24054)
    y_24128 = (np.int64(2) * N_24054)
    x_24129 = (x_24127 + y_24128)
    x_24130 = (np.int64(1) + x_24129)
    y_24131 = (np.int64(1) + N_24054)
    zzero_24132 = (y_24131 == np.int64(0))
    nonzzero_24133 = not(zzero_24132)
    nonzzero_cert_24134 = True
    assert nonzzero_24133, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:37:32-60\n   #1  bfastfinal.fut:173:3-56\n   #2  bfastfinal.fut:169:1-173:56\n" % ("division by zero",))
    x_24135 = sdiv64(x_24130, y_24131)
    x_24136 = (x_24135 - N_24054)
    binop_p_24137 = (x_24136 - np.int64(1))
    res_24138 = sext_i64_i32(binop_p_24137)
    res_24139 = sitofp_i32_f32(res_24138)
    segmap_group_sizze_26041 = self.sizes["mainDetailed.segmap_group_size_26020"]
    segmap_usable_groups_26042 = sdiv_up64(binop_x_36741,
                                           segmap_group_sizze_26041)
    mem_36750 = opencl_alloc(self, bytes_36740, "mem_36750")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_36750, np.int64(0),
                                                binop_p_mem_36747, np.int64(0),
                                                np.int64(1), N_24054, res_24074)
    mem_36754 = opencl_alloc(self, bytes_36740, "mem_36754")
    if ((1 * (np.long(segmap_usable_groups_26042) * np.long(segmap_group_sizze_26041))) != 0):
      self.mainDetailedzisegmap_26017_var.set_args(self.global_failure,
                                                   np.int64(N_24054),
                                                   np.int64(res_24074),
                                                   np.float32(res_24139),
                                                   mem_36750, mem_36754)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_26017_var,
                                 ((np.long(segmap_usable_groups_26042) * np.long(segmap_group_sizze_26041)),),
                                 (np.long(segmap_group_sizze_26041),))
      if synchronous:
        sync(self)
    eq_x_y_24147 = (np.int64(0) == res_24074)
    p_and_eq_x_y_24148 = (cond_24071 and eq_x_y_24147)
    not_p_24149 = not(cond_24071)
    p_and_eq_x_y_24150 = (eq_x_y_24147 and not_p_24149)
    empty_slice_24151 = (p_and_eq_x_y_24148 or p_and_eq_x_y_24150)
    m_24152 = (res_24074 - np.int64(1))
    zzero_leq_i_p_m_t_s_24153 = sle64(np.int64(0), m_24152)
    i_p_m_t_s_leq_w_24154 = slt64(m_24152, res_24074)
    i_lte_j_24155 = sle64(np.int64(0), res_24074)
    y_24156 = (zzero_leq_i_p_m_t_s_24153 and i_p_m_t_s_leq_w_24154)
    y_24157 = (i_lte_j_24155 and y_24156)
    ok_or_empty_24158 = (empty_slice_24151 or y_24157)
    empty_slice_24159 = (res_24068 == np.int64(0))
    m_24160 = (res_24068 - np.int64(1))
    zzero_leq_i_p_m_t_s_24161 = sle64(np.int64(0), m_24160)
    i_p_m_t_s_leq_w_24162 = slt64(m_24160, N_24054)
    i_lte_j_24163 = sle64(np.int64(0), res_24068)
    y_24164 = (zzero_leq_i_p_m_t_s_24161 and i_p_m_t_s_leq_w_24162)
    y_24165 = (i_lte_j_24163 and y_24164)
    ok_or_empty_24166 = (empty_slice_24159 or y_24165)
    index_ok_24167 = (ok_or_empty_24158 and ok_or_empty_24166)
    index_certs_24168 = True
    assert index_ok_24167, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:40:15-23\n   #1  bfastfinal.fut:173:3-56\n   #2  bfastfinal.fut:169:1-173:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24068,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               res_24074,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24054,
                                                                                                                                                                               "]."))
    empty_slice_24170 = (res_24074 == np.int64(0))
    ok_or_empty_24171 = (y_24157 or empty_slice_24170)
    index_ok_24172 = (ok_or_empty_24166 and ok_or_empty_24171)
    index_certs_24173 = True
    assert index_ok_24172, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:41:15-24\n   #1  bfastfinal.fut:173:3-56\n   #2  bfastfinal.fut:169:1-173:56\n" % ("Index [:",
                                                                                                                                                                               res_24068,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_24054,
                                                                                                                                                                               "][",
                                                                                                                                                                               res_24074,
                                                                                                                                                                               "]."))
    empty_slice_24175 = (m_24055 == np.int64(0))
    m_24176 = (m_24055 - np.int64(1))
    zzero_leq_i_p_m_t_s_24177 = sle64(np.int64(0), m_24176)
    i_p_m_t_s_leq_w_24178 = slt64(m_24176, m_24055)
    i_lte_j_24179 = sle64(np.int64(0), m_24055)
    y_24180 = (zzero_leq_i_p_m_t_s_24177 and i_p_m_t_s_leq_w_24178)
    y_24181 = (i_lte_j_24179 and y_24180)
    ok_or_empty_24182 = (empty_slice_24175 or y_24181)
    index_ok_24183 = (ok_or_empty_24166 and ok_or_empty_24182)
    index_certs_24184 = True
    assert index_ok_24183, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:42:15-28\n   #1  bfastfinal.fut:173:3-56\n   #2  bfastfinal.fut:169:1-173:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24068,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_24055,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24054,
                                                                                                                                                                               "]."))
    suff_outer_par_26048 = (self.sizes["mainDetailed.suff_outer_par_6"] <= m_24055)
    segmap_group_sizze_26074 = self.sizes["mainDetailed.segmap_group_size_26052"]
    max_num_groups_37891 = self.sizes["mainDetailed.segmap_num_groups_26054"]
    num_groups_26075 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24055,
                                                            segmap_group_sizze_26074),
                                                  sext_i32_i64(max_num_groups_37891))))
    nest_sizze_26250 = (m_24055 * res_24074)
    segmap_group_sizze_26251 = self.sizes["mainDetailed.segmap_group_size_26099"]
    max_num_groups_37892 = self.sizes["mainDetailed.segmap_num_groups_26101"]
    num_groups_26252 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_26250,
                                                            segmap_group_sizze_26251),
                                                  sext_i32_i64(max_num_groups_37892))))
    suff_outer_par_26256 = (self.sizes["mainDetailed.suff_outer_par_7"] <= nest_sizze_26250)
    y_26275 = (res_24074 * res_24074)
    nest_sizze_26276 = (m_24055 * y_26275)
    segmap_group_sizze_26277 = self.sizes["mainDetailed.segmap_group_size_26130"]
    suff_outer_par_26282 = (self.sizes["mainDetailed.suff_outer_par_8"] <= nest_sizze_26276)
    nest_sizze_26302 = (res_24068 * nest_sizze_26276)
    segred_group_sizze_26303 = self.sizes["mainDetailed.segred_group_size_26159"]
    max_num_groups_37893 = self.sizes["mainDetailed.segred_num_groups_26161"]
    num_groups_26304 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_26302,
                                                            segred_group_sizze_26303),
                                                  sext_i32_i64(max_num_groups_37893))))
    binop_x_36756 = (m_24055 * N_24056)
    bytes_36755 = (np.int64(4) * binop_x_36756)
    bytes_36800 = (np.int64(4) * nest_sizze_26276)
    bytes_36759 = (np.int64(4) * y_26275)
    binop_x_36845 = (res_24074 * nest_sizze_26250)
    bytes_36843 = (np.int64(4) * binop_x_36845)
    bytes_36805 = (np.int64(4) * res_24074)
    num_threads_37727 = (segmap_group_sizze_26074 * num_groups_26075)
    total_sizze_37728 = (bytes_36759 * num_threads_37727)
    num_threads_37729 = (segmap_group_sizze_26251 * num_groups_26252)
    total_sizze_37730 = (bytes_36805 * num_threads_37729)
    local_memory_capacity_37986 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_37986)) and suff_outer_par_26048):
      mem_36757 = opencl_alloc(self, bytes_36755, "mem_36757")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36757, np.int64(0),
                                                  images_mem_36738, np.int64(0),
                                                  np.int64(1), N_24056, m_24055)
      mem_36803 = opencl_alloc(self, bytes_36800, "mem_36803")
      mem_36761 = opencl_alloc(self, total_sizze_37728, "mem_36761")
      if ((1 * (np.long(num_groups_26075) * np.long(segmap_group_sizze_26074))) != 0):
        self.mainDetailedzisegmap_26050_var.set_args(self.global_failure,
                                                     np.int64(N_24054),
                                                     np.int64(m_24055),
                                                     np.int32(n_24059),
                                                     np.int32(k2p2zq_24072),
                                                     np.int64(res_24074),
                                                     np.int64(num_groups_26075),
                                                     binop_p_mem_36747,
                                                     mem_36754, mem_36757,
                                                     mem_36761, mem_36803)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_26050_var,
                                   ((np.long(num_groups_26075) * np.long(segmap_group_sizze_26074)),),
                                   (np.long(segmap_group_sizze_26074),))
        if synchronous:
          sync(self)
      mem_36757 = None
      mem_36761 = None
      mem_36846 = opencl_alloc(self, bytes_36843, "mem_36846")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36846, np.int64(0),
                                                  mem_36803, np.int64(0),
                                                  np.int64(1), m_24055,
                                                  (res_24074 * res_24074))
      mem_36803 = None
      res_mem_36848 = mem_36846
    else:
      local_memory_capacity_37985 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_37985)) and suff_outer_par_26256):
        mem_36822 = opencl_alloc(self, bytes_36843, "mem_36822")
        mem_36806 = opencl_alloc(self, total_sizze_37730, "mem_36806")
        if ((1 * (np.long(num_groups_26252) * np.long(segmap_group_sizze_26251))) != 0):
          self.mainDetailedzisegmap_26096_var.set_args(self.global_failure,
                                                       np.int64(m_24055),
                                                       np.int64(N_24056),
                                                       np.int32(n_24059),
                                                       np.int32(k2p2zq_24072),
                                                       np.int64(res_24074),
                                                       np.int64(num_groups_26252),
                                                       images_mem_36738,
                                                       mem_36750, mem_36754,
                                                       mem_36806, mem_36822)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_26096_var,
                                     ((np.long(num_groups_26252) * np.long(segmap_group_sizze_26251)),),
                                     (np.long(segmap_group_sizze_26251),))
          if synchronous:
            sync(self)
        mem_36806 = None
        mem_36840 = opencl_alloc(self, bytes_36843, "mem_36840")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_36840, np.int64(0),
                                                    mem_36822, np.int64(0),
                                                    np.int64(1),
                                                    (m_24055 * res_24074),
                                                    res_24074)
        mem_36822 = None
        res_mem_36842 = mem_36840
      else:
        segmap_usable_groups_26278 = sdiv_up64(nest_sizze_26276,
                                               segmap_group_sizze_26277)
        local_memory_capacity_37984 = self.max_local_memory
        if (sle64(np.int64(0),
                  sext_i32_i64(local_memory_capacity_37984)) and suff_outer_par_26282):
          mem_36827 = opencl_alloc(self, bytes_36843, "mem_36827")
          if ((1 * (np.long(segmap_usable_groups_26278) * np.long(segmap_group_sizze_26277))) != 0):
            self.mainDetailedzisegmap_26126_var.set_args(self.global_failure,
                                                         np.int64(m_24055),
                                                         np.int64(N_24056),
                                                         np.int32(n_24059),
                                                         np.int64(res_24074),
                                                         images_mem_36738,
                                                         mem_36750, mem_36754,
                                                         mem_36827)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26126_var,
                                       ((np.long(segmap_usable_groups_26278) * np.long(segmap_group_sizze_26277)),),
                                       (np.long(segmap_group_sizze_26277),))
            if synchronous:
              sync(self)
          res_mem_36836 = mem_36827
        else:
          mem_36830 = opencl_alloc(self, bytes_36740, "mem_36830")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_36830, np.int64(0),
                                                      mem_36754, np.int64(0),
                                                      np.int64(1), res_24074,
                                                      N_24054)
          mem_36835 = opencl_alloc(self, bytes_36843, "mem_36835")
          if slt64((res_24068 * np.int64(2)), segred_group_sizze_26303):
            segment_sizze_nonzzero_37924 = smax64(np.int64(1), res_24068)
            num_threads_37925 = (num_groups_26304 * segred_group_sizze_26303)
            if ((1 * (np.long(num_groups_26304) * np.long(segred_group_sizze_26303))) != 0):
              self.mainDetailedzisegred_small_26165_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_26303))),
                                                                 np.int64(N_24054),
                                                                 np.int64(m_24055),
                                                                 np.int64(N_24056),
                                                                 np.int64(res_24068),
                                                                 np.int64(res_24074),
                                                                 np.int64(num_groups_26304),
                                                                 images_mem_36738,
                                                                 binop_p_mem_36747,
                                                                 mem_36830,
                                                                 mem_36835,
                                                                 np.int64(segment_sizze_nonzzero_37924))
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_small_26165_var,
                                         ((np.long(num_groups_26304) * np.long(segred_group_sizze_26303)),),
                                         (np.long(segred_group_sizze_26303),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_37945 = sdiv_up64(num_groups_26304,
                                                 smax64(np.int64(1),
                                                        ((m_24055 * res_24074) * res_24074)))
            elements_per_thread_37946 = sdiv_up64(res_24068,
                                                  (segred_group_sizze_26303 * groups_per_segment_37945))
            virt_num_groups_37947 = (groups_per_segment_37945 * ((m_24055 * res_24074) * res_24074))
            num_threads_37948 = (num_groups_26304 * segred_group_sizze_26303)
            threads_per_segment_37949 = (groups_per_segment_37945 * segred_group_sizze_26303)
            group_res_arr_mem_37950 = opencl_alloc(self,
                                                   (np.int32(4) * (segred_group_sizze_26303 * virt_num_groups_37947)),
                                                   "group_res_arr_mem_37950")
            mainDetailedzicounter_mem_37952 = self.mainDetailedzicounter_mem_37952
            if ((1 * (np.long(num_groups_26304) * np.long(segred_group_sizze_26303))) != 0):
              self.mainDetailedzisegred_large_26165_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.long(np.int32(1))),
                                                                 cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_26303))),
                                                                 np.int64(N_24054),
                                                                 np.int64(N_24056),
                                                                 np.int64(res_24068),
                                                                 np.int64(res_24074),
                                                                 np.int64(num_groups_26304),
                                                                 images_mem_36738,
                                                                 binop_p_mem_36747,
                                                                 mem_36830,
                                                                 mem_36835,
                                                                 np.int64(groups_per_segment_37945),
                                                                 np.int64(elements_per_thread_37946),
                                                                 np.int64(virt_num_groups_37947),
                                                                 np.int64(threads_per_segment_37949),
                                                                 group_res_arr_mem_37950,
                                                                 mainDetailedzicounter_mem_37952)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_large_26165_var,
                                         ((np.long(num_groups_26304) * np.long(segred_group_sizze_26303)),),
                                         (np.long(segred_group_sizze_26303),))
              if synchronous:
                sync(self)
          mem_36830 = None
          res_mem_36836 = mem_36835
        res_mem_36842 = res_mem_36836
      res_mem_36848 = res_mem_36842
    m_24205 = (np.int64(2) * res_24074)
    nm_24206 = (res_24074 * m_24205)
    bounds_invalid_upwards_24207 = slt64(nm_24206, np.int64(0))
    valid_24208 = not(bounds_invalid_upwards_24207)
    range_valid_c_24209 = True
    assert valid_24208, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:77:21-27\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:173:3-56\n   #4  bfastfinal.fut:169:1-173:56\n" % ("Range ",
                                                                                                                                                                                                                                        np.int64(0),
                                                                                                                                                                                                                                        "..",
                                                                                                                                                                                                                                        np.int64(1),
                                                                                                                                                                                                                                        "..<",
                                                                                                                                                                                                                                        nm_24206,
                                                                                                                                                                                                                                        " is invalid."))
    zzero_24211 = (m_24205 == np.int64(0))
    nonzzero_24212 = not(zzero_24211)
    nonzzero_cert_24213 = True
    assert nonzzero_24212, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:72:41-47\n   #1  helpers.fut:72:14-77:28\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:173:3-56\n   #4  bfastfinal.fut:169:1-173:56\n" % ("division by zero",))
    res_24214 = sext_i64_i32(m_24205)
    loop_nonempty_24215 = slt32(np.int32(0), k2p2zq_24072)
    zzero_24216 = (res_24214 == np.int32(0))
    nonzzero_24217 = not(zzero_24216)
    loop_not_taken_24218 = not(loop_nonempty_24215)
    protect_assert_disj_24219 = (nonzzero_24217 or loop_not_taken_24218)
    nonzzero_cert_24220 = True
    assert protect_assert_disj_24219, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:59:43-49\n   #1  helpers.fut:59:16-65:32\n   #2  helpers.fut:78:15-53\n   #3  bfastfinal.fut:52:35-50\n   #4  bfastfinal.fut:173:3-56\n   #5  bfastfinal.fut:169:1-173:56\n" % ("division by zero",))
    y_26383 = smin64(res_24074, nm_24206)
    intra_avail_par_26384 = smin64(y_26275, y_26383)
    y_26385 = smax64(res_24074, nm_24206)
    computed_group_sizze_26327 = smax64(y_26275, y_26385)
    max_group_sizze_26518 = self.max_group_size
    fits_26519 = sle64(computed_group_sizze_26327, max_group_sizze_26518)
    suff_intra_par_26517 = (self.sizes["mainDetailed.suff_intra_par_10"] <= intra_avail_par_26384)
    intra_suff_and_fits_26520 = (suff_intra_par_26517 and fits_26519)
    nest_sizze_27101 = (m_24055 * nm_24206)
    segmap_group_sizze_27102 = self.sizes["mainDetailed.segmap_group_size_27065"]
    fits_27129 = sle64(nm_24206, max_group_sizze_26518)
    suff_intra_par_27131 = (self.sizes["mainDetailed.suff_intra_par_14"] <= nm_24206)
    intra_suff_and_fits_27132 = (fits_27129 and suff_intra_par_27131)
    segmap_group_sizze_27168 = self.sizes["mainDetailed.segmap_group_size_26973"]
    segmap_group_sizze_27184 = self.sizes["mainDetailed.segmap_group_size_26906"]
    segmap_group_sizze_27218 = self.sizes["mainDetailed.segmap_group_size_26852"]
    segmap_group_sizze_27253 = self.sizes["mainDetailed.segmap_group_size_26634"]
    segmap_usable_groups_27169 = sdiv_up_safe64(m_24055,
                                                segmap_group_sizze_27168)
    segmap_usable_groups_27185 = sdiv_up_safe64(nest_sizze_27101,
                                                segmap_group_sizze_27184)
    segmap_usable_groups_27219 = sdiv_up_safe64(nest_sizze_27101,
                                                segmap_group_sizze_27218)
    bytes_36851 = (np.int64(4) * nm_24206)
    bytes_36878 = (np.int64(4) * nest_sizze_27101)
    local_memory_capacity_38051 = self.max_local_memory
    if (sle64(((bytes_36851 + bytes_36851) + bytes_36759),
              sext_i32_i64(local_memory_capacity_38051)) and intra_suff_and_fits_26520):
      mem_36876 = opencl_alloc(self, bytes_36843, "mem_36876")
      if ((1 * (np.long(m_24055) * np.long(computed_group_sizze_26327))) != 0):
        self.mainDetailedzisegmap_intragroup_26386_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.long(bytes_36759)),
                                                                cl.LocalMemory(np.long(bytes_36851)),
                                                                cl.LocalMemory(np.long(bytes_36851)),
                                                                np.int32(k2p2zq_24072),
                                                                np.int64(res_24074),
                                                                np.int64(m_24205),
                                                                np.int64(nm_24206),
                                                                np.int32(res_24214),
                                                                np.int64(computed_group_sizze_26327),
                                                                res_mem_36848,
                                                                mem_36876)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_26386_var,
                                   ((np.long(m_24055) * np.long(computed_group_sizze_26327)),),
                                   (np.long(computed_group_sizze_26327),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      res_mem_36931 = mem_36876
    else:
      segmap_usable_groups_27103 = sdiv_up64(nest_sizze_27101,
                                             segmap_group_sizze_27102)
      mem_36880 = opencl_alloc(self, bytes_36878, "mem_36880")
      if ((1 * (np.long(segmap_usable_groups_27103) * np.long(segmap_group_sizze_27102))) != 0):
        self.mainDetailedzisegmap_27062_var.set_args(self.global_failure,
                                                     np.int64(m_24055),
                                                     np.int64(res_24074),
                                                     np.int64(m_24205),
                                                     np.int64(nm_24206),
                                                     res_mem_36848, mem_36880)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27062_var,
                                   ((np.long(segmap_usable_groups_27103) * np.long(segmap_group_sizze_27102)),),
                                   (np.long(segmap_group_sizze_27102),))
        if synchronous:
          sync(self)
      ctx_param_ext_36881 = m_24055
      ctx_param_ext_36882 = nm_24206
      ctx_param_ext_36883 = np.int64(0)
      ctx_param_ext_36884 = nm_24206
      ctx_param_ext_36885 = m_24055
      ctx_param_ext_36886 = np.int64(1)
      ctx_param_ext_36887 = nm_24206
      mem_param_36888 = mem_36880
      i_27117 = np.int32(0)
      one_39102 = np.int32(1)
      for counter_39101 in range(k2p2zq_24072):
        i_27119 = sext_i32_i64(i_27117)
        x_27120 = sle64(np.int64(0), i_27119)
        y_27121 = slt64(i_27119, nm_24206)
        bounds_check_27122 = (x_27120 and y_27121)
        index_certs_27123 = True
        assert bounds_check_27122, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:52:35-50\n   #3  bfastfinal.fut:173:3-56\n   #4  bfastfinal.fut:169:1-173:56\n" % ("Index [",
                                                                                                                                                                                                                                         i_27119,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_24206,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_38011 = self.max_local_memory
        if intra_suff_and_fits_27132:
          res_ixfn_36910 = m_24055
        else:
          res_ixfn_36910 = ctx_param_ext_36885
        local_memory_capacity_38012 = self.max_local_memory
        if intra_suff_and_fits_27132:
          res_ixfn_36911 = nm_24206
        else:
          res_ixfn_36911 = ctx_param_ext_36887
        local_memory_capacity_38013 = self.max_local_memory
        if intra_suff_and_fits_27132:
          res_ixfn_36912 = m_24055
        else:
          res_ixfn_36912 = ctx_param_ext_36881
        local_memory_capacity_38014 = self.max_local_memory
        if intra_suff_and_fits_27132:
          res_ixfn_36913 = nm_24206
        else:
          res_ixfn_36913 = ctx_param_ext_36882
        local_memory_capacity_38015 = self.max_local_memory
        if intra_suff_and_fits_27132:
          res_ixfn_36914 = nm_24206
        else:
          res_ixfn_36914 = ctx_param_ext_36884
        local_memory_capacity_38016 = self.max_local_memory
        if intra_suff_and_fits_27132:
          res_ixfn_36915 = np.int64(1)
        else:
          res_ixfn_36915 = ctx_param_ext_36886
        local_memory_capacity_38017 = self.max_local_memory
        if intra_suff_and_fits_27132:
          res_ixfn_36916 = np.int64(0)
        else:
          res_ixfn_36916 = ctx_param_ext_36883
        local_memory_capacity_38045 = self.max_local_memory
        if ((sle64(np.int64(0),
                   sext_i32_i64(local_memory_capacity_38045)) and sle64(bytes_36851,
                                                                        sext_i32_i64(local_memory_capacity_38045))) and intra_suff_and_fits_27132):
          mem_36893 = opencl_alloc(self, bytes_36878, "mem_36893")
          group_sizze_38021 = self.sizes["mainDetailed.group_size_38021"]
          num_groups_38022 = sdiv_up64((m_24055 * nm_24206), group_sizze_38021)
          if ((1 * (np.long(num_groups_38022) * np.long(group_sizze_38021))) != 0):
            self.mainDetailedzicopy_38018_var.set_args(np.int64(m_24055),
                                                       np.int64(nm_24206),
                                                       np.int64(ctx_param_ext_36883),
                                                       np.int64(ctx_param_ext_36884),
                                                       np.int64(ctx_param_ext_36886),
                                                       mem_param_36888,
                                                       mem_36893)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzicopy_38018_var,
                                       ((np.long(num_groups_38022) * np.long(group_sizze_38021)),),
                                       (np.long(group_sizze_38021),))
            if synchronous:
              sync(self)
          mem_36901 = opencl_alloc(self, bytes_36878, "mem_36901")
          if ((1 * (np.long(m_24055) * np.long(nm_24206))) != 0):
            self.mainDetailedzisegmap_intragroup_26730_var.set_args(self.global_failure,
                                                                    cl.LocalMemory(np.long(bytes_36851)),
                                                                    np.int64(m_24055),
                                                                    np.int32(k2p2zq_24072),
                                                                    np.int64(nm_24206),
                                                                    np.int32(res_24214),
                                                                    np.int32(i_27117),
                                                                    np.int64(i_27119),
                                                                    np.int64(ctx_param_ext_36883),
                                                                    np.int64(ctx_param_ext_36884),
                                                                    np.int64(ctx_param_ext_36886),
                                                                    mem_param_36888,
                                                                    mem_36893,
                                                                    mem_36901)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_intragroup_26730_var,
                                       ((np.long(m_24055) * np.long(nm_24206)),),
                                       (np.long(nm_24206),))
            if synchronous:
              sync(self)
          mem_36893 = None
          res_mem_36917 = mem_36901
        else:
          mem_36904 = opencl_alloc(self, m_24055, "mem_36904")
          if ((1 * (np.long(segmap_usable_groups_27169) * np.long(segmap_group_sizze_27168))) != 0):
            self.mainDetailedzisegmap_26971_var.set_args(self.global_failure,
                                                         np.int64(m_24055),
                                                         np.int64(i_27119),
                                                         np.int64(ctx_param_ext_36883),
                                                         np.int64(ctx_param_ext_36884),
                                                         np.int64(ctx_param_ext_36886),
                                                         mem_param_36888,
                                                         mem_36904)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26971_var,
                                       ((np.long(segmap_usable_groups_27169) * np.long(segmap_group_sizze_27168)),),
                                       (np.long(segmap_group_sizze_27168),))
            if synchronous:
              sync(self)
          mem_36908 = opencl_alloc(self, bytes_36878, "mem_36908")
          if ((1 * (np.long(segmap_usable_groups_27185) * np.long(segmap_group_sizze_27184))) != 0):
            self.mainDetailedzisegmap_26903_var.set_args(self.global_failure,
                                                         np.int64(m_24055),
                                                         np.int32(k2p2zq_24072),
                                                         np.int64(nm_24206),
                                                         np.int32(res_24214),
                                                         np.int32(i_27117),
                                                         np.int64(i_27119),
                                                         np.int64(ctx_param_ext_36883),
                                                         np.int64(ctx_param_ext_36884),
                                                         np.int64(ctx_param_ext_36886),
                                                         mem_param_36888,
                                                         mem_36904, mem_36908)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26903_var,
                                       ((np.long(segmap_usable_groups_27185) * np.long(segmap_group_sizze_27184)),),
                                       (np.long(segmap_group_sizze_27184),))
            if synchronous:
              sync(self)
          mem_36904 = None
          if ((1 * (np.long(segmap_usable_groups_27219) * np.long(segmap_group_sizze_27218))) != 0):
            self.mainDetailedzisegmap_26849_var.set_args(self.global_failure,
                                                         np.int64(m_24055),
                                                         np.int64(nm_24206),
                                                         np.int64(ctx_param_ext_36883),
                                                         np.int64(ctx_param_ext_36884),
                                                         np.int64(ctx_param_ext_36886),
                                                         mem_param_36888,
                                                         mem_36908)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26849_var,
                                       ((np.long(segmap_usable_groups_27219) * np.long(segmap_group_sizze_27218)),),
                                       (np.long(segmap_group_sizze_27218),))
            if synchronous:
              sync(self)
          mem_36908 = None
          res_mem_36917 = mem_param_36888
        ctx_param_ext_tmp_38002 = res_ixfn_36912
        ctx_param_ext_tmp_38003 = res_ixfn_36913
        ctx_param_ext_tmp_38004 = res_ixfn_36916
        ctx_param_ext_tmp_38005 = res_ixfn_36914
        ctx_param_ext_tmp_38006 = res_ixfn_36910
        ctx_param_ext_tmp_38007 = res_ixfn_36915
        ctx_param_ext_tmp_38008 = res_ixfn_36911
        mem_param_tmp_38009 = res_mem_36917
        ctx_param_ext_36881 = ctx_param_ext_tmp_38002
        ctx_param_ext_36882 = ctx_param_ext_tmp_38003
        ctx_param_ext_36883 = ctx_param_ext_tmp_38004
        ctx_param_ext_36884 = ctx_param_ext_tmp_38005
        ctx_param_ext_36885 = ctx_param_ext_tmp_38006
        ctx_param_ext_36886 = ctx_param_ext_tmp_38007
        ctx_param_ext_36887 = ctx_param_ext_tmp_38008
        mem_param_36888 = mem_param_tmp_38009
        i_27117 += one_39102
      res_r_ixfn_36918 = ctx_param_ext_36881
      res_r_ixfn_36919 = ctx_param_ext_36882
      res_r_ixfn_36920 = ctx_param_ext_36883
      res_r_ixfn_36921 = ctx_param_ext_36884
      res_r_ixfn_36922 = ctx_param_ext_36885
      res_r_ixfn_36923 = ctx_param_ext_36886
      res_r_ixfn_36924 = ctx_param_ext_36887
      res_r_mem_36925 = mem_param_36888
      mem_36880 = None
      segmap_usable_groups_27254 = sdiv_up64(nest_sizze_26276,
                                             segmap_group_sizze_27253)
      mem_36930 = opencl_alloc(self, bytes_36843, "mem_36930")
      if ((1 * (np.long(segmap_usable_groups_27254) * np.long(segmap_group_sizze_27253))) != 0):
        self.mainDetailedzisegmap_26630_var.set_args(self.global_failure,
                                                     np.int64(m_24055),
                                                     np.int64(res_24074),
                                                     np.int64(m_24205),
                                                     np.int64(res_r_ixfn_36920),
                                                     np.int64(res_r_ixfn_36921),
                                                     np.int64(res_r_ixfn_36923),
                                                     res_r_mem_36925, mem_36930)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_26630_var,
                                   ((np.long(segmap_usable_groups_27254) * np.long(segmap_group_sizze_27253)),),
                                   (np.long(segmap_group_sizze_27253),))
        if synchronous:
          sync(self)
      res_r_mem_36925 = None
      res_mem_36931 = mem_36930
    res_mem_36848 = None
    suff_outer_par_27266 = (self.sizes["mainDetailed.suff_outer_par_17"] <= m_24055)
    segmap_group_sizze_27288 = self.sizes["mainDetailed.segmap_group_size_27270"]
    max_num_groups_38052 = self.sizes["mainDetailed.segmap_num_groups_27272"]
    num_groups_27289 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24055,
                                                            segmap_group_sizze_27288),
                                                  sext_i32_i64(max_num_groups_38052))))
    suff_outer_par_27373 = (self.sizes["mainDetailed.suff_outer_par_18"] <= nest_sizze_26250)
    nest_sizze_27389 = (res_24068 * nest_sizze_26250)
    segred_group_sizze_27390 = self.sizes["mainDetailed.segred_group_size_27332"]
    max_num_groups_38053 = self.sizes["mainDetailed.segred_num_groups_27334"]
    num_groups_27391 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27389,
                                                            segred_group_sizze_27390),
                                                  sext_i32_i64(max_num_groups_38053))))
    tile_sizze_35548 = self.sizes["mainDetailed.tile_size_35547"]
    group_sizze_35549 = (tile_sizze_35548 * tile_sizze_35548)
    bytes_36950 = (np.int64(4) * nest_sizze_26250)
    bytes_36955 = (np.int64(4) * group_sizze_35549)
    binop_x_37664 = (np.int64(4) * tile_sizze_35548)
    sizze_37665 = (tile_sizze_35548 * binop_x_37664)
    num_threads_37740 = (segmap_group_sizze_27288 * num_groups_27289)
    total_sizze_37741 = (bytes_36805 * num_threads_37740)
    local_memory_capacity_38139 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38139)) and suff_outer_par_27266):
      mem_36934 = opencl_alloc(self, bytes_36755, "mem_36934")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36934, np.int64(0),
                                                  images_mem_36738, np.int64(0),
                                                  np.int64(1), N_24056, m_24055)
      mem_36952 = opencl_alloc(self, bytes_36950, "mem_36952")
      mem_36937 = opencl_alloc(self, total_sizze_37741, "mem_36937")
      if ((1 * (np.long(num_groups_27289) * np.long(segmap_group_sizze_27288))) != 0):
        self.mainDetailedzisegmap_27268_var.set_args(self.global_failure,
                                                     np.int64(N_24054),
                                                     np.int64(m_24055),
                                                     np.int32(n_24059),
                                                     np.int32(k2p2zq_24072),
                                                     np.int64(res_24074),
                                                     np.int64(num_groups_27289),
                                                     binop_p_mem_36747,
                                                     mem_36934, mem_36937,
                                                     mem_36952)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27268_var,
                                   ((np.long(num_groups_27289) * np.long(segmap_group_sizze_27288)),),
                                   (np.long(segmap_group_sizze_27288),))
        if synchronous:
          sync(self)
      mem_36934 = None
      mem_36937 = None
      mem_37020 = opencl_alloc(self, bytes_36950, "mem_37020")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37020, np.int64(0),
                                                  mem_36952, np.int64(0),
                                                  np.int64(1), m_24055,
                                                  res_24074)
      mem_36952 = None
      res_mem_37022 = mem_37020
    else:
      local_memory_capacity_38138 = self.max_local_memory
      if (sle64((((bytes_36955 + bytes_36955) + bytes_36955) + bytes_36955),
                sext_i32_i64(local_memory_capacity_38138)) and suff_outer_par_27373):
        num_groups_x_35550 = sdiv_up64(m_24055, tile_sizze_35548)
        num_groups_y_35551 = sdiv_up64(res_24074, tile_sizze_35548)
        num_groups_top_35552 = (num_groups_x_35550 * num_groups_y_35551)
        num_whole_tiles_35569 = squot64(res_24068, tile_sizze_35548)
        residual_input_35719 = srem64(res_24068, tile_sizze_35548)
        cond_35720 = (residual_input_35719 == np.int64(0))
        mem_37012 = opencl_alloc(self, bytes_36950, "mem_37012")
        if ((1 * (np.long(num_groups_top_35552) * np.long(group_sizze_35549))) != 0):
          self.mainDetailedzisegmap_intragroup_35553_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(bytes_36955)),
                                                                  cl.LocalMemory(np.long(bytes_36955)),
                                                                  cl.LocalMemory(np.long(bytes_36955)),
                                                                  cl.LocalMemory(np.long(bytes_36955)),
                                                                  np.int64(m_24055),
                                                                  np.int64(N_24056),
                                                                  np.int64(res_24068),
                                                                  np.int64(res_24074),
                                                                  np.int64(num_groups_y_35551),
                                                                  np.int64(num_whole_tiles_35569),
                                                                  np.int64(residual_input_35719),
                                                                  np.byte(cond_35720),
                                                                  images_mem_36738,
                                                                  mem_36750,
                                                                  mem_37012)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_35553_var,
                                     ((np.long(num_groups_top_35552) * np.long(group_sizze_35549)),),
                                     (np.long(group_sizze_35549),))
          if synchronous:
            sync(self)
        res_mem_37017 = mem_37012
      else:
        mem_37016 = opencl_alloc(self, bytes_36950, "mem_37016")
        if slt64((res_24068 * np.int64(2)), segred_group_sizze_27390):
          segment_sizze_nonzzero_38078 = smax64(np.int64(1), res_24068)
          num_threads_38079 = (num_groups_27391 * segred_group_sizze_27390)
          if ((1 * (np.long(num_groups_27391) * np.long(segred_group_sizze_27390))) != 0):
            self.mainDetailedzisegred_small_27338_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27390))),
                                                               np.int64(N_24054),
                                                               np.int64(m_24055),
                                                               np.int64(N_24056),
                                                               np.int64(res_24068),
                                                               np.int64(res_24074),
                                                               np.int64(num_groups_27391),
                                                               images_mem_36738,
                                                               binop_p_mem_36747,
                                                               mem_37016,
                                                               np.int64(segment_sizze_nonzzero_38078))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_27338_var,
                                       ((np.long(num_groups_27391) * np.long(segred_group_sizze_27390)),),
                                       (np.long(segred_group_sizze_27390),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38099 = sdiv_up64(num_groups_27391,
                                               smax64(np.int64(1),
                                                      (m_24055 * res_24074)))
          elements_per_thread_38100 = sdiv_up64(res_24068,
                                                (segred_group_sizze_27390 * groups_per_segment_38099))
          virt_num_groups_38101 = (groups_per_segment_38099 * (m_24055 * res_24074))
          num_threads_38102 = (num_groups_27391 * segred_group_sizze_27390)
          threads_per_segment_38103 = (groups_per_segment_38099 * segred_group_sizze_27390)
          group_res_arr_mem_38104 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27390 * virt_num_groups_38101)),
                                                 "group_res_arr_mem_38104")
          mainDetailedzicounter_mem_38106 = self.mainDetailedzicounter_mem_38106
          if ((1 * (np.long(num_groups_27391) * np.long(segred_group_sizze_27390))) != 0):
            self.mainDetailedzisegred_large_27338_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27390))),
                                                               np.int64(N_24054),
                                                               np.int64(N_24056),
                                                               np.int64(res_24068),
                                                               np.int64(res_24074),
                                                               np.int64(num_groups_27391),
                                                               images_mem_36738,
                                                               binop_p_mem_36747,
                                                               mem_37016,
                                                               np.int64(groups_per_segment_38099),
                                                               np.int64(elements_per_thread_38100),
                                                               np.int64(virt_num_groups_38101),
                                                               np.int64(threads_per_segment_38103),
                                                               group_res_arr_mem_38104,
                                                               mainDetailedzicounter_mem_38106)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_27338_var,
                                       ((np.long(num_groups_27391) * np.long(segred_group_sizze_27390)),),
                                       (np.long(segred_group_sizze_27390),))
            if synchronous:
              sync(self)
        res_mem_37017 = mem_37016
      res_mem_37022 = res_mem_37017
    binop_p_mem_36747 = None
    mem_36750 = None
    suff_outer_par_27407 = (self.sizes["mainDetailed.suff_outer_par_19"] <= m_24055)
    segmap_group_sizze_27428 = self.sizes["mainDetailed.segmap_group_size_27411"]
    max_num_groups_38140 = self.sizes["mainDetailed.segmap_num_groups_27413"]
    num_groups_27429 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24055,
                                                            segmap_group_sizze_27428),
                                                  sext_i32_i64(max_num_groups_38140))))
    segmap_group_sizze_27504 = self.sizes["mainDetailed.segmap_group_size_27448"]
    suff_outer_par_27508 = (self.sizes["mainDetailed.suff_outer_par_20"] <= nest_sizze_26250)
    segred_group_sizze_27523 = self.sizes["mainDetailed.segred_group_size_27469"]
    max_num_groups_38141 = self.sizes["mainDetailed.segred_num_groups_27471"]
    num_groups_27524 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_36845,
                                                            segred_group_sizze_27523),
                                                  sext_i32_i64(max_num_groups_38141))))
    num_threads_37744 = (segmap_group_sizze_27428 * num_groups_27429)
    total_sizze_37745 = (bytes_36805 * num_threads_37744)
    local_memory_capacity_38220 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38220)) and suff_outer_par_27407):
      mem_37026 = opencl_alloc(self, bytes_36800, "mem_37026")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37026, np.int64(0),
                                                  res_mem_36931, np.int64(0),
                                                  np.int64(1),
                                                  (res_24074 * res_24074),
                                                  m_24055)
      mem_37029 = opencl_alloc(self, bytes_36950, "mem_37029")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37029, np.int64(0),
                                                  res_mem_37022, np.int64(0),
                                                  np.int64(1), res_24074,
                                                  m_24055)
      mem_37047 = opencl_alloc(self, bytes_36950, "mem_37047")
      mem_37032 = opencl_alloc(self, total_sizze_37745, "mem_37032")
      if ((1 * (np.long(num_groups_27429) * np.long(segmap_group_sizze_27428))) != 0):
        self.mainDetailedzisegmap_27409_var.set_args(self.global_failure,
                                                     np.int64(m_24055),
                                                     np.int32(k2p2zq_24072),
                                                     np.int64(res_24074),
                                                     np.int64(num_groups_27429),
                                                     mem_37026, mem_37029,
                                                     mem_37032, mem_37047)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27409_var,
                                   ((np.long(num_groups_27429) * np.long(segmap_group_sizze_27428)),),
                                   (np.long(segmap_group_sizze_27428),))
        if synchronous:
          sync(self)
      mem_37026 = None
      mem_37029 = None
      mem_37032 = None
      mem_37063 = opencl_alloc(self, bytes_36950, "mem_37063")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37063, np.int64(0),
                                                  mem_37047, np.int64(0),
                                                  np.int64(1), m_24055,
                                                  res_24074)
      mem_37047 = None
      res_mem_37065 = mem_37063
    else:
      segmap_usable_groups_27505 = sdiv_up64(nest_sizze_26250,
                                             segmap_group_sizze_27504)
      local_memory_capacity_38219 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_38219)) and suff_outer_par_27508):
        mem_37051 = opencl_alloc(self, bytes_36843, "mem_37051")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_37051, np.int64(0),
                                                    res_mem_36931, np.int64(0),
                                                    np.int64(1), res_24074,
                                                    (m_24055 * res_24074))
        mem_37055 = opencl_alloc(self, bytes_36950, "mem_37055")
        if ((1 * (np.long(segmap_usable_groups_27505) * np.long(segmap_group_sizze_27504))) != 0):
          self.mainDetailedzisegmap_27445_var.set_args(self.global_failure,
                                                       np.int64(m_24055),
                                                       np.int32(k2p2zq_24072),
                                                       np.int64(res_24074),
                                                       res_mem_37022, mem_37051,
                                                       mem_37055)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_27445_var,
                                     ((np.long(segmap_usable_groups_27505) * np.long(segmap_group_sizze_27504)),),
                                     (np.long(segmap_group_sizze_27504),))
          if synchronous:
            sync(self)
        mem_37051 = None
        res_mem_37060 = mem_37055
      else:
        mem_37059 = opencl_alloc(self, bytes_36950, "mem_37059")
        if slt64((res_24074 * np.int64(2)), segred_group_sizze_27523):
          segment_sizze_nonzzero_38159 = smax64(np.int64(1), res_24074)
          num_threads_38160 = (num_groups_27524 * segred_group_sizze_27523)
          if ((1 * (np.long(num_groups_27524) * np.long(segred_group_sizze_27523))) != 0):
            self.mainDetailedzisegred_small_27475_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27523))),
                                                               np.int64(m_24055),
                                                               np.int64(res_24074),
                                                               np.int64(num_groups_27524),
                                                               res_mem_36931,
                                                               res_mem_37022,
                                                               mem_37059,
                                                               np.int64(segment_sizze_nonzzero_38159))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_27475_var,
                                       ((np.long(num_groups_27524) * np.long(segred_group_sizze_27523)),),
                                       (np.long(segred_group_sizze_27523),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38180 = sdiv_up64(num_groups_27524,
                                               smax64(np.int64(1),
                                                      (m_24055 * res_24074)))
          elements_per_thread_38181 = sdiv_up64(res_24074,
                                                (segred_group_sizze_27523 * groups_per_segment_38180))
          virt_num_groups_38182 = (groups_per_segment_38180 * (m_24055 * res_24074))
          num_threads_38183 = (num_groups_27524 * segred_group_sizze_27523)
          threads_per_segment_38184 = (groups_per_segment_38180 * segred_group_sizze_27523)
          group_res_arr_mem_38185 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27523 * virt_num_groups_38182)),
                                                 "group_res_arr_mem_38185")
          mainDetailedzicounter_mem_38187 = self.mainDetailedzicounter_mem_38187
          if ((1 * (np.long(num_groups_27524) * np.long(segred_group_sizze_27523))) != 0):
            self.mainDetailedzisegred_large_27475_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27523))),
                                                               np.int64(res_24074),
                                                               np.int64(num_groups_27524),
                                                               res_mem_36931,
                                                               res_mem_37022,
                                                               mem_37059,
                                                               np.int64(groups_per_segment_38180),
                                                               np.int64(elements_per_thread_38181),
                                                               np.int64(virt_num_groups_38182),
                                                               np.int64(threads_per_segment_38184),
                                                               group_res_arr_mem_38185,
                                                               mainDetailedzicounter_mem_38187)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_27475_var,
                                       ((np.long(num_groups_27524) * np.long(segred_group_sizze_27523)),),
                                       (np.long(segred_group_sizze_27523),))
            if synchronous:
              sync(self)
        res_mem_37060 = mem_37059
      res_mem_37065 = res_mem_37060
    res_mem_36931 = None
    res_mem_37022 = None
    suff_outer_par_27539 = (self.sizes["mainDetailed.suff_outer_par_21"] <= m_24055)
    segmap_group_sizze_27559 = self.sizes["mainDetailed.segmap_group_size_27543"]
    max_num_groups_38221 = self.sizes["mainDetailed.segmap_num_groups_27545"]
    num_groups_27560 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24055,
                                                            segmap_group_sizze_27559),
                                                  sext_i32_i64(max_num_groups_38221))))
    comparatee_27635 = (N_24054 * m_24055)
    suff_outer_par_27636 = (self.sizes["mainDetailed.suff_outer_par_22"] <= comparatee_27635)
    nest_sizze_27650 = (res_24074 * comparatee_27635)
    segred_group_sizze_27651 = self.sizes["mainDetailed.segred_group_size_27599"]
    max_num_groups_38222 = self.sizes["mainDetailed.segred_num_groups_27601"]
    num_groups_27652 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27650,
                                                            segred_group_sizze_27651),
                                                  sext_i32_i64(max_num_groups_38222))))
    tile_sizze_35870 = self.sizes["mainDetailed.tile_size_35869"]
    group_sizze_35871 = (tile_sizze_35870 * tile_sizze_35870)
    bytes_37084 = (np.int64(4) * comparatee_27635)
    bytes_37070 = (np.int64(4) * N_24054)
    bytes_37092 = (np.int64(4) * group_sizze_35871)
    binop_x_37676 = (np.int64(4) * tile_sizze_35870)
    sizze_37677 = (tile_sizze_35870 * binop_x_37676)
    num_threads_37748 = (segmap_group_sizze_27559 * num_groups_27560)
    total_sizze_37749 = (bytes_37070 * num_threads_37748)
    local_memory_capacity_38308 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38308)) and suff_outer_par_27539):
      mem_37068 = opencl_alloc(self, bytes_36950, "mem_37068")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37068, np.int64(0),
                                                  res_mem_37065, np.int64(0),
                                                  np.int64(1), res_24074,
                                                  m_24055)
      mem_37086 = opencl_alloc(self, bytes_37084, "mem_37086")
      mem_37071 = opencl_alloc(self, total_sizze_37749, "mem_37071")
      if ((1 * (np.long(num_groups_27560) * np.long(segmap_group_sizze_27559))) != 0):
        self.mainDetailedzisegmap_27541_var.set_args(self.global_failure,
                                                     np.int64(N_24054),
                                                     np.int64(m_24055),
                                                     np.int32(k2p2zq_24072),
                                                     np.int64(res_24074),
                                                     np.int64(num_groups_27560),
                                                     mem_36754, mem_37068,
                                                     mem_37071, mem_37086)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27541_var,
                                   ((np.long(num_groups_27560) * np.long(segmap_group_sizze_27559)),),
                                   (np.long(segmap_group_sizze_27559),))
        if synchronous:
          sync(self)
      mem_37068 = None
      mem_37071 = None
      mem_37157 = opencl_alloc(self, bytes_37084, "mem_37157")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37157, np.int64(0),
                                                  mem_37086, np.int64(0),
                                                  np.int64(1), m_24055, N_24054)
      mem_37086 = None
      res_mem_37159 = mem_37157
    else:
      local_memory_capacity_38307 = self.max_local_memory
      if (sle64((((bytes_37092 + bytes_37092) + bytes_37092) + bytes_37092),
                sext_i32_i64(local_memory_capacity_38307)) and suff_outer_par_27636):
        mem_37089 = opencl_alloc(self, bytes_36740, "mem_37089")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_37089, np.int64(0),
                                                    mem_36754, np.int64(0),
                                                    np.int64(1), res_24074,
                                                    N_24054)
        num_groups_x_35872 = sdiv_up64(m_24055, tile_sizze_35870)
        num_groups_y_35873 = sdiv_up64(N_24054, tile_sizze_35870)
        num_groups_top_35874 = (num_groups_x_35872 * num_groups_y_35873)
        num_whole_tiles_35891 = squot64(res_24074, tile_sizze_35870)
        residual_input_36035 = srem64(res_24074, tile_sizze_35870)
        cond_36036 = (residual_input_36035 == np.int64(0))
        mem_37149 = opencl_alloc(self, bytes_37084, "mem_37149")
        if ((1 * (np.long(num_groups_top_35874) * np.long(group_sizze_35871))) != 0):
          self.mainDetailedzisegmap_intragroup_35875_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(bytes_37092)),
                                                                  cl.LocalMemory(np.long(bytes_37092)),
                                                                  cl.LocalMemory(np.long(bytes_37092)),
                                                                  cl.LocalMemory(np.long(bytes_37092)),
                                                                  np.int64(N_24054),
                                                                  np.int64(m_24055),
                                                                  np.int64(res_24074),
                                                                  np.int64(num_groups_y_35873),
                                                                  np.int64(num_whole_tiles_35891),
                                                                  np.int64(residual_input_36035),
                                                                  np.byte(cond_36036),
                                                                  res_mem_37065,
                                                                  mem_37089,
                                                                  mem_37149)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_35875_var,
                                     ((np.long(num_groups_top_35874) * np.long(group_sizze_35871)),),
                                     (np.long(group_sizze_35871),))
          if synchronous:
            sync(self)
        mem_37089 = None
        res_mem_37154 = mem_37149
      else:
        mem_37153 = opencl_alloc(self, bytes_37084, "mem_37153")
        if slt64((res_24074 * np.int64(2)), segred_group_sizze_27651):
          segment_sizze_nonzzero_38247 = smax64(np.int64(1), res_24074)
          num_threads_38248 = (num_groups_27652 * segred_group_sizze_27651)
          if ((1 * (np.long(num_groups_27652) * np.long(segred_group_sizze_27651))) != 0):
            self.mainDetailedzisegred_small_27605_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27651))),
                                                               np.int64(N_24054),
                                                               np.int64(m_24055),
                                                               np.int64(res_24074),
                                                               np.int64(num_groups_27652),
                                                               mem_36754,
                                                               res_mem_37065,
                                                               mem_37153,
                                                               np.int64(segment_sizze_nonzzero_38247))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_27605_var,
                                       ((np.long(num_groups_27652) * np.long(segred_group_sizze_27651)),),
                                       (np.long(segred_group_sizze_27651),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38268 = sdiv_up64(num_groups_27652,
                                               smax64(np.int64(1),
                                                      (m_24055 * N_24054)))
          elements_per_thread_38269 = sdiv_up64(res_24074,
                                                (segred_group_sizze_27651 * groups_per_segment_38268))
          virt_num_groups_38270 = (groups_per_segment_38268 * (m_24055 * N_24054))
          num_threads_38271 = (num_groups_27652 * segred_group_sizze_27651)
          threads_per_segment_38272 = (groups_per_segment_38268 * segred_group_sizze_27651)
          group_res_arr_mem_38273 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27651 * virt_num_groups_38270)),
                                                 "group_res_arr_mem_38273")
          mainDetailedzicounter_mem_38275 = self.mainDetailedzicounter_mem_38275
          if ((1 * (np.long(num_groups_27652) * np.long(segred_group_sizze_27651))) != 0):
            self.mainDetailedzisegred_large_27605_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27651))),
                                                               np.int64(N_24054),
                                                               np.int64(res_24074),
                                                               np.int64(num_groups_27652),
                                                               mem_36754,
                                                               res_mem_37065,
                                                               mem_37153,
                                                               np.int64(groups_per_segment_38268),
                                                               np.int64(elements_per_thread_38269),
                                                               np.int64(virt_num_groups_38270),
                                                               np.int64(threads_per_segment_38272),
                                                               group_res_arr_mem_38273,
                                                               mainDetailedzicounter_mem_38275)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_27605_var,
                                       ((np.long(num_groups_27652) * np.long(segred_group_sizze_27651)),),
                                       (np.long(segred_group_sizze_27651),))
            if synchronous:
              sync(self)
        res_mem_37154 = mem_37153
      res_mem_37159 = res_mem_37154
    mem_36754 = None
    res_mem_37065 = None
    i_24321 = (N_24054 - np.int64(1))
    x_24322 = sle64(np.int64(0), i_24321)
    y_24323 = slt64(i_24321, N_24054)
    bounds_check_24324 = (x_24322 and y_24323)
    index_certs_24325 = True
    assert bounds_check_24324, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:79:30-91\n   #3  /prelude/soacs.fut:56:19-23\n   #4  /prelude/soacs.fut:56:3-37\n   #5  bfastfinal.fut:73:5-82:25\n   #6  bfastfinal.fut:173:3-56\n   #7  bfastfinal.fut:169:1-173:56\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_24321,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_24054,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_27781 = sle64(N_24054, max_group_sizze_26518)
    suff_intra_par_27779 = (self.sizes["mainDetailed.suff_intra_par_25"] <= N_24054)
    intra_suff_and_fits_27782 = (suff_intra_par_27779 and fits_27781)
    segscan_group_sizze_27931 = self.sizes["mainDetailed.segscan_group_size_27908"]
    max_num_groups_38309 = self.sizes["mainDetailed.segscan_num_groups_27910"]
    num_groups_27932 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(comparatee_27635,
                                                            segscan_group_sizze_27931),
                                                  sext_i32_i64(max_num_groups_38309))))
    segmap_group_sizze_27951 = self.sizes["mainDetailed.segmap_group_size_27899"]
    mem_37162 = opencl_alloc(self, bytes_37084, "mem_37162")
    self.futhark_builtinzhreplicate_f32(mem_37162, (m_24055 * N_24054), np.nan)
    mem_37165 = opencl_alloc(self, bytes_37084, "mem_37165")
    self.futhark_builtinzhreplicate_i32(mem_37165, (m_24055 * N_24054),
                                        np.int32(0))
    segmap_group_sizze_27987 = self.sizes["mainDetailed.segmap_group_size_27824"]
    bytes_37177 = (np.int64(4) * m_24055)
    bytes_37168 = (np.int64(8) * N_24054)
    bytes_37186 = (np.int64(8) * comparatee_27635)
    local_memory_capacity_38411 = self.max_local_memory
    if (sle64((((bytes_37168 + bytes_37070) + bytes_37070) + bytes_37070),
              sext_i32_i64(local_memory_capacity_38411)) and intra_suff_and_fits_27782):
      mem_37178 = opencl_alloc(self, bytes_37177, "mem_37178")
      mem_37181 = opencl_alloc(self, bytes_37084, "mem_37181")
      mem_37184 = opencl_alloc(self, bytes_37084, "mem_37184")
      if ((1 * (np.long(m_24055) * np.long(N_24054))) != 0):
        self.mainDetailedzisegmap_intragroup_27704_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_37070)),
                                                                cl.LocalMemory(np.long(bytes_37070)),
                                                                cl.LocalMemory(np.long(bytes_37070)),
                                                                cl.LocalMemory(np.long(bytes_37168)),
                                                                np.int64(N_24054),
                                                                np.int64(N_24056),
                                                                np.int64(i_24321),
                                                                images_mem_36738,
                                                                res_mem_37159,
                                                                mem_37178,
                                                                mem_37181,
                                                                mem_37184)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_27704_var,
                                   ((np.long(m_24055) * np.long(N_24054)),),
                                   (np.long(N_24054),))
        if synchronous:
          sync(self)
      res_mem_37196 = mem_37178
      res_mem_37197 = mem_37181
      res_mem_37198 = mem_37184
    else:
      mem_37188 = opencl_alloc(self, bytes_37186, "mem_37188")
      mem_37191 = opencl_alloc(self, bytes_37084, "mem_37191")
      if slt64(np.int64(0), (m_24055 * N_24054)):
        stage1_max_num_groups_38345 = self.max_group_size
        stage1_num_groups_38346 = smin64(stage1_max_num_groups_38345,
                                         num_groups_27932)
        num_threads_38347 = sext_i64_i32((stage1_num_groups_38346 * segscan_group_sizze_27931))
        if ((1 * (np.long(stage1_num_groups_38346) * np.long(segscan_group_sizze_27931))) != 0):
          self.mainDetailedziscan_stage1_27914_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(8) * segscan_group_sizze_27931)))),
                                                            np.int64(N_24054),
                                                            np.int64(m_24055),
                                                            np.int64(N_24056),
                                                            images_mem_36738,
                                                            res_mem_37159,
                                                            mem_37188,
                                                            mem_37191,
                                                            np.int32(num_threads_38347))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage1_27914_var,
                                     ((np.long(stage1_num_groups_38346) * np.long(segscan_group_sizze_27931)),),
                                     (np.long(segscan_group_sizze_27931),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38346))) != 0):
          self.mainDetailedziscan_stage2_27914_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(8) * stage1_num_groups_38346)))),
                                                            np.int64(N_24054),
                                                            np.int64(m_24055),
                                                            mem_37188,
                                                            np.int64(stage1_num_groups_38346),
                                                            np.int32(num_threads_38347))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage2_27914_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_38346)),),
                                     (np.long(stage1_num_groups_38346),))
          if synchronous:
            sync(self)
        required_groups_38389 = sext_i64_i32(sdiv_up64((m_24055 * N_24054),
                                                       segscan_group_sizze_27931))
        if ((1 * (np.long(num_groups_27932) * np.long(segscan_group_sizze_27931))) != 0):
          self.mainDetailedziscan_stage3_27914_var.set_args(self.global_failure,
                                                            np.int64(N_24054),
                                                            np.int64(m_24055),
                                                            np.int64(num_groups_27932),
                                                            mem_37188,
                                                            np.int32(num_threads_38347),
                                                            np.int32(required_groups_38389))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage3_27914_var,
                                     ((np.long(num_groups_27932) * np.long(segscan_group_sizze_27931)),),
                                     (np.long(segscan_group_sizze_27931),))
          if synchronous:
            sync(self)
      segmap_usable_groups_27952 = sdiv_up64(m_24055, segmap_group_sizze_27951)
      mem_37194 = opencl_alloc(self, bytes_37177, "mem_37194")
      if ((1 * (np.long(segmap_usable_groups_27952) * np.long(segmap_group_sizze_27951))) != 0):
        self.mainDetailedzisegmap_27897_var.set_args(self.global_failure,
                                                     np.int64(N_24054),
                                                     np.int64(m_24055),
                                                     np.int64(i_24321),
                                                     mem_37188, mem_37194)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27897_var,
                                   ((np.long(segmap_usable_groups_27952) * np.long(segmap_group_sizze_27951)),),
                                   (np.long(segmap_group_sizze_27951),))
        if synchronous:
          sync(self)
      segmap_usable_groups_27988 = sdiv_up64(comparatee_27635,
                                             segmap_group_sizze_27987)
      if ((1 * (np.long(segmap_usable_groups_27988) * np.long(segmap_group_sizze_27987))) != 0):
        self.mainDetailedzisegmap_27821_var.set_args(self.global_failure,
                                                     np.int64(N_24054),
                                                     np.int64(m_24055),
                                                     mem_37162, mem_37165,
                                                     mem_37188, mem_37191)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27821_var,
                                   ((np.long(segmap_usable_groups_27988) * np.long(segmap_group_sizze_27987)),),
                                   (np.long(segmap_group_sizze_27987),))
        if synchronous:
          sync(self)
      mem_37188 = None
      mem_37191 = None
      res_mem_37196 = mem_37194
      res_mem_37197 = mem_37162
      res_mem_37198 = mem_37165
    mem_37162 = None
    mem_37165 = None
    suff_outer_par_28036 = (self.sizes["mainDetailed.suff_outer_par_29"] <= m_24055)
    fits_28114 = sle64(res_24068, max_group_sizze_26518)
    suff_intra_par_28112 = (self.sizes["mainDetailed.suff_intra_par_30"] <= res_24068)
    intra_suff_and_fits_28115 = (suff_intra_par_28112 and fits_28114)
    segmap_group_sizze_28079 = self.sizes["mainDetailed.segmap_group_size_28048"]
    nest_sizze_28202 = (m_24055 * res_24068)
    segred_group_sizze_28203 = self.sizes["mainDetailed.segred_group_size_28186"]
    max_num_groups_38412 = self.sizes["mainDetailed.segred_num_groups_28188"]
    num_groups_28204 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28202,
                                                            segred_group_sizze_28203),
                                                  sext_i32_i64(max_num_groups_38412))))
    segred_group_sizze_28217 = self.sizes["mainDetailed.segred_group_size_28165"]
    max_num_groups_38413 = self.sizes["mainDetailed.segred_num_groups_28167"]
    num_groups_28218 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28202,
                                                            segred_group_sizze_28217),
                                                  sext_i32_i64(max_num_groups_38413))))
    segmap_group_sizze_28233 = self.sizes["mainDetailed.segmap_group_size_28150"]
    bytes_37207 = (np.int64(4) * segmap_group_sizze_28079)
    local_memory_capacity_38567 = self.max_local_memory
    if (sle64((bytes_37207 + bytes_37207),
              sext_i32_i64(local_memory_capacity_38567)) and suff_outer_par_28036):
      segmap_usable_groups_28080 = sdiv_up64(m_24055, segmap_group_sizze_28079)
      mem_37201 = opencl_alloc(self, bytes_36755, "mem_37201")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37201, np.int64(0),
                                                  images_mem_36738, np.int64(0),
                                                  np.int64(1), N_24056, m_24055)
      mem_37204 = opencl_alloc(self, bytes_37084, "mem_37204")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37204, np.int64(0),
                                                  res_mem_37197, np.int64(0),
                                                  np.int64(1), N_24054, m_24055)
      num_whole_tiles_36188 = squot64(res_24068, segmap_group_sizze_28079)
      residual_input_36309 = srem64(res_24068, segmap_group_sizze_28079)
      cond_36310 = (residual_input_36309 == np.int64(0))
      mem_37248 = opencl_alloc(self, bytes_37177, "mem_37248")
      mem_37250 = opencl_alloc(self, bytes_37177, "mem_37250")
      mem_37252 = opencl_alloc(self, bytes_37177, "mem_37252")
      if ((1 * (np.long(segmap_usable_groups_28080) * np.long(segmap_group_sizze_28079))) != 0):
        self.mainDetailedzisegmap_intragroup_36180_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_37207)),
                                                                cl.LocalMemory(np.long(bytes_37207)),
                                                                np.int64(m_24055),
                                                                np.int32(n_24059),
                                                                np.float32(hfrac_24061),
                                                                np.int64(res_24068),
                                                                np.int32(k2p2_24070),
                                                                np.int64(num_whole_tiles_36188),
                                                                np.int64(residual_input_36309),
                                                                np.byte(cond_36310),
                                                                mem_37201,
                                                                mem_37204,
                                                                mem_37248,
                                                                mem_37250,
                                                                mem_37252)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_36180_var,
                                   ((np.long(segmap_usable_groups_28080) * np.long(segmap_group_sizze_28079)),),
                                   (np.long(segmap_group_sizze_28079),))
        if synchronous:
          sync(self)
      mem_37201 = None
      mem_37204 = None
      res_mem_37276 = mem_37248
      res_mem_37277 = mem_37250
      res_mem_37278 = mem_37252
    else:
      local_memory_capacity_38566 = self.max_local_memory
      if (sle64(((np.int32(4) * res_24068) + (np.int32(4) * res_24068)),
                sext_i32_i64(local_memory_capacity_38566)) and intra_suff_and_fits_28115):
        mem_37257 = opencl_alloc(self, bytes_37177, "mem_37257")
        mem_37259 = opencl_alloc(self, bytes_37177, "mem_37259")
        mem_37261 = opencl_alloc(self, bytes_37177, "mem_37261")
        if ((1 * (np.long(m_24055) * np.long(res_24068))) != 0):
          self.mainDetailedzisegmap_intragroup_28044_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long((np.int32(4) * res_24068))),
                                                                  cl.LocalMemory(np.long((np.int32(4) * res_24068))),
                                                                  np.int64(N_24054),
                                                                  np.int64(N_24056),
                                                                  np.float32(hfrac_24061),
                                                                  np.int64(res_24068),
                                                                  np.int32(k2p2_24070),
                                                                  images_mem_36738,
                                                                  res_mem_37197,
                                                                  mem_37257,
                                                                  mem_37259,
                                                                  mem_37261)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_28044_var,
                                     ((np.long(m_24055) * np.long(res_24068)),),
                                     (np.long(res_24068),))
          if synchronous:
            sync(self)
        res_mem_37273 = mem_37257
        res_mem_37274 = mem_37259
        res_mem_37275 = mem_37261
      else:
        mem_37264 = opencl_alloc(self, bytes_37177, "mem_37264")
        if slt64((res_24068 * np.int64(2)), segred_group_sizze_28203):
          segment_sizze_nonzzero_38441 = smax64(np.int64(1), res_24068)
          num_threads_38442 = (num_groups_28204 * segred_group_sizze_28203)
          if ((1 * (np.long(num_groups_28204) * np.long(segred_group_sizze_28203))) != 0):
            self.mainDetailedzisegred_small_28192_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28203))),
                                                               np.int64(m_24055),
                                                               np.int64(N_24056),
                                                               np.int64(res_24068),
                                                               np.int64(num_groups_28204),
                                                               images_mem_36738,
                                                               mem_37264,
                                                               np.int64(segment_sizze_nonzzero_38441))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_28192_var,
                                       ((np.long(num_groups_28204) * np.long(segred_group_sizze_28203)),),
                                       (np.long(segred_group_sizze_28203),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38462 = sdiv_up64(num_groups_28204,
                                               smax64(np.int64(1), m_24055))
          elements_per_thread_38463 = sdiv_up64(res_24068,
                                                (segred_group_sizze_28203 * groups_per_segment_38462))
          virt_num_groups_38464 = (groups_per_segment_38462 * m_24055)
          num_threads_38465 = (num_groups_28204 * segred_group_sizze_28203)
          threads_per_segment_38466 = (groups_per_segment_38462 * segred_group_sizze_28203)
          group_res_arr_mem_38467 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_28203 * virt_num_groups_38464)),
                                                 "group_res_arr_mem_38467")
          mainDetailedzicounter_mem_38469 = self.mainDetailedzicounter_mem_38469
          if ((1 * (np.long(num_groups_28204) * np.long(segred_group_sizze_28203))) != 0):
            self.mainDetailedzisegred_large_28192_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28203))),
                                                               np.int64(N_24056),
                                                               np.int64(res_24068),
                                                               np.int64(num_groups_28204),
                                                               images_mem_36738,
                                                               mem_37264,
                                                               np.int64(groups_per_segment_38462),
                                                               np.int64(elements_per_thread_38463),
                                                               np.int64(virt_num_groups_38464),
                                                               np.int64(threads_per_segment_38466),
                                                               group_res_arr_mem_38467,
                                                               mainDetailedzicounter_mem_38469)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_28192_var,
                                       ((np.long(num_groups_28204) * np.long(segred_group_sizze_28203)),),
                                       (np.long(segred_group_sizze_28203),))
            if synchronous:
              sync(self)
        mem_37267 = opencl_alloc(self, bytes_37177, "mem_37267")
        if slt64((res_24068 * np.int64(2)), segred_group_sizze_28217):
          segment_sizze_nonzzero_38501 = smax64(np.int64(1), res_24068)
          num_threads_38502 = (num_groups_28218 * segred_group_sizze_28217)
          if ((1 * (np.long(num_groups_28218) * np.long(segred_group_sizze_28217))) != 0):
            self.mainDetailedzisegred_small_28171_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28217))),
                                                               np.int64(N_24054),
                                                               np.int64(m_24055),
                                                               np.int64(res_24068),
                                                               np.int64(num_groups_28218),
                                                               res_mem_37197,
                                                               mem_37264,
                                                               mem_37267,
                                                               np.int64(segment_sizze_nonzzero_38501))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_28171_var,
                                       ((np.long(num_groups_28218) * np.long(segred_group_sizze_28217)),),
                                       (np.long(segred_group_sizze_28217),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38522 = sdiv_up64(num_groups_28218,
                                               smax64(np.int64(1), m_24055))
          elements_per_thread_38523 = sdiv_up64(res_24068,
                                                (segred_group_sizze_28217 * groups_per_segment_38522))
          virt_num_groups_38524 = (groups_per_segment_38522 * m_24055)
          num_threads_38525 = (num_groups_28218 * segred_group_sizze_28217)
          threads_per_segment_38526 = (groups_per_segment_38522 * segred_group_sizze_28217)
          group_res_arr_mem_38527 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_28217 * virt_num_groups_38524)),
                                                 "group_res_arr_mem_38527")
          mainDetailedzicounter_mem_38529 = self.mainDetailedzicounter_mem_38529
          if ((1 * (np.long(num_groups_28218) * np.long(segred_group_sizze_28217))) != 0):
            self.mainDetailedzisegred_large_28171_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28217))),
                                                               np.int64(N_24054),
                                                               np.int64(res_24068),
                                                               np.int64(num_groups_28218),
                                                               res_mem_37197,
                                                               mem_37264,
                                                               mem_37267,
                                                               np.int64(groups_per_segment_38522),
                                                               np.int64(elements_per_thread_38523),
                                                               np.int64(virt_num_groups_38524),
                                                               np.int64(threads_per_segment_38526),
                                                               group_res_arr_mem_38527,
                                                               mainDetailedzicounter_mem_38529)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_28171_var,
                                       ((np.long(num_groups_28218) * np.long(segred_group_sizze_28217)),),
                                       (np.long(segred_group_sizze_28217),))
            if synchronous:
              sync(self)
        segmap_usable_groups_28234 = sdiv_up64(m_24055,
                                               segmap_group_sizze_28233)
        mem_37270 = opencl_alloc(self, bytes_37177, "mem_37270")
        mem_37272 = opencl_alloc(self, bytes_37177, "mem_37272")
        if ((1 * (np.long(segmap_usable_groups_28234) * np.long(segmap_group_sizze_28233))) != 0):
          self.mainDetailedzisegmap_28148_var.set_args(self.global_failure,
                                                       np.int64(m_24055),
                                                       np.float32(hfrac_24061),
                                                       np.int32(k2p2_24070),
                                                       mem_37264, mem_37267,
                                                       mem_37270, mem_37272)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_28148_var,
                                     ((np.long(segmap_usable_groups_28234) * np.long(segmap_group_sizze_28233)),),
                                     (np.long(segmap_group_sizze_28233),))
          if synchronous:
            sync(self)
        mem_37267 = None
        res_mem_37273 = mem_37270
        res_mem_37274 = mem_37264
        res_mem_37275 = mem_37272
      res_mem_37276 = res_mem_37273
      res_mem_37277 = res_mem_37274
      res_mem_37278 = res_mem_37275
    segred_group_sizze_28254 = self.sizes["mainDetailed.segred_group_size_28253"]
    max_num_groups_38568 = self.sizes["mainDetailed.segred_num_groups_28255"]
    num_groups_28256 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24055,
                                                            segred_group_sizze_28254),
                                                  sext_i32_i64(max_num_groups_38568))))
    mem_37281 = opencl_alloc(self, np.int64(4), "mem_37281")
    mainDetailedzicounter_mem_38569 = self.mainDetailedzicounter_mem_38569
    group_res_arr_mem_38571 = opencl_alloc(self,
                                           (np.int32(4) * (segred_group_sizze_28254 * num_groups_28256)),
                                           "group_res_arr_mem_38571")
    num_threads_38573 = (num_groups_28256 * segred_group_sizze_28254)
    if ((1 * (np.long(num_groups_28256) * np.long(segred_group_sizze_28254))) != 0):
      self.mainDetailedzisegred_nonseg_28261_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28254))),
                                                          cl.LocalMemory(np.long(np.int32(1))),
                                                          np.int64(m_24055),
                                                          np.int64(num_groups_28256),
                                                          res_mem_37276,
                                                          mem_37281,
                                                          mainDetailedzicounter_mem_38569,
                                                          group_res_arr_mem_38571,
                                                          np.int64(num_threads_38573))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegred_nonseg_28261_var,
                                 ((np.long(num_groups_28256) * np.long(segred_group_sizze_28254)),),
                                 (np.long(segred_group_sizze_28254),))
      if synchronous:
        sync(self)
    read_res_39109 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39109, mem_37281,
                    device_offset=(np.long(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    res_24411 = read_res_39109[0]
    mem_37281 = None
    res_24416 = sext_i32_i64(res_24411)
    bounds_invalid_upwards_24417 = slt64(res_24416, np.int64(0))
    valid_24418 = not(bounds_invalid_upwards_24417)
    range_valid_c_24419 = True
    assert valid_24418, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:5:3-18\n   #2  bfastfinal.fut:107:34-46\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:102:17-109:24\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                                                                    res_24416,
                                                                                                                                                                                                                                                                                                                    " is invalid."))
    suff_outer_par_28293 = (self.sizes["mainDetailed.suff_outer_par_32"] <= m_24055)
    segmap_group_sizze_28316 = self.sizes["mainDetailed.segmap_group_size_28297"]
    nest_sizze_28359 = (m_24055 * res_24416)
    segred_group_sizze_28360 = self.sizes["mainDetailed.segred_group_size_28337"]
    max_num_groups_38599 = self.sizes["mainDetailed.segred_num_groups_28339"]
    num_groups_28361 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28359,
                                                            segred_group_sizze_28360),
                                                  sext_i32_i64(max_num_groups_38599))))
    bytes_37284 = (np.int64(4) * segmap_group_sizze_28316)
    local_memory_capacity_38670 = self.max_local_memory
    if (sle64((bytes_37284 + bytes_37284),
              sext_i32_i64(local_memory_capacity_38670)) and suff_outer_par_28293):
      segmap_usable_groups_28317 = sdiv_up64(m_24055, segmap_group_sizze_28316)
      num_whole_tiles_36432 = squot64(res_24416, segmap_group_sizze_28316)
      residual_input_36531 = srem64(res_24416, segmap_group_sizze_28316)
      cond_36532 = (residual_input_36531 == np.int64(0))
      mem_37323 = opencl_alloc(self, bytes_37177, "mem_37323")
      if ((1 * (np.long(segmap_usable_groups_28317) * np.long(segmap_group_sizze_28316))) != 0):
        self.mainDetailedzisegmap_intragroup_36412_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_37284)),
                                                                cl.LocalMemory(np.long(bytes_37284)),
                                                                np.int64(N_24054),
                                                                np.int64(m_24055),
                                                                np.int64(res_24416),
                                                                np.int64(num_whole_tiles_36432),
                                                                np.int64(residual_input_36531),
                                                                np.byte(cond_36532),
                                                                res_mem_37197,
                                                                res_mem_37276,
                                                                res_mem_37277,
                                                                mem_37323)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_36412_var,
                                   ((np.long(segmap_usable_groups_28317) * np.long(segmap_group_sizze_28316)),),
                                   (np.long(segmap_group_sizze_28316),))
        if synchronous:
          sync(self)
      res_mem_37327 = mem_37323
    else:
      mem_37326 = opencl_alloc(self, bytes_37177, "mem_37326")
      if slt64((res_24416 * np.int64(2)), segred_group_sizze_28360):
        segment_sizze_nonzzero_38610 = smax64(np.int64(1), res_24416)
        num_threads_38611 = (num_groups_28361 * segred_group_sizze_28360)
        if ((1 * (np.long(num_groups_28361) * np.long(segred_group_sizze_28360))) != 0):
          self.mainDetailedzisegred_small_28343_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28360))),
                                                             np.int64(N_24054),
                                                             np.int64(m_24055),
                                                             np.int64(res_24416),
                                                             np.int64(num_groups_28361),
                                                             res_mem_37197,
                                                             res_mem_37276,
                                                             res_mem_37277,
                                                             mem_37326,
                                                             np.int64(segment_sizze_nonzzero_38610))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_small_28343_var,
                                     ((np.long(num_groups_28361) * np.long(segred_group_sizze_28360)),),
                                     (np.long(segred_group_sizze_28360),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_38631 = sdiv_up64(num_groups_28361,
                                             smax64(np.int64(1), m_24055))
        elements_per_thread_38632 = sdiv_up64(res_24416,
                                              (segred_group_sizze_28360 * groups_per_segment_38631))
        virt_num_groups_38633 = (groups_per_segment_38631 * m_24055)
        num_threads_38634 = (num_groups_28361 * segred_group_sizze_28360)
        threads_per_segment_38635 = (groups_per_segment_38631 * segred_group_sizze_28360)
        group_res_arr_mem_38636 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_28360 * virt_num_groups_38633)),
                                               "group_res_arr_mem_38636")
        mainDetailedzicounter_mem_38638 = self.mainDetailedzicounter_mem_38638
        if ((1 * (np.long(num_groups_28361) * np.long(segred_group_sizze_28360))) != 0):
          self.mainDetailedzisegred_large_28343_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long(np.int32(1))),
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28360))),
                                                             np.int64(N_24054),
                                                             np.int64(res_24416),
                                                             np.int64(num_groups_28361),
                                                             res_mem_37197,
                                                             res_mem_37276,
                                                             res_mem_37277,
                                                             mem_37326,
                                                             np.int64(groups_per_segment_38631),
                                                             np.int64(elements_per_thread_38632),
                                                             np.int64(virt_num_groups_38633),
                                                             np.int64(threads_per_segment_38635),
                                                             group_res_arr_mem_38636,
                                                             mainDetailedzicounter_mem_38638)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_large_28343_var,
                                     ((np.long(num_groups_28361) * np.long(segred_group_sizze_28360)),),
                                     (np.long(segred_group_sizze_28360),))
          if synchronous:
            sync(self)
      res_mem_37327 = mem_37326
    iota32_arg_24441 = (N_24054 - res_24068)
    bounds_invalid_upwards_24442 = slt64(iota32_arg_24441, np.int64(0))
    valid_24443 = not(bounds_invalid_upwards_24442)
    range_valid_c_24444 = True
    assert valid_24443, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:115:22-35\n   #3  bfastfinal.fut:173:3-56\n   #4  bfastfinal.fut:169:1-173:56\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_24441,
                                                                                                                                                                                                                                      " is invalid."))
    x_24446 = (np.int32(1) + n_24059)
    index_certs_24447 = True
    assert bounds_check_24324, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:113:64-84\n   #1  bfastfinal.fut:111:15-115:36\n   #2  bfastfinal.fut:173:3-56\n   #3  bfastfinal.fut:169:1-173:56\n" % ("Index [",
                                                                                                                                                                                                                 i_24321,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_24054,
                                                                                                                                                                                                                 "]."))
    read_res_39111 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39111, mappingindices_mem_36737,
                    device_offset=(np.long(i_24321) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_24448 = read_res_39111[0]
    res_24449 = sitofp_i32_f32(r32_arg_24448)
    range_valid_c_24450 = True
    assert valid_24443, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:127:29-44\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:120:50-163:9\n   #5  bfastfinal.fut:173:3-56\n   #6  bfastfinal.fut:169:1-173:56\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_24441,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_28438 = self.sizes["mainDetailed.segmap_group_size_28421"]
    segmap_usable_groups_28439 = sdiv_up64(iota32_arg_24441,
                                           segmap_group_sizze_28438)
    bytes_37329 = (np.int64(4) * iota32_arg_24441)
    mem_37330 = opencl_alloc(self, bytes_37329, "mem_37330")
    mem_37332 = opencl_alloc(self, bytes_37329, "mem_37332")
    if ((1 * (np.long(segmap_usable_groups_28439) * np.long(segmap_group_sizze_28438))) != 0):
      self.mainDetailedzisegmap_28419_var.set_args(self.global_failure,
                                                   np.float32(lam_24062),
                                                   np.int64(iota32_arg_24441),
                                                   np.int32(x_24446),
                                                   np.float32(res_24449),
                                                   mappingindices_mem_36737,
                                                   mem_37330, mem_37332)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_28419_var,
                                 ((np.long(segmap_usable_groups_28439) * np.long(segmap_group_sizze_28438)),),
                                 (np.long(segmap_group_sizze_28438),))
      if synchronous:
        sync(self)
    mem_37330 = None
    cond_24466 = (iota32_arg_24441 == np.int64(0))
    if cond_24466:
      iters_24467 = np.int32(0)
    else:
      iters_24467 = np.int32(16)
    loop_nonempty_24468 = slt32(np.int32(0), iters_24467)
    i_24469 = (iota32_arg_24441 - np.int64(1))
    x_24470 = sle64(np.int64(0), i_24469)
    y_24471 = slt64(i_24469, iota32_arg_24441)
    bounds_check_24472 = (x_24470 and y_24471)
    loop_not_taken_24473 = not(loop_nonempty_24468)
    protect_assert_disj_24474 = (bounds_check_24472 or loop_not_taken_24473)
    index_certs_24475 = True
    assert protect_assert_disj_24474, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  lib/github.com/diku-dk/sorts/radix_sort.fut:25:24-35\n   #2  lib/github.com/diku-dk/sorts/radix_sort.fut:53:31-62\n   #3  lib/github.com/diku-dk/sorts/radix_sort.fut:104:6-36\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:142:29-147:72\n   #6  /prelude/functional.fut:9:42-44\n   #7  bfastfinal.fut:120:50-163:9\n   #8  bfastfinal.fut:173:3-56\n   #9  bfastfinal.fut:169:1-173:56\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      i_24469,
out of bounds for array of shape [",
iota32_arg_24441,

    suff_outer_par_28456 = (self.sizes["mainDetailed.suff_outer_par_34"] <= m_24055)
    fits_29003 = sle64(iota32_arg_24441, max_group_sizze_26518)
    suff_intra_par_29001 = (self.sizes["mainDetailed.suff_intra_par_35"] <= iota32_arg_24441)
    intra_suff_and_fits_29004 = (suff_intra_par_29001 and fits_29003)
    segmap_group_sizze_28747 = self.sizes["mainDetailed.segmap_group_size_28496"]
    max_num_groups_38676 = self.sizes["mainDetailed.segmap_num_groups_28498"]
    num_groups_28748 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24055,
                                                            segmap_group_sizze_28747),
                                                  sext_i32_i64(max_num_groups_38676))))
    segmap_group_sizze_30110 = self.sizes["mainDetailed.segmap_group_size_30090"]
    max_num_groups_38677 = self.sizes["mainDetailed.segmap_num_groups_30092"]
    num_groups_30111 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24055,
                                                            segmap_group_sizze_30110),
                                                  sext_i32_i64(max_num_groups_38677))))
    nest_sizze_30132 = (m_24055 * iota32_arg_24441)
    segscan_group_sizze_30133 = self.sizes["mainDetailed.segscan_group_size_30049"]
    max_num_groups_38678 = self.sizes["mainDetailed.segscan_num_groups_30051"]
    num_groups_30134 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30132,
                                                            segscan_group_sizze_30133),
                                                  sext_i32_i64(max_num_groups_38678))))
    segred_group_sizze_30171 = self.sizes["mainDetailed.segred_group_size_29995"]
    max_num_groups_38679 = self.sizes["mainDetailed.segred_num_groups_29997"]
    num_groups_30172 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30132,
                                                            segred_group_sizze_30171),
                                                  sext_i32_i64(max_num_groups_38679))))
    segmap_group_sizze_30211 = self.sizes["mainDetailed.segmap_group_size_29969"]
    segmap_group_sizze_30234 = self.sizes["mainDetailed.segmap_group_size_29952"]
    segmap_group_sizze_30252 = self.sizes["mainDetailed.segmap_group_size_29894"]
    suff_intra_par_30293 = (self.sizes["mainDetailed.suff_intra_par_38"] <= iota32_arg_24441)
    intra_suff_and_fits_30294 = (fits_29003 and suff_intra_par_30293)
    segscan_group_sizze_30377 = self.sizes["mainDetailed.segscan_group_size_29694"]
    max_num_groups_38680 = self.sizes["mainDetailed.segscan_num_groups_29696"]
    num_groups_30378 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30132,
                                                            segscan_group_sizze_30377),
                                                  sext_i32_i64(max_num_groups_38680))))
    segmap_group_sizze_30446 = self.sizes["mainDetailed.segmap_group_size_29644"]
    segmap_group_sizze_30483 = self.sizes["mainDetailed.segmap_group_size_29314"]
    bytes_37333 = (np.int64(4) * nest_sizze_30132)
    mem_37335 = opencl_alloc(self, bytes_37333, "mem_37335")
    self.futhark_builtinzhreplicate_f32(mem_37335, (m_24055 * iota32_arg_24441),
                                        np.nan)
    segmap_group_sizze_30551 = self.sizes["mainDetailed.segmap_group_size_29262"]
    segmap_usable_groups_30447 = sdiv_up_safe64(nest_sizze_30132,
                                                segmap_group_sizze_30446)
    bytes_37370 = (np.int64(8) * iota32_arg_24441)
    bytes_37601 = (np.int64(8) * nest_sizze_30132)
    double_buffer_sizze_37713 = (np.int64(4) * iota32_arg_24441)
    double_buffer_sizze_37717 = (np.int64(4) * iota32_arg_24441)
    num_threads_37765 = (segmap_group_sizze_28747 * num_groups_28748)
    total_sizze_37766 = (bytes_37329 * num_threads_37765)
    total_sizze_37767 = (bytes_37329 * num_threads_37765)
    total_sizze_37768 = (bytes_37370 * num_threads_37765)
    total_sizze_37769 = (bytes_37370 * num_threads_37765)
    total_sizze_37770 = (bytes_37370 * num_threads_37765)
    total_sizze_37771 = (bytes_37370 * num_threads_37765)
    total_sizze_37772 = (bytes_37329 * num_threads_37765)
    total_sizze_37773 = (bytes_37329 * num_threads_37765)
    total_sizze_37774 = (bytes_37329 * num_threads_37765)
    total_sizze_37775 = (double_buffer_sizze_37713 * num_threads_37765)
    local_memory_capacity_39084 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_39084)) and suff_outer_par_28456):
      mem_37475 = opencl_alloc(self, bytes_37333, "mem_37475")
      mem_37478 = opencl_alloc(self, bytes_37333, "mem_37478")
      mem_37480 = opencl_alloc(self, bytes_37177, "mem_37480")
      mem_37482 = opencl_alloc(self, bytes_37177, "mem_37482")
      mem_37484 = opencl_alloc(self, bytes_37177, "mem_37484")
      mem_37338 = opencl_alloc(self, total_sizze_37766, "mem_37338")
      mem_37352 = opencl_alloc(self, total_sizze_37767, "mem_37352")
      mem_37371 = opencl_alloc(self, total_sizze_37768, "mem_37371")
      mem_37373 = opencl_alloc(self, total_sizze_37769, "mem_37373")
      mem_37375 = opencl_alloc(self, total_sizze_37770, "mem_37375")
      mem_37377 = opencl_alloc(self, total_sizze_37771, "mem_37377")
      mem_37379 = opencl_alloc(self, total_sizze_37772, "mem_37379")
      mem_37441 = opencl_alloc(self, total_sizze_37773, "mem_37441")
      mem_37460 = opencl_alloc(self, total_sizze_37774, "mem_37460")
      double_buffer_mem_37711 = opencl_alloc(self, total_sizze_37775,
                                             "double_buffer_mem_37711")
      if ((1 * (np.long(num_groups_28748) * np.long(segmap_group_sizze_28747))) != 0):
        self.mainDetailedzisegmap_28494_var.set_args(self.global_failure,
                                                     self.failure_is_an_option,
                                                     self.global_failure_args,
                                                     np.int64(N_24054),
                                                     np.int64(m_24055),
                                                     np.int32(n_24059),
                                                     np.int64(iota32_arg_24441),
                                                     np.int32(iters_24467),
                                                     np.int64(i_24469),
                                                     np.int64(num_groups_28748),
                                                     res_mem_37196,
                                                     res_mem_37197,
                                                     res_mem_37198,
                                                     res_mem_37276,
                                                     res_mem_37277,
                                                     res_mem_37278,
                                                     res_mem_37327, mem_37332,
                                                     mem_37338, mem_37352,
                                                     mem_37371, mem_37373,
                                                     mem_37375, mem_37377,
                                                     mem_37379, mem_37441,
                                                     mem_37460, mem_37475,
                                                     mem_37478, mem_37480,
                                                     mem_37482, mem_37484,
                                                     double_buffer_mem_37711)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_28494_var,
                                   ((np.long(num_groups_28748) * np.long(segmap_group_sizze_28747)),),
                                   (np.long(segmap_group_sizze_28747),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_37338 = None
      mem_37352 = None
      mem_37371 = None
      mem_37373 = None
      mem_37375 = None
      mem_37377 = None
      mem_37379 = None
      mem_37441 = None
      mem_37460 = None
      double_buffer_mem_37711 = None
      mem_37644 = opencl_alloc(self, bytes_37333, "mem_37644")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37644, np.int64(0),
                                                  mem_37475, np.int64(0),
                                                  np.int64(1), m_24055,
                                                  iota32_arg_24441)
      mem_37475 = None
      mem_37648 = opencl_alloc(self, bytes_37333, "mem_37648")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37648, np.int64(0),
                                                  mem_37478, np.int64(0),
                                                  np.int64(1), m_24055,
                                                  iota32_arg_24441)
      mem_37478 = None
      res_mem_37650 = mem_37644
      res_mem_37651 = mem_37648
      res_mem_37652 = mem_37480
      res_mem_37653 = mem_37482
      res_mem_37654 = mem_37484
    else:
      local_memory_capacity_39083 = self.max_local_memory
      if (sle64((((((((((((((bytes_37329 + bytes_37329) + (np.int32(1) * iota32_arg_24441)) + (np.int32(4) * iota32_arg_24441)) + (np.int32(4) * iota32_arg_24441)) + bytes_37329) + bytes_37370) + bytes_37370) + bytes_37370) + bytes_37370) + bytes_37329) + double_buffer_sizze_37717) + bytes_37329) + bytes_37329),
                sext_i32_i64(local_memory_capacity_39083)) and intra_suff_and_fits_29004):
        mem_37528 = opencl_alloc(self, bytes_37333, "mem_37528")
        mem_37531 = opencl_alloc(self, bytes_37333, "mem_37531")
        mem_37533 = opencl_alloc(self, bytes_37177, "mem_37533")
        mem_37535 = opencl_alloc(self, bytes_37177, "mem_37535")
        mem_37537 = opencl_alloc(self, bytes_37177, "mem_37537")
        if ((1 * (np.long(m_24055) * np.long(iota32_arg_24441))) != 0):
          self.mainDetailedzisegmap_intragroup_28492_var.set_args(self.global_failure,
                                                                  self.failure_is_an_option,
                                                                  self.global_failure_args,
                                                                  cl.LocalMemory(np.long(bytes_37329)),
                                                                  cl.LocalMemory(np.long(bytes_37329)),
                                                                  cl.LocalMemory(np.long(double_buffer_sizze_37717)),
                                                                  cl.LocalMemory(np.long(bytes_37329)),
                                                                  cl.LocalMemory(np.long(bytes_37370)),
                                                                  cl.LocalMemory(np.long(bytes_37370)),
                                                                  cl.LocalMemory(np.long(bytes_37370)),
                                                                  cl.LocalMemory(np.long(bytes_37370)),
                                                                  cl.LocalMemory(np.long(bytes_37329)),
                                                                  cl.LocalMemory(np.long((np.int32(4) * iota32_arg_24441))),
                                                                  cl.LocalMemory(np.long((np.int32(4) * iota32_arg_24441))),
                                                                  cl.LocalMemory(np.long((np.int32(1) * iota32_arg_24441))),
                                                                  cl.LocalMemory(np.long(bytes_37329)),
                                                                  cl.LocalMemory(np.long(bytes_37329)),
                                                                  np.int64(N_24054),
                                                                  np.int32(n_24059),
                                                                  np.int64(iota32_arg_24441),
                                                                  np.int32(iters_24467),
                                                                  np.int64(i_24469),
                                                                  res_mem_37196,
                                                                  res_mem_37197,
                                                                  res_mem_37198,
                                                                  res_mem_37276,
                                                                  res_mem_37277,
                                                                  res_mem_37278,
                                                                  res_mem_37327,
                                                                  mem_37332,
                                                                  mem_37528,
                                                                  mem_37531,
                                                                  mem_37533,
                                                                  mem_37535,
                                                                  mem_37537)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_28492_var,
                                     ((np.long(m_24055) * np.long(iota32_arg_24441)),),
                                     (np.long(iota32_arg_24441),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        res_mem_37637 = mem_37528
        res_mem_37638 = mem_37531
        res_mem_37639 = mem_37533
        res_mem_37640 = mem_37535
        res_mem_37641 = mem_37537
      else:
        mem_37540 = opencl_alloc(self, bytes_37177, "mem_37540")
        mem_37542 = opencl_alloc(self, bytes_37177, "mem_37542")
        if ((1 * (np.long(num_groups_30111) * np.long(segmap_group_sizze_30110))) != 0):
          self.mainDetailedzisegmap_30088_var.set_args(self.global_failure,
                                                       np.int64(m_24055),
                                                       np.int64(num_groups_30111),
                                                       res_mem_37196,
                                                       res_mem_37277,
                                                       res_mem_37278, mem_37540,
                                                       mem_37542)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_30088_var,
                                     ((np.long(num_groups_30111) * np.long(segmap_group_sizze_30110)),),
                                     (np.long(segmap_group_sizze_30110),))
          if synchronous:
            sync(self)
        mem_37546 = opencl_alloc(self, bytes_37333, "mem_37546")
        if slt64(np.int64(0), (m_24055 * iota32_arg_24441)):
          stage1_max_num_groups_38772 = self.max_group_size
          stage1_num_groups_38773 = smin64(stage1_max_num_groups_38772,
                                           num_groups_30134)
          num_threads_38774 = sext_i64_i32((stage1_num_groups_38773 * segscan_group_sizze_30133))
          if ((1 * (np.long(stage1_num_groups_38773) * np.long(segscan_group_sizze_30133))) != 0):
            self.mainDetailedziscan_stage1_30055_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                            (np.int32(4) * segscan_group_sizze_30133)))),
                                                              np.int64(N_24054),
                                                              np.int64(m_24055),
                                                              np.int64(iota32_arg_24441),
                                                              res_mem_37197,
                                                              res_mem_37276,
                                                              res_mem_37277,
                                                              res_mem_37327,
                                                              mem_37542,
                                                              mem_37546,
                                                              np.int32(num_threads_38774))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage1_30055_var,
                                       ((np.long(stage1_num_groups_38773) * np.long(segscan_group_sizze_30133)),),
                                       (np.long(segscan_group_sizze_30133),))
            if synchronous:
              sync(self)
          if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38773))) != 0):
            self.mainDetailedziscan_stage2_30055_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                            (np.int32(4) * stage1_num_groups_38773)))),
                                                              np.int64(m_24055),
                                                              np.int64(iota32_arg_24441),
                                                              mem_37546,
                                                              np.int64(stage1_num_groups_38773),
                                                              np.int32(num_threads_38774))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage2_30055_var,
                                       ((np.long(np.int64(1)) * np.long(stage1_num_groups_38773)),),
                                       (np.long(stage1_num_groups_38773),))
            if synchronous:
              sync(self)
          required_groups_38816 = sext_i64_i32(sdiv_up64((m_24055 * iota32_arg_24441),
                                                         segscan_group_sizze_30133))
          if ((1 * (np.long(num_groups_30134) * np.long(segscan_group_sizze_30133))) != 0):
            self.mainDetailedziscan_stage3_30055_var.set_args(self.global_failure,
                                                              np.int64(m_24055),
                                                              np.int64(iota32_arg_24441),
                                                              np.int64(num_groups_30134),
                                                              mem_37546,
                                                              np.int32(num_threads_38774),
                                                              np.int32(required_groups_38816))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage3_30055_var,
                                       ((np.long(num_groups_30134) * np.long(segscan_group_sizze_30133)),),
                                       (np.long(segscan_group_sizze_30133),))
            if synchronous:
              sync(self)
        mem_37549 = opencl_alloc(self, m_24055, "mem_37549")
        mem_37551 = opencl_alloc(self, bytes_37177, "mem_37551")
        mem_37553 = opencl_alloc(self, bytes_37177, "mem_37553")
        mem_37556 = opencl_alloc(self, bytes_37333, "mem_37556")
        if slt64((iota32_arg_24441 * np.int64(2)), segred_group_sizze_30171):
          segment_sizze_nonzzero_38828 = smax64(np.int64(1), iota32_arg_24441)
          num_threads_38829 = (num_groups_30172 * segred_group_sizze_30171)
          if ((1 * (np.long(num_groups_30172) * np.long(segred_group_sizze_30171))) != 0):
            self.mainDetailedzisegred_small_30001_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30171))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30171))),
                                                               cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_30171))),
                                                               np.int64(m_24055),
                                                               np.int64(iota32_arg_24441),
                                                               np.int64(num_groups_30172),
                                                               mem_37332,
                                                               mem_37540,
                                                               mem_37542,
                                                               mem_37546,
                                                               mem_37549,
                                                               mem_37551,
                                                               mem_37553,
                                                               mem_37556,
                                                               np.int64(segment_sizze_nonzzero_38828))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_30001_var,
                                       ((np.long(num_groups_30172) * np.long(segred_group_sizze_30171)),),
                                       (np.long(segred_group_sizze_30171),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38864 = sdiv_up64(num_groups_30172,
                                               smax64(np.int64(1), m_24055))
          elements_per_thread_38865 = sdiv_up64(iota32_arg_24441,
                                                (segred_group_sizze_30171 * groups_per_segment_38864))
          virt_num_groups_38866 = (groups_per_segment_38864 * m_24055)
          num_threads_38867 = (num_groups_30172 * segred_group_sizze_30171)
          threads_per_segment_38868 = (groups_per_segment_38864 * segred_group_sizze_30171)
          group_res_arr_mem_38869 = opencl_alloc(self,
                                                 (np.int32(1) * (segred_group_sizze_30171 * virt_num_groups_38866)),
                                                 "group_res_arr_mem_38869")
          group_res_arr_mem_38871 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_30171 * virt_num_groups_38866)),
                                                 "group_res_arr_mem_38871")
          group_res_arr_mem_38873 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_30171 * virt_num_groups_38866)),
                                                 "group_res_arr_mem_38873")
          mainDetailedzicounter_mem_38875 = self.mainDetailedzicounter_mem_38875
          if ((1 * (np.long(num_groups_30172) * np.long(segred_group_sizze_30171))) != 0):
            self.mainDetailedzisegred_large_30001_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30171))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30171))),
                                                               cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_30171))),
                                                               np.int64(iota32_arg_24441),
                                                               np.int64(num_groups_30172),
                                                               mem_37332,
                                                               mem_37540,
                                                               mem_37542,
                                                               mem_37546,
                                                               mem_37549,
                                                               mem_37551,
                                                               mem_37553,
                                                               mem_37556,
                                                               np.int64(groups_per_segment_38864),
                                                               np.int64(elements_per_thread_38865),
                                                               np.int64(virt_num_groups_38866),
                                                               group_res_arr_mem_38869,
                                                               group_res_arr_mem_38871,
                                                               group_res_arr_mem_38873,
                                                               mainDetailedzicounter_mem_38875)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_30001_var,
                                       ((np.long(num_groups_30172) * np.long(segred_group_sizze_30171)),),
                                       (np.long(segred_group_sizze_30171),))
            if synchronous:
              sync(self)
        mem_37540 = None
        mem_37546 = None
        segmap_usable_groups_30212 = sdiv_up64(m_24055,
                                               segmap_group_sizze_30211)
        mem_37559 = opencl_alloc(self, m_24055, "mem_37559")
        mem_37561 = opencl_alloc(self, bytes_37177, "mem_37561")
        if ((1 * (np.long(segmap_usable_groups_30212) * np.long(segmap_group_sizze_30211))) != 0):
          self.mainDetailedzisegmap_29967_var.set_args(self.global_failure,
                                                       np.int64(m_24055),
                                                       mem_37549, mem_37551,
                                                       mem_37559, mem_37561)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29967_var,
                                     ((np.long(segmap_usable_groups_30212) * np.long(segmap_group_sizze_30211)),),
                                     (np.long(segmap_group_sizze_30211),))
          if synchronous:
            sync(self)
        mem_37549 = None
        mem_37551 = None
        segmap_usable_groups_30235 = sdiv_up64(m_24055,
                                               segmap_group_sizze_30234)
        mem_37564 = opencl_alloc(self, bytes_37177, "mem_37564")
        if ((1 * (np.long(segmap_usable_groups_30235) * np.long(segmap_group_sizze_30234))) != 0):
          self.mainDetailedzisegmap_29950_var.set_args(self.global_failure,
                                                       np.int64(m_24055),
                                                       mem_37542, mem_37553,
                                                       mem_37564)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29950_var,
                                     ((np.long(segmap_usable_groups_30235) * np.long(segmap_group_sizze_30234)),),
                                     (np.long(segmap_group_sizze_30234),))
          if synchronous:
            sync(self)
        mem_37553 = None
        segmap_usable_groups_30253 = sdiv_up64(nest_sizze_30132,
                                               segmap_group_sizze_30252)
        mem_37568 = opencl_alloc(self, bytes_37333, "mem_37568")
        if ((1 * (np.long(segmap_usable_groups_30253) * np.long(segmap_group_sizze_30252))) != 0):
          self.mainDetailedzisegmap_29891_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       np.int64(N_24054),
                                                       np.int64(m_24055),
                                                       np.int64(iota32_arg_24441),
                                                       res_mem_37197,
                                                       res_mem_37277, mem_37542,
                                                       mem_37568)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29891_var,
                                     ((np.long(segmap_usable_groups_30253) * np.long(segmap_group_sizze_30252)),),
                                     (np.long(segmap_group_sizze_30252),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_param_37576 = mem_37568
        i_30280 = np.int32(0)
        one_39114 = np.int32(1)
        for counter_39113 in range(iters_24467):
          lifted_2_radix_sort_step_arg_30282 = (np.int32(2) * i_30280)
          lifted_0_get_bit_arg_30283 = (np.int32(1) + lifted_2_radix_sort_step_arg_30282)
          res_30284 = (lifted_0_get_bit_arg_30283 == np.int32(31))
          res_30285 = (lifted_2_radix_sort_step_arg_30282 == np.int32(31))
          local_memory_capacity_39072 = self.max_local_memory
          if (sle64((((((bytes_37370 + bytes_37370) + bytes_37370) + bytes_37370) + bytes_37329) + bytes_37329),
                    sext_i32_i64(local_memory_capacity_39072)) and intra_suff_and_fits_30294):
            mem_37581 = opencl_alloc(self, bytes_37333, "mem_37581")
            self.futhark_builtinzhgpu_map_transpose_f32(mem_37581, np.int64(0),
                                                        mem_param_37576,
                                                        np.int64(0),
                                                        np.int64(1),
                                                        iota32_arg_24441,
                                                        m_24055)
            mem_37599 = opencl_alloc(self, bytes_37333, "mem_37599")
            if ((1 * (np.long(m_24055) * np.long(iota32_arg_24441))) != 0):
              self.mainDetailedzisegmap_intragroup_29376_var.set_args(self.global_failure,
                                                                      cl.LocalMemory(np.long(bytes_37329)),
                                                                      cl.LocalMemory(np.long(bytes_37329)),
                                                                      cl.LocalMemory(np.long(bytes_37370)),
                                                                      cl.LocalMemory(np.long(bytes_37370)),
                                                                      cl.LocalMemory(np.long(bytes_37370)),
                                                                      cl.LocalMemory(np.long(bytes_37370)),
                                                                      np.int64(m_24055),
                                                                      np.int64(iota32_arg_24441),
                                                                      np.int64(i_24469),
                                                                      np.int32(lifted_2_radix_sort_step_arg_30282),
                                                                      np.int32(lifted_0_get_bit_arg_30283),
                                                                      np.byte(res_30284),
                                                                      np.byte(res_30285),
                                                                      mem_param_37576,
                                                                      mem_37581,
                                                                      mem_37599)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegmap_intragroup_29376_var,
                                         ((np.long(m_24055) * np.long(iota32_arg_24441)),),
                                         (np.long(iota32_arg_24441),))
              if synchronous:
                sync(self)
            mem_37581 = None
            res_mem_37620 = mem_37599
          else:
            mem_37603 = opencl_alloc(self, bytes_37601, "mem_37603")
            mem_37606 = opencl_alloc(self, bytes_37601, "mem_37606")
            mem_37609 = opencl_alloc(self, bytes_37601, "mem_37609")
            mem_37612 = opencl_alloc(self, bytes_37601, "mem_37612")
            mem_37615 = opencl_alloc(self, bytes_37333, "mem_37615")
            if slt64(np.int64(0), (m_24055 * iota32_arg_24441)):
              stage1_max_num_groups_38972 = self.max_group_size
              stage1_num_groups_38973 = smin64(stage1_max_num_groups_38972,
                                               num_groups_30378)
              num_threads_38974 = sext_i64_i32((stage1_num_groups_38973 * segscan_group_sizze_30377))
              if ((1 * (np.long(stage1_num_groups_38973) * np.long(segscan_group_sizze_30377))) != 0):
                self.mainDetailedziscan_stage1_29700_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30377)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30377)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30377)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30377)))),
                                                                  np.int64(m_24055),
                                                                  np.int64(iota32_arg_24441),
                                                                  np.int32(lifted_2_radix_sort_step_arg_30282),
                                                                  np.int32(lifted_0_get_bit_arg_30283),
                                                                  np.byte(res_30284),
                                                                  np.byte(res_30285),
                                                                  mem_param_37576,
                                                                  mem_37603,
                                                                  mem_37606,
                                                                  mem_37609,
                                                                  mem_37612,
                                                                  mem_37615,
                                                                  np.int32(num_threads_38974))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainDetailedziscan_stage1_29700_var,
                                           ((np.long(stage1_num_groups_38973) * np.long(segscan_group_sizze_30377)),),
                                           (np.long(segscan_group_sizze_30377),))
                if synchronous:
                  sync(self)
              if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38973))) != 0):
                self.mainDetailedziscan_stage2_29700_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38973)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38973)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38973)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38973)))),
                                                                  np.int64(m_24055),
                                                                  np.int64(iota32_arg_24441),
                                                                  mem_37603,
                                                                  mem_37606,
                                                                  mem_37609,
                                                                  mem_37612,
                                                                  np.int64(stage1_num_groups_38973),
                                                                  np.int32(num_threads_38974))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainDetailedziscan_stage2_29700_var,
                                           ((np.long(np.int64(1)) * np.long(stage1_num_groups_38973)),),
                                           (np.long(stage1_num_groups_38973),))
                if synchronous:
                  sync(self)
              required_groups_39055 = sext_i64_i32(sdiv_up64((m_24055 * iota32_arg_24441),
                                                             segscan_group_sizze_30377))
              if ((1 * (np.long(num_groups_30378) * np.long(segscan_group_sizze_30377))) != 0):
                self.mainDetailedziscan_stage3_29700_var.set_args(self.global_failure,
                                                                  np.int64(m_24055),
                                                                  np.int64(iota32_arg_24441),
                                                                  np.int64(num_groups_30378),
                                                                  mem_37603,
                                                                  mem_37606,
                                                                  mem_37609,
                                                                  mem_37612,
                                                                  np.int32(num_threads_38974),
                                                                  np.int32(required_groups_39055))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainDetailedziscan_stage3_29700_var,
                                           ((np.long(num_groups_30378) * np.long(segscan_group_sizze_30377)),),
                                           (np.long(segscan_group_sizze_30377),))
                if synchronous:
                  sync(self)
            mem_37618 = opencl_alloc(self, bytes_37333, "mem_37618")
            if (((m_24055 * iota32_arg_24441) * np.int32(4)) != 0):
              cl.enqueue_copy(self.queue, mem_37618, mem_param_37576,
                              dest_offset=np.long(np.int64(0)),
                              src_offset=np.long(np.int64(0)),
                              byte_count=np.long(((m_24055 * iota32_arg_24441) * np.int32(4))))
            if synchronous:
              sync(self)
            if ((1 * (np.long(segmap_usable_groups_30447) * np.long(segmap_group_sizze_30446))) != 0):
              self.mainDetailedzisegmap_29641_var.set_args(self.global_failure,
                                                           np.int64(m_24055),
                                                           np.int64(iota32_arg_24441),
                                                           np.int64(i_24469),
                                                           mem_param_37576,
                                                           mem_37603, mem_37606,
                                                           mem_37609, mem_37612,
                                                           mem_37615, mem_37618)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegmap_29641_var,
                                         ((np.long(segmap_usable_groups_30447) * np.long(segmap_group_sizze_30446)),),
                                         (np.long(segmap_group_sizze_30446),))
              if synchronous:
                sync(self)
            mem_37603 = None
            mem_37606 = None
            mem_37609 = None
            mem_37612 = None
            mem_37615 = None
            res_mem_37620 = mem_37618
          mem_param_tmp_38941 = res_mem_37620
          mem_param_37576 = mem_param_tmp_38941
          i_30280 += one_39114
        res_r_mem_37630 = mem_param_37576
        mem_37568 = None
        segmap_usable_groups_30484 = sdiv_up64(m_24055,
                                               segmap_group_sizze_30483)
        mem_37633 = opencl_alloc(self, bytes_37177, "mem_37633")
        mem_37635 = opencl_alloc(self, bytes_37177, "mem_37635")
        if ((1 * (np.long(segmap_usable_groups_30484) * np.long(segmap_group_sizze_30483))) != 0):
          self.mainDetailedzisegmap_29312_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       np.int64(N_24054),
                                                       np.int64(m_24055),
                                                       np.int32(n_24059),
                                                       np.int64(iota32_arg_24441),
                                                       res_mem_37196,
                                                       res_mem_37198,
                                                       res_mem_37277, mem_37542,
                                                       mem_37559, mem_37561,
                                                       res_r_mem_37630,
                                                       mem_37633, mem_37635)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29312_var,
                                     ((np.long(segmap_usable_groups_30484) * np.long(segmap_group_sizze_30483)),),
                                     (np.long(segmap_group_sizze_30483),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_37559 = None
        mem_37561 = None
        res_r_mem_37630 = None
        segmap_usable_groups_30552 = sdiv_up64(nest_sizze_30132,
                                               segmap_group_sizze_30551)
        if ((1 * (np.long(segmap_usable_groups_30552) * np.long(segmap_group_sizze_30551))) != 0):
          self.mainDetailedzisegmap_29259_var.set_args(self.global_failure,
                                                       np.int64(N_24054),
                                                       np.int64(m_24055),
                                                       np.int32(n_24059),
                                                       np.int64(iota32_arg_24441),
                                                       res_mem_37198,
                                                       res_mem_37277, mem_37335,
                                                       mem_37542, mem_37556)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29259_var,
                                     ((np.long(segmap_usable_groups_30552) * np.long(segmap_group_sizze_30551)),),
                                     (np.long(segmap_group_sizze_30551),))
          if synchronous:
            sync(self)
        mem_37542 = None
        res_mem_37637 = mem_37335
        res_mem_37638 = mem_37556
        res_mem_37639 = mem_37633
        res_mem_37640 = mem_37564
        res_mem_37641 = mem_37635
      res_mem_37650 = res_mem_37637
      res_mem_37651 = res_mem_37638
      res_mem_37652 = res_mem_37639
      res_mem_37653 = res_mem_37640
      res_mem_37654 = res_mem_37641
    res_mem_37198 = None
    res_mem_37276 = None
    mem_37335 = None
    out_arrsizze_37849 = m_24055
    out_arrsizze_37851 = m_24055
    out_arrsizze_37853 = m_24055
    out_arrsizze_37855 = m_24055
    out_arrsizze_37857 = m_24055
    out_arrsizze_37858 = iota32_arg_24441
    out_arrsizze_37860 = m_24055
    out_arrsizze_37861 = iota32_arg_24441
    out_arrsizze_37863 = iota32_arg_24441
    out_arrsizze_37865 = m_24055
    out_arrsizze_37867 = m_24055
    out_arrsizze_37869 = m_24055
    out_arrsizze_37871 = m_24055
    out_arrsizze_37872 = N_24054
    out_arrsizze_37874 = m_24055
    out_arrsizze_37875 = N_24054
    out_mem_37848 = res_mem_37327
    out_mem_37850 = res_mem_37196
    out_mem_37852 = res_mem_37277
    out_mem_37854 = res_mem_37278
    out_mem_37856 = res_mem_37650
    out_mem_37859 = res_mem_37651
    out_mem_37862 = mem_37332
    out_mem_37864 = res_mem_37652
    out_mem_37866 = res_mem_37653
    out_mem_37868 = res_mem_37654
    out_mem_37870 = res_mem_37197
    out_mem_37873 = res_mem_37159
    return (out_mem_37848, out_arrsizze_37849, out_mem_37850,
            out_arrsizze_37851, out_mem_37852, out_arrsizze_37853,
            out_mem_37854, out_arrsizze_37855, out_mem_37856,
            out_arrsizze_37857, out_arrsizze_37858, out_mem_37859,
            out_arrsizze_37860, out_arrsizze_37861, out_mem_37862,
            out_arrsizze_37863, out_mem_37864, out_arrsizze_37865,
            out_mem_37866, out_arrsizze_37867, out_mem_37868,
            out_arrsizze_37869, out_mem_37870, out_arrsizze_37871,
            out_arrsizze_37872, out_mem_37873, out_arrsizze_37874,
            out_arrsizze_37875)
  def futhark_remove_nans(self, images_mem_36737, m_24040, n_24041, p_24042,
                          nan_value_24043):
    y_25611 = (n_24041 * p_24042)
    nest_sizze_25612 = (m_24040 * y_25611)
    segmap_group_sizze_25613 = self.sizes["remove_nans.segmap_group_size_25556"]
    segmap_usable_groups_25614 = sdiv_up64(nest_sizze_25612,
                                           segmap_group_sizze_25613)
    binop_x_36740 = (m_24040 * n_24041)
    binop_x_36741 = (p_24042 * binop_x_36740)
    bytes_36739 = (np.int64(4) * binop_x_36741)
    mem_36742 = opencl_alloc(self, bytes_36739, "mem_36742")
    if ((1 * (np.long(segmap_usable_groups_25614) * np.long(segmap_group_sizze_25613))) != 0):
      self.remove_nanszisegmap_25552_var.set_args(self.global_failure,
                                                  np.int64(m_24040),
                                                  np.int64(n_24041),
                                                  np.int64(p_24042),
                                                  np.int16(nan_value_24043),
                                                  images_mem_36737, mem_36742)
      cl.enqueue_nd_range_kernel(self.queue, self.remove_nanszisegmap_25552_var,
                                 ((np.long(segmap_usable_groups_25614) * np.long(segmap_group_sizze_25613)),),
                                 (np.long(segmap_group_sizze_25613),))
      if synchronous:
        sync(self)
    out_arrsizze_37849 = m_24040
    out_arrsizze_37850 = n_24041
    out_arrsizze_37851 = p_24042
    out_mem_37848 = mem_36742
    return (out_mem_37848, out_arrsizze_37849, out_arrsizze_37850,
            out_arrsizze_37851)
  def futhark_reshapeTransp(self, images_mem_36737, m_24033, n_24034, p_24035):
    flatten_to_arg_24037 = (n_24034 * p_24035)
    binop_x_36739 = (m_24033 * flatten_to_arg_24037)
    bytes_36738 = (np.int64(4) * binop_x_36739)
    mem_36740 = opencl_alloc(self, bytes_36738, "mem_36740")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_36740, np.int64(0),
                                                images_mem_36737, np.int64(0),
                                                np.int64(1),
                                                flatten_to_arg_24037, m_24033)
    out_arrsizze_37849 = flatten_to_arg_24037
    out_arrsizze_37850 = m_24033
    out_mem_37848 = mem_36740
    return (out_mem_37848, out_arrsizze_37849, out_arrsizze_37850)
  def main(self, trend_24799_ext, k_24800_ext, n_24801_ext, freq_24802_ext,
           hfrac_24803_ext, lam_24804_ext, mappingindices_mem_36737_ext,
           images_mem_36738_ext):
    try:
      trend_24799 = np.int32(ct.c_int32(trend_24799_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_24799_ext),
                                                                                                                            trend_24799_ext))
    try:
      k_24800 = np.int32(ct.c_int32(k_24800_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_24800_ext),
                                                                                                                            k_24800_ext))
    try:
      n_24801 = np.int32(ct.c_int32(n_24801_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_24801_ext),
                                                                                                                            n_24801_ext))
    try:
      freq_24802 = np.float32(ct.c_float(freq_24802_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_24802_ext),
                                                                                                                            freq_24802_ext))
    try:
      hfrac_24803 = np.float32(ct.c_float(hfrac_24803_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_24803_ext),
                                                                                                                            hfrac_24803_ext))
    try:
      lam_24804 = np.float32(ct.c_float(lam_24804_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_24804_ext),
                                                                                                                            lam_24804_ext))
    try:
      assert ((type(mappingindices_mem_36737_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_36737_ext.dtype == np.int32)), "Parameter has unexpected type"
      N_24796 = np.int64(mappingindices_mem_36737_ext.shape[0])
      if (type(mappingindices_mem_36737_ext) == cl.array.Array):
        mappingindices_mem_36737 = mappingindices_mem_36737_ext.data
      else:
        mappingindices_mem_36737 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_36737_ext.nbytes),
                                                "mappingindices_mem_36737")
        if (np.int64(mappingindices_mem_36737_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_36737,
                          normaliseArray(mappingindices_mem_36737_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_36737_ext),
                                                                                                                            mappingindices_mem_36737_ext))
    try:
      assert ((type(images_mem_36738_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36738_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_24797 = np.int64(images_mem_36738_ext.shape[0])
      N_24798 = np.int64(images_mem_36738_ext.shape[1])
      if (type(images_mem_36738_ext) == cl.array.Array):
        images_mem_36738 = images_mem_36738_ext.data
      else:
        images_mem_36738 = opencl_alloc(self,
                                        np.int64(images_mem_36738_ext.nbytes),
                                        "images_mem_36738")
        if (np.int64(images_mem_36738_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36738,
                          normaliseArray(images_mem_36738_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_36738_ext),
                                                                                                                            images_mem_36738_ext))
    (out_mem_37848, out_arrsizze_37849, out_mem_37850, out_arrsizze_37851,
     out_mem_37852,
     out_arrsizze_37853) = self.futhark_main(mappingindices_mem_36737,
                                             images_mem_36738, N_24796, m_24797,
                                             N_24798, trend_24799, k_24800,
                                             n_24801, freq_24802, hfrac_24803,
                                             lam_24804)
    sync(self)
    return (cl.array.Array(self.queue, (out_arrsizze_37849,), ct.c_int32,
                           data=out_mem_37848), cl.array.Array(self.queue,
                                                               (out_arrsizze_37851,),
                                                               ct.c_float,
                                                               data=out_mem_37850),
            cl.array.Array(self.queue, (out_arrsizze_37853,), ct.c_float,
                           data=out_mem_37852))
  def mainDetailed(self, trend_24057_ext, k_24058_ext, n_24059_ext,
                   freq_24060_ext, hfrac_24061_ext, lam_24062_ext,
                   mappingindices_mem_36737_ext, images_mem_36738_ext):
    try:
      trend_24057 = np.int32(ct.c_int32(trend_24057_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_24057_ext),
                                                                                                                            trend_24057_ext))
    try:
      k_24058 = np.int32(ct.c_int32(k_24058_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_24058_ext),
                                                                                                                            k_24058_ext))
    try:
      n_24059 = np.int32(ct.c_int32(n_24059_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_24059_ext),
                                                                                                                            n_24059_ext))
    try:
      freq_24060 = np.float32(ct.c_float(freq_24060_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_24060_ext),
                                                                                                                            freq_24060_ext))
    try:
      hfrac_24061 = np.float32(ct.c_float(hfrac_24061_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_24061_ext),
                                                                                                                            hfrac_24061_ext))
    try:
      lam_24062 = np.float32(ct.c_float(lam_24062_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_24062_ext),
                                                                                                                            lam_24062_ext))
    try:
      assert ((type(mappingindices_mem_36737_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_36737_ext.dtype == np.int32)), "Parameter has unexpected type"
      N_24054 = np.int64(mappingindices_mem_36737_ext.shape[0])
      if (type(mappingindices_mem_36737_ext) == cl.array.Array):
        mappingindices_mem_36737 = mappingindices_mem_36737_ext.data
      else:
        mappingindices_mem_36737 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_36737_ext.nbytes),
                                                "mappingindices_mem_36737")
        if (np.int64(mappingindices_mem_36737_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_36737,
                          normaliseArray(mappingindices_mem_36737_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_36737_ext),
                                                                                                                            mappingindices_mem_36737_ext))
    try:
      assert ((type(images_mem_36738_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36738_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_24055 = np.int64(images_mem_36738_ext.shape[0])
      N_24056 = np.int64(images_mem_36738_ext.shape[1])
      if (type(images_mem_36738_ext) == cl.array.Array):
        images_mem_36738 = images_mem_36738_ext.data
      else:
        images_mem_36738 = opencl_alloc(self,
                                        np.int64(images_mem_36738_ext.nbytes),
                                        "images_mem_36738")
        if (np.int64(images_mem_36738_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36738,
                          normaliseArray(images_mem_36738_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_36738_ext),
                                                                                                                            images_mem_36738_ext))
    (out_mem_37848, out_arrsizze_37849, out_mem_37850, out_arrsizze_37851,
     out_mem_37852, out_arrsizze_37853, out_mem_37854, out_arrsizze_37855,
     out_mem_37856, out_arrsizze_37857, out_arrsizze_37858, out_mem_37859,
     out_arrsizze_37860, out_arrsizze_37861, out_mem_37862, out_arrsizze_37863,
     out_mem_37864, out_arrsizze_37865, out_mem_37866, out_arrsizze_37867,
     out_mem_37868, out_arrsizze_37869, out_mem_37870, out_arrsizze_37871,
     out_arrsizze_37872, out_mem_37873, out_arrsizze_37874,
     out_arrsizze_37875) = self.futhark_mainDetailed(mappingindices_mem_36737,
                                                     images_mem_36738, N_24054,
                                                     m_24055, N_24056,
                                                     trend_24057, k_24058,
                                                     n_24059, freq_24060,
                                                     hfrac_24061, lam_24062)
    sync(self)
    return (cl.array.Array(self.queue, (out_arrsizze_37849,), ct.c_float,
                           data=out_mem_37848), cl.array.Array(self.queue,
                                                               (out_arrsizze_37851,),
                                                               ct.c_int32,
                                                               data=out_mem_37850),
            cl.array.Array(self.queue, (out_arrsizze_37853,), ct.c_int32,
                           data=out_mem_37852), cl.array.Array(self.queue,
                                                               (out_arrsizze_37855,),
                                                               ct.c_float,
                                                               data=out_mem_37854),
            cl.array.Array(self.queue, (out_arrsizze_37857, out_arrsizze_37858),
                           ct.c_float, data=out_mem_37856),
            cl.array.Array(self.queue, (out_arrsizze_37860, out_arrsizze_37861),
                           ct.c_float, data=out_mem_37859),
            cl.array.Array(self.queue, (out_arrsizze_37863,), ct.c_float,
                           data=out_mem_37862), cl.array.Array(self.queue,
                                                               (out_arrsizze_37865,),
                                                               ct.c_int32,
                                                               data=out_mem_37864),
            cl.array.Array(self.queue, (out_arrsizze_37867,), ct.c_float,
                           data=out_mem_37866), cl.array.Array(self.queue,
                                                               (out_arrsizze_37869,),
                                                               ct.c_float,
                                                               data=out_mem_37868),
            cl.array.Array(self.queue, (out_arrsizze_37871, out_arrsizze_37872),
                           ct.c_float, data=out_mem_37870),
            cl.array.Array(self.queue, (out_arrsizze_37874, out_arrsizze_37875),
                           ct.c_float, data=out_mem_37873))
  def remove_nans(self, nan_value_24043_ext, images_mem_36737_ext):
    try:
      nan_value_24043 = np.int16(ct.c_int16(nan_value_24043_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i16",
                                                                                                                            type(nan_value_24043_ext),
                                                                                                                            nan_value_24043_ext))
    try:
      assert ((type(images_mem_36737_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36737_ext.dtype == np.int16)), "Parameter has unexpected type"
      m_24040 = np.int64(images_mem_36737_ext.shape[0])
      n_24041 = np.int64(images_mem_36737_ext.shape[1])
      p_24042 = np.int64(images_mem_36737_ext.shape[2])
      if (type(images_mem_36737_ext) == cl.array.Array):
        images_mem_36737 = images_mem_36737_ext.data
      else:
        images_mem_36737 = opencl_alloc(self,
                                        np.int64(images_mem_36737_ext.nbytes),
                                        "images_mem_36737")
        if (np.int64(images_mem_36737_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36737,
                          normaliseArray(images_mem_36737_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]i16",
                                                                                                                            type(images_mem_36737_ext),
                                                                                                                            images_mem_36737_ext))
    (out_mem_37848, out_arrsizze_37849, out_arrsizze_37850,
     out_arrsizze_37851) = self.futhark_remove_nans(images_mem_36737, m_24040,
                                                    n_24041, p_24042,
                                                    nan_value_24043)
    sync(self)
    return cl.array.Array(self.queue, (out_arrsizze_37849, out_arrsizze_37850,
                                       out_arrsizze_37851), ct.c_float,
                          data=out_mem_37848)
  def reshapeTransp(self, images_mem_36737_ext):
    try:
      assert ((type(images_mem_36737_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36737_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_24033 = np.int64(images_mem_36737_ext.shape[0])
      n_24034 = np.int64(images_mem_36737_ext.shape[1])
      p_24035 = np.int64(images_mem_36737_ext.shape[2])
      if (type(images_mem_36737_ext) == cl.array.Array):
        images_mem_36737 = images_mem_36737_ext.data
      else:
        images_mem_36737 = opencl_alloc(self,
                                        np.int64(images_mem_36737_ext.nbytes),
                                        "images_mem_36737")
        if (np.int64(images_mem_36737_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36737,
                          normaliseArray(images_mem_36737_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]f32",
                                                                                                                            type(images_mem_36737_ext),
                                                                                                                            images_mem_36737_ext))
    (out_mem_37848, out_arrsizze_37849,
     out_arrsizze_37850) = self.futhark_reshapeTransp(images_mem_36737, m_24033,
                                                      n_24034, p_24035)
    sync(self)
    return cl.array.Array(self.queue, (out_arrsizze_37849, out_arrsizze_37850),
                          ct.c_float, data=out_mem_37848)