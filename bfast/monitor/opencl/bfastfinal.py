import sys
import numpy as np
import ctypes as ct
# Stub code for OpenCL setup.

import pyopencl as cl
import numpy as np
import sys

if cl.version.VERSION < (2015,2):
    raise Exception('Futhark requires at least PyOpenCL version 2015.2.  Installed version is %s.' %
                    cl.version.VERSION_TEXT)

def parse_preferred_device(s):
    pref_num = 0
    if len(s) > 1 and s[0] == '#':
        i = 1
        while i < len(s):
            if not s[i].isdigit():
                break
            else:
                pref_num = pref_num * 10 + int(s[i])
            i += 1
        while i < len(s) and s[i].isspace():
            i += 1
        return (s[i:], pref_num)
    else:
        return (s, 0)

def get_prefered_context(interactive=False, platform_pref=None, device_pref=None):
    if device_pref != None:
        (device_pref, device_num) = parse_preferred_device(device_pref)
    else:
        device_num = 0

    if interactive:
        return cl.create_some_context(interactive=True)

    def blacklisted(p, d):
        return platform_pref == None and device_pref == None and \
            p.name == "Apple" and d.name.find("Intel(R) Core(TM)") >= 0
    def platform_ok(p):
        return not platform_pref or p.name.find(platform_pref) >= 0
    def device_ok(d):
        return not device_pref or d.name.find(device_pref) >= 0

    device_matches = 0

    for p in cl.get_platforms():
        if not platform_ok(p):
            continue
        for d in p.get_devices():
            if blacklisted(p,d) or not device_ok(d):
                continue
            if device_matches == device_num:
                return cl.Context(devices=[d])
            else:
                device_matches += 1
    raise Exception('No OpenCL platform and device matching constraints found.')

def size_assignment(s):
    name, value = s.split('=')
    return (name, int(value))

def check_types(self, required_types):
    if 'f64' in required_types:
        if self.device.get_info(cl.device_info.PREFERRED_VECTOR_WIDTH_DOUBLE) == 0:
            raise Exception('Program uses double-precision floats, but this is not supported on chosen device: %s' % self.device.name)

def apply_size_heuristics(self, size_heuristics, sizes):
    for (platform_name, device_type, size, valuef) in size_heuristics:
        if sizes[size] == None \
           and self.platform.name.find(platform_name) >= 0 \
           and (self.device.type & device_type) == device_type:
               sizes[size] = valuef(self.device)
    return sizes

def initialise_opencl_object(self,
                             program_src='',
                             command_queue=None,
                             interactive=False,
                             platform_pref=None,
                             device_pref=None,
                             default_group_size=None,
                             default_num_groups=None,
                             default_tile_size=None,
                             default_threshold=None,
                             size_heuristics=[],
                             required_types=[],
                             all_sizes={},
                             user_sizes={}):
    if command_queue is None:
        self.ctx = get_prefered_context(interactive, platform_pref, device_pref)
        self.queue = cl.CommandQueue(self.ctx)
    else:
        self.ctx = command_queue.context
        self.queue = command_queue
    self.device = self.queue.device
    self.platform = self.device.platform
    self.pool = cl.tools.MemoryPool(cl.tools.ImmediateAllocator(self.queue))
    device_type = self.device.type

    check_types(self, required_types)

    max_group_size = int(self.device.max_work_group_size)
    max_tile_size = int(np.sqrt(self.device.max_work_group_size))

    self.max_group_size = max_group_size
    self.max_tile_size = max_tile_size
    self.max_threshold = 0
    self.max_num_groups = 0

    self.max_local_memory = int(self.device.local_mem_size)

    # Futhark reserves 4 bytes of local memory for its own purposes.
    self.max_local_memory -= 4

    # See comment in rts/c/opencl.h.
    if self.platform.name.find('NVIDIA CUDA') >= 0:
        self.max_local_memory -= 12
    elif self.platform.name.find('AMD') >= 0:
        self.max_local_memory -= 16

    self.free_list = {}

    self.global_failure = self.pool.allocate(np.int32().itemsize)
    cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)
    self.global_failure_args = self.pool.allocate(np.int64().itemsize *
                                                  (self.global_failure_args_max+1))
    self.failure_is_an_option = np.int32(0)

    if 'default_group_size' in sizes:
        default_group_size = sizes['default_group_size']
        del sizes['default_group_size']

    if 'default_num_groups' in sizes:
        default_num_groups = sizes['default_num_groups']
        del sizes['default_num_groups']

    if 'default_tile_size' in sizes:
        default_tile_size = sizes['default_tile_size']
        del sizes['default_tile_size']

    if 'default_threshold' in sizes:
        default_threshold = sizes['default_threshold']
        del sizes['default_threshold']

    default_group_size_set = default_group_size != None
    default_tile_size_set = default_tile_size != None
    default_sizes = apply_size_heuristics(self, size_heuristics,
                                          {'group_size': default_group_size,
                                           'tile_size': default_tile_size,
                                           'num_groups': default_num_groups,
                                           'lockstep_width': None,
                                           'threshold': default_threshold})
    default_group_size = default_sizes['group_size']
    default_num_groups = default_sizes['num_groups']
    default_threshold = default_sizes['threshold']
    default_tile_size = default_sizes['tile_size']
    lockstep_width = default_sizes['lockstep_width']

    if default_group_size > max_group_size:
        if default_group_size_set:
            sys.stderr.write('Note: Device limits group size to {} (down from {})\n'.
                             format(max_tile_size, default_group_size))
        default_group_size = max_group_size

    if default_tile_size > max_tile_size:
        if default_tile_size_set:
            sys.stderr.write('Note: Device limits tile size to {} (down from {})\n'.
                             format(max_tile_size, default_tile_size))
        default_tile_size = max_tile_size

    for (k,v) in user_sizes.items():
        if k in all_sizes:
            all_sizes[k]['value'] = v
        else:
            raise Exception('Unknown size: {}\nKnown sizes: {}'.format(k, ' '.join(all_sizes.keys())))

    self.sizes = {}
    for (k,v) in all_sizes.items():
        if v['class'] == 'group_size':
            max_value = max_group_size
            default_value = default_group_size
        elif v['class'] == 'num_groups':
            max_value = max_group_size # Intentional!
            default_value = default_num_groups
        elif v['class'] == 'tile_size':
            max_value = max_tile_size
            default_value = default_tile_size
        elif v['class'].startswith('threshold'):
            max_value = None
            default_value = default_threshold
        else:
            # Bespoke sizes have no limit or default.
            max_value = None
        if v['value'] == None:
            self.sizes[k] = default_value
        elif max_value != None and v['value'] > max_value:
            sys.stderr.write('Note: Device limits {} to {} (down from {}\n'.
                             format(k, max_value, v['value']))
            self.sizes[k] = max_value
        else:
            self.sizes[k] = v['value']

    # XXX: we perform only a subset of z-encoding here.  Really, the
    # compiler should provide us with the variables to which
    # parameters are mapped.
    if (len(program_src) >= 0):
        return cl.Program(self.ctx, program_src).build(
            ["-DLOCKSTEP_WIDTH={}".format(lockstep_width)]
            + ["-D{}={}".format(s.replace('z', 'zz').replace('.', 'zi').replace('#', 'zh'),v) for (s,v) in self.sizes.items()])

def opencl_alloc(self, min_size, tag):
    min_size = 1 if min_size == 0 else min_size
    assert min_size > 0
    return self.pool.allocate(min_size)

def opencl_free_all(self):
    self.pool.free_held()

def sync(self):
    failure = np.empty(1, dtype=np.int32)
    cl.enqueue_copy(self.queue, failure, self.global_failure, is_blocking=True)
    self.failure_is_an_option = np.int32(0)
    if failure[0] >= 0:
        # Reset failure information.
        cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)

        # Read failure args.
        failure_args = np.empty(self.global_failure_args_max+1, dtype=np.int64)
        cl.enqueue_copy(self.queue, failure_args, self.global_failure_args, is_blocking=True)

        raise Exception(self.failure_msgs[failure[0]].format(*failure_args))
import pyopencl.array
import time
import argparse
sizes = {}
synchronous = False
preferred_platform = None
preferred_device = None
default_threshold = None
default_group_size = None
default_num_groups = None
default_tile_size = None
fut_opencl_src = """#ifdef cl_clang_storage_class_specifiers
#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
#endif
#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#ifdef cl_nv_pragma_unroll
static inline void mem_fence_global()
{
    asm("membar.gl;");
}
#else
static inline void mem_fence_global()
{
    mem_fence(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
}
#endif
static inline void mem_fence_local()
{
    mem_fence(CLK_LOCAL_MEM_FENCE);
}
static inline uint8_t add8(uint8_t x, uint8_t y)
{
    return x + y;
}
static inline uint16_t add16(uint16_t x, uint16_t y)
{
    return x + y;
}
static inline uint32_t add32(uint32_t x, uint32_t y)
{
    return x + y;
}
static inline uint64_t add64(uint64_t x, uint64_t y)
{
    return x + y;
}
static inline uint8_t sub8(uint8_t x, uint8_t y)
{
    return x - y;
}
static inline uint16_t sub16(uint16_t x, uint16_t y)
{
    return x - y;
}
static inline uint32_t sub32(uint32_t x, uint32_t y)
{
    return x - y;
}
static inline uint64_t sub64(uint64_t x, uint64_t y)
{
    return x - y;
}
static inline uint8_t mul8(uint8_t x, uint8_t y)
{
    return x * y;
}
static inline uint16_t mul16(uint16_t x, uint16_t y)
{
    return x * y;
}
static inline uint32_t mul32(uint32_t x, uint32_t y)
{
    return x * y;
}
static inline uint64_t mul64(uint64_t x, uint64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t udiv_up8(uint8_t x, uint8_t y)
{
    return (x + y - 1) / y;
}
static inline uint16_t udiv_up16(uint16_t x, uint16_t y)
{
    return (x + y - 1) / y;
}
static inline uint32_t udiv_up32(uint32_t x, uint32_t y)
{
    return (x + y - 1) / y;
}
static inline uint64_t udiv_up64(uint64_t x, uint64_t y)
{
    return (x + y - 1) / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline uint8_t udiv_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint16_t udiv_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint32_t udiv_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint64_t udiv_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint8_t umod_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint16_t umod_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint32_t umod_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint64_t umod_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t sdiv_up8(int8_t x, int8_t y)
{
    return sdiv8(x + y - 1, y);
}
static inline int16_t sdiv_up16(int16_t x, int16_t y)
{
    return sdiv16(x + y - 1, y);
}
static inline int32_t sdiv_up32(int32_t x, int32_t y)
{
    return sdiv32(x + y - 1, y);
}
static inline int64_t sdiv_up64(int64_t x, int64_t y)
{
    return sdiv64(x + y - 1, y);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t sdiv_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : sdiv8(x, y);
}
static inline int16_t sdiv_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : sdiv16(x, y);
}
static inline int32_t sdiv_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : sdiv32(x, y);
}
static inline int64_t sdiv_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : sdiv64(x, y);
}
static inline int8_t sdiv_up_safe8(int8_t x, int8_t y)
{
    return sdiv_safe8(x + y - 1, y);
}
static inline int16_t sdiv_up_safe16(int16_t x, int16_t y)
{
    return sdiv_safe16(x + y - 1, y);
}
static inline int32_t sdiv_up_safe32(int32_t x, int32_t y)
{
    return sdiv_safe32(x + y - 1, y);
}
static inline int64_t sdiv_up_safe64(int64_t x, int64_t y)
{
    return sdiv_safe64(x + y - 1, y);
}
static inline int8_t smod_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : smod8(x, y);
}
static inline int16_t smod_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : smod16(x, y);
}
static inline int32_t smod_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : smod32(x, y);
}
static inline int64_t smod_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : smod64(x, y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t squot_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int16_t squot_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int32_t squot_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int64_t squot_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int8_t srem_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int16_t srem_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int32_t srem_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int64_t srem_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline bool ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline bool ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline bool ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline bool ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline bool ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline bool ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline bool ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline bool ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline bool slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline bool slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline bool slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline bool slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline bool sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline bool sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline bool sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline bool sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
#define sext_i8_i8(x) ((int8_t) (int8_t) x)
#define sext_i8_i16(x) ((int16_t) (int8_t) x)
#define sext_i8_i32(x) ((int32_t) (int8_t) x)
#define sext_i8_i64(x) ((int64_t) (int8_t) x)
#define sext_i16_i8(x) ((int8_t) (int16_t) x)
#define sext_i16_i16(x) ((int16_t) (int16_t) x)
#define sext_i16_i32(x) ((int32_t) (int16_t) x)
#define sext_i16_i64(x) ((int64_t) (int16_t) x)
#define sext_i32_i8(x) ((int8_t) (int32_t) x)
#define sext_i32_i16(x) ((int16_t) (int32_t) x)
#define sext_i32_i32(x) ((int32_t) (int32_t) x)
#define sext_i32_i64(x) ((int64_t) (int32_t) x)
#define sext_i64_i8(x) ((int8_t) (int64_t) x)
#define sext_i64_i16(x) ((int16_t) (int64_t) x)
#define sext_i64_i32(x) ((int32_t) (int64_t) x)
#define sext_i64_i64(x) ((int64_t) (int64_t) x)
#define zext_i8_i8(x) ((int8_t) (uint8_t) x)
#define zext_i8_i16(x) ((int16_t) (uint8_t) x)
#define zext_i8_i32(x) ((int32_t) (uint8_t) x)
#define zext_i8_i64(x) ((int64_t) (uint8_t) x)
#define zext_i16_i8(x) ((int8_t) (uint16_t) x)
#define zext_i16_i16(x) ((int16_t) (uint16_t) x)
#define zext_i16_i32(x) ((int32_t) (uint16_t) x)
#define zext_i16_i64(x) ((int64_t) (uint16_t) x)
#define zext_i32_i8(x) ((int8_t) (uint32_t) x)
#define zext_i32_i16(x) ((int16_t) (uint32_t) x)
#define zext_i32_i32(x) ((int32_t) (uint32_t) x)
#define zext_i32_i64(x) ((int64_t) (uint32_t) x)
#define zext_i64_i8(x) ((int8_t) (uint64_t) x)
#define zext_i64_i16(x) ((int16_t) (uint64_t) x)
#define zext_i64_i32(x) ((int32_t) (uint64_t) x)
#define zext_i64_i64(x) ((int64_t) (uint64_t) x)
#if defined(__OPENCL_VERSION__)
static int32_t futrts_popc8(int8_t x)
{
    return popcount(x);
}
static int32_t futrts_popc16(int16_t x)
{
    return popcount(x);
}
static int32_t futrts_popc32(int32_t x)
{
    return popcount(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return popcount(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_popc8(int8_t x)
{
    return __popc(zext_i8_i32(x));
}
static int32_t futrts_popc16(int16_t x)
{
    return __popc(zext_i16_i32(x));
}
static int32_t futrts_popc32(int32_t x)
{
    return __popc(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return __popcll(x);
}
#else
static int32_t futrts_popc8(int8_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc16(int16_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc32(int32_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc64(int64_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    return mul_hi(a, b);
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    return mul_hi(a, b);
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mul_hi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul_hi(a, b);
}
#elif defined(__CUDA_ARCH__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mulhi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul64hi(a, b);
}
#else
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    uint64_t aa = a;
    uint64_t bb = b;
    
    return aa * bb >> 32;
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    __uint128_t aa = a;
    __uint128_t bb = b;
    
    return aa * bb >> 64;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return mad_hi(a, b, c);
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return mad_hi(a, b, c);
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return mad_hi(a, b, c);
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return mad_hi(a, b, c);
}
#else
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return futrts_mul_hi8(a, b) + c;
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return futrts_mul_hi16(a, b) + c;
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return futrts_mul_hi32(a, b) + c;
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return futrts_mul_hi64(a, b) + c;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_clzz8(int8_t x)
{
    return clz(x);
}
static int32_t futrts_clzz16(int16_t x)
{
    return clz(x);
}
static int32_t futrts_clzz32(int32_t x)
{
    return clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return clz(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_clzz8(int8_t x)
{
    return __clz(zext_i8_i32(x)) - 24;
}
static int32_t futrts_clzz16(int16_t x)
{
    return __clz(zext_i16_i32(x)) - 16;
}
static int32_t futrts_clzz32(int32_t x)
{
    return __clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return __clzll(x);
}
#else
static int32_t futrts_clzz8(int8_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz16(int16_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz32(int32_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz64(int64_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_ctzz8(int8_t x)
{
    int i = 0;
    
    for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int i = 0;
    
    for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int i = 0;
    
    for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int i = 0;
    
    for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_ctzz8(int8_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 8 : y - 1;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 16 : y - 1;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 32 : y - 1;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int y = __ffsll(x);
    
    return y == 0 ? 64 : y - 1;
}
#else
static int32_t futrts_ctzz8(int8_t x)
{
    return x == 0 ? 8 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz16(int16_t x)
{
    return x == 0 ? 16 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz32(int32_t x)
{
    return x == 0 ? 32 : __builtin_ctz(x);
}
static int32_t futrts_ctzz64(int64_t x)
{
    return x == 0 ? 64 : __builtin_ctzl(x);
}
#endif
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return fmin(x, y);
}
static inline float fmax32(float x, float y)
{
    return fmax(x, y);
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline bool cmplt32(float x, float y)
{
    return x < y;
}
static inline bool cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return (float) x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return (float) x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return (float) x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return (float) x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return (float) x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return (float) x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return (float) x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return (float) x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return (int8_t) x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return (int16_t) x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return (int32_t) x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return (int64_t) x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return (uint8_t) x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return (uint16_t) x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return (uint32_t) x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return (uint64_t) x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_cosh32(float x)
{
    return cosh(x);
}
static inline float futrts_sinh32(float x)
{
    return sinh(x);
}
static inline float futrts_tanh32(float x)
{
    return tanh(x);
}
static inline float futrts_acosh32(float x)
{
    return acosh(x);
}
static inline float futrts_asinh32(float x)
{
    return asinh(x);
}
static inline float futrts_atanh32(float x)
{
    return atanh(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_gamma32(float x)
{
    return tgamma(x);
}
static inline float futrts_lgamma32(float x)
{
    return lgamma(x);
}
static inline bool futrts_isnan32(float x)
{
    return isnan(x);
}
static inline bool futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#ifdef __OPENCL_VERSION__
static inline float fmod32(float x, float y)
{
    return fmod(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline float futrts_floor32(float x)
{
    return floor(x);
}
static inline float futrts_ceil32(float x)
{
    return ceil(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return mix(v0, v1, t);
}
static inline float futrts_mad32(float a, float b, float c)
{
    return mad(a, b, c);
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fma(a, b, c);
}
#else
static inline float fmod32(float x, float y)
{
    return fmodf(x, y);
}
static inline float futrts_round32(float x)
{
    return rintf(x);
}
static inline float futrts_floor32(float x)
{
    return floorf(x);
}
static inline float futrts_ceil32(float x)
{
    return ceilf(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return v0 + (v1 - v0) * t;
}
static inline float futrts_mad32(float a, float b, float c)
{
    return a * b + c;
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fmaf(a, b, c);
}
#endif
// Start of atomics.h

inline int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline int32_t atomic_add_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline float atomic_fadd_f32_global(volatile __global float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline float atomic_fadd_f32_local(volatile __local float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smax_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_smin_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umax_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umin_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_and_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_or_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xor_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_cmpxchg_i32_local(volatile __local int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

// End of atomics.h




__kernel void builtinzhreplicate_f32zireplicate_38206(__global
                                                      unsigned char *mem_38202,
                                                      int32_t num_elems_38203,
                                                      float val_38204)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_38206;
    int32_t replicate_ltid_38207;
    int32_t replicate_gid_38208;
    
    replicate_gtid_38206 = get_global_id(0);
    replicate_ltid_38207 = get_local_id(0);
    replicate_gid_38208 = get_group_id(0);
    if (slt64(replicate_gtid_38206, num_elems_38203)) {
        ((__global float *) mem_38202)[sext_i32_i64(replicate_gtid_38206)] =
            val_38204;
    }
    
  error_0:
    return;
}
__kernel void builtinzhreplicate_i32zireplicate_38215(__global
                                                      unsigned char *mem_38211,
                                                      int32_t num_elems_38212,
                                                      int32_t val_38213)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_38215;
    int32_t replicate_ltid_38216;
    int32_t replicate_gid_38217;
    
    replicate_gtid_38215 = get_global_id(0);
    replicate_ltid_38216 = get_local_id(0);
    replicate_gid_38217 = get_group_id(0);
    if (slt64(replicate_gtid_38215, num_elems_38212)) {
        ((__global int32_t *) mem_38211)[sext_i32_i64(replicate_gtid_38215)] =
            val_38213;
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32(__local volatile
                                    int64_t *block_9_backing_aligned_0,
                                    int32_t destoffset_1, int32_t srcoffset_3,
                                    int32_t num_arrays_4, int32_t x_elems_5,
                                    int32_t y_elems_6, int32_t mulx_7,
                                    int32_t muly_8, __global
                                    unsigned char *destmem_0, __global
                                    unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_global_id_0_37;
    int32_t y_index_32 = get_group_id_1_41 * 32 + get_local_id_1_39;
    
    if (slt32(x_index_31, x_elems_5)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_in_35 = (y_index_32 + j_43 * 8) * x_elems_5 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, y_elems_6)) {
                ((__local float *) block_9)[sext_i32_i64((get_local_id_1_39 +
                                                          j_43 * 8) * 33 +
                                            get_local_id_0_38)] = ((__global
                                                                    float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                                       index_in_35)];
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 32 + get_local_id_0_38;
    y_index_32 = get_group_id_0_40 * 32 + get_local_id_1_39;
    if (slt32(x_index_31, y_elems_6)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_out_36 = (y_index_32 + j_43 * 8) * y_elems_6 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, x_elems_5)) {
                ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                               index_out_36)] = ((__local
                                                                  float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                                    33 +
                                                                                    get_local_id_1_39 +
                                                                                    j_43 *
                                                                                    8)];
            }
        }
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_height(__local volatile
                                               int64_t *block_9_backing_aligned_0,
                                               int32_t destoffset_1,
                                               int32_t srcoffset_3,
                                               int32_t num_arrays_4,
                                               int32_t x_elems_5,
                                               int32_t y_elems_6,
                                               int32_t mulx_7, int32_t muly_8,
                                               __global
                                               unsigned char *destmem_0,
                                               __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_0_38 +
            srem32(get_local_id_1_39, mulx_7) * 16;
    int32_t y_index_32 = get_group_id_1_41 * 16 + squot32(get_local_id_1_39,
                                                          mulx_7);
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 + squot32(get_local_id_0_38, mulx_7);
    y_index_32 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_1_39 +
        srem32(get_local_id_0_38, mulx_7) * 16;
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_width(__local volatile
                                              int64_t *block_9_backing_aligned_0,
                                              int32_t destoffset_1,
                                              int32_t srcoffset_3,
                                              int32_t num_arrays_4,
                                              int32_t x_elems_5,
                                              int32_t y_elems_6, int32_t mulx_7,
                                              int32_t muly_8, __global
                                              unsigned char *destmem_0, __global
                                              unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 + squot32(get_local_id_0_38,
                                                          muly_8);
    int32_t y_index_32 = get_group_id_1_41 * 16 * muly_8 + get_local_id_1_39 +
            srem32(get_local_id_0_38, muly_8) * 16;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 * muly_8 + get_local_id_0_38 +
        srem32(get_local_id_1_39, muly_8) * 16;
    y_index_32 = get_group_id_0_40 * 16 + squot32(get_local_id_1_39, muly_8);
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_small(__local volatile
                                          int64_t *block_9_backing_aligned_0,
                                          int32_t destoffset_1,
                                          int32_t srcoffset_3,
                                          int32_t num_arrays_4,
                                          int32_t x_elems_5, int32_t y_elems_6,
                                          int32_t mulx_7, int32_t muly_8,
                                          __global unsigned char *destmem_0,
                                          __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = squot32(get_global_id_0_37, y_elems_6 *
                                          x_elems_5) * (y_elems_6 * x_elems_5);
    int32_t x_index_31 = squot32(srem32(get_global_id_0_37, y_elems_6 *
                                        x_elems_5), y_elems_6);
    int32_t y_index_32 = srem32(get_global_id_0_37, y_elems_6);
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    int32_t index_out_36 = x_index_31 * y_elems_6 + y_index_32;
    
    if (slt32(get_global_id_0_37, x_elems_5 * y_elems_6 * num_arrays_4)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__global
                                                          float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                             index_in_35)];
    }
    
  error_0:
    return;
}
__kernel void mainzicopy_37910(int64_t m_24751, int64_t nm_24902,
                               int64_t ctx_param_ext_36797,
                               int64_t ctx_param_ext_36798,
                               int64_t ctx_param_ext_36800, __global
                               unsigned char *mem_param_36802, __global
                               unsigned char *mem_36807)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_gtid_37910;
    int32_t copy_ltid_37911;
    int32_t copy_gid_37912;
    
    copy_gtid_37910 = get_global_id(0);
    copy_ltid_37911 = get_local_id(0);
    copy_gid_37912 = get_group_id(0);
    if (slt64(sext_i32_i64(copy_gtid_37910), m_24751 * nm_24902)) {
        ((__global float *) mem_36807)[(sext_i32_i64(copy_gtid_37910) -
                                        squot64(sext_i32_i64(copy_gtid_37910),
                                                nm_24902) * nm_24902) *
                                       m_24751 +
                                       squot64(sext_i32_i64(copy_gtid_37910),
                                               nm_24902)] = ((__global
                                                              float *) mem_param_36802)[ctx_param_ext_36797 +
                                                                                        (squot64(sext_i32_i64(copy_gtid_37910),
                                                                                                 nm_24902) *
                                                                                         ctx_param_ext_36798 +
                                                                                         (sext_i32_i64(copy_gtid_37910) -
                                                                                          squot64(sext_i32_i64(copy_gtid_37910),
                                                                                                  nm_24902) *
                                                                                          nm_24902) *
                                                                                         ctx_param_ext_36800)];
    }
    
  error_0:
    return;
}
__kernel void mainziscan_stage1_32801(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38245_backing_aligned_0,
                                      int64_t N_24750, int64_t m_24751,
                                      int64_t N_24752, __global
                                      unsigned char *images_mem_36652, __global
                                      unsigned char *res_mem_37073, __global
                                      unsigned char *mem_37102, __global
                                      unsigned char *mem_37105,
                                      int32_t num_threads_38239)
{
    #define segscan_group_sizze_32818 (mainzisegscan_group_sizze_32795)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38245_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38245_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38240;
    int32_t local_tid_38241;
    int64_t group_sizze_38244;
    int32_t wave_sizze_38243;
    int32_t group_tid_38242;
    
    global_tid_38240 = get_global_id(0);
    local_tid_38241 = get_local_id(0);
    group_sizze_38244 = get_local_size(0);
    wave_sizze_38243 = LOCKSTEP_WIDTH;
    group_tid_38242 = get_group_id(0);
    
    int32_t phys_tid_32801;
    
    phys_tid_32801 = global_tid_38240;
    
    __local char *scan_arr_mem_38245;
    
    scan_arr_mem_38245 = (__local char *) scan_arr_mem_38245_backing_0;
    
    int64_t x_32823;
    int64_t x_32824;
    
    x_32823 = 0;
    for (int64_t j_38247 = 0; j_38247 < sdiv_up64(m_24751 * N_24750,
                                                  sext_i32_i64(num_threads_38239));
         j_38247++) {
        int64_t chunk_offset_38248 = segscan_group_sizze_32818 * j_38247 +
                sext_i32_i64(group_tid_38242) * (segscan_group_sizze_32818 *
                                                 sdiv_up64(m_24751 * N_24750,
                                                           sext_i32_i64(num_threads_38239)));
        int64_t flat_idx_38249 = chunk_offset_38248 +
                sext_i32_i64(local_tid_38241);
        int64_t gtid_32792 = squot64(flat_idx_38249, N_24750);
        int64_t gtid_32800 = flat_idx_38249 - squot64(flat_idx_38249, N_24750) *
                N_24750;
        
        // threads in bounds read input
        {
            if (slt64(gtid_32792, m_24751) && slt64(gtid_32800, N_24750)) {
                float x_32828 = ((__global
                                  float *) images_mem_36652)[gtid_32792 *
                                                             N_24752 +
                                                             gtid_32800];
                bool res_32830;
                
                res_32830 = futrts_isnan32(x_32828);
                
                bool cond_32831 = !res_32830;
                float res_32832;
                
                if (cond_32831) {
                    float x_32829 = ((__global
                                      float *) res_mem_37073)[gtid_32792 *
                                                              N_24750 +
                                                              gtid_32800];
                    float res_32833 = x_32828 - x_32829;
                    
                    res_32832 = res_32833;
                } else {
                    res_32832 = NAN;
                }
                
                bool res_32834;
                
                res_32834 = futrts_isnan32(res_32832);
                
                bool res_32835 = !res_32834;
                int64_t res_32836 = btoi_bool_i64(res_32835);
                
                // write to-scan values to parameters
                {
                    x_32824 = res_32836;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_37105)[gtid_32792 * N_24750 +
                                                   gtid_32800] = res_32832;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_32792, m_24751) && slt64(gtid_32800,
                                                          N_24750))) {
                    x_32824 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_32825 = add64(x_32823, x_32824);
                
                ((__local
                  int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)] =
                    res_32825;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38250;
            int64_t x_38251;
            int64_t x_38253;
            int64_t x_38254;
            bool ltid_in_bounds_38256;
            
            ltid_in_bounds_38256 = slt64(sext_i32_i64(local_tid_38241),
                                         segscan_group_sizze_32818);
            
            int32_t skip_threads_38257;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38256) {
                    x_38251 = ((volatile __local
                                int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)];
                    if ((local_tid_38241 - squot32(local_tid_38241, 32) * 32) ==
                        0) {
                        x_38250 = x_38251;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38257 = 1;
                while (slt32(skip_threads_38257, 32)) {
                    if (sle32(skip_threads_38257, local_tid_38241 -
                              squot32(local_tid_38241, 32) * 32) &&
                        ltid_in_bounds_38256) {
                        // read operands
                        {
                            x_38250 = ((volatile __local
                                        int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241) -
                                                                       sext_i32_i64(skip_threads_38257)];
                        }
                        // perform operation
                        {
                            bool inactive_38258 =
                                 slt64(srem64(sext_i32_i64(local_tid_38241) +
                                              chunk_offset_38248, N_24750),
                                       sext_i32_i64(local_tid_38241) +
                                       chunk_offset_38248 -
                                       (sext_i32_i64(local_tid_38241 -
                                        skip_threads_38257) +
                                        chunk_offset_38248));
                            
                            if (inactive_38258) {
                                x_38250 = x_38251;
                            }
                            if (!inactive_38258) {
                                int64_t res_38252 = add64(x_38250, x_38251);
                                
                                x_38250 = res_38252;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38243, skip_threads_38257)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38257, local_tid_38241 -
                              squot32(local_tid_38241, 32) * 32) &&
                        ltid_in_bounds_38256) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)] =
                                x_38250;
                            x_38251 = x_38250;
                        }
                    }
                    if (sle32(wave_sizze_38243, skip_threads_38257)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38257 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38241 - squot32(local_tid_38241, 32) * 32) ==
                    31 && ltid_in_bounds_38256) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38245)[sext_i32_i64(squot32(local_tid_38241,
                                                                          32))] =
                        x_38250;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38259;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38241, 32) == 0 &&
                        ltid_in_bounds_38256) {
                        x_38254 = ((volatile __local
                                    int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)];
                        if ((local_tid_38241 - squot32(local_tid_38241, 32) *
                             32) == 0) {
                            x_38253 = x_38254;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38259 = 1;
                    while (slt32(skip_threads_38259, 32)) {
                        if (sle32(skip_threads_38259, local_tid_38241 -
                                  squot32(local_tid_38241, 32) * 32) &&
                            (squot32(local_tid_38241, 32) == 0 &&
                             ltid_in_bounds_38256)) {
                            // read operands
                            {
                                x_38253 = ((volatile __local
                                            int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241) -
                                                                           sext_i32_i64(skip_threads_38259)];
                            }
                            // perform operation
                            {
                                bool inactive_38260 =
                                     slt64(srem64(sext_i32_i64(local_tid_38241 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38248, N_24750),
                                           sext_i32_i64(local_tid_38241 * 32 +
                                           32 - 1) + chunk_offset_38248 -
                                           (sext_i32_i64((local_tid_38241 -
                                                          skip_threads_38259) *
                                            32 + 32 - 1) + chunk_offset_38248));
                                
                                if (inactive_38260) {
                                    x_38253 = x_38254;
                                }
                                if (!inactive_38260) {
                                    int64_t res_38255 = add64(x_38253, x_38254);
                                    
                                    x_38253 = res_38255;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38243, skip_threads_38259)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38259, local_tid_38241 -
                                  squot32(local_tid_38241, 32) * 32) &&
                            (squot32(local_tid_38241, 32) == 0 &&
                             ltid_in_bounds_38256)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)] =
                                    x_38253;
                                x_38254 = x_38253;
                            }
                        }
                        if (sle32(wave_sizze_38243, skip_threads_38259)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38259 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38241, 32) == 0 ||
                      !ltid_in_bounds_38256)) {
                    // read operands
                    {
                        x_38251 = x_38250;
                        x_38250 = ((__local
                                    int64_t *) scan_arr_mem_38245)[sext_i32_i64(squot32(local_tid_38241,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_38261 =
                             slt64(srem64(sext_i32_i64(local_tid_38241) +
                                          chunk_offset_38248, N_24750),
                                   sext_i32_i64(local_tid_38241) +
                                   chunk_offset_38248 -
                                   (sext_i32_i64(squot32(local_tid_38241, 32) *
                                    32 - 1) + chunk_offset_38248));
                        
                        if (inactive_38261) {
                            x_38250 = x_38251;
                        }
                        if (!inactive_38261) {
                            int64_t res_38252 = add64(x_38250, x_38251);
                            
                            x_38250 = res_38252;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)] =
                            x_38250;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38241, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)] =
                        x_38251;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_32792, m_24751) && slt64(gtid_32800, N_24750)) {
                    ((__global int64_t *) mem_37102)[gtid_32792 * N_24750 +
                                                     gtid_32800] = ((__local
                                                                     int64_t *) scan_arr_mem_38245)[sext_i32_i64(local_tid_38241)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38262 = slt64(srem64(chunk_offset_38248 +
                                                          segscan_group_sizze_32818,
                                                          N_24750),
                                                   chunk_offset_38248 +
                                                   segscan_group_sizze_32818 -
                                                   (chunk_offset_38248 +
                                                    segscan_group_sizze_32818 -
                                                    1));
                bool should_load_carry_38263 = local_tid_38241 == 0 &&
                     !crosses_segment_38262;
                
                if (should_load_carry_38263) {
                    x_32823 = ((__local
                                int64_t *) scan_arr_mem_38245)[segscan_group_sizze_32818 -
                                                               1];
                }
                if (!should_load_carry_38263) {
                    x_32823 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_32818
}
__kernel void mainziscan_stage1_34475(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38863_backing_aligned_0,
                                      __local volatile
                                      int64_t *scan_arr_mem_38861_backing_aligned_1,
                                      __local volatile
                                      int64_t *scan_arr_mem_38859_backing_aligned_2,
                                      __local volatile
                                      int64_t *scan_arr_mem_38857_backing_aligned_3,
                                      int64_t m_24751, int64_t iota32_arg_25134,
                                      int32_t lifted_2_radix_sort_step_arg_35039,
                                      int32_t lifted_0_get_bit_arg_35040,
                                      unsigned char res_35041,
                                      unsigned char res_35042, __global
                                      unsigned char *mem_param_37438, __global
                                      unsigned char *mem_37465, __global
                                      unsigned char *mem_37468, __global
                                      unsigned char *mem_37471, __global
                                      unsigned char *mem_37474, __global
                                      unsigned char *mem_37477,
                                      int32_t num_threads_38851)
{
    #define segscan_group_sizze_35134 (mainzisegscan_group_sizze_34469)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38863_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_38863_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_38861_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_38861_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_38859_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_38859_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_38857_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38857_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38852;
    int32_t local_tid_38853;
    int64_t group_sizze_38856;
    int32_t wave_sizze_38855;
    int32_t group_tid_38854;
    
    global_tid_38852 = get_global_id(0);
    local_tid_38853 = get_local_id(0);
    group_sizze_38856 = get_local_size(0);
    wave_sizze_38855 = LOCKSTEP_WIDTH;
    group_tid_38854 = get_group_id(0);
    
    int32_t phys_tid_34475;
    
    phys_tid_34475 = global_tid_38852;
    
    __local char *scan_arr_mem_38857;
    __local char *scan_arr_mem_38859;
    __local char *scan_arr_mem_38861;
    __local char *scan_arr_mem_38863;
    
    scan_arr_mem_38857 = (__local char *) scan_arr_mem_38857_backing_0;
    scan_arr_mem_38859 = (__local char *) scan_arr_mem_38859_backing_1;
    scan_arr_mem_38861 = (__local char *) scan_arr_mem_38861_backing_2;
    scan_arr_mem_38863 = (__local char *) scan_arr_mem_38863_backing_3;
    
    int64_t x_35142;
    int64_t x_35143;
    int64_t x_35144;
    int64_t x_35145;
    int64_t x_35146;
    int64_t x_35147;
    int64_t x_35148;
    int64_t x_35149;
    
    x_35142 = 0;
    x_35143 = 0;
    x_35144 = 0;
    x_35145 = 0;
    for (int64_t j_38865 = 0; j_38865 < sdiv_up64(m_24751 * iota32_arg_25134,
                                                  sext_i32_i64(num_threads_38851));
         j_38865++) {
        int64_t chunk_offset_38866 = segscan_group_sizze_35134 * j_38865 +
                sext_i32_i64(group_tid_38854) * (segscan_group_sizze_35134 *
                                                 sdiv_up64(m_24751 *
                                                           iota32_arg_25134,
                                                           sext_i32_i64(num_threads_38851)));
        int64_t flat_idx_38867 = chunk_offset_38866 +
                sext_i32_i64(local_tid_38853);
        int64_t gtid_34466 = squot64(flat_idx_38867, iota32_arg_25134);
        int64_t gtid_34474 = flat_idx_38867 - squot64(flat_idx_38867,
                                                      iota32_arg_25134) *
                iota32_arg_25134;
        
        // threads in bounds read input
        {
            if (slt64(gtid_34466, m_24751) && slt64(gtid_34474,
                                                    iota32_arg_25134)) {
                float x_35155 = ((__global
                                  float *) mem_param_37438)[gtid_34466 *
                                                            iota32_arg_25134 +
                                                            gtid_34474];
                int32_t i32_arg_35156;
                
                i32_arg_35156 = futrts_to_bits32(x_35155);
                
                int32_t unsign_arg_35157 = ashr32(i32_arg_35156,
                                                  lifted_0_get_bit_arg_35040);
                int32_t unsign_arg_35158 = 1 & unsign_arg_35157;
                int32_t unsign_arg_35159 = ashr32(i32_arg_35156, 31);
                int32_t unsign_arg_35160 = 1 & unsign_arg_35159;
                bool cond_35161 = unsign_arg_35160 == 1;
                bool x_35162 = !cond_35161;
                bool y_35163 = res_35041 && x_35162;
                bool cond_35164 = cond_35161 || y_35163;
                int32_t res_35165;
                
                if (cond_35164) {
                    int32_t res_35166 = 1 ^ unsign_arg_35158;
                    
                    res_35165 = res_35166;
                } else {
                    res_35165 = unsign_arg_35158;
                }
                
                int32_t x_35167 = mul32(2, res_35165);
                int32_t unsign_arg_35168 = ashr32(i32_arg_35156,
                                                  lifted_2_radix_sort_step_arg_35039);
                int32_t unsign_arg_35169 = 1 & unsign_arg_35168;
                bool y_35170 = res_35042 && x_35162;
                bool cond_35171 = cond_35161 || y_35170;
                int32_t res_35172;
                
                if (cond_35171) {
                    int32_t res_35173 = 1 ^ unsign_arg_35169;
                    
                    res_35172 = res_35173;
                } else {
                    res_35172 = unsign_arg_35169;
                }
                
                int32_t res_35174 = add32(x_35167, res_35172);
                bool cond_35175 = res_35174 == 0;
                int64_t res_35176 = btoi_bool_i64(cond_35175);
                int64_t res_35177;
                int64_t res_35178;
                int64_t res_35179;
                
                if (cond_35175) {
                    res_35177 = 0;
                    res_35178 = 0;
                    res_35179 = 0;
                } else {
                    bool cond_35180 = res_35174 == 1;
                    int64_t res_35181 = btoi_bool_i64(cond_35180);
                    int64_t res_35182;
                    int64_t res_35183;
                    
                    if (cond_35180) {
                        res_35182 = 0;
                        res_35183 = 0;
                    } else {
                        bool cond_35184 = res_35174 == 2;
                        int64_t res_35185 = btoi_bool_i64(cond_35184);
                        bool cond_neg_35186 = !cond_35184;
                        int64_t res_35187 = btoi_bool_i64(cond_neg_35186);
                        
                        res_35182 = res_35185;
                        res_35183 = res_35187;
                    }
                    res_35177 = res_35181;
                    res_35178 = res_35182;
                    res_35179 = res_35183;
                }
                // write to-scan values to parameters
                {
                    x_35146 = res_35176;
                    x_35147 = res_35177;
                    x_35148 = res_35178;
                    x_35149 = res_35179;
                }
                // write mapped values results to global memory
                {
                    ((__global int32_t *) mem_37477)[gtid_34466 *
                                                     iota32_arg_25134 +
                                                     gtid_34474] = res_35174;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_34466, m_24751) && slt64(gtid_34474,
                                                          iota32_arg_25134))) {
                    x_35146 = 0;
                    x_35147 = 0;
                    x_35148 = 0;
                    x_35149 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_35150 = add64(x_35142, x_35146);
                int64_t res_35151 = add64(x_35143, x_35147);
                int64_t res_35152 = add64(x_35144, x_35148);
                int64_t res_35153 = add64(x_35145, x_35149);
                
                ((__local
                  int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)] =
                    res_35150;
                ((__local
                  int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)] =
                    res_35151;
                ((__local
                  int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)] =
                    res_35152;
                ((__local
                  int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)] =
                    res_35153;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38868;
            int64_t x_38869;
            int64_t x_38870;
            int64_t x_38871;
            int64_t x_38872;
            int64_t x_38873;
            int64_t x_38874;
            int64_t x_38875;
            int64_t x_38880;
            int64_t x_38881;
            int64_t x_38882;
            int64_t x_38883;
            int64_t x_38884;
            int64_t x_38885;
            int64_t x_38886;
            int64_t x_38887;
            bool ltid_in_bounds_38892;
            
            ltid_in_bounds_38892 = slt64(sext_i32_i64(local_tid_38853),
                                         segscan_group_sizze_35134);
            
            int32_t skip_threads_38893;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38892) {
                    x_38872 = ((volatile __local
                                int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)];
                    x_38873 = ((volatile __local
                                int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)];
                    x_38874 = ((volatile __local
                                int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)];
                    x_38875 = ((volatile __local
                                int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)];
                    if ((local_tid_38853 - squot32(local_tid_38853, 32) * 32) ==
                        0) {
                        x_38868 = x_38872;
                        x_38869 = x_38873;
                        x_38870 = x_38874;
                        x_38871 = x_38875;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38893 = 1;
                while (slt32(skip_threads_38893, 32)) {
                    if (sle32(skip_threads_38893, local_tid_38853 -
                              squot32(local_tid_38853, 32) * 32) &&
                        ltid_in_bounds_38892) {
                        // read operands
                        {
                            x_38868 = ((volatile __local
                                        int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853) -
                                                                       sext_i32_i64(skip_threads_38893)];
                            x_38869 = ((volatile __local
                                        int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853) -
                                                                       sext_i32_i64(skip_threads_38893)];
                            x_38870 = ((volatile __local
                                        int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853) -
                                                                       sext_i32_i64(skip_threads_38893)];
                            x_38871 = ((volatile __local
                                        int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853) -
                                                                       sext_i32_i64(skip_threads_38893)];
                        }
                        // perform operation
                        {
                            bool inactive_38894 =
                                 slt64(srem64(sext_i32_i64(local_tid_38853) +
                                              chunk_offset_38866,
                                              iota32_arg_25134),
                                       sext_i32_i64(local_tid_38853) +
                                       chunk_offset_38866 -
                                       (sext_i32_i64(local_tid_38853 -
                                        skip_threads_38893) +
                                        chunk_offset_38866));
                            
                            if (inactive_38894) {
                                x_38868 = x_38872;
                                x_38869 = x_38873;
                                x_38870 = x_38874;
                                x_38871 = x_38875;
                            }
                            if (!inactive_38894) {
                                int64_t res_38876 = add64(x_38868, x_38872);
                                int64_t res_38877 = add64(x_38869, x_38873);
                                int64_t res_38878 = add64(x_38870, x_38874);
                                int64_t res_38879 = add64(x_38871, x_38875);
                                
                                x_38868 = res_38876;
                                x_38869 = res_38877;
                                x_38870 = res_38878;
                                x_38871 = res_38879;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38855, skip_threads_38893)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38893, local_tid_38853 -
                              squot32(local_tid_38853, 32) * 32) &&
                        ltid_in_bounds_38892) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)] =
                                x_38868;
                            x_38872 = x_38868;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)] =
                                x_38869;
                            x_38873 = x_38869;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)] =
                                x_38870;
                            x_38874 = x_38870;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)] =
                                x_38871;
                            x_38875 = x_38871;
                        }
                    }
                    if (sle32(wave_sizze_38855, skip_threads_38893)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38893 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38853 - squot32(local_tid_38853, 32) * 32) ==
                    31 && ltid_in_bounds_38892) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38857)[sext_i32_i64(squot32(local_tid_38853,
                                                                          32))] =
                        x_38868;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38859)[sext_i32_i64(squot32(local_tid_38853,
                                                                          32))] =
                        x_38869;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38861)[sext_i32_i64(squot32(local_tid_38853,
                                                                          32))] =
                        x_38870;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38863)[sext_i32_i64(squot32(local_tid_38853,
                                                                          32))] =
                        x_38871;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38895;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38853, 32) == 0 &&
                        ltid_in_bounds_38892) {
                        x_38884 = ((volatile __local
                                    int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)];
                        x_38885 = ((volatile __local
                                    int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)];
                        x_38886 = ((volatile __local
                                    int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)];
                        x_38887 = ((volatile __local
                                    int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)];
                        if ((local_tid_38853 - squot32(local_tid_38853, 32) *
                             32) == 0) {
                            x_38880 = x_38884;
                            x_38881 = x_38885;
                            x_38882 = x_38886;
                            x_38883 = x_38887;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38895 = 1;
                    while (slt32(skip_threads_38895, 32)) {
                        if (sle32(skip_threads_38895, local_tid_38853 -
                                  squot32(local_tid_38853, 32) * 32) &&
                            (squot32(local_tid_38853, 32) == 0 &&
                             ltid_in_bounds_38892)) {
                            // read operands
                            {
                                x_38880 = ((volatile __local
                                            int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853) -
                                                                           sext_i32_i64(skip_threads_38895)];
                                x_38881 = ((volatile __local
                                            int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853) -
                                                                           sext_i32_i64(skip_threads_38895)];
                                x_38882 = ((volatile __local
                                            int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853) -
                                                                           sext_i32_i64(skip_threads_38895)];
                                x_38883 = ((volatile __local
                                            int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853) -
                                                                           sext_i32_i64(skip_threads_38895)];
                            }
                            // perform operation
                            {
                                bool inactive_38896 =
                                     slt64(srem64(sext_i32_i64(local_tid_38853 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38866,
                                                  iota32_arg_25134),
                                           sext_i32_i64(local_tid_38853 * 32 +
                                           32 - 1) + chunk_offset_38866 -
                                           (sext_i32_i64((local_tid_38853 -
                                                          skip_threads_38895) *
                                            32 + 32 - 1) + chunk_offset_38866));
                                
                                if (inactive_38896) {
                                    x_38880 = x_38884;
                                    x_38881 = x_38885;
                                    x_38882 = x_38886;
                                    x_38883 = x_38887;
                                }
                                if (!inactive_38896) {
                                    int64_t res_38888 = add64(x_38880, x_38884);
                                    int64_t res_38889 = add64(x_38881, x_38885);
                                    int64_t res_38890 = add64(x_38882, x_38886);
                                    int64_t res_38891 = add64(x_38883, x_38887);
                                    
                                    x_38880 = res_38888;
                                    x_38881 = res_38889;
                                    x_38882 = res_38890;
                                    x_38883 = res_38891;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38855, skip_threads_38895)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38895, local_tid_38853 -
                                  squot32(local_tid_38853, 32) * 32) &&
                            (squot32(local_tid_38853, 32) == 0 &&
                             ltid_in_bounds_38892)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)] =
                                    x_38880;
                                x_38884 = x_38880;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)] =
                                    x_38881;
                                x_38885 = x_38881;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)] =
                                    x_38882;
                                x_38886 = x_38882;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)] =
                                    x_38883;
                                x_38887 = x_38883;
                            }
                        }
                        if (sle32(wave_sizze_38855, skip_threads_38895)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38895 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38853, 32) == 0 ||
                      !ltid_in_bounds_38892)) {
                    // read operands
                    {
                        x_38872 = x_38868;
                        x_38873 = x_38869;
                        x_38874 = x_38870;
                        x_38875 = x_38871;
                        x_38868 = ((__local
                                    int64_t *) scan_arr_mem_38857)[sext_i32_i64(squot32(local_tid_38853,
                                                                                        32)) -
                                                                   1];
                        x_38869 = ((__local
                                    int64_t *) scan_arr_mem_38859)[sext_i32_i64(squot32(local_tid_38853,
                                                                                        32)) -
                                                                   1];
                        x_38870 = ((__local
                                    int64_t *) scan_arr_mem_38861)[sext_i32_i64(squot32(local_tid_38853,
                                                                                        32)) -
                                                                   1];
                        x_38871 = ((__local
                                    int64_t *) scan_arr_mem_38863)[sext_i32_i64(squot32(local_tid_38853,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_38897 =
                             slt64(srem64(sext_i32_i64(local_tid_38853) +
                                          chunk_offset_38866, iota32_arg_25134),
                                   sext_i32_i64(local_tid_38853) +
                                   chunk_offset_38866 -
                                   (sext_i32_i64(squot32(local_tid_38853, 32) *
                                    32 - 1) + chunk_offset_38866));
                        
                        if (inactive_38897) {
                            x_38868 = x_38872;
                            x_38869 = x_38873;
                            x_38870 = x_38874;
                            x_38871 = x_38875;
                        }
                        if (!inactive_38897) {
                            int64_t res_38876 = add64(x_38868, x_38872);
                            int64_t res_38877 = add64(x_38869, x_38873);
                            int64_t res_38878 = add64(x_38870, x_38874);
                            int64_t res_38879 = add64(x_38871, x_38875);
                            
                            x_38868 = res_38876;
                            x_38869 = res_38877;
                            x_38870 = res_38878;
                            x_38871 = res_38879;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)] =
                            x_38868;
                        ((__local
                          int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)] =
                            x_38869;
                        ((__local
                          int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)] =
                            x_38870;
                        ((__local
                          int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)] =
                            x_38871;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38853, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)] =
                        x_38872;
                    ((__local
                      int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)] =
                        x_38873;
                    ((__local
                      int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)] =
                        x_38874;
                    ((__local
                      int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)] =
                        x_38875;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_34466, m_24751) && slt64(gtid_34474,
                                                        iota32_arg_25134)) {
                    ((__global int64_t *) mem_37465)[gtid_34466 *
                                                     iota32_arg_25134 +
                                                     gtid_34474] = ((__local
                                                                     int64_t *) scan_arr_mem_38857)[sext_i32_i64(local_tid_38853)];
                    ((__global int64_t *) mem_37468)[gtid_34466 *
                                                     iota32_arg_25134 +
                                                     gtid_34474] = ((__local
                                                                     int64_t *) scan_arr_mem_38859)[sext_i32_i64(local_tid_38853)];
                    ((__global int64_t *) mem_37471)[gtid_34466 *
                                                     iota32_arg_25134 +
                                                     gtid_34474] = ((__local
                                                                     int64_t *) scan_arr_mem_38861)[sext_i32_i64(local_tid_38853)];
                    ((__global int64_t *) mem_37474)[gtid_34466 *
                                                     iota32_arg_25134 +
                                                     gtid_34474] = ((__local
                                                                     int64_t *) scan_arr_mem_38863)[sext_i32_i64(local_tid_38853)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38898 = slt64(srem64(chunk_offset_38866 +
                                                          segscan_group_sizze_35134,
                                                          iota32_arg_25134),
                                                   chunk_offset_38866 +
                                                   segscan_group_sizze_35134 -
                                                   (chunk_offset_38866 +
                                                    segscan_group_sizze_35134 -
                                                    1));
                bool should_load_carry_38899 = local_tid_38853 == 0 &&
                     !crosses_segment_38898;
                
                if (should_load_carry_38899) {
                    x_35142 = ((__local
                                int64_t *) scan_arr_mem_38857)[segscan_group_sizze_35134 -
                                                               1];
                    x_35143 = ((__local
                                int64_t *) scan_arr_mem_38859)[segscan_group_sizze_35134 -
                                                               1];
                    x_35144 = ((__local
                                int64_t *) scan_arr_mem_38861)[segscan_group_sizze_35134 -
                                                               1];
                    x_35145 = ((__local
                                int64_t *) scan_arr_mem_38863)[segscan_group_sizze_35134 -
                                                               1];
                }
                if (!should_load_carry_38899) {
                    x_35142 = 0;
                    x_35143 = 0;
                    x_35144 = 0;
                    x_35145 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_35134
}
__kernel void mainziscan_stage1_34819(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38662_backing_aligned_0,
                                      int64_t N_24750, int64_t m_24751,
                                      int64_t iota32_arg_25134, __global
                                      unsigned char *res_mem_37111, __global
                                      unsigned char *res_mem_37190, __global
                                      unsigned char *res_mem_37191, __global
                                      unsigned char *res_mem_37241, __global
                                      unsigned char *mem_37408, __global
                                      unsigned char *mem_37412,
                                      int32_t num_threads_38656)
{
    #define segscan_group_sizze_34898 (mainzisegscan_group_sizze_34813)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38662_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38662_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38657;
    int32_t local_tid_38658;
    int64_t group_sizze_38661;
    int32_t wave_sizze_38660;
    int32_t group_tid_38659;
    
    global_tid_38657 = get_global_id(0);
    local_tid_38658 = get_local_id(0);
    group_sizze_38661 = get_local_size(0);
    wave_sizze_38660 = LOCKSTEP_WIDTH;
    group_tid_38659 = get_group_id(0);
    
    int32_t phys_tid_34819;
    
    phys_tid_34819 = global_tid_38657;
    
    __local char *scan_arr_mem_38662;
    
    scan_arr_mem_38662 = (__local char *) scan_arr_mem_38662_backing_0;
    
    float x_34902;
    float x_34903;
    
    x_34902 = 0.0F;
    for (int64_t j_38664 = 0; j_38664 < sdiv_up64(m_24751 * iota32_arg_25134,
                                                  sext_i32_i64(num_threads_38656));
         j_38664++) {
        int64_t chunk_offset_38665 = segscan_group_sizze_34898 * j_38664 +
                sext_i32_i64(group_tid_38659) * (segscan_group_sizze_34898 *
                                                 sdiv_up64(m_24751 *
                                                           iota32_arg_25134,
                                                           sext_i32_i64(num_threads_38656)));
        int64_t flat_idx_38666 = chunk_offset_38665 +
                sext_i32_i64(local_tid_38658);
        int64_t gtid_34810 = squot64(flat_idx_38666, iota32_arg_25134);
        int64_t gtid_34818 = flat_idx_38666 - squot64(flat_idx_38666,
                                                      iota32_arg_25134) *
                iota32_arg_25134;
        
        // threads in bounds read input
        {
            if (slt64(gtid_34810, m_24751) && slt64(gtid_34818,
                                                    iota32_arg_25134)) {
                int32_t y_34909 = ((__global int32_t *) mem_37408)[gtid_34810];
                int32_t index_primexp_35377 = sext_i64_i32(gtid_34818);
                bool cond_34912 = sle32(y_34909, index_primexp_35377);
                float res_34913;
                
                if (cond_34912) {
                    res_34913 = 0.0F;
                } else {
                    int32_t x_34905 = ((__global
                                        int32_t *) res_mem_37191)[gtid_34810];
                    int32_t x_34906 = ((__global
                                        int32_t *) res_mem_37190)[gtid_34810];
                    float x_34907 = ((__global
                                      float *) res_mem_37241)[gtid_34810];
                    bool cond_34914 = index_primexp_35377 == 0;
                    float res_34915;
                    
                    if (cond_34914) {
                        res_34915 = x_34907;
                    } else {
                        int32_t x_34916 = sub32(x_34905, x_34906);
                        int32_t i_34917 = add32(x_34916, index_primexp_35377);
                        int64_t i_34918 = sext_i32_i64(i_34917);
                        float negate_arg_34919 = ((__global
                                                   float *) res_mem_37111)[gtid_34810 *
                                                                           N_24750 +
                                                                           i_34918];
                        float x_34920 = 0.0F - negate_arg_34919;
                        int32_t i_34921 = add32(x_34905, index_primexp_35377);
                        int64_t i_34922 = sext_i32_i64(i_34921);
                        float y_34923 = ((__global
                                          float *) res_mem_37111)[gtid_34810 *
                                                                  N_24750 +
                                                                  i_34922];
                        float res_34924 = x_34920 + y_34923;
                        
                        res_34915 = res_34924;
                    }
                    res_34913 = res_34915;
                }
                // write to-scan values to parameters
                {
                    x_34903 = res_34913;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_34810, m_24751) && slt64(gtid_34818,
                                                          iota32_arg_25134))) {
                    x_34903 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float res_34904 = x_34902 + x_34903;
                
                ((__local
                  float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)] =
                    res_34904;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_38667;
            float x_38668;
            float x_38670;
            float x_38671;
            bool ltid_in_bounds_38673;
            
            ltid_in_bounds_38673 = slt64(sext_i32_i64(local_tid_38658),
                                         segscan_group_sizze_34898);
            
            int32_t skip_threads_38674;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38673) {
                    x_38668 = ((volatile __local
                                float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)];
                    if ((local_tid_38658 - squot32(local_tid_38658, 32) * 32) ==
                        0) {
                        x_38667 = x_38668;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38674 = 1;
                while (slt32(skip_threads_38674, 32)) {
                    if (sle32(skip_threads_38674, local_tid_38658 -
                              squot32(local_tid_38658, 32) * 32) &&
                        ltid_in_bounds_38673) {
                        // read operands
                        {
                            x_38667 = ((volatile __local
                                        float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658) -
                                                                     sext_i32_i64(skip_threads_38674)];
                        }
                        // perform operation
                        {
                            bool inactive_38675 =
                                 slt64(srem64(sext_i32_i64(local_tid_38658) +
                                              chunk_offset_38665,
                                              iota32_arg_25134),
                                       sext_i32_i64(local_tid_38658) +
                                       chunk_offset_38665 -
                                       (sext_i32_i64(local_tid_38658 -
                                        skip_threads_38674) +
                                        chunk_offset_38665));
                            
                            if (inactive_38675) {
                                x_38667 = x_38668;
                            }
                            if (!inactive_38675) {
                                float res_38669 = x_38667 + x_38668;
                                
                                x_38667 = res_38669;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38660, skip_threads_38674)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38674, local_tid_38658 -
                              squot32(local_tid_38658, 32) * 32) &&
                        ltid_in_bounds_38673) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)] =
                                x_38667;
                            x_38668 = x_38667;
                        }
                    }
                    if (sle32(wave_sizze_38660, skip_threads_38674)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38674 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38658 - squot32(local_tid_38658, 32) * 32) ==
                    31 && ltid_in_bounds_38673) {
                    ((volatile __local
                      float *) scan_arr_mem_38662)[sext_i32_i64(squot32(local_tid_38658,
                                                                        32))] =
                        x_38667;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38676;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38658, 32) == 0 &&
                        ltid_in_bounds_38673) {
                        x_38671 = ((volatile __local
                                    float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)];
                        if ((local_tid_38658 - squot32(local_tid_38658, 32) *
                             32) == 0) {
                            x_38670 = x_38671;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38676 = 1;
                    while (slt32(skip_threads_38676, 32)) {
                        if (sle32(skip_threads_38676, local_tid_38658 -
                                  squot32(local_tid_38658, 32) * 32) &&
                            (squot32(local_tid_38658, 32) == 0 &&
                             ltid_in_bounds_38673)) {
                            // read operands
                            {
                                x_38670 = ((volatile __local
                                            float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658) -
                                                                         sext_i32_i64(skip_threads_38676)];
                            }
                            // perform operation
                            {
                                bool inactive_38677 =
                                     slt64(srem64(sext_i32_i64(local_tid_38658 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38665,
                                                  iota32_arg_25134),
                                           sext_i32_i64(local_tid_38658 * 32 +
                                           32 - 1) + chunk_offset_38665 -
                                           (sext_i32_i64((local_tid_38658 -
                                                          skip_threads_38676) *
                                            32 + 32 - 1) + chunk_offset_38665));
                                
                                if (inactive_38677) {
                                    x_38670 = x_38671;
                                }
                                if (!inactive_38677) {
                                    float res_38672 = x_38670 + x_38671;
                                    
                                    x_38670 = res_38672;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38660, skip_threads_38676)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38676, local_tid_38658 -
                                  squot32(local_tid_38658, 32) * 32) &&
                            (squot32(local_tid_38658, 32) == 0 &&
                             ltid_in_bounds_38673)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)] =
                                    x_38670;
                                x_38671 = x_38670;
                            }
                        }
                        if (sle32(wave_sizze_38660, skip_threads_38676)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38676 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38658, 32) == 0 ||
                      !ltid_in_bounds_38673)) {
                    // read operands
                    {
                        x_38668 = x_38667;
                        x_38667 = ((__local
                                    float *) scan_arr_mem_38662)[sext_i32_i64(squot32(local_tid_38658,
                                                                                      32)) -
                                                                 1];
                    }
                    // perform operation
                    {
                        bool inactive_38678 =
                             slt64(srem64(sext_i32_i64(local_tid_38658) +
                                          chunk_offset_38665, iota32_arg_25134),
                                   sext_i32_i64(local_tid_38658) +
                                   chunk_offset_38665 -
                                   (sext_i32_i64(squot32(local_tid_38658, 32) *
                                    32 - 1) + chunk_offset_38665));
                        
                        if (inactive_38678) {
                            x_38667 = x_38668;
                        }
                        if (!inactive_38678) {
                            float res_38669 = x_38667 + x_38668;
                            
                            x_38667 = res_38669;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)] =
                            x_38667;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38658, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)] =
                        x_38668;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_34810, m_24751) && slt64(gtid_34818,
                                                        iota32_arg_25134)) {
                    ((__global float *) mem_37412)[gtid_34810 *
                                                   iota32_arg_25134 +
                                                   gtid_34818] = ((__local
                                                                   float *) scan_arr_mem_38662)[sext_i32_i64(local_tid_38658)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38679 = slt64(srem64(chunk_offset_38665 +
                                                          segscan_group_sizze_34898,
                                                          iota32_arg_25134),
                                                   chunk_offset_38665 +
                                                   segscan_group_sizze_34898 -
                                                   (chunk_offset_38665 +
                                                    segscan_group_sizze_34898 -
                                                    1));
                bool should_load_carry_38680 = local_tid_38658 == 0 &&
                     !crosses_segment_38679;
                
                if (should_load_carry_38680) {
                    x_34902 = ((__local
                                float *) scan_arr_mem_38662)[segscan_group_sizze_34898 -
                                                             1];
                }
                if (!should_load_carry_38680) {
                    x_34902 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_34898
}
__kernel void mainziscan_stage2_32801(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38269_backing_aligned_0,
                                      int64_t N_24750, int64_t m_24751, __global
                                      unsigned char *mem_37102,
                                      int64_t stage1_num_groups_38238,
                                      int32_t num_threads_38239)
{
    #define segscan_group_sizze_32818 (mainzisegscan_group_sizze_32795)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38269_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38269_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38264;
    int32_t local_tid_38265;
    int64_t group_sizze_38268;
    int32_t wave_sizze_38267;
    int32_t group_tid_38266;
    
    global_tid_38264 = get_global_id(0);
    local_tid_38265 = get_local_id(0);
    group_sizze_38268 = get_local_size(0);
    wave_sizze_38267 = LOCKSTEP_WIDTH;
    group_tid_38266 = get_group_id(0);
    
    int32_t phys_tid_32801;
    
    phys_tid_32801 = global_tid_38264;
    
    __local char *scan_arr_mem_38269;
    
    scan_arr_mem_38269 = (__local char *) scan_arr_mem_38269_backing_0;
    
    int64_t flat_idx_38271;
    
    flat_idx_38271 = (sext_i32_i64(local_tid_38265) + 1) *
        (segscan_group_sizze_32818 * sdiv_up64(m_24751 * N_24750,
                                               sext_i32_i64(num_threads_38239))) -
        1;
    
    int64_t gtid_32792;
    
    gtid_32792 = squot64(flat_idx_38271, N_24750);
    
    int64_t gtid_32800;
    
    gtid_32800 = flat_idx_38271 - squot64(flat_idx_38271, N_24750) * N_24750;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_32792, m_24751) && slt64(gtid_32800, N_24750)) {
            ((__local
              int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)] =
                ((__global int64_t *) mem_37102)[gtid_32792 * N_24750 +
                                                 gtid_32800];
        } else {
            ((__local
              int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_32823;
    int64_t x_32824;
    int64_t x_38272;
    int64_t x_38273;
    bool ltid_in_bounds_38275;
    
    ltid_in_bounds_38275 = slt64(sext_i32_i64(local_tid_38265),
                                 stage1_num_groups_38238);
    
    int32_t skip_threads_38276;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38275) {
            x_32824 = ((volatile __local
                        int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)];
            if ((local_tid_38265 - squot32(local_tid_38265, 32) * 32) == 0) {
                x_32823 = x_32824;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38276 = 1;
        while (slt32(skip_threads_38276, 32)) {
            if (sle32(skip_threads_38276, local_tid_38265 -
                      squot32(local_tid_38265, 32) * 32) &&
                ltid_in_bounds_38275) {
                // read operands
                {
                    x_32823 = ((volatile __local
                                int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265) -
                                                               sext_i32_i64(skip_threads_38276)];
                }
                // perform operation
                {
                    bool inactive_38277 =
                         slt64(srem64((sext_i32_i64(local_tid_38265) + 1) *
                                      (segscan_group_sizze_32818 *
                                       sdiv_up64(m_24751 * N_24750,
                                                 sext_i32_i64(num_threads_38239))) -
                                      1, N_24750),
                               (sext_i32_i64(local_tid_38265) + 1) *
                               (segscan_group_sizze_32818 * sdiv_up64(m_24751 *
                                                                      N_24750,
                                                                      sext_i32_i64(num_threads_38239))) -
                               1 - ((sext_i32_i64(local_tid_38265 -
                                     skip_threads_38276) + 1) *
                                    (segscan_group_sizze_32818 *
                                     sdiv_up64(m_24751 * N_24750,
                                               sext_i32_i64(num_threads_38239))) -
                                    1));
                    
                    if (inactive_38277) {
                        x_32823 = x_32824;
                    }
                    if (!inactive_38277) {
                        int64_t res_32825 = add64(x_32823, x_32824);
                        
                        x_32823 = res_32825;
                    }
                }
            }
            if (sle32(wave_sizze_38267, skip_threads_38276)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38276, local_tid_38265 -
                      squot32(local_tid_38265, 32) * 32) &&
                ltid_in_bounds_38275) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)] =
                        x_32823;
                    x_32824 = x_32823;
                }
            }
            if (sle32(wave_sizze_38267, skip_threads_38276)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38276 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38265 - squot32(local_tid_38265, 32) * 32) == 31 &&
            ltid_in_bounds_38275) {
            ((volatile __local
              int64_t *) scan_arr_mem_38269)[sext_i32_i64(squot32(local_tid_38265,
                                                                  32))] =
                x_32823;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38278;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38265, 32) == 0 && ltid_in_bounds_38275) {
                x_38273 = ((volatile __local
                            int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)];
                if ((local_tid_38265 - squot32(local_tid_38265, 32) * 32) ==
                    0) {
                    x_38272 = x_38273;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38278 = 1;
            while (slt32(skip_threads_38278, 32)) {
                if (sle32(skip_threads_38278, local_tid_38265 -
                          squot32(local_tid_38265, 32) * 32) &&
                    (squot32(local_tid_38265, 32) == 0 &&
                     ltid_in_bounds_38275)) {
                    // read operands
                    {
                        x_38272 = ((volatile __local
                                    int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265) -
                                                                   sext_i32_i64(skip_threads_38278)];
                    }
                    // perform operation
                    {
                        bool inactive_38279 =
                             slt64(srem64((sext_i32_i64(local_tid_38265 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_32818 *
                                           sdiv_up64(m_24751 * N_24750,
                                                     sext_i32_i64(num_threads_38239))) -
                                          1, N_24750),
                                   (sext_i32_i64(local_tid_38265 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_32818 *
                                               sdiv_up64(m_24751 * N_24750,
                                                         sext_i32_i64(num_threads_38239))) -
                                   1 - ((sext_i32_i64((local_tid_38265 -
                                                       skip_threads_38278) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_32818 *
                                         sdiv_up64(m_24751 * N_24750,
                                                   sext_i32_i64(num_threads_38239))) -
                                        1));
                        
                        if (inactive_38279) {
                            x_38272 = x_38273;
                        }
                        if (!inactive_38279) {
                            int64_t res_38274 = add64(x_38272, x_38273);
                            
                            x_38272 = res_38274;
                        }
                    }
                }
                if (sle32(wave_sizze_38267, skip_threads_38278)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38278, local_tid_38265 -
                          squot32(local_tid_38265, 32) * 32) &&
                    (squot32(local_tid_38265, 32) == 0 &&
                     ltid_in_bounds_38275)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)] =
                            x_38272;
                        x_38273 = x_38272;
                    }
                }
                if (sle32(wave_sizze_38267, skip_threads_38278)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38278 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38265, 32) == 0 || !ltid_in_bounds_38275)) {
            // read operands
            {
                x_32824 = x_32823;
                x_32823 = ((__local
                            int64_t *) scan_arr_mem_38269)[sext_i32_i64(squot32(local_tid_38265,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_38280 =
                     slt64(srem64((sext_i32_i64(local_tid_38265) + 1) *
                                  (segscan_group_sizze_32818 *
                                   sdiv_up64(m_24751 * N_24750,
                                             sext_i32_i64(num_threads_38239))) -
                                  1, N_24750), (sext_i32_i64(local_tid_38265) +
                                                1) *
                           (segscan_group_sizze_32818 * sdiv_up64(m_24751 *
                                                                  N_24750,
                                                                  sext_i32_i64(num_threads_38239))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38265, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_32818 *
                                                 sdiv_up64(m_24751 * N_24750,
                                                           sext_i32_i64(num_threads_38239))) -
                                1));
                
                if (inactive_38280) {
                    x_32823 = x_32824;
                }
                if (!inactive_38280) {
                    int64_t res_32825 = add64(x_32823, x_32824);
                    
                    x_32823 = res_32825;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)] =
                    x_32823;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38265, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)] =
                x_32824;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_32792, m_24751) && slt64(gtid_32800, N_24750)) {
            ((__global int64_t *) mem_37102)[gtid_32792 * N_24750 +
                                             gtid_32800] = ((__local
                                                             int64_t *) scan_arr_mem_38269)[sext_i32_i64(local_tid_38265)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_32818
}
__kernel void mainziscan_stage2_34475(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38911_backing_aligned_0,
                                      __local volatile
                                      int64_t *scan_arr_mem_38909_backing_aligned_1,
                                      __local volatile
                                      int64_t *scan_arr_mem_38907_backing_aligned_2,
                                      __local volatile
                                      int64_t *scan_arr_mem_38905_backing_aligned_3,
                                      int64_t m_24751, int64_t iota32_arg_25134,
                                      __global unsigned char *mem_37465,
                                      __global unsigned char *mem_37468,
                                      __global unsigned char *mem_37471,
                                      __global unsigned char *mem_37474,
                                      int64_t stage1_num_groups_38850,
                                      int32_t num_threads_38851)
{
    #define segscan_group_sizze_35134 (mainzisegscan_group_sizze_34469)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38911_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_38911_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_38909_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_38909_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_38907_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_38907_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_38905_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38905_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38900;
    int32_t local_tid_38901;
    int64_t group_sizze_38904;
    int32_t wave_sizze_38903;
    int32_t group_tid_38902;
    
    global_tid_38900 = get_global_id(0);
    local_tid_38901 = get_local_id(0);
    group_sizze_38904 = get_local_size(0);
    wave_sizze_38903 = LOCKSTEP_WIDTH;
    group_tid_38902 = get_group_id(0);
    
    int32_t phys_tid_34475;
    
    phys_tid_34475 = global_tid_38900;
    
    __local char *scan_arr_mem_38905;
    __local char *scan_arr_mem_38907;
    __local char *scan_arr_mem_38909;
    __local char *scan_arr_mem_38911;
    
    scan_arr_mem_38905 = (__local char *) scan_arr_mem_38905_backing_0;
    scan_arr_mem_38907 = (__local char *) scan_arr_mem_38907_backing_1;
    scan_arr_mem_38909 = (__local char *) scan_arr_mem_38909_backing_2;
    scan_arr_mem_38911 = (__local char *) scan_arr_mem_38911_backing_3;
    
    int64_t flat_idx_38913;
    
    flat_idx_38913 = (sext_i32_i64(local_tid_38901) + 1) *
        (segscan_group_sizze_35134 * sdiv_up64(m_24751 * iota32_arg_25134,
                                               sext_i32_i64(num_threads_38851))) -
        1;
    
    int64_t gtid_34466;
    
    gtid_34466 = squot64(flat_idx_38913, iota32_arg_25134);
    
    int64_t gtid_34474;
    
    gtid_34474 = flat_idx_38913 - squot64(flat_idx_38913, iota32_arg_25134) *
        iota32_arg_25134;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_34466, m_24751) && slt64(gtid_34474, iota32_arg_25134)) {
            ((__local
              int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)] =
                ((__global int64_t *) mem_37465)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474];
            ((__local
              int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)] =
                ((__global int64_t *) mem_37468)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474];
            ((__local
              int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)] =
                ((__global int64_t *) mem_37471)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474];
            ((__local
              int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)] =
                ((__global int64_t *) mem_37474)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474];
        } else {
            ((__local
              int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_35142;
    int64_t x_35143;
    int64_t x_35144;
    int64_t x_35145;
    int64_t x_35146;
    int64_t x_35147;
    int64_t x_35148;
    int64_t x_35149;
    int64_t x_38914;
    int64_t x_38915;
    int64_t x_38916;
    int64_t x_38917;
    int64_t x_38918;
    int64_t x_38919;
    int64_t x_38920;
    int64_t x_38921;
    bool ltid_in_bounds_38926;
    
    ltid_in_bounds_38926 = slt64(sext_i32_i64(local_tid_38901),
                                 stage1_num_groups_38850);
    
    int32_t skip_threads_38927;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38926) {
            x_35146 = ((volatile __local
                        int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)];
            x_35147 = ((volatile __local
                        int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)];
            x_35148 = ((volatile __local
                        int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)];
            x_35149 = ((volatile __local
                        int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)];
            if ((local_tid_38901 - squot32(local_tid_38901, 32) * 32) == 0) {
                x_35142 = x_35146;
                x_35143 = x_35147;
                x_35144 = x_35148;
                x_35145 = x_35149;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38927 = 1;
        while (slt32(skip_threads_38927, 32)) {
            if (sle32(skip_threads_38927, local_tid_38901 -
                      squot32(local_tid_38901, 32) * 32) &&
                ltid_in_bounds_38926) {
                // read operands
                {
                    x_35142 = ((volatile __local
                                int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901) -
                                                               sext_i32_i64(skip_threads_38927)];
                    x_35143 = ((volatile __local
                                int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901) -
                                                               sext_i32_i64(skip_threads_38927)];
                    x_35144 = ((volatile __local
                                int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901) -
                                                               sext_i32_i64(skip_threads_38927)];
                    x_35145 = ((volatile __local
                                int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901) -
                                                               sext_i32_i64(skip_threads_38927)];
                }
                // perform operation
                {
                    bool inactive_38928 =
                         slt64(srem64((sext_i32_i64(local_tid_38901) + 1) *
                                      (segscan_group_sizze_35134 *
                                       sdiv_up64(m_24751 * iota32_arg_25134,
                                                 sext_i32_i64(num_threads_38851))) -
                                      1, iota32_arg_25134),
                               (sext_i32_i64(local_tid_38901) + 1) *
                               (segscan_group_sizze_35134 * sdiv_up64(m_24751 *
                                                                      iota32_arg_25134,
                                                                      sext_i32_i64(num_threads_38851))) -
                               1 - ((sext_i32_i64(local_tid_38901 -
                                     skip_threads_38927) + 1) *
                                    (segscan_group_sizze_35134 *
                                     sdiv_up64(m_24751 * iota32_arg_25134,
                                               sext_i32_i64(num_threads_38851))) -
                                    1));
                    
                    if (inactive_38928) {
                        x_35142 = x_35146;
                        x_35143 = x_35147;
                        x_35144 = x_35148;
                        x_35145 = x_35149;
                    }
                    if (!inactive_38928) {
                        int64_t res_35150 = add64(x_35142, x_35146);
                        int64_t res_35151 = add64(x_35143, x_35147);
                        int64_t res_35152 = add64(x_35144, x_35148);
                        int64_t res_35153 = add64(x_35145, x_35149);
                        
                        x_35142 = res_35150;
                        x_35143 = res_35151;
                        x_35144 = res_35152;
                        x_35145 = res_35153;
                    }
                }
            }
            if (sle32(wave_sizze_38903, skip_threads_38927)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38927, local_tid_38901 -
                      squot32(local_tid_38901, 32) * 32) &&
                ltid_in_bounds_38926) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)] =
                        x_35142;
                    x_35146 = x_35142;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)] =
                        x_35143;
                    x_35147 = x_35143;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)] =
                        x_35144;
                    x_35148 = x_35144;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)] =
                        x_35145;
                    x_35149 = x_35145;
                }
            }
            if (sle32(wave_sizze_38903, skip_threads_38927)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38927 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38901 - squot32(local_tid_38901, 32) * 32) == 31 &&
            ltid_in_bounds_38926) {
            ((volatile __local
              int64_t *) scan_arr_mem_38905)[sext_i32_i64(squot32(local_tid_38901,
                                                                  32))] =
                x_35142;
            ((volatile __local
              int64_t *) scan_arr_mem_38907)[sext_i32_i64(squot32(local_tid_38901,
                                                                  32))] =
                x_35143;
            ((volatile __local
              int64_t *) scan_arr_mem_38909)[sext_i32_i64(squot32(local_tid_38901,
                                                                  32))] =
                x_35144;
            ((volatile __local
              int64_t *) scan_arr_mem_38911)[sext_i32_i64(squot32(local_tid_38901,
                                                                  32))] =
                x_35145;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38929;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38901, 32) == 0 && ltid_in_bounds_38926) {
                x_38918 = ((volatile __local
                            int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)];
                x_38919 = ((volatile __local
                            int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)];
                x_38920 = ((volatile __local
                            int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)];
                x_38921 = ((volatile __local
                            int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)];
                if ((local_tid_38901 - squot32(local_tid_38901, 32) * 32) ==
                    0) {
                    x_38914 = x_38918;
                    x_38915 = x_38919;
                    x_38916 = x_38920;
                    x_38917 = x_38921;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38929 = 1;
            while (slt32(skip_threads_38929, 32)) {
                if (sle32(skip_threads_38929, local_tid_38901 -
                          squot32(local_tid_38901, 32) * 32) &&
                    (squot32(local_tid_38901, 32) == 0 &&
                     ltid_in_bounds_38926)) {
                    // read operands
                    {
                        x_38914 = ((volatile __local
                                    int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901) -
                                                                   sext_i32_i64(skip_threads_38929)];
                        x_38915 = ((volatile __local
                                    int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901) -
                                                                   sext_i32_i64(skip_threads_38929)];
                        x_38916 = ((volatile __local
                                    int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901) -
                                                                   sext_i32_i64(skip_threads_38929)];
                        x_38917 = ((volatile __local
                                    int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901) -
                                                                   sext_i32_i64(skip_threads_38929)];
                    }
                    // perform operation
                    {
                        bool inactive_38930 =
                             slt64(srem64((sext_i32_i64(local_tid_38901 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_35134 *
                                           sdiv_up64(m_24751 * iota32_arg_25134,
                                                     sext_i32_i64(num_threads_38851))) -
                                          1, iota32_arg_25134),
                                   (sext_i32_i64(local_tid_38901 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_35134 *
                                               sdiv_up64(m_24751 *
                                                         iota32_arg_25134,
                                                         sext_i32_i64(num_threads_38851))) -
                                   1 - ((sext_i32_i64((local_tid_38901 -
                                                       skip_threads_38929) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_35134 *
                                         sdiv_up64(m_24751 * iota32_arg_25134,
                                                   sext_i32_i64(num_threads_38851))) -
                                        1));
                        
                        if (inactive_38930) {
                            x_38914 = x_38918;
                            x_38915 = x_38919;
                            x_38916 = x_38920;
                            x_38917 = x_38921;
                        }
                        if (!inactive_38930) {
                            int64_t res_38922 = add64(x_38914, x_38918);
                            int64_t res_38923 = add64(x_38915, x_38919);
                            int64_t res_38924 = add64(x_38916, x_38920);
                            int64_t res_38925 = add64(x_38917, x_38921);
                            
                            x_38914 = res_38922;
                            x_38915 = res_38923;
                            x_38916 = res_38924;
                            x_38917 = res_38925;
                        }
                    }
                }
                if (sle32(wave_sizze_38903, skip_threads_38929)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38929, local_tid_38901 -
                          squot32(local_tid_38901, 32) * 32) &&
                    (squot32(local_tid_38901, 32) == 0 &&
                     ltid_in_bounds_38926)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)] =
                            x_38914;
                        x_38918 = x_38914;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)] =
                            x_38915;
                        x_38919 = x_38915;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)] =
                            x_38916;
                        x_38920 = x_38916;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)] =
                            x_38917;
                        x_38921 = x_38917;
                    }
                }
                if (sle32(wave_sizze_38903, skip_threads_38929)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38929 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38901, 32) == 0 || !ltid_in_bounds_38926)) {
            // read operands
            {
                x_35146 = x_35142;
                x_35147 = x_35143;
                x_35148 = x_35144;
                x_35149 = x_35145;
                x_35142 = ((__local
                            int64_t *) scan_arr_mem_38905)[sext_i32_i64(squot32(local_tid_38901,
                                                                                32)) -
                                                           1];
                x_35143 = ((__local
                            int64_t *) scan_arr_mem_38907)[sext_i32_i64(squot32(local_tid_38901,
                                                                                32)) -
                                                           1];
                x_35144 = ((__local
                            int64_t *) scan_arr_mem_38909)[sext_i32_i64(squot32(local_tid_38901,
                                                                                32)) -
                                                           1];
                x_35145 = ((__local
                            int64_t *) scan_arr_mem_38911)[sext_i32_i64(squot32(local_tid_38901,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_38931 =
                     slt64(srem64((sext_i32_i64(local_tid_38901) + 1) *
                                  (segscan_group_sizze_35134 *
                                   sdiv_up64(m_24751 * iota32_arg_25134,
                                             sext_i32_i64(num_threads_38851))) -
                                  1, iota32_arg_25134),
                           (sext_i32_i64(local_tid_38901) + 1) *
                           (segscan_group_sizze_35134 * sdiv_up64(m_24751 *
                                                                  iota32_arg_25134,
                                                                  sext_i32_i64(num_threads_38851))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38901, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_35134 *
                                                 sdiv_up64(m_24751 *
                                                           iota32_arg_25134,
                                                           sext_i32_i64(num_threads_38851))) -
                                1));
                
                if (inactive_38931) {
                    x_35142 = x_35146;
                    x_35143 = x_35147;
                    x_35144 = x_35148;
                    x_35145 = x_35149;
                }
                if (!inactive_38931) {
                    int64_t res_35150 = add64(x_35142, x_35146);
                    int64_t res_35151 = add64(x_35143, x_35147);
                    int64_t res_35152 = add64(x_35144, x_35148);
                    int64_t res_35153 = add64(x_35145, x_35149);
                    
                    x_35142 = res_35150;
                    x_35143 = res_35151;
                    x_35144 = res_35152;
                    x_35145 = res_35153;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)] =
                    x_35142;
                ((__local
                  int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)] =
                    x_35143;
                ((__local
                  int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)] =
                    x_35144;
                ((__local
                  int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)] =
                    x_35145;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38901, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)] =
                x_35146;
            ((__local
              int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)] =
                x_35147;
            ((__local
              int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)] =
                x_35148;
            ((__local
              int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)] =
                x_35149;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_34466, m_24751) && slt64(gtid_34474, iota32_arg_25134)) {
            ((__global int64_t *) mem_37465)[gtid_34466 * iota32_arg_25134 +
                                             gtid_34474] = ((__local
                                                             int64_t *) scan_arr_mem_38905)[sext_i32_i64(local_tid_38901)];
            ((__global int64_t *) mem_37468)[gtid_34466 * iota32_arg_25134 +
                                             gtid_34474] = ((__local
                                                             int64_t *) scan_arr_mem_38907)[sext_i32_i64(local_tid_38901)];
            ((__global int64_t *) mem_37471)[gtid_34466 * iota32_arg_25134 +
                                             gtid_34474] = ((__local
                                                             int64_t *) scan_arr_mem_38909)[sext_i32_i64(local_tid_38901)];
            ((__global int64_t *) mem_37474)[gtid_34466 * iota32_arg_25134 +
                                             gtid_34474] = ((__local
                                                             int64_t *) scan_arr_mem_38911)[sext_i32_i64(local_tid_38901)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_35134
}
__kernel void mainziscan_stage2_34819(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_38686_backing_aligned_0,
                                      int64_t m_24751, int64_t iota32_arg_25134,
                                      __global unsigned char *mem_37412,
                                      int64_t stage1_num_groups_38655,
                                      int32_t num_threads_38656)
{
    #define segscan_group_sizze_34898 (mainzisegscan_group_sizze_34813)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38686_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38686_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38681;
    int32_t local_tid_38682;
    int64_t group_sizze_38685;
    int32_t wave_sizze_38684;
    int32_t group_tid_38683;
    
    global_tid_38681 = get_global_id(0);
    local_tid_38682 = get_local_id(0);
    group_sizze_38685 = get_local_size(0);
    wave_sizze_38684 = LOCKSTEP_WIDTH;
    group_tid_38683 = get_group_id(0);
    
    int32_t phys_tid_34819;
    
    phys_tid_34819 = global_tid_38681;
    
    __local char *scan_arr_mem_38686;
    
    scan_arr_mem_38686 = (__local char *) scan_arr_mem_38686_backing_0;
    
    int64_t flat_idx_38688;
    
    flat_idx_38688 = (sext_i32_i64(local_tid_38682) + 1) *
        (segscan_group_sizze_34898 * sdiv_up64(m_24751 * iota32_arg_25134,
                                               sext_i32_i64(num_threads_38656))) -
        1;
    
    int64_t gtid_34810;
    
    gtid_34810 = squot64(flat_idx_38688, iota32_arg_25134);
    
    int64_t gtid_34818;
    
    gtid_34818 = flat_idx_38688 - squot64(flat_idx_38688, iota32_arg_25134) *
        iota32_arg_25134;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_34810, m_24751) && slt64(gtid_34818, iota32_arg_25134)) {
            ((__local
              float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)] =
                ((__global float *) mem_37412)[gtid_34810 * iota32_arg_25134 +
                                               gtid_34818];
        } else {
            ((__local
              float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_34902;
    float x_34903;
    float x_38689;
    float x_38690;
    bool ltid_in_bounds_38692;
    
    ltid_in_bounds_38692 = slt64(sext_i32_i64(local_tid_38682),
                                 stage1_num_groups_38655);
    
    int32_t skip_threads_38693;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38692) {
            x_34903 = ((volatile __local
                        float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)];
            if ((local_tid_38682 - squot32(local_tid_38682, 32) * 32) == 0) {
                x_34902 = x_34903;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38693 = 1;
        while (slt32(skip_threads_38693, 32)) {
            if (sle32(skip_threads_38693, local_tid_38682 -
                      squot32(local_tid_38682, 32) * 32) &&
                ltid_in_bounds_38692) {
                // read operands
                {
                    x_34902 = ((volatile __local
                                float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682) -
                                                             sext_i32_i64(skip_threads_38693)];
                }
                // perform operation
                {
                    bool inactive_38694 =
                         slt64(srem64((sext_i32_i64(local_tid_38682) + 1) *
                                      (segscan_group_sizze_34898 *
                                       sdiv_up64(m_24751 * iota32_arg_25134,
                                                 sext_i32_i64(num_threads_38656))) -
                                      1, iota32_arg_25134),
                               (sext_i32_i64(local_tid_38682) + 1) *
                               (segscan_group_sizze_34898 * sdiv_up64(m_24751 *
                                                                      iota32_arg_25134,
                                                                      sext_i32_i64(num_threads_38656))) -
                               1 - ((sext_i32_i64(local_tid_38682 -
                                     skip_threads_38693) + 1) *
                                    (segscan_group_sizze_34898 *
                                     sdiv_up64(m_24751 * iota32_arg_25134,
                                               sext_i32_i64(num_threads_38656))) -
                                    1));
                    
                    if (inactive_38694) {
                        x_34902 = x_34903;
                    }
                    if (!inactive_38694) {
                        float res_34904 = x_34902 + x_34903;
                        
                        x_34902 = res_34904;
                    }
                }
            }
            if (sle32(wave_sizze_38684, skip_threads_38693)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38693, local_tid_38682 -
                      squot32(local_tid_38682, 32) * 32) &&
                ltid_in_bounds_38692) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)] =
                        x_34902;
                    x_34903 = x_34902;
                }
            }
            if (sle32(wave_sizze_38684, skip_threads_38693)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38693 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38682 - squot32(local_tid_38682, 32) * 32) == 31 &&
            ltid_in_bounds_38692) {
            ((volatile __local
              float *) scan_arr_mem_38686)[sext_i32_i64(squot32(local_tid_38682,
                                                                32))] = x_34902;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38695;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38682, 32) == 0 && ltid_in_bounds_38692) {
                x_38690 = ((volatile __local
                            float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)];
                if ((local_tid_38682 - squot32(local_tid_38682, 32) * 32) ==
                    0) {
                    x_38689 = x_38690;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38695 = 1;
            while (slt32(skip_threads_38695, 32)) {
                if (sle32(skip_threads_38695, local_tid_38682 -
                          squot32(local_tid_38682, 32) * 32) &&
                    (squot32(local_tid_38682, 32) == 0 &&
                     ltid_in_bounds_38692)) {
                    // read operands
                    {
                        x_38689 = ((volatile __local
                                    float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682) -
                                                                 sext_i32_i64(skip_threads_38695)];
                    }
                    // perform operation
                    {
                        bool inactive_38696 =
                             slt64(srem64((sext_i32_i64(local_tid_38682 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_34898 *
                                           sdiv_up64(m_24751 * iota32_arg_25134,
                                                     sext_i32_i64(num_threads_38656))) -
                                          1, iota32_arg_25134),
                                   (sext_i32_i64(local_tid_38682 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_34898 *
                                               sdiv_up64(m_24751 *
                                                         iota32_arg_25134,
                                                         sext_i32_i64(num_threads_38656))) -
                                   1 - ((sext_i32_i64((local_tid_38682 -
                                                       skip_threads_38695) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_34898 *
                                         sdiv_up64(m_24751 * iota32_arg_25134,
                                                   sext_i32_i64(num_threads_38656))) -
                                        1));
                        
                        if (inactive_38696) {
                            x_38689 = x_38690;
                        }
                        if (!inactive_38696) {
                            float res_38691 = x_38689 + x_38690;
                            
                            x_38689 = res_38691;
                        }
                    }
                }
                if (sle32(wave_sizze_38684, skip_threads_38695)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38695, local_tid_38682 -
                          squot32(local_tid_38682, 32) * 32) &&
                    (squot32(local_tid_38682, 32) == 0 &&
                     ltid_in_bounds_38692)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)] =
                            x_38689;
                        x_38690 = x_38689;
                    }
                }
                if (sle32(wave_sizze_38684, skip_threads_38695)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38695 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38682, 32) == 0 || !ltid_in_bounds_38692)) {
            // read operands
            {
                x_34903 = x_34902;
                x_34902 = ((__local
                            float *) scan_arr_mem_38686)[sext_i32_i64(squot32(local_tid_38682,
                                                                              32)) -
                                                         1];
            }
            // perform operation
            {
                bool inactive_38697 =
                     slt64(srem64((sext_i32_i64(local_tid_38682) + 1) *
                                  (segscan_group_sizze_34898 *
                                   sdiv_up64(m_24751 * iota32_arg_25134,
                                             sext_i32_i64(num_threads_38656))) -
                                  1, iota32_arg_25134),
                           (sext_i32_i64(local_tid_38682) + 1) *
                           (segscan_group_sizze_34898 * sdiv_up64(m_24751 *
                                                                  iota32_arg_25134,
                                                                  sext_i32_i64(num_threads_38656))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38682, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_34898 *
                                                 sdiv_up64(m_24751 *
                                                           iota32_arg_25134,
                                                           sext_i32_i64(num_threads_38656))) -
                                1));
                
                if (inactive_38697) {
                    x_34902 = x_34903;
                }
                if (!inactive_38697) {
                    float res_34904 = x_34902 + x_34903;
                    
                    x_34902 = res_34904;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)] =
                    x_34902;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38682, 32) == 0) {
            ((__local
              float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)] =
                x_34903;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_34810, m_24751) && slt64(gtid_34818, iota32_arg_25134)) {
            ((__global float *) mem_37412)[gtid_34810 * iota32_arg_25134 +
                                           gtid_34818] = ((__local
                                                           float *) scan_arr_mem_38686)[sext_i32_i64(local_tid_38682)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_34898
}
__kernel void mainziscan_stage3_32801(__global int *global_failure,
                                      int64_t N_24750, int64_t m_24751,
                                      int64_t num_groups_32819, __global
                                      unsigned char *mem_37102,
                                      int32_t num_threads_38239,
                                      int32_t required_groups_38281)
{
    #define segscan_group_sizze_32818 (mainzisegscan_group_sizze_32795)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38282;
    int32_t local_tid_38283;
    int64_t group_sizze_38286;
    int32_t wave_sizze_38285;
    int32_t group_tid_38284;
    
    global_tid_38282 = get_global_id(0);
    local_tid_38283 = get_local_id(0);
    group_sizze_38286 = get_local_size(0);
    wave_sizze_38285 = LOCKSTEP_WIDTH;
    group_tid_38284 = get_group_id(0);
    
    int32_t phys_tid_32801;
    
    phys_tid_32801 = global_tid_38282;
    
    int32_t phys_group_id_38287;
    
    phys_group_id_38287 = get_group_id(0);
    for (int32_t i_38288 = 0; i_38288 < sdiv_up32(required_groups_38281 -
                                                  phys_group_id_38287,
                                                  sext_i64_i32(num_groups_32819));
         i_38288++) {
        int32_t virt_group_id_38289 = phys_group_id_38287 + i_38288 *
                sext_i64_i32(num_groups_32819);
        int64_t flat_idx_38290 = sext_i32_i64(virt_group_id_38289) *
                segscan_group_sizze_32818 + sext_i32_i64(local_tid_38283);
        int64_t gtid_32792 = squot64(flat_idx_38290, N_24750);
        int64_t gtid_32800 = flat_idx_38290 - squot64(flat_idx_38290, N_24750) *
                N_24750;
        int64_t orig_group_38291 = squot64(flat_idx_38290,
                                           segscan_group_sizze_32818 *
                                           sdiv_up64(m_24751 * N_24750,
                                                     sext_i32_i64(num_threads_38239)));
        int64_t carry_in_flat_idx_38292 = orig_group_38291 *
                (segscan_group_sizze_32818 * sdiv_up64(m_24751 * N_24750,
                                                       sext_i32_i64(num_threads_38239))) -
                1;
        
        if (slt64(gtid_32792, m_24751) && slt64(gtid_32800, N_24750)) {
            if (!(orig_group_38291 == 0 || (flat_idx_38290 ==
                                            (orig_group_38291 + 1) *
                                            (segscan_group_sizze_32818 *
                                             sdiv_up64(m_24751 * N_24750,
                                                       sext_i32_i64(num_threads_38239))) -
                                            1 || slt64(srem64(flat_idx_38290,
                                                              N_24750),
                                                       flat_idx_38290 -
                                                       carry_in_flat_idx_38292)))) {
                int64_t x_32823;
                int64_t x_32824;
                
                x_32823 = ((__global
                            int64_t *) mem_37102)[squot64(carry_in_flat_idx_38292,
                                                          N_24750) * N_24750 +
                                                  (carry_in_flat_idx_38292 -
                                                   squot64(carry_in_flat_idx_38292,
                                                           N_24750) * N_24750)];
                x_32824 = ((__global int64_t *) mem_37102)[gtid_32792 *
                                                           N_24750 +
                                                           gtid_32800];
                
                int64_t res_32825;
                
                res_32825 = add64(x_32823, x_32824);
                x_32823 = res_32825;
                ((__global int64_t *) mem_37102)[gtid_32792 * N_24750 +
                                                 gtid_32800] = x_32823;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_32818
}
__kernel void mainziscan_stage3_34475(__global int *global_failure,
                                      int64_t m_24751, int64_t iota32_arg_25134,
                                      int64_t num_groups_35135, __global
                                      unsigned char *mem_37465, __global
                                      unsigned char *mem_37468, __global
                                      unsigned char *mem_37471, __global
                                      unsigned char *mem_37474,
                                      int32_t num_threads_38851,
                                      int32_t required_groups_38932)
{
    #define segscan_group_sizze_35134 (mainzisegscan_group_sizze_34469)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38933;
    int32_t local_tid_38934;
    int64_t group_sizze_38937;
    int32_t wave_sizze_38936;
    int32_t group_tid_38935;
    
    global_tid_38933 = get_global_id(0);
    local_tid_38934 = get_local_id(0);
    group_sizze_38937 = get_local_size(0);
    wave_sizze_38936 = LOCKSTEP_WIDTH;
    group_tid_38935 = get_group_id(0);
    
    int32_t phys_tid_34475;
    
    phys_tid_34475 = global_tid_38933;
    
    int32_t phys_group_id_38938;
    
    phys_group_id_38938 = get_group_id(0);
    for (int32_t i_38939 = 0; i_38939 < sdiv_up32(required_groups_38932 -
                                                  phys_group_id_38938,
                                                  sext_i64_i32(num_groups_35135));
         i_38939++) {
        int32_t virt_group_id_38940 = phys_group_id_38938 + i_38939 *
                sext_i64_i32(num_groups_35135);
        int64_t flat_idx_38941 = sext_i32_i64(virt_group_id_38940) *
                segscan_group_sizze_35134 + sext_i32_i64(local_tid_38934);
        int64_t gtid_34466 = squot64(flat_idx_38941, iota32_arg_25134);
        int64_t gtid_34474 = flat_idx_38941 - squot64(flat_idx_38941,
                                                      iota32_arg_25134) *
                iota32_arg_25134;
        int64_t orig_group_38942 = squot64(flat_idx_38941,
                                           segscan_group_sizze_35134 *
                                           sdiv_up64(m_24751 * iota32_arg_25134,
                                                     sext_i32_i64(num_threads_38851)));
        int64_t carry_in_flat_idx_38943 = orig_group_38942 *
                (segscan_group_sizze_35134 * sdiv_up64(m_24751 *
                                                       iota32_arg_25134,
                                                       sext_i32_i64(num_threads_38851))) -
                1;
        
        if (slt64(gtid_34466, m_24751) && slt64(gtid_34474, iota32_arg_25134)) {
            if (!(orig_group_38942 == 0 || (flat_idx_38941 ==
                                            (orig_group_38942 + 1) *
                                            (segscan_group_sizze_35134 *
                                             sdiv_up64(m_24751 *
                                                       iota32_arg_25134,
                                                       sext_i32_i64(num_threads_38851))) -
                                            1 || slt64(srem64(flat_idx_38941,
                                                              iota32_arg_25134),
                                                       flat_idx_38941 -
                                                       carry_in_flat_idx_38943)))) {
                int64_t x_35142;
                int64_t x_35143;
                int64_t x_35144;
                int64_t x_35145;
                int64_t x_35146;
                int64_t x_35147;
                int64_t x_35148;
                int64_t x_35149;
                
                x_35142 = ((__global
                            int64_t *) mem_37465)[squot64(carry_in_flat_idx_38943,
                                                          iota32_arg_25134) *
                                                  iota32_arg_25134 +
                                                  (carry_in_flat_idx_38943 -
                                                   squot64(carry_in_flat_idx_38943,
                                                           iota32_arg_25134) *
                                                   iota32_arg_25134)];
                x_35143 = ((__global
                            int64_t *) mem_37468)[squot64(carry_in_flat_idx_38943,
                                                          iota32_arg_25134) *
                                                  iota32_arg_25134 +
                                                  (carry_in_flat_idx_38943 -
                                                   squot64(carry_in_flat_idx_38943,
                                                           iota32_arg_25134) *
                                                   iota32_arg_25134)];
                x_35144 = ((__global
                            int64_t *) mem_37471)[squot64(carry_in_flat_idx_38943,
                                                          iota32_arg_25134) *
                                                  iota32_arg_25134 +
                                                  (carry_in_flat_idx_38943 -
                                                   squot64(carry_in_flat_idx_38943,
                                                           iota32_arg_25134) *
                                                   iota32_arg_25134)];
                x_35145 = ((__global
                            int64_t *) mem_37474)[squot64(carry_in_flat_idx_38943,
                                                          iota32_arg_25134) *
                                                  iota32_arg_25134 +
                                                  (carry_in_flat_idx_38943 -
                                                   squot64(carry_in_flat_idx_38943,
                                                           iota32_arg_25134) *
                                                   iota32_arg_25134)];
                x_35146 = ((__global int64_t *) mem_37465)[gtid_34466 *
                                                           iota32_arg_25134 +
                                                           gtid_34474];
                x_35147 = ((__global int64_t *) mem_37468)[gtid_34466 *
                                                           iota32_arg_25134 +
                                                           gtid_34474];
                x_35148 = ((__global int64_t *) mem_37471)[gtid_34466 *
                                                           iota32_arg_25134 +
                                                           gtid_34474];
                x_35149 = ((__global int64_t *) mem_37474)[gtid_34466 *
                                                           iota32_arg_25134 +
                                                           gtid_34474];
                
                int64_t res_35150;
                
                res_35150 = add64(x_35142, x_35146);
                
                int64_t res_35151 = add64(x_35143, x_35147);
                int64_t res_35152 = add64(x_35144, x_35148);
                int64_t res_35153 = add64(x_35145, x_35149);
                
                x_35142 = res_35150;
                x_35143 = res_35151;
                x_35144 = res_35152;
                x_35145 = res_35153;
                ((__global int64_t *) mem_37465)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474] = x_35142;
                ((__global int64_t *) mem_37468)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474] = x_35143;
                ((__global int64_t *) mem_37471)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474] = x_35144;
                ((__global int64_t *) mem_37474)[gtid_34466 * iota32_arg_25134 +
                                                 gtid_34474] = x_35145;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_35134
}
__kernel void mainziscan_stage3_34819(__global int *global_failure,
                                      int64_t m_24751, int64_t iota32_arg_25134,
                                      int64_t num_groups_34899, __global
                                      unsigned char *mem_37412,
                                      int32_t num_threads_38656,
                                      int32_t required_groups_38698)
{
    #define segscan_group_sizze_34898 (mainzisegscan_group_sizze_34813)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38699;
    int32_t local_tid_38700;
    int64_t group_sizze_38703;
    int32_t wave_sizze_38702;
    int32_t group_tid_38701;
    
    global_tid_38699 = get_global_id(0);
    local_tid_38700 = get_local_id(0);
    group_sizze_38703 = get_local_size(0);
    wave_sizze_38702 = LOCKSTEP_WIDTH;
    group_tid_38701 = get_group_id(0);
    
    int32_t phys_tid_34819;
    
    phys_tid_34819 = global_tid_38699;
    
    int32_t phys_group_id_38704;
    
    phys_group_id_38704 = get_group_id(0);
    for (int32_t i_38705 = 0; i_38705 < sdiv_up32(required_groups_38698 -
                                                  phys_group_id_38704,
                                                  sext_i64_i32(num_groups_34899));
         i_38705++) {
        int32_t virt_group_id_38706 = phys_group_id_38704 + i_38705 *
                sext_i64_i32(num_groups_34899);
        int64_t flat_idx_38707 = sext_i32_i64(virt_group_id_38706) *
                segscan_group_sizze_34898 + sext_i32_i64(local_tid_38700);
        int64_t gtid_34810 = squot64(flat_idx_38707, iota32_arg_25134);
        int64_t gtid_34818 = flat_idx_38707 - squot64(flat_idx_38707,
                                                      iota32_arg_25134) *
                iota32_arg_25134;
        int64_t orig_group_38708 = squot64(flat_idx_38707,
                                           segscan_group_sizze_34898 *
                                           sdiv_up64(m_24751 * iota32_arg_25134,
                                                     sext_i32_i64(num_threads_38656)));
        int64_t carry_in_flat_idx_38709 = orig_group_38708 *
                (segscan_group_sizze_34898 * sdiv_up64(m_24751 *
                                                       iota32_arg_25134,
                                                       sext_i32_i64(num_threads_38656))) -
                1;
        
        if (slt64(gtid_34810, m_24751) && slt64(gtid_34818, iota32_arg_25134)) {
            if (!(orig_group_38708 == 0 || (flat_idx_38707 ==
                                            (orig_group_38708 + 1) *
                                            (segscan_group_sizze_34898 *
                                             sdiv_up64(m_24751 *
                                                       iota32_arg_25134,
                                                       sext_i32_i64(num_threads_38656))) -
                                            1 || slt64(srem64(flat_idx_38707,
                                                              iota32_arg_25134),
                                                       flat_idx_38707 -
                                                       carry_in_flat_idx_38709)))) {
                float x_34902;
                float x_34903;
                
                x_34902 = ((__global
                            float *) mem_37412)[squot64(carry_in_flat_idx_38709,
                                                        iota32_arg_25134) *
                                                iota32_arg_25134 +
                                                (carry_in_flat_idx_38709 -
                                                 squot64(carry_in_flat_idx_38709,
                                                         iota32_arg_25134) *
                                                 iota32_arg_25134)];
                x_34903 = ((__global float *) mem_37412)[gtid_34810 *
                                                         iota32_arg_25134 +
                                                         gtid_34818];
                
                float res_34904;
                
                res_34904 = x_34902 + x_34903;
                x_34902 = res_34904;
                ((__global float *) mem_37412)[gtid_34810 * iota32_arg_25134 +
                                               gtid_34818] = x_34902;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_34898
}
__kernel void mainzisegmap_30598(__global int *global_failure, int64_t N_24750,
                                 float freq_24756, int64_t res_24770, __global
                                 unsigned char *mappingindices_mem_36651,
                                 __global unsigned char *mem_36656)
{
    #define segmap_group_sizze_30671 (mainzisegmap_group_sizze_30601)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37768;
    int32_t local_tid_37769;
    int64_t group_sizze_37772;
    int32_t wave_sizze_37771;
    int32_t group_tid_37770;
    
    global_tid_37768 = get_global_id(0);
    local_tid_37769 = get_local_id(0);
    group_sizze_37772 = get_local_size(0);
    wave_sizze_37771 = LOCKSTEP_WIDTH;
    group_tid_37770 = get_group_id(0);
    
    int32_t phys_tid_30598;
    
    phys_tid_30598 = global_tid_37768;
    
    int64_t gtid_30596;
    
    gtid_30596 = squot64(sext_i32_i64(group_tid_37770) *
                         segmap_group_sizze_30671 +
                         sext_i32_i64(local_tid_37769), N_24750);
    
    int64_t gtid_30597;
    
    gtid_30597 = sext_i32_i64(group_tid_37770) * segmap_group_sizze_30671 +
        sext_i32_i64(local_tid_37769) - squot64(sext_i32_i64(group_tid_37770) *
                                                segmap_group_sizze_30671 +
                                                sext_i32_i64(local_tid_37769),
                                                N_24750) * N_24750;
    if (slt64(gtid_30596, res_24770) && slt64(gtid_30597, N_24750)) {
        int32_t index_primexp_35303 = sext_i64_i32(gtid_30596);
        bool index_primexp_35300 = index_primexp_35303 == 0;
        float res_30677;
        
        if (index_primexp_35300) {
            res_30677 = 1.0F;
        } else {
            int32_t x_30676 = ((__global
                                int32_t *) mappingindices_mem_36651)[gtid_30597];
            bool cond_30678 = index_primexp_35303 == 1;
            float res_30679;
            
            if (cond_30678) {
                float res_30680 = sitofp_i32_f32(x_30676);
                
                res_30679 = res_30680;
            } else {
                int32_t r32_arg_30681 = sdiv32(index_primexp_35303, 2);
                float res_30682 = sitofp_i32_f32(r32_arg_30681);
                float res_30683 = sitofp_i32_f32(x_30676);
                float x_30684 = 6.2831855F * res_30682;
                float x_30685 = res_30683 * x_30684;
                float angle_30686 = x_30685 / freq_24756;
                int32_t x_30687 = smod32(index_primexp_35303, 2);
                bool cond_30688 = x_30687 == 0;
                float res_30689;
                
                if (cond_30688) {
                    float res_30690;
                    
                    res_30690 = futrts_sin32(angle_30686);
                    res_30689 = res_30690;
                } else {
                    float res_30691;
                    
                    res_30691 = futrts_cos32(angle_30686);
                    res_30689 = res_30691;
                }
                res_30679 = res_30689;
            }
            res_30677 = res_30679;
        }
        ((__global float *) mem_36656)[gtid_30596 * N_24750 + gtid_30597] =
            res_30677;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30671
}
__kernel void mainzisegmap_30776(__global int *global_failure, int64_t N_24750,
                                 float freq_24756, int64_t res_24770, __global
                                 unsigned char *mappingindices_mem_36651,
                                 __global unsigned char *mem_36660)
{
    #define segmap_group_sizze_30845 (mainzisegmap_group_sizze_30779)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37773;
    int32_t local_tid_37774;
    int64_t group_sizze_37777;
    int32_t wave_sizze_37776;
    int32_t group_tid_37775;
    
    global_tid_37773 = get_global_id(0);
    local_tid_37774 = get_local_id(0);
    group_sizze_37777 = get_local_size(0);
    wave_sizze_37776 = LOCKSTEP_WIDTH;
    group_tid_37775 = get_group_id(0);
    
    int32_t phys_tid_30776;
    
    phys_tid_30776 = global_tid_37773;
    
    int64_t gtid_30774;
    
    gtid_30774 = squot64(sext_i32_i64(group_tid_37775) *
                         segmap_group_sizze_30845 +
                         sext_i32_i64(local_tid_37774), N_24750);
    
    int64_t gtid_30775;
    
    gtid_30775 = sext_i32_i64(group_tid_37775) * segmap_group_sizze_30845 +
        sext_i32_i64(local_tid_37774) - squot64(sext_i32_i64(group_tid_37775) *
                                                segmap_group_sizze_30845 +
                                                sext_i32_i64(local_tid_37774),
                                                N_24750) * N_24750;
    if (slt64(gtid_30774, res_24770) && slt64(gtid_30775, N_24750)) {
        int32_t index_primexp_35312 = sext_i64_i32(gtid_30774);
        bool index_primexp_35309 = index_primexp_35312 == 0;
        float res_30851;
        
        if (index_primexp_35309) {
            res_30851 = 1.0F;
        } else {
            int32_t x_30850 = ((__global
                                int32_t *) mappingindices_mem_36651)[gtid_30775];
            int32_t i_30852 = add32(1, index_primexp_35312);
            int32_t r32_arg_30853 = sdiv32(i_30852, 2);
            float res_30854 = sitofp_i32_f32(r32_arg_30853);
            float res_30855 = sitofp_i32_f32(x_30850);
            float x_30856 = 6.2831855F * res_30854;
            float x_30857 = res_30855 * x_30856;
            float angle_30858 = x_30857 / freq_24756;
            int32_t x_30859 = smod32(i_30852, 2);
            bool cond_30860 = x_30859 == 0;
            float res_30861;
            
            if (cond_30860) {
                float res_30862;
                
                res_30862 = futrts_sin32(angle_30858);
                res_30861 = res_30862;
            } else {
                float res_30863;
                
                res_30863 = futrts_cos32(angle_30858);
                res_30861 = res_30863;
            }
            res_30851 = res_30861;
        }
        ((__global float *) mem_36660)[gtid_30774 * N_24750 + gtid_30775] =
            res_30851;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30845
}
__kernel void mainzisegmap_30904(__global int *global_failure, int64_t N_24750,
                                 int64_t res_24770, float res_24835, __global
                                 unsigned char *mem_36664, __global
                                 unsigned char *mem_36668)
{
    #define segmap_group_sizze_30928 (mainzisegmap_group_sizze_30907)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37778;
    int32_t local_tid_37779;
    int64_t group_sizze_37782;
    int32_t wave_sizze_37781;
    int32_t group_tid_37780;
    
    global_tid_37778 = get_global_id(0);
    local_tid_37779 = get_local_id(0);
    group_sizze_37782 = get_local_size(0);
    wave_sizze_37781 = LOCKSTEP_WIDTH;
    group_tid_37780 = get_group_id(0);
    
    int32_t phys_tid_30904;
    
    phys_tid_30904 = global_tid_37778;
    
    int64_t gtid_30902;
    
    gtid_30902 = squot64(sext_i32_i64(group_tid_37780) *
                         segmap_group_sizze_30928 +
                         sext_i32_i64(local_tid_37779), res_24770);
    
    int64_t gtid_30903;
    
    gtid_30903 = sext_i32_i64(group_tid_37780) * segmap_group_sizze_30928 +
        sext_i32_i64(local_tid_37779) - squot64(sext_i32_i64(group_tid_37780) *
                                                segmap_group_sizze_30928 +
                                                sext_i32_i64(local_tid_37779),
                                                res_24770) * res_24770;
    if (slt64(gtid_30902, N_24750) && slt64(gtid_30903, res_24770)) {
        float x_30931 = ((__global float *) mem_36664)[gtid_30902 * res_24770 +
                                                       gtid_30903];
        float res_30932 = res_24835 + x_30931;
        
        ((__global float *) mem_36668)[gtid_30902 * res_24770 + gtid_30903] =
            res_30932;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30928
}
__kernel void mainzisegmap_30937(__global int *global_failure, int64_t N_24750,
                                 int64_t m_24751, int32_t n_24755,
                                 int32_t k2p2zq_24768, int64_t res_24770,
                                 int64_t num_groups_30962, __global
                                 unsigned char *binop_p_mem_36661, __global
                                 unsigned char *mem_36668, __global
                                 unsigned char *mem_36671, __global
                                 unsigned char *mem_36675, __global
                                 unsigned char *mem_36717)
{
    #define segmap_group_sizze_30961 (mainzisegmap_group_sizze_30939)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37786;
    int32_t local_tid_37787;
    int64_t group_sizze_37790;
    int32_t wave_sizze_37789;
    int32_t group_tid_37788;
    
    global_tid_37786 = get_global_id(0);
    local_tid_37787 = get_local_id(0);
    group_sizze_37790 = get_local_size(0);
    wave_sizze_37789 = LOCKSTEP_WIDTH;
    group_tid_37788 = get_group_id(0);
    
    int32_t phys_tid_30937;
    
    phys_tid_30937 = global_tid_37786;
    
    int32_t phys_group_id_37791;
    
    phys_group_id_37791 = get_group_id(0);
    for (int32_t i_37792 = 0; i_37792 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751, segmap_group_sizze_30961)) -
                   phys_group_id_37791, sext_i64_i32(num_groups_30962));
         i_37792++) {
        int32_t virt_group_id_37793 = phys_group_id_37791 + i_37792 *
                sext_i64_i32(num_groups_30962);
        int64_t gtid_30936 = sext_i32_i64(virt_group_id_37793) *
                segmap_group_sizze_30961 + sext_i32_i64(local_tid_37787);
        
        if (slt64(gtid_30936, m_24751)) {
            for (int32_t i_36629 = 0; i_36629 < k2p2zq_24768; i_36629++) {
                int64_t i_36517 = sext_i32_i64(i_36629);
                
                for (int32_t i_36628 = 0; i_36628 < k2p2zq_24768; i_36628++) {
                    int64_t i_36521 = sext_i32_i64(i_36628);
                    float res_30970;
                    float redout_36523 = 0.0F;
                    
                    for (int32_t i_36627 = 0; i_36627 < n_24755; i_36627++) {
                        int64_t i_36524 = sext_i32_i64(i_36627);
                        float x_30974 = ((__global float *) mem_36671)[i_36524 *
                                                                       m_24751 +
                                                                       gtid_30936];
                        float x_30975 = ((__global
                                          float *) binop_p_mem_36661)[i_36517 *
                                                                      N_24750 +
                                                                      i_36524];
                        float x_30976 = ((__global float *) mem_36668)[i_36524 *
                                                                       res_24770 +
                                                                       i_36521];
                        float x_30977 = x_30975 * x_30976;
                        bool res_30978;
                        
                        res_30978 = futrts_isnan32(x_30974);
                        
                        float y_30979;
                        
                        if (res_30978) {
                            y_30979 = 0.0F;
                        } else {
                            y_30979 = 1.0F;
                        }
                        
                        float res_30980 = x_30977 * y_30979;
                        float res_30973 = res_30980 + redout_36523;
                        float redout_tmp_37796 = res_30973;
                        
                        redout_36523 = redout_tmp_37796;
                    }
                    res_30970 = redout_36523;
                    ((__global float *) mem_36675)[phys_tid_30937 + (i_36517 *
                                                                     (num_groups_30962 *
                                                                      segmap_group_sizze_30961 *
                                                                      res_24770) +
                                                                     i_36521 *
                                                                     (num_groups_30962 *
                                                                      segmap_group_sizze_30961))] =
                        res_30970;
                }
            }
            for (int64_t i_37797 = 0; i_37797 < res_24770; i_37797++) {
                for (int64_t i_37798 = 0; i_37798 < res_24770; i_37798++) {
                    ((__global float *) mem_36717)[i_37797 * (m_24751 *
                                                              res_24770) +
                                                   i_37798 * m_24751 +
                                                   gtid_30936] = ((__global
                                                                   float *) mem_36675)[phys_tid_30937 +
                                                                                       (i_37797 *
                                                                                        (num_groups_30962 *
                                                                                         segmap_group_sizze_30961 *
                                                                                         res_24770) +
                                                                                        i_37798 *
                                                                                        (num_groups_30962 *
                                                                                         segmap_group_sizze_30961))];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30961
}
__kernel void mainzisegmap_30983(__global int *global_failure, int64_t m_24751,
                                 int64_t N_24752, int32_t n_24755,
                                 int32_t k2p2zq_24768, int64_t res_24770,
                                 int64_t num_groups_31139, __global
                                 unsigned char *images_mem_36652, __global
                                 unsigned char *mem_36664, __global
                                 unsigned char *mem_36668, __global
                                 unsigned char *mem_36720, __global
                                 unsigned char *mem_36736)
{
    #define segmap_group_sizze_31138 (mainzisegmap_group_sizze_30986)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37799;
    int32_t local_tid_37800;
    int64_t group_sizze_37803;
    int32_t wave_sizze_37802;
    int32_t group_tid_37801;
    
    global_tid_37799 = get_global_id(0);
    local_tid_37800 = get_local_id(0);
    group_sizze_37803 = get_local_size(0);
    wave_sizze_37802 = LOCKSTEP_WIDTH;
    group_tid_37801 = get_group_id(0);
    
    int32_t phys_tid_30983;
    
    phys_tid_30983 = global_tid_37799;
    
    int32_t phys_group_id_37804;
    
    phys_group_id_37804 = get_group_id(0);
    for (int32_t i_37805 = 0; i_37805 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751 * res_24770,
                                          segmap_group_sizze_31138)) -
                   phys_group_id_37804, sext_i64_i32(num_groups_31139));
         i_37805++) {
        int32_t virt_group_id_37806 = phys_group_id_37804 + i_37805 *
                sext_i64_i32(num_groups_31139);
        int64_t gtid_30981 = squot64(sext_i32_i64(virt_group_id_37806) *
                                     segmap_group_sizze_31138 +
                                     sext_i32_i64(local_tid_37800), res_24770);
        int64_t gtid_30982 = sext_i32_i64(virt_group_id_37806) *
                segmap_group_sizze_31138 + sext_i32_i64(local_tid_37800) -
                squot64(sext_i32_i64(virt_group_id_37806) *
                        segmap_group_sizze_31138 +
                        sext_i32_i64(local_tid_37800), res_24770) * res_24770;
        
        if (slt64(gtid_30981, m_24751) && slt64(gtid_30982, res_24770)) {
            for (int32_t i_36631 = 0; i_36631 < k2p2zq_24768; i_36631++) {
                int64_t i_36527 = sext_i32_i64(i_36631);
                float res_31150;
                float redout_36529 = 0.0F;
                
                for (int32_t i_36630 = 0; i_36630 < n_24755; i_36630++) {
                    int64_t i_36530 = sext_i32_i64(i_36630);
                    float x_31154 = ((__global
                                      float *) images_mem_36652)[gtid_30981 *
                                                                 N_24752 +
                                                                 i_36530];
                    float x_31155 = ((__global float *) mem_36664)[i_36530 *
                                                                   res_24770 +
                                                                   gtid_30982];
                    float x_31156 = ((__global float *) mem_36668)[i_36530 *
                                                                   res_24770 +
                                                                   i_36527];
                    float x_31157 = x_31155 * x_31156;
                    bool res_31158;
                    
                    res_31158 = futrts_isnan32(x_31154);
                    
                    float y_31159;
                    
                    if (res_31158) {
                        y_31159 = 0.0F;
                    } else {
                        y_31159 = 1.0F;
                    }
                    
                    float res_31160 = x_31157 * y_31159;
                    float res_31153 = res_31160 + redout_36529;
                    float redout_tmp_37808 = res_31153;
                    
                    redout_36529 = redout_tmp_37808;
                }
                res_31150 = redout_36529;
                ((__global float *) mem_36720)[phys_tid_30983 + i_36527 *
                                               (num_groups_31139 *
                                                segmap_group_sizze_31138)] =
                    res_31150;
            }
            for (int64_t i_37809 = 0; i_37809 < res_24770; i_37809++) {
                ((__global float *) mem_36736)[i_37809 * (res_24770 * m_24751) +
                                               gtid_30981 * res_24770 +
                                               gtid_30982] = ((__global
                                                               float *) mem_36720)[phys_tid_30983 +
                                                                                   i_37809 *
                                                                                   (num_groups_31139 *
                                                                                    segmap_group_sizze_31138)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31138
}
__kernel void mainzisegmap_31013(__global int *global_failure, int64_t m_24751,
                                 int64_t N_24752, int32_t n_24755,
                                 int64_t res_24770, __global
                                 unsigned char *images_mem_36652, __global
                                 unsigned char *mem_36664, __global
                                 unsigned char *mem_36668, __global
                                 unsigned char *mem_36741)
{
    #define segmap_group_sizze_31164 (mainzisegmap_group_sizze_31017)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37810;
    int32_t local_tid_37811;
    int64_t group_sizze_37814;
    int32_t wave_sizze_37813;
    int32_t group_tid_37812;
    
    global_tid_37810 = get_global_id(0);
    local_tid_37811 = get_local_id(0);
    group_sizze_37814 = get_local_size(0);
    wave_sizze_37813 = LOCKSTEP_WIDTH;
    group_tid_37812 = get_group_id(0);
    
    int32_t phys_tid_31013;
    
    phys_tid_31013 = global_tid_37810;
    
    int64_t gtid_31010;
    
    gtid_31010 = squot64(sext_i32_i64(group_tid_37812) *
                         segmap_group_sizze_31164 +
                         sext_i32_i64(local_tid_37811), res_24770 * res_24770);
    
    int64_t gtid_31011;
    
    gtid_31011 = squot64(sext_i32_i64(group_tid_37812) *
                         segmap_group_sizze_31164 +
                         sext_i32_i64(local_tid_37811) -
                         squot64(sext_i32_i64(group_tid_37812) *
                                 segmap_group_sizze_31164 +
                                 sext_i32_i64(local_tid_37811), res_24770 *
                                 res_24770) * (res_24770 * res_24770),
                         res_24770);
    
    int64_t gtid_31012;
    
    gtid_31012 = sext_i32_i64(group_tid_37812) * segmap_group_sizze_31164 +
        sext_i32_i64(local_tid_37811) - squot64(sext_i32_i64(group_tid_37812) *
                                                segmap_group_sizze_31164 +
                                                sext_i32_i64(local_tid_37811),
                                                res_24770 * res_24770) *
        (res_24770 * res_24770) - squot64(sext_i32_i64(group_tid_37812) *
                                          segmap_group_sizze_31164 +
                                          sext_i32_i64(local_tid_37811) -
                                          squot64(sext_i32_i64(group_tid_37812) *
                                                  segmap_group_sizze_31164 +
                                                  sext_i32_i64(local_tid_37811),
                                                  res_24770 * res_24770) *
                                          (res_24770 * res_24770), res_24770) *
        res_24770;
    if ((slt64(gtid_31010, m_24751) && slt64(gtid_31011, res_24770)) &&
        slt64(gtid_31012, res_24770)) {
        float res_31175;
        float redout_36531 = 0.0F;
        
        for (int32_t i_36632 = 0; i_36632 < n_24755; i_36632++) {
            int64_t i_36532 = sext_i32_i64(i_36632);
            float x_31179 = ((__global float *) images_mem_36652)[gtid_31010 *
                                                                  N_24752 +
                                                                  i_36532];
            float x_31180 = ((__global float *) mem_36664)[i_36532 * res_24770 +
                                                           gtid_31011];
            float x_31181 = ((__global float *) mem_36668)[i_36532 * res_24770 +
                                                           gtid_31012];
            float x_31182 = x_31180 * x_31181;
            bool res_31183;
            
            res_31183 = futrts_isnan32(x_31179);
            
            float y_31184;
            
            if (res_31183) {
                y_31184 = 0.0F;
            } else {
                y_31184 = 1.0F;
            }
            
            float res_31185 = x_31182 * y_31184;
            float res_31178 = res_31185 + redout_36531;
            float redout_tmp_37815 = res_31178;
            
            redout_36531 = redout_tmp_37815;
        }
        res_31175 = redout_36531;
        ((__global float *) mem_36741)[gtid_31010 * (res_24770 * res_24770) +
                                       gtid_31011 * res_24770 + gtid_31012] =
            res_31175;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31164
}
__kernel void mainzisegmap_31517(__global int *global_failure, int64_t m_24751,
                                 int64_t res_24770, int64_t m_24901,
                                 int64_t res_r_ixfn_36834,
                                 int64_t res_r_ixfn_36835,
                                 int64_t res_r_ixfn_36837, __global
                                 unsigned char *res_r_mem_36839, __global
                                 unsigned char *mem_36844)
{
    #define segmap_group_sizze_32140 (mainzisegmap_group_sizze_31521)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37938;
    int32_t local_tid_37939;
    int64_t group_sizze_37942;
    int32_t wave_sizze_37941;
    int32_t group_tid_37940;
    
    global_tid_37938 = get_global_id(0);
    local_tid_37939 = get_local_id(0);
    group_sizze_37942 = get_local_size(0);
    wave_sizze_37941 = LOCKSTEP_WIDTH;
    group_tid_37940 = get_group_id(0);
    
    int32_t phys_tid_31517;
    
    phys_tid_31517 = global_tid_37938;
    
    int64_t gtid_31514;
    
    gtid_31514 = squot64(sext_i32_i64(group_tid_37940) *
                         segmap_group_sizze_32140 +
                         sext_i32_i64(local_tid_37939), res_24770 * res_24770);
    
    int64_t gtid_31515;
    
    gtid_31515 = squot64(sext_i32_i64(group_tid_37940) *
                         segmap_group_sizze_32140 +
                         sext_i32_i64(local_tid_37939) -
                         squot64(sext_i32_i64(group_tid_37940) *
                                 segmap_group_sizze_32140 +
                                 sext_i32_i64(local_tid_37939), res_24770 *
                                 res_24770) * (res_24770 * res_24770),
                         res_24770);
    
    int64_t gtid_31516;
    
    gtid_31516 = sext_i32_i64(group_tid_37940) * segmap_group_sizze_32140 +
        sext_i32_i64(local_tid_37939) - squot64(sext_i32_i64(group_tid_37940) *
                                                segmap_group_sizze_32140 +
                                                sext_i32_i64(local_tid_37939),
                                                res_24770 * res_24770) *
        (res_24770 * res_24770) - squot64(sext_i32_i64(group_tid_37940) *
                                          segmap_group_sizze_32140 +
                                          sext_i32_i64(local_tid_37939) -
                                          squot64(sext_i32_i64(group_tid_37940) *
                                                  segmap_group_sizze_32140 +
                                                  sext_i32_i64(local_tid_37939),
                                                  res_24770 * res_24770) *
                                          (res_24770 * res_24770), res_24770) *
        res_24770;
    if ((slt64(gtid_31514, m_24751) && slt64(gtid_31515, res_24770)) &&
        slt64(gtid_31516, res_24770)) {
        int64_t index_primexp_35342 = m_24901 * gtid_31515;
        int64_t i_32146 = add64(res_24770, gtid_31516);
        int64_t new_index_32147 = i_32146 + index_primexp_35342;
        float res_32148 = ((__global
                            float *) res_r_mem_36839)[res_r_ixfn_36834 +
                                                      (gtid_31514 *
                                                       res_r_ixfn_36835 +
                                                       new_index_32147 *
                                                       res_r_ixfn_36837)];
        
        ((__global float *) mem_36844)[gtid_31514 * (res_24770 * res_24770) +
                                       gtid_31515 * res_24770 + gtid_31516] =
            res_32148;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32140
}
__kernel void mainzisegmap_31736(__global int *global_failure, int64_t m_24751,
                                 int64_t nm_24902, int64_t ctx_param_ext_36797,
                                 int64_t ctx_param_ext_36798,
                                 int64_t ctx_param_ext_36800, __global
                                 unsigned char *mem_param_36802, __global
                                 unsigned char *mem_36822)
{
    #define segmap_group_sizze_32105 (mainzisegmap_group_sizze_31739)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37932;
    int32_t local_tid_37933;
    int64_t group_sizze_37936;
    int32_t wave_sizze_37935;
    int32_t group_tid_37934;
    
    global_tid_37932 = get_global_id(0);
    local_tid_37933 = get_local_id(0);
    group_sizze_37936 = get_local_size(0);
    wave_sizze_37935 = LOCKSTEP_WIDTH;
    group_tid_37934 = get_group_id(0);
    
    int32_t phys_tid_31736;
    
    phys_tid_31736 = global_tid_37932;
    
    int64_t gtid_31734;
    
    gtid_31734 = squot64(sext_i32_i64(group_tid_37934) *
                         segmap_group_sizze_32105 +
                         sext_i32_i64(local_tid_37933), nm_24902);
    
    int64_t gtid_31735;
    
    gtid_31735 = sext_i32_i64(group_tid_37934) * segmap_group_sizze_32105 +
        sext_i32_i64(local_tid_37933) - squot64(sext_i32_i64(group_tid_37934) *
                                                segmap_group_sizze_32105 +
                                                sext_i32_i64(local_tid_37933),
                                                nm_24902) * nm_24902;
    if (slt64(gtid_31734, m_24751) && slt64(gtid_31735, nm_24902)) {
        float write_value_32111 = ((__global float *) mem_36822)[gtid_31734 *
                                                                 nm_24902 +
                                                                 gtid_31735];
        
        if ((sle64(0, gtid_31734) && slt64(gtid_31734, m_24751)) && (sle64(0,
                                                                           gtid_31735) &&
                                                                     slt64(gtid_31735,
                                                                           nm_24902))) {
            ((__global float *) mem_param_36802)[ctx_param_ext_36797 +
                                                 (gtid_31734 *
                                                  ctx_param_ext_36798 +
                                                  gtid_31735 *
                                                  ctx_param_ext_36800)] =
                write_value_32111;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32105
}
__kernel void mainzisegmap_31790(__global int *global_failure, int64_t m_24751,
                                 int32_t k2p2zq_24768, int64_t nm_24902,
                                 int32_t res_24910, int32_t i_32004,
                                 int64_t i_32006, int64_t ctx_param_ext_36797,
                                 int64_t ctx_param_ext_36798,
                                 int64_t ctx_param_ext_36800, __global
                                 unsigned char *mem_param_36802, __global
                                 unsigned char *mem_36818, __global
                                 unsigned char *mem_36822)
{
    #define segmap_group_sizze_32071 (mainzisegmap_group_sizze_31793)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37927;
    int32_t local_tid_37928;
    int64_t group_sizze_37931;
    int32_t wave_sizze_37930;
    int32_t group_tid_37929;
    
    global_tid_37927 = get_global_id(0);
    local_tid_37928 = get_local_id(0);
    group_sizze_37931 = get_local_size(0);
    wave_sizze_37930 = LOCKSTEP_WIDTH;
    group_tid_37929 = get_group_id(0);
    
    int32_t phys_tid_31790;
    
    phys_tid_31790 = global_tid_37927;
    
    int64_t gtid_31788;
    
    gtid_31788 = squot64(sext_i32_i64(group_tid_37929) *
                         segmap_group_sizze_32071 +
                         sext_i32_i64(local_tid_37928), nm_24902);
    
    int64_t gtid_31789;
    
    gtid_31789 = sext_i32_i64(group_tid_37929) * segmap_group_sizze_32071 +
        sext_i32_i64(local_tid_37928) - squot64(sext_i32_i64(group_tid_37929) *
                                                segmap_group_sizze_32071 +
                                                sext_i32_i64(local_tid_37928),
                                                nm_24902) * nm_24902;
    if (slt64(gtid_31788, m_24751) && slt64(gtid_31789, nm_24902)) {
        bool cond_32076 = ((__global bool *) mem_36818)[gtid_31788];
        int32_t res_32078 = sext_i64_i32(gtid_31789);
        int32_t res_32079 = sdiv32(res_32078, res_24910);
        int32_t res_32080 = smod32(res_32078, res_24910);
        float res_32081;
        
        if (cond_32076) {
            int32_t x_32082 = mul32(res_24910, res_32079);
            int32_t i_32083 = add32(res_32080, x_32082);
            int64_t i_32084 = sext_i32_i64(i_32083);
            float res_32085 = ((__global
                                float *) mem_param_36802)[ctx_param_ext_36797 +
                                                          (gtid_31788 *
                                                           ctx_param_ext_36798 +
                                                           i_32084 *
                                                           ctx_param_ext_36800)];
            
            res_32081 = res_32085;
        } else {
            float v1_32075 = ((__global
                               float *) mem_param_36802)[ctx_param_ext_36797 +
                                                         (gtid_31788 *
                                                          ctx_param_ext_36798 +
                                                          i_32006 *
                                                          ctx_param_ext_36800)];
            int64_t j_32086 = sext_i32_i64(res_32080);
            float x_32087 = ((__global
                              float *) mem_param_36802)[ctx_param_ext_36797 +
                                                        (gtid_31788 *
                                                         ctx_param_ext_36798 +
                                                         j_32086 *
                                                         ctx_param_ext_36800)];
            float x_32088 = x_32087 / v1_32075;
            int32_t y_32089 = sub32(k2p2zq_24768, 1);
            bool cond_32090 = slt32(res_32079, y_32089);
            float res_32091;
            
            if (cond_32090) {
                int32_t x_32092 = add32(1, res_32079);
                int32_t x_32093 = mul32(res_24910, x_32092);
                int32_t i_32094 = add32(res_32080, x_32093);
                int64_t i_32095 = sext_i32_i64(i_32094);
                float x_32096 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_31788 *
                                                             ctx_param_ext_36798 +
                                                             i_32095 *
                                                             ctx_param_ext_36800)];
                int32_t i_32097 = add32(i_32004, x_32093);
                int64_t i_32098 = sext_i32_i64(i_32097);
                float x_32099 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_31788 *
                                                             ctx_param_ext_36798 +
                                                             i_32098 *
                                                             ctx_param_ext_36800)];
                float y_32100 = x_32088 * x_32099;
                float res_32101 = x_32096 - y_32100;
                
                res_32091 = res_32101;
            } else {
                res_32091 = x_32088;
            }
            res_32081 = res_32091;
        }
        ((__global float *) mem_36822)[gtid_31788 * nm_24902 + gtid_31789] =
            res_32081;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32071
}
__kernel void mainzisegmap_31858(__global int *global_failure, int64_t m_24751,
                                 int64_t i_32006, int64_t ctx_param_ext_36797,
                                 int64_t ctx_param_ext_36798,
                                 int64_t ctx_param_ext_36800, __global
                                 unsigned char *mem_param_36802, __global
                                 unsigned char *mem_36818)
{
    #define segmap_group_sizze_32055 (mainzisegmap_group_sizze_31860)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37922;
    int32_t local_tid_37923;
    int64_t group_sizze_37926;
    int32_t wave_sizze_37925;
    int32_t group_tid_37924;
    
    global_tid_37922 = get_global_id(0);
    local_tid_37923 = get_local_id(0);
    group_sizze_37926 = get_local_size(0);
    wave_sizze_37925 = LOCKSTEP_WIDTH;
    group_tid_37924 = get_group_id(0);
    
    int32_t phys_tid_31858;
    
    phys_tid_31858 = global_tid_37922;
    
    int64_t gtid_31857;
    
    gtid_31857 = sext_i32_i64(group_tid_37924) * segmap_group_sizze_32055 +
        sext_i32_i64(local_tid_37923);
    if (slt64(gtid_31857, m_24751)) {
        float v1_32060 = ((__global
                           float *) mem_param_36802)[ctx_param_ext_36797 +
                                                     (gtid_31857 *
                                                      ctx_param_ext_36798 +
                                                      i_32006 *
                                                      ctx_param_ext_36800)];
        bool cond_32061 = v1_32060 == 0.0F;
        
        ((__global bool *) mem_36818)[gtid_31857] = cond_32061;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32055
}
__kernel void mainzisegmap_31949(__global int *global_failure, int64_t m_24751,
                                 int64_t res_24770, int64_t m_24901,
                                 int64_t nm_24902, __global
                                 unsigned char *res_mem_36762, __global
                                 unsigned char *mem_36794)
{
    #define segmap_group_sizze_31989 (mainzisegmap_group_sizze_31952)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37889;
    int32_t local_tid_37890;
    int64_t group_sizze_37893;
    int32_t wave_sizze_37892;
    int32_t group_tid_37891;
    
    global_tid_37889 = get_global_id(0);
    local_tid_37890 = get_local_id(0);
    group_sizze_37893 = get_local_size(0);
    wave_sizze_37892 = LOCKSTEP_WIDTH;
    group_tid_37891 = get_group_id(0);
    
    int32_t phys_tid_31949;
    
    phys_tid_31949 = global_tid_37889;
    
    int64_t gtid_31947;
    
    gtid_31947 = squot64(sext_i32_i64(group_tid_37891) *
                         segmap_group_sizze_31989 +
                         sext_i32_i64(local_tid_37890), nm_24902);
    
    int64_t gtid_31948;
    
    gtid_31948 = sext_i32_i64(group_tid_37891) * segmap_group_sizze_31989 +
        sext_i32_i64(local_tid_37890) - squot64(sext_i32_i64(group_tid_37891) *
                                                segmap_group_sizze_31989 +
                                                sext_i32_i64(local_tid_37890),
                                                nm_24902) * nm_24902;
    if (slt64(gtid_31947, m_24751) && slt64(gtid_31948, nm_24902)) {
        int64_t res_31994 = sdiv64(gtid_31948, m_24901);
        int64_t res_31995 = smod64(gtid_31948, m_24901);
        bool cond_31996 = slt64(res_31995, res_24770);
        float res_31997;
        
        if (cond_31996) {
            float res_31998 = ((__global float *) res_mem_36762)[gtid_31947 *
                                                                 (res_24770 *
                                                                  res_24770) +
                                                                 res_31994 *
                                                                 res_24770 +
                                                                 res_31995];
            
            res_31997 = res_31998;
        } else {
            int64_t y_31999 = add64(res_24770, res_31994);
            bool cond_32000 = res_31995 == y_31999;
            float res_32001;
            
            if (cond_32000) {
                res_32001 = 1.0F;
            } else {
                res_32001 = 0.0F;
            }
            res_31997 = res_32001;
        }
        ((__global float *) mem_36794)[gtid_31947 * nm_24902 + gtid_31948] =
            res_31997;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31989
}
__kernel void mainzisegmap_32155(__global int *global_failure, int64_t N_24750,
                                 int64_t m_24751, int32_t n_24755,
                                 int32_t k2p2zq_24768, int64_t res_24770,
                                 int64_t num_groups_32176, __global
                                 unsigned char *binop_p_mem_36661, __global
                                 unsigned char *mem_36848, __global
                                 unsigned char *mem_36851, __global
                                 unsigned char *mem_36866)
{
    #define segmap_group_sizze_32175 (mainzisegmap_group_sizze_32157)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37946;
    int32_t local_tid_37947;
    int64_t group_sizze_37950;
    int32_t wave_sizze_37949;
    int32_t group_tid_37948;
    
    global_tid_37946 = get_global_id(0);
    local_tid_37947 = get_local_id(0);
    group_sizze_37950 = get_local_size(0);
    wave_sizze_37949 = LOCKSTEP_WIDTH;
    group_tid_37948 = get_group_id(0);
    
    int32_t phys_tid_32155;
    
    phys_tid_32155 = global_tid_37946;
    
    int32_t phys_group_id_37951;
    
    phys_group_id_37951 = get_group_id(0);
    for (int32_t i_37952 = 0; i_37952 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751, segmap_group_sizze_32175)) -
                   phys_group_id_37951, sext_i64_i32(num_groups_32176));
         i_37952++) {
        int32_t virt_group_id_37953 = phys_group_id_37951 + i_37952 *
                sext_i64_i32(num_groups_32176);
        int64_t gtid_32154 = sext_i32_i64(virt_group_id_37953) *
                segmap_group_sizze_32175 + sext_i32_i64(local_tid_37947);
        
        if (slt64(gtid_32154, m_24751)) {
            for (int32_t i_36634 = 0; i_36634 < k2p2zq_24768; i_36634++) {
                int64_t i_36535 = sext_i32_i64(i_36634);
                float res_32182;
                float redout_36537 = 0.0F;
                
                for (int32_t i_36633 = 0; i_36633 < n_24755; i_36633++) {
                    int64_t i_36538 = sext_i32_i64(i_36633);
                    float x_32187 = ((__global float *) mem_36848)[i_36538 *
                                                                   m_24751 +
                                                                   gtid_32154];
                    bool res_32188;
                    
                    res_32188 = futrts_isnan32(x_32187);
                    
                    float res_32189;
                    
                    if (res_32188) {
                        res_32189 = 0.0F;
                    } else {
                        float x_32186 = ((__global
                                          float *) binop_p_mem_36661)[i_36535 *
                                                                      N_24750 +
                                                                      i_36538];
                        float res_32190 = x_32186 * x_32187;
                        
                        res_32189 = res_32190;
                    }
                    
                    float res_32185 = res_32189 + redout_36537;
                    float redout_tmp_37955 = res_32185;
                    
                    redout_36537 = redout_tmp_37955;
                }
                res_32182 = redout_36537;
                ((__global float *) mem_36851)[phys_tid_32155 + i_36535 *
                                               (num_groups_32176 *
                                                segmap_group_sizze_32175)] =
                    res_32182;
            }
            for (int64_t i_37956 = 0; i_37956 < res_24770; i_37956++) {
                ((__global float *) mem_36866)[i_37956 * m_24751 + gtid_32154] =
                    ((__global float *) mem_36851)[phys_tid_32155 + i_37956 *
                                                   (num_groups_32176 *
                                                    segmap_group_sizze_32175)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32175
}
__kernel void mainzisegmap_32296(__global int *global_failure, int64_t m_24751,
                                 int32_t k2p2zq_24768, int64_t res_24770,
                                 int64_t num_groups_32316, __global
                                 unsigned char *mem_36940, __global
                                 unsigned char *mem_36943, __global
                                 unsigned char *mem_36946, __global
                                 unsigned char *mem_36961)
{
    #define segmap_group_sizze_32315 (mainzisegmap_group_sizze_32298)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38034;
    int32_t local_tid_38035;
    int64_t group_sizze_38038;
    int32_t wave_sizze_38037;
    int32_t group_tid_38036;
    
    global_tid_38034 = get_global_id(0);
    local_tid_38035 = get_local_id(0);
    group_sizze_38038 = get_local_size(0);
    wave_sizze_38037 = LOCKSTEP_WIDTH;
    group_tid_38036 = get_group_id(0);
    
    int32_t phys_tid_32296;
    
    phys_tid_32296 = global_tid_38034;
    
    int32_t phys_group_id_38039;
    
    phys_group_id_38039 = get_group_id(0);
    for (int32_t i_38040 = 0; i_38040 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751, segmap_group_sizze_32315)) -
                   phys_group_id_38039, sext_i64_i32(num_groups_32316));
         i_38040++) {
        int32_t virt_group_id_38041 = phys_group_id_38039 + i_38040 *
                sext_i64_i32(num_groups_32316);
        int64_t gtid_32295 = sext_i32_i64(virt_group_id_38041) *
                segmap_group_sizze_32315 + sext_i32_i64(local_tid_38035);
        
        if (slt64(gtid_32295, m_24751)) {
            for (int32_t i_36636 = 0; i_36636 < k2p2zq_24768; i_36636++) {
                int64_t i_36545 = sext_i32_i64(i_36636);
                float res_32323;
                float redout_36547 = 0.0F;
                
                for (int32_t i_36635 = 0; i_36635 < k2p2zq_24768; i_36635++) {
                    int64_t i_36548 = sext_i32_i64(i_36635);
                    float x_32327 = ((__global float *) mem_36943)[i_36548 *
                                                                   m_24751 +
                                                                   gtid_32295];
                    float x_32328 = ((__global float *) mem_36940)[i_36545 *
                                                                   (m_24751 *
                                                                    res_24770) +
                                                                   i_36548 *
                                                                   m_24751 +
                                                                   gtid_32295];
                    float res_32329 = x_32327 * x_32328;
                    float res_32326 = res_32329 + redout_36547;
                    float redout_tmp_38043 = res_32326;
                    
                    redout_36547 = redout_tmp_38043;
                }
                res_32323 = redout_36547;
                ((__global float *) mem_36946)[phys_tid_32296 + i_36545 *
                                               (num_groups_32316 *
                                                segmap_group_sizze_32315)] =
                    res_32323;
            }
            for (int64_t i_38044 = 0; i_38044 < res_24770; i_38044++) {
                ((__global float *) mem_36961)[i_38044 * m_24751 + gtid_32295] =
                    ((__global float *) mem_36946)[phys_tid_32296 + i_38044 *
                                                   (num_groups_32316 *
                                                    segmap_group_sizze_32315)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32315
}
__kernel void mainzisegmap_32332(__global int *global_failure, int64_t m_24751,
                                 int32_t k2p2zq_24768, int64_t res_24770,
                                 __global unsigned char *res_mem_36936, __global
                                 unsigned char *mem_36965, __global
                                 unsigned char *mem_36969)
{
    #define segmap_group_sizze_32391 (mainzisegmap_group_sizze_32335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38045;
    int32_t local_tid_38046;
    int64_t group_sizze_38049;
    int32_t wave_sizze_38048;
    int32_t group_tid_38047;
    
    global_tid_38045 = get_global_id(0);
    local_tid_38046 = get_local_id(0);
    group_sizze_38049 = get_local_size(0);
    wave_sizze_38048 = LOCKSTEP_WIDTH;
    group_tid_38047 = get_group_id(0);
    
    int32_t phys_tid_32332;
    
    phys_tid_32332 = global_tid_38045;
    
    int64_t gtid_32330;
    
    gtid_32330 = squot64(sext_i32_i64(group_tid_38047) *
                         segmap_group_sizze_32391 +
                         sext_i32_i64(local_tid_38046), res_24770);
    
    int64_t gtid_32331;
    
    gtid_32331 = sext_i32_i64(group_tid_38047) * segmap_group_sizze_32391 +
        sext_i32_i64(local_tid_38046) - squot64(sext_i32_i64(group_tid_38047) *
                                                segmap_group_sizze_32391 +
                                                sext_i32_i64(local_tid_38046),
                                                res_24770) * res_24770;
    if (slt64(gtid_32330, m_24751) && slt64(gtid_32331, res_24770)) {
        float res_32400;
        float redout_36549 = 0.0F;
        
        for (int32_t i_36637 = 0; i_36637 < k2p2zq_24768; i_36637++) {
            int64_t i_36550 = sext_i32_i64(i_36637);
            float x_32404 = ((__global float *) res_mem_36936)[gtid_32330 *
                                                               res_24770 +
                                                               i_36550];
            float x_32405 = ((__global float *) mem_36965)[i_36550 *
                                                           (res_24770 *
                                                            m_24751) +
                                                           gtid_32330 *
                                                           res_24770 +
                                                           gtid_32331];
            float res_32406 = x_32404 * x_32405;
            float res_32403 = res_32406 + redout_36549;
            float redout_tmp_38050 = res_32403;
            
            redout_36549 = redout_tmp_38050;
        }
        res_32400 = redout_36549;
        ((__global float *) mem_36969)[gtid_32330 * res_24770 + gtid_32331] =
            res_32400;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32391
}
__kernel void mainzisegmap_32428(__global int *global_failure, int64_t N_24750,
                                 int64_t m_24751, int32_t k2p2zq_24768,
                                 int64_t res_24770, int64_t num_groups_32447,
                                 __global unsigned char *mem_36668, __global
                                 unsigned char *mem_36982, __global
                                 unsigned char *mem_36985, __global
                                 unsigned char *mem_37000)
{
    #define segmap_group_sizze_32446 (mainzisegmap_group_sizze_32430)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38115;
    int32_t local_tid_38116;
    int64_t group_sizze_38119;
    int32_t wave_sizze_38118;
    int32_t group_tid_38117;
    
    global_tid_38115 = get_global_id(0);
    local_tid_38116 = get_local_id(0);
    group_sizze_38119 = get_local_size(0);
    wave_sizze_38118 = LOCKSTEP_WIDTH;
    group_tid_38117 = get_group_id(0);
    
    int32_t phys_tid_32428;
    
    phys_tid_32428 = global_tid_38115;
    
    int32_t phys_group_id_38120;
    
    phys_group_id_38120 = get_group_id(0);
    for (int32_t i_38121 = 0; i_38121 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751, segmap_group_sizze_32446)) -
                   phys_group_id_38120, sext_i64_i32(num_groups_32447));
         i_38121++) {
        int32_t virt_group_id_38122 = phys_group_id_38120 + i_38121 *
                sext_i64_i32(num_groups_32447);
        int64_t gtid_32427 = sext_i32_i64(virt_group_id_38122) *
                segmap_group_sizze_32446 + sext_i32_i64(local_tid_38116);
        
        if (slt64(gtid_32427, m_24751)) {
            for (int64_t i_36553 = 0; i_36553 < N_24750; i_36553++) {
                float res_32453;
                float redout_36555 = 0.0F;
                
                for (int32_t i_36638 = 0; i_36638 < k2p2zq_24768; i_36638++) {
                    int64_t i_36556 = sext_i32_i64(i_36638);
                    float x_32457 = ((__global float *) mem_36982)[i_36556 *
                                                                   m_24751 +
                                                                   gtid_32427];
                    float x_32458 = ((__global float *) mem_36668)[i_36553 *
                                                                   res_24770 +
                                                                   i_36556];
                    float res_32459 = x_32457 * x_32458;
                    float res_32456 = res_32459 + redout_36555;
                    float redout_tmp_38124 = res_32456;
                    
                    redout_36555 = redout_tmp_38124;
                }
                res_32453 = redout_36555;
                ((__global float *) mem_36985)[phys_tid_32428 + i_36553 *
                                               (num_groups_32447 *
                                                segmap_group_sizze_32446)] =
                    res_32453;
            }
            for (int64_t i_38125 = 0; i_38125 < N_24750; i_38125++) {
                ((__global float *) mem_37000)[i_38125 * m_24751 + gtid_32427] =
                    ((__global float *) mem_36985)[phys_tid_32428 + i_38125 *
                                                   (num_groups_32447 *
                                                    segmap_group_sizze_32446)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32446
}
__kernel void mainzisegmap_32708(__global int *global_failure, int64_t N_24750,
                                 int64_t m_24751, __global
                                 unsigned char *mem_37076, __global
                                 unsigned char *mem_37079, __global
                                 unsigned char *mem_37102, __global
                                 unsigned char *mem_37105)
{
    #define segmap_group_sizze_32874 (mainzisegmap_group_sizze_32711)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38298;
    int32_t local_tid_38299;
    int64_t group_sizze_38302;
    int32_t wave_sizze_38301;
    int32_t group_tid_38300;
    
    global_tid_38298 = get_global_id(0);
    local_tid_38299 = get_local_id(0);
    group_sizze_38302 = get_local_size(0);
    wave_sizze_38301 = LOCKSTEP_WIDTH;
    group_tid_38300 = get_group_id(0);
    
    int32_t phys_tid_32708;
    
    phys_tid_32708 = global_tid_38298;
    
    int64_t gtid_32706;
    
    gtid_32706 = squot64(sext_i32_i64(group_tid_38300) *
                         segmap_group_sizze_32874 +
                         sext_i32_i64(local_tid_38299), N_24750);
    
    int64_t gtid_32707;
    
    gtid_32707 = sext_i32_i64(group_tid_38300) * segmap_group_sizze_32874 +
        sext_i32_i64(local_tid_38299) - squot64(sext_i32_i64(group_tid_38300) *
                                                segmap_group_sizze_32874 +
                                                sext_i32_i64(local_tid_38299),
                                                N_24750) * N_24750;
    if (slt64(gtid_32706, m_24751) && slt64(gtid_32707, N_24750)) {
        float x_32882 = ((__global float *) mem_37105)[gtid_32706 * N_24750 +
                                                       gtid_32707];
        int32_t index_primexp_35350 = sext_i64_i32(gtid_32707);
        bool res_32885;
        
        res_32885 = futrts_isnan32(x_32882);
        
        bool res_32886 = !res_32885;
        int64_t res_32887;
        
        if (res_32886) {
            int64_t x_32883 = ((__global int64_t *) mem_37102)[gtid_32706 *
                                                               N_24750 +
                                                               gtid_32707];
            int64_t res_32888 = sub64(x_32883, 1);
            
            res_32887 = res_32888;
        } else {
            res_32887 = -1;
        }
        if ((sle64(0, gtid_32706) && slt64(gtid_32706, m_24751)) && (sle64(0,
                                                                           res_32887) &&
                                                                     slt64(res_32887,
                                                                           N_24750))) {
            ((__global int32_t *) mem_37079)[gtid_32706 * N_24750 + res_32887] =
                index_primexp_35350;
        }
        if ((sle64(0, gtid_32706) && slt64(gtid_32706, m_24751)) && (sle64(0,
                                                                           res_32887) &&
                                                                     slt64(res_32887,
                                                                           N_24750))) {
            ((__global float *) mem_37076)[gtid_32706 * N_24750 + res_32887] =
                x_32882;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32874
}
__kernel void mainzisegmap_32784(__global int *global_failure, int64_t N_24750,
                                 int64_t m_24751, int64_t i_25017, __global
                                 unsigned char *mem_37102, __global
                                 unsigned char *mem_37108)
{
    #define segmap_group_sizze_32838 (mainzisegmap_group_sizze_32786)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38293;
    int32_t local_tid_38294;
    int64_t group_sizze_38297;
    int32_t wave_sizze_38296;
    int32_t group_tid_38295;
    
    global_tid_38293 = get_global_id(0);
    local_tid_38294 = get_local_id(0);
    group_sizze_38297 = get_local_size(0);
    wave_sizze_38296 = LOCKSTEP_WIDTH;
    group_tid_38295 = get_group_id(0);
    
    int32_t phys_tid_32784;
    
    phys_tid_32784 = global_tid_38293;
    
    int64_t gtid_32783;
    
    gtid_32783 = sext_i32_i64(group_tid_38295) * segmap_group_sizze_32838 +
        sext_i32_i64(local_tid_38294);
    if (slt64(gtid_32783, m_24751)) {
        int64_t res_32842 = ((__global int64_t *) mem_37102)[gtid_32783 *
                                                             N_24750 + i_25017];
        int32_t res_32843 = sext_i64_i32(res_32842);
        
        ((__global int32_t *) mem_37108)[gtid_32783] = res_32843;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32838
}
__kernel void mainzisegmap_33035(__global int *global_failure, int64_t m_24751,
                                 float hfrac_24757, int32_t k2p2_24766, __global
                                 unsigned char *mem_37178, __global
                                 unsigned char *mem_37181, __global
                                 unsigned char *mem_37184, __global
                                 unsigned char *mem_37186)
{
    #define segmap_group_sizze_33120 (mainzisegmap_group_sizze_33037)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38453;
    int32_t local_tid_38454;
    int64_t group_sizze_38457;
    int32_t wave_sizze_38456;
    int32_t group_tid_38455;
    
    global_tid_38453 = get_global_id(0);
    local_tid_38454 = get_local_id(0);
    group_sizze_38457 = get_local_size(0);
    wave_sizze_38456 = LOCKSTEP_WIDTH;
    group_tid_38455 = get_group_id(0);
    
    int32_t phys_tid_33035;
    
    phys_tid_33035 = global_tid_38453;
    
    int64_t gtid_33034;
    
    gtid_33034 = sext_i32_i64(group_tid_38455) * segmap_group_sizze_33120 +
        sext_i32_i64(local_tid_38454);
    if (slt64(gtid_33034, m_24751)) {
        int32_t res_33124 = ((__global int32_t *) mem_37178)[gtid_33034];
        float res_33125 = ((__global float *) mem_37181)[gtid_33034];
        int32_t r32_arg_33126 = sub32(res_33124, k2p2_24766);
        float res_33127 = sitofp_i32_f32(r32_arg_33126);
        float sqrt_arg_33128 = res_33125 / res_33127;
        float res_33129;
        
        res_33129 = futrts_sqrt32(sqrt_arg_33128);
        
        float res_33130 = sitofp_i32_f32(res_33124);
        float t32_arg_33131 = hfrac_24757 * res_33130;
        int32_t res_33132 = fptosi_f32_i32(t32_arg_33131);
        
        ((__global int32_t *) mem_37184)[gtid_33034] = res_33132;
        ((__global float *) mem_37186)[gtid_33034] = res_33129;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33120
}
__kernel void mainzisegmap_33306(__global int *global_failure, float lam_24758,
                                 int64_t iota32_arg_25134, int32_t x_25139,
                                 float res_25142, __global
                                 unsigned char *mappingindices_mem_36651,
                                 __global unsigned char *mem_37244, __global
                                 unsigned char *mem_37246)
{
    #define segmap_group_sizze_33325 (mainzisegmap_group_sizze_33308)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38563;
    int32_t local_tid_38564;
    int64_t group_sizze_38567;
    int32_t wave_sizze_38566;
    int32_t group_tid_38565;
    
    global_tid_38563 = get_global_id(0);
    local_tid_38564 = get_local_id(0);
    group_sizze_38567 = get_local_size(0);
    wave_sizze_38566 = LOCKSTEP_WIDTH;
    group_tid_38565 = get_group_id(0);
    
    int32_t phys_tid_33306;
    
    phys_tid_33306 = global_tid_38563;
    
    int64_t gtid_33305;
    
    gtid_33305 = sext_i32_i64(group_tid_38565) * segmap_group_sizze_33325 +
        sext_i32_i64(local_tid_38564);
    if (slt64(gtid_33305, iota32_arg_25134)) {
        int32_t res_33330 = sext_i64_i32(gtid_33305);
        int32_t t_33331 = add32(x_25139, res_33330);
        int32_t i_33332 = sub32(t_33331, 1);
        int64_t i_33333 = sext_i32_i64(i_33332);
        int32_t time_33334 = ((__global
                               int32_t *) mappingindices_mem_36651)[i_33333];
        float res_33335 = sitofp_i32_f32(time_33334);
        float logplus_arg_33336 = res_33335 / res_25142;
        bool cond_33337 = 2.7182817F < logplus_arg_33336;
        float res_33338;
        
        if (cond_33337) {
            float res_33339;
            
            res_33339 = futrts_log32(logplus_arg_33336);
            res_33338 = res_33339;
        } else {
            res_33338 = 1.0F;
        }
        
        float res_33340;
        
        res_33340 = futrts_sqrt32(res_33338);
        
        float res_33341 = lam_24758 * res_33340;
        
        ((__global int32_t *) mem_37244)[gtid_33305] = res_33330;
        ((__global float *) mem_37246)[gtid_33305] = res_33341;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33325
}
__kernel void mainzisegmap_33379(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_24750,
                                 int64_t m_24751, int32_t n_24755,
                                 int64_t iota32_arg_25134, int32_t iters_25160,
                                 int64_t i_25162,
                                 int64_t segmap_usable_groups_33615, __global
                                 unsigned char *res_mem_37110, __global
                                 unsigned char *res_mem_37111, __global
                                 unsigned char *res_mem_37112, __global
                                 unsigned char *res_mem_37190, __global
                                 unsigned char *res_mem_37191, __global
                                 unsigned char *res_mem_37192, __global
                                 unsigned char *res_mem_37241, __global
                                 unsigned char *mem_37246, __global
                                 unsigned char *mem_37249, __global
                                 unsigned char *mem_37268, __global
                                 unsigned char *mem_37270, __global
                                 unsigned char *mem_37272, __global
                                 unsigned char *mem_37274, __global
                                 unsigned char *mem_37276, __global
                                 unsigned char *mem_37338, __global
                                 unsigned char *mem_37357, __global
                                 unsigned char *mem_37359, __global
                                 unsigned char *mem_37361, __global
                                 unsigned char *double_buffer_mem_37625)
{
    #define segmap_group_sizze_33614 (mainzisegmap_group_sizze_33381)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38572;
    int32_t local_tid_38573;
    int64_t group_sizze_38576;
    int32_t wave_sizze_38575;
    int32_t group_tid_38574;
    
    global_tid_38572 = get_global_id(0);
    local_tid_38573 = get_local_id(0);
    group_sizze_38576 = get_local_size(0);
    wave_sizze_38575 = LOCKSTEP_WIDTH;
    group_tid_38574 = get_group_id(0);
    
    int32_t phys_tid_33379;
    
    phys_tid_33379 = global_tid_38572;
    
    int64_t gtid_33378;
    
    gtid_33378 = sext_i32_i64(group_tid_38574) * segmap_group_sizze_33614 +
        sext_i32_i64(local_tid_38573);
    if (slt64(gtid_33378, m_24751)) {
        int32_t x_33619 = ((__global int32_t *) res_mem_37110)[gtid_33378];
        int32_t x_33620 = ((__global int32_t *) res_mem_37191)[gtid_33378];
        float x_33621 = ((__global float *) res_mem_37192)[gtid_33378];
        int32_t x_33622 = ((__global int32_t *) res_mem_37190)[gtid_33378];
        float x_33623 = ((__global float *) res_mem_37241)[gtid_33378];
        int32_t y_33626 = sub32(x_33619, x_33620);
        float res_33627 = sitofp_i32_f32(x_33620);
        float res_33628;
        
        res_33628 = futrts_sqrt32(res_33627);
        
        float y_33629 = x_33621 * res_33628;
        float inpacc_33630;
        bool res_33631;
        int32_t res_33632;
        float res_33633;
        float inpacc_33635;
        bool inpacc_33636;
        int32_t inpacc_33637;
        float inpacc_33638;
        
        inpacc_33635 = 0.0F;
        inpacc_33636 = 0;
        inpacc_33637 = -1;
        inpacc_33638 = 0.0F;
        for (int64_t i_36505 = 0; i_36505 < iota32_arg_25134; i_36505++) {
            int32_t index_primexp_36514 = sext_i64_i32(i_36505);
            bool cond_33646 = sle32(y_33626, index_primexp_36514);
            float res_33647;
            
            if (cond_33646) {
                res_33647 = 0.0F;
            } else {
                bool cond_33648 = index_primexp_36514 == 0;
                float res_33649;
                
                if (cond_33648) {
                    res_33649 = x_33623;
                } else {
                    int32_t x_33650 = sub32(x_33620, x_33622);
                    int32_t i_33651 = add32(x_33650, index_primexp_36514);
                    int64_t i_33652 = sext_i32_i64(i_33651);
                    float negate_arg_33653 = ((__global
                                               float *) res_mem_37111)[gtid_33378 *
                                                                       N_24750 +
                                                                       i_33652];
                    float x_33654 = 0.0F - negate_arg_33653;
                    int32_t i_33655 = add32(x_33620, index_primexp_36514);
                    int64_t i_33656 = sext_i32_i64(i_33655);
                    float y_33657 = ((__global
                                      float *) res_mem_37111)[gtid_33378 *
                                                              N_24750 +
                                                              i_33656];
                    float res_33658 = x_33654 + y_33657;
                    
                    res_33649 = res_33658;
                }
                res_33647 = res_33649;
            }
            
            float res_33663 = inpacc_33635 + res_33647;
            float x_33682 = ((__global float *) mem_37246)[i_36505];
            float res_33685 = res_33663 / y_33629;
            bool cond_33686 = slt32(index_primexp_36514, y_33626);
            bool res_33687;
            
            res_33687 = futrts_isnan32(res_33685);
            
            bool res_33688 = !res_33687;
            bool x_33689 = cond_33686 && res_33688;
            float res_33690 = (float) fabs(res_33685);
            bool res_33691 = x_33682 < res_33690;
            bool x_33692 = x_33689 && res_33691;
            float res_33693;
            
            if (cond_33686) {
                res_33693 = res_33685;
            } else {
                res_33693 = 0.0F;
            }
            
            int32_t x_33671 = index_primexp_36514;
            bool x_33675 = x_33692 && x_33692;
            int32_t res_33679;
            
            if (x_33692) {
                res_33679 = x_33671;
            } else {
                res_33679 = -1;
            }
            
            bool res_33694;
            int32_t res_33695;
            
            if (inpacc_33636) {
                res_33694 = inpacc_33636;
                res_33695 = inpacc_33637;
            } else {
                bool x_33696 = x_33675 && x_33675;
                bool x_33697 = !x_33675;
                bool y_33698 = inpacc_33636 && x_33697;
                bool res_33699 = x_33696 || y_33698;
                int32_t res_33700;
                
                if (x_33675) {
                    res_33700 = res_33679;
                } else {
                    res_33700 = inpacc_33637;
                }
                res_33694 = res_33699;
                res_33695 = res_33700;
            }
            
            float res_33701 = inpacc_33638 + res_33693;
            float inpacc_tmp_38577 = res_33663;
            bool inpacc_tmp_38578 = res_33694;
            int32_t inpacc_tmp_38579 = res_33695;
            float inpacc_tmp_38580 = res_33701;
            
            inpacc_33635 = inpacc_tmp_38577;
            inpacc_33636 = inpacc_tmp_38578;
            inpacc_33637 = inpacc_tmp_38579;
            inpacc_33638 = inpacc_tmp_38580;
        }
        inpacc_33630 = inpacc_33635;
        res_33631 = inpacc_33636;
        res_33632 = inpacc_33637;
        res_33633 = inpacc_33638;
        
        float res_33702 = sitofp_i32_f32(y_33626);
        float res_33703 = res_33633 / res_33702;
        
        for (int64_t i_36577 = 0; i_36577 < iota32_arg_25134; i_36577++) {
            int32_t index_primexp_36642 = sext_i64_i32(i_36577);
            bool cond_33706 = slt32(index_primexp_36642, y_33626);
            bool cond_33707;
            
            if (cond_33706) {
                int32_t i_33708 = add32(x_33620, index_primexp_36642);
                int64_t i_33709 = sext_i32_i64(i_33708);
                bool x_33710 = sle64(0, i_33709);
                bool y_33711 = slt64(i_33709, N_24750);
                bool bounds_check_33712 = x_33710 && y_33711;
                bool index_certs_33713;
                
                if (!bounds_check_33712) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 1) ==
                            -1) {
                            global_failure_args[0] = i_33709;
                            global_failure_args[1] = N_24750;
                            ;
                        }
                        return;
                    }
                }
                
                float isnan_arg_33714 = ((__global
                                          float *) res_mem_37111)[gtid_33378 *
                                                                  N_24750 +
                                                                  i_33709];
                bool res_33715;
                
                res_33715 = futrts_isnan32(isnan_arg_33714);
                
                bool res_33716 = !res_33715;
                
                cond_33707 = res_33716;
            } else {
                cond_33707 = 0;
            }
            
            float res_33717;
            
            if (cond_33707) {
                int32_t i_33718 = add32(x_33620, index_primexp_36642);
                int64_t i_33719 = sext_i32_i64(i_33718);
                bool x_33720 = sle64(0, i_33719);
                bool y_33721 = slt64(i_33719, N_24750);
                bool bounds_check_33722 = x_33720 && y_33721;
                bool index_certs_33723;
                
                if (!bounds_check_33722) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 2) ==
                            -1) {
                            global_failure_args[0] = i_33719;
                            global_failure_args[1] = N_24750;
                            ;
                        }
                        return;
                    }
                }
                
                float res_33724 = ((__global
                                    float *) res_mem_37111)[gtid_33378 *
                                                            N_24750 + i_33719];
                
                res_33717 = res_33724;
            } else {
                res_33717 = INFINITY;
            }
            ((__global float *) mem_37249)[phys_tid_33379 + i_36577 *
                                           (segmap_usable_groups_33615 *
                                            segmap_group_sizze_33614)] =
                res_33717;
        }
        for (int64_t i_38582 = 0; i_38582 < iota32_arg_25134; i_38582++) {
            ((__global float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                         i_38582 *
                                                         (segmap_usable_groups_33615 *
                                                          segmap_group_sizze_33614)] =
                ((__global float *) mem_37249)[phys_tid_33379 + i_38582 *
                                               (segmap_usable_groups_33615 *
                                                segmap_group_sizze_33614)];
        }
        for (int32_t i_33726 = 0; i_33726 < iters_25160; i_33726++) {
            int32_t lifted_2_radix_sort_step_arg_33728 = mul32(2, i_33726);
            int32_t lifted_0_get_bit_arg_33729 = add32(1,
                                                       lifted_2_radix_sort_step_arg_33728);
            bool res_33730 = lifted_0_get_bit_arg_33729 == 31;
            bool res_33731 = lifted_2_radix_sort_step_arg_33728 == 31;
            int64_t discard_36599;
            int64_t discard_36600;
            int64_t discard_36601;
            int64_t discard_36602;
            int64_t scanacc_36584;
            int64_t scanacc_36585;
            int64_t scanacc_36586;
            int64_t scanacc_36587;
            
            scanacc_36584 = 0;
            scanacc_36585 = 0;
            scanacc_36586 = 0;
            scanacc_36587 = 0;
            for (int64_t i_36593 = 0; i_36593 < iota32_arg_25134; i_36593++) {
                float x_33749 = ((__global
                                  float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                                    i_36593 *
                                                                    (segmap_usable_groups_33615 *
                                                                     segmap_group_sizze_33614)];
                int32_t i32_arg_33750;
                
                i32_arg_33750 = futrts_to_bits32(x_33749);
                
                int32_t unsign_arg_33751 = ashr32(i32_arg_33750,
                                                  lifted_0_get_bit_arg_33729);
                int32_t unsign_arg_33752 = 1 & unsign_arg_33751;
                int32_t unsign_arg_33753 = ashr32(i32_arg_33750, 31);
                int32_t unsign_arg_33754 = 1 & unsign_arg_33753;
                bool cond_33755 = unsign_arg_33754 == 1;
                bool x_33756 = !cond_33755;
                bool y_33757 = res_33730 && x_33756;
                bool cond_33758 = cond_33755 || y_33757;
                int32_t res_33759;
                
                if (cond_33758) {
                    int32_t res_33760 = 1 ^ unsign_arg_33752;
                    
                    res_33759 = res_33760;
                } else {
                    res_33759 = unsign_arg_33752;
                }
                
                int32_t x_33761 = mul32(2, res_33759);
                int32_t unsign_arg_33762 = ashr32(i32_arg_33750,
                                                  lifted_2_radix_sort_step_arg_33728);
                int32_t unsign_arg_33763 = 1 & unsign_arg_33762;
                bool y_33764 = res_33731 && x_33756;
                bool cond_33765 = cond_33755 || y_33764;
                int32_t res_33766;
                
                if (cond_33765) {
                    int32_t res_33767 = 1 ^ unsign_arg_33763;
                    
                    res_33766 = res_33767;
                } else {
                    res_33766 = unsign_arg_33763;
                }
                
                int32_t res_33768 = add32(x_33761, res_33766);
                bool cond_33769 = res_33768 == 0;
                int64_t res_33770 = btoi_bool_i64(cond_33769);
                int64_t res_33771;
                int64_t res_33772;
                int64_t res_33773;
                
                if (cond_33769) {
                    res_33771 = 0;
                    res_33772 = 0;
                    res_33773 = 0;
                } else {
                    bool cond_33774 = res_33768 == 1;
                    int64_t res_33775 = btoi_bool_i64(cond_33774);
                    int64_t res_33776;
                    int64_t res_33777;
                    
                    if (cond_33774) {
                        res_33776 = 0;
                        res_33777 = 0;
                    } else {
                        bool cond_33778 = res_33768 == 2;
                        int64_t res_33779 = btoi_bool_i64(cond_33778);
                        bool cond_neg_33780 = !cond_33778;
                        int64_t res_33781 = btoi_bool_i64(cond_neg_33780);
                        
                        res_33776 = res_33779;
                        res_33777 = res_33781;
                    }
                    res_33771 = res_33775;
                    res_33772 = res_33776;
                    res_33773 = res_33777;
                }
                
                int64_t res_33745 = add64(res_33770, scanacc_36584);
                int64_t res_33746 = add64(res_33771, scanacc_36585);
                int64_t res_33747 = add64(res_33772, scanacc_36586);
                int64_t res_33748 = add64(res_33773, scanacc_36587);
                
                ((__global int64_t *) mem_37268)[phys_tid_33379 + i_36593 *
                                                 (segmap_usable_groups_33615 *
                                                  segmap_group_sizze_33614)] =
                    res_33745;
                ((__global int64_t *) mem_37270)[phys_tid_33379 + i_36593 *
                                                 (segmap_usable_groups_33615 *
                                                  segmap_group_sizze_33614)] =
                    res_33746;
                ((__global int64_t *) mem_37272)[phys_tid_33379 + i_36593 *
                                                 (segmap_usable_groups_33615 *
                                                  segmap_group_sizze_33614)] =
                    res_33747;
                ((__global int64_t *) mem_37274)[phys_tid_33379 + i_36593 *
                                                 (segmap_usable_groups_33615 *
                                                  segmap_group_sizze_33614)] =
                    res_33748;
                ((__global int32_t *) mem_37276)[phys_tid_33379 + i_36593 *
                                                 (segmap_usable_groups_33615 *
                                                  segmap_group_sizze_33614)] =
                    res_33768;
                
                int64_t scanacc_tmp_38584 = res_33745;
                int64_t scanacc_tmp_38585 = res_33746;
                int64_t scanacc_tmp_38586 = res_33747;
                int64_t scanacc_tmp_38587 = res_33748;
                
                scanacc_36584 = scanacc_tmp_38584;
                scanacc_36585 = scanacc_tmp_38585;
                scanacc_36586 = scanacc_tmp_38586;
                scanacc_36587 = scanacc_tmp_38587;
            }
            discard_36599 = scanacc_36584;
            discard_36600 = scanacc_36585;
            discard_36601 = scanacc_36586;
            discard_36602 = scanacc_36587;
            
            int64_t res_33782 = ((__global
                                  int64_t *) mem_37268)[phys_tid_33379 +
                                                        i_25162 *
                                                        (segmap_usable_groups_33615 *
                                                         segmap_group_sizze_33614)];
            int64_t res_33783 = ((__global
                                  int64_t *) mem_37270)[phys_tid_33379 +
                                                        i_25162 *
                                                        (segmap_usable_groups_33615 *
                                                         segmap_group_sizze_33614)];
            int64_t res_33784 = ((__global
                                  int64_t *) mem_37272)[phys_tid_33379 +
                                                        i_25162 *
                                                        (segmap_usable_groups_33615 *
                                                         segmap_group_sizze_33614)];
            
            for (int64_t i_38593 = 0; i_38593 < iota32_arg_25134; i_38593++) {
                ((__global float *) mem_37338)[phys_tid_33379 + i_38593 *
                                               (segmap_usable_groups_33615 *
                                                segmap_group_sizze_33614)] =
                    ((__global
                      float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                        i_38593 *
                                                        (segmap_usable_groups_33615 *
                                                         segmap_group_sizze_33614)];
            }
            for (int64_t write_iter_36603 = 0; write_iter_36603 <
                 iota32_arg_25134; write_iter_36603++) {
                int32_t write_iv_36605 = ((__global
                                           int32_t *) mem_37276)[phys_tid_33379 +
                                                                 write_iter_36603 *
                                                                 (segmap_usable_groups_33615 *
                                                                  segmap_group_sizze_33614)];
                bool match_lit_33793 = 0 == write_iv_36605;
                int64_t res_33794;
                
                if (match_lit_33793) {
                    int64_t write_iv_36606 = ((__global
                                               int64_t *) mem_37268)[phys_tid_33379 +
                                                                     write_iter_36603 *
                                                                     (segmap_usable_groups_33615 *
                                                                      segmap_group_sizze_33614)];
                    int64_t res_33795 = sub64(write_iv_36606, 1);
                    
                    res_33794 = res_33795;
                } else {
                    int64_t write_iv_36607 = ((__global
                                               int64_t *) mem_37270)[phys_tid_33379 +
                                                                     write_iter_36603 *
                                                                     (segmap_usable_groups_33615 *
                                                                      segmap_group_sizze_33614)];
                    int64_t write_iv_36608 = ((__global
                                               int64_t *) mem_37272)[phys_tid_33379 +
                                                                     write_iter_36603 *
                                                                     (segmap_usable_groups_33615 *
                                                                      segmap_group_sizze_33614)];
                    int64_t write_iv_36609 = ((__global
                                               int64_t *) mem_37274)[phys_tid_33379 +
                                                                     write_iter_36603 *
                                                                     (segmap_usable_groups_33615 *
                                                                      segmap_group_sizze_33614)];
                    bool match_lit_33796 = 1 == write_iv_36605;
                    int64_t x_33797;
                    
                    if (match_lit_33796) {
                        int64_t x_33798 = add64(res_33782, write_iv_36607);
                        int64_t res_33799 = sub64(x_33798, 1);
                        
                        x_33797 = res_33799;
                    } else {
                        bool match_lit_33800 = 2 == write_iv_36605;
                        int64_t x_33801;
                        
                        if (match_lit_33800) {
                            int64_t x_33802 = add64(res_33782, res_33783);
                            int64_t x_33803 = add64(x_33802, write_iv_36608);
                            int64_t res_33804 = sub64(x_33803, 1);
                            
                            x_33801 = res_33804;
                        } else {
                            int64_t x_33805 = add64(res_33782, res_33783);
                            int64_t x_33806 = add64(res_33784, x_33805);
                            int64_t x_33807 = add64(x_33806, write_iv_36609);
                            int64_t res_33808 = sub64(x_33807, 1);
                            
                            x_33801 = res_33808;
                        }
                        x_33797 = x_33801;
                    }
                    res_33794 = x_33797;
                }
                
                bool less_than_zzero_36611 = slt64(res_33794, 0);
                bool greater_than_sizze_36612 = sle64(iota32_arg_25134,
                                                      res_33794);
                bool outside_bounds_dim_36613 = less_than_zzero_36611 ||
                     greater_than_sizze_36612;
                
                if (!outside_bounds_dim_36613) {
                    for (int64_t i_38595 = 0; i_38595 < 1; i_38595++) {
                        ((__global float *) mem_37338)[phys_tid_33379 +
                                                       (res_33794 + i_38595) *
                                                       (segmap_usable_groups_33615 *
                                                        segmap_group_sizze_33614)] =
                            ((__global
                              float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                                segmap_usable_groups_33615 *
                                                                segmap_group_sizze_33614 *
                                                                write_iter_36603 +
                                                                i_38595 *
                                                                (segmap_usable_groups_33615 *
                                                                 segmap_group_sizze_33614)];
                    }
                }
            }
            for (int64_t i_38596 = 0; i_38596 < iota32_arg_25134; i_38596++) {
                ((__global float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                             i_38596 *
                                                             (segmap_usable_groups_33615 *
                                                              segmap_group_sizze_33614)] =
                    ((__global float *) mem_37338)[phys_tid_33379 + i_38596 *
                                                   (segmap_usable_groups_33615 *
                                                    segmap_group_sizze_33614)];
            }
        }
        
        int32_t i_33809 = sdiv32(y_33626, 2);
        int32_t j_33810 = sub32(i_33809, 1);
        int32_t x_33811 = smod32(y_33626, 2);
        bool cond_33812 = x_33811 == 0;
        float res_33813;
        
        if (cond_33812) {
            int64_t j_33814 = sext_i32_i64(j_33810);
            bool x_33815 = sle64(0, j_33814);
            bool y_33816 = slt64(j_33814, iota32_arg_25134);
            bool bounds_check_33817 = x_33815 && y_33816;
            bool index_certs_33818;
            
            if (!bounds_check_33817) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 3) ==
                        -1) {
                        global_failure_args[0] = j_33814;
                        global_failure_args[1] = iota32_arg_25134;
                        ;
                    }
                    return;
                }
            }
            
            float x_33819 = ((__global
                              float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                                j_33814 *
                                                                (segmap_usable_groups_33615 *
                                                                 segmap_group_sizze_33614)];
            int64_t i_33820 = sext_i32_i64(i_33809);
            bool x_33821 = sle64(0, i_33820);
            bool y_33822 = slt64(i_33820, iota32_arg_25134);
            bool bounds_check_33823 = x_33821 && y_33822;
            bool index_certs_33824;
            
            if (!bounds_check_33823) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 4) ==
                        -1) {
                        global_failure_args[0] = i_33820;
                        global_failure_args[1] = iota32_arg_25134;
                        ;
                    }
                    return;
                }
            }
            
            float y_33825 = ((__global
                              float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                                i_33820 *
                                                                (segmap_usable_groups_33615 *
                                                                 segmap_group_sizze_33614)];
            float x_33826 = x_33819 + y_33825;
            float res_33827 = x_33826 / 2.0F;
            
            res_33813 = res_33827;
        } else {
            int64_t i_33828 = sext_i32_i64(i_33809);
            bool x_33829 = sle64(0, i_33828);
            bool y_33830 = slt64(i_33828, iota32_arg_25134);
            bool bounds_check_33831 = x_33829 && y_33830;
            bool index_certs_33832;
            
            if (!bounds_check_33831) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 5) ==
                        -1) {
                        global_failure_args[0] = i_33828;
                        global_failure_args[1] = iota32_arg_25134;
                        ;
                    }
                    return;
                }
            }
            
            float res_33833 = ((__global
                                float *) double_buffer_mem_37625)[phys_tid_33379 +
                                                                  i_33828 *
                                                                  (segmap_usable_groups_33615 *
                                                                   segmap_group_sizze_33614)];
            
            res_33813 = res_33833;
        }
        
        bool cond_33834 = !res_33631;
        int32_t fst_breakzq_33835;
        
        if (cond_33834) {
            fst_breakzq_33835 = -1;
        } else {
            bool cond_33836 = slt32(res_33632, y_33626);
            int32_t res_33837;
            
            if (cond_33836) {
                int32_t i_33838 = add32(x_33620, res_33632);
                int64_t i_33839 = sext_i32_i64(i_33838);
                int32_t x_33840 = ((__global
                                    int32_t *) res_mem_37112)[gtid_33378 *
                                                              N_24750 +
                                                              i_33839];
                int32_t res_33841 = sub32(x_33840, n_24755);
                
                res_33837 = res_33841;
            } else {
                res_33837 = -1;
            }
            fst_breakzq_33835 = res_33837;
        }
        
        bool cond_33842 = sle32(x_33620, 5);
        bool res_33843 = sle32(y_33626, 5);
        bool x_33844 = !cond_33842;
        bool y_33845 = res_33843 && x_33844;
        bool cond_33846 = cond_33842 || y_33845;
        int32_t fst_breakzq_33847;
        
        if (cond_33846) {
            fst_breakzq_33847 = -2;
        } else {
            fst_breakzq_33847 = fst_breakzq_33835;
        }
        ((__global int32_t *) mem_37357)[gtid_33378] = fst_breakzq_33847;
        ((__global float *) mem_37359)[gtid_33378] = res_33703;
        ((__global float *) mem_37361)[gtid_33378] = res_33813;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33614
}
__kernel void mainzisegmap_34090(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_24750,
                                 int64_t m_24751, int32_t n_24755,
                                 int64_t iota32_arg_25134, __global
                                 unsigned char *res_mem_37112, __global
                                 unsigned char *res_mem_37191, __global
                                 unsigned char *mem_37408, __global
                                 unsigned char *mem_37422, __global
                                 unsigned char *mem_37424, __global
                                 unsigned char *res_r_mem_37492, __global
                                 unsigned char *mem_37495, __global
                                 unsigned char *mem_37497)
{
    #define segmap_group_sizze_35240 (mainzisegmap_group_sizze_34092)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38950;
    int32_t local_tid_38951;
    int64_t group_sizze_38954;
    int32_t wave_sizze_38953;
    int32_t group_tid_38952;
    
    global_tid_38950 = get_global_id(0);
    local_tid_38951 = get_local_id(0);
    group_sizze_38954 = get_local_size(0);
    wave_sizze_38953 = LOCKSTEP_WIDTH;
    group_tid_38952 = get_group_id(0);
    
    int32_t phys_tid_34090;
    
    phys_tid_34090 = global_tid_38950;
    
    int64_t gtid_34089;
    
    gtid_34089 = sext_i32_i64(group_tid_38952) * segmap_group_sizze_35240 +
        sext_i32_i64(local_tid_38951);
    if (slt64(gtid_34089, m_24751)) {
        int32_t x_35244 = ((__global int32_t *) res_mem_37191)[gtid_34089];
        int32_t y_35246 = ((__global int32_t *) mem_37408)[gtid_34089];
        bool res_35247 = ((__global bool *) mem_37422)[gtid_34089];
        int32_t i_35250 = sdiv32(y_35246, 2);
        int32_t j_35251 = sub32(i_35250, 1);
        int32_t x_35252 = smod32(y_35246, 2);
        bool cond_35253 = x_35252 == 0;
        float res_35254;
        
        if (cond_35253) {
            int64_t j_35255 = sext_i32_i64(j_35251);
            bool x_35256 = sle64(0, j_35255);
            bool y_35257 = slt64(j_35255, iota32_arg_25134);
            bool bounds_check_35258 = x_35256 && y_35257;
            bool index_certs_35259;
            
            if (!bounds_check_35258) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 13) ==
                        -1) {
                        global_failure_args[0] = j_35255;
                        global_failure_args[1] = iota32_arg_25134;
                        ;
                    }
                    return;
                }
            }
            
            float x_35260 = ((__global float *) res_r_mem_37492)[gtid_34089 *
                                                                 iota32_arg_25134 +
                                                                 j_35255];
            int64_t i_35261 = sext_i32_i64(i_35250);
            bool x_35262 = sle64(0, i_35261);
            bool y_35263 = slt64(i_35261, iota32_arg_25134);
            bool bounds_check_35264 = x_35262 && y_35263;
            bool index_certs_35265;
            
            if (!bounds_check_35264) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 14) ==
                        -1) {
                        global_failure_args[0] = i_35261;
                        global_failure_args[1] = iota32_arg_25134;
                        ;
                    }
                    return;
                }
            }
            
            float y_35266 = ((__global float *) res_r_mem_37492)[gtid_34089 *
                                                                 iota32_arg_25134 +
                                                                 i_35261];
            float x_35267 = x_35260 + y_35266;
            float res_35268 = x_35267 / 2.0F;
            
            res_35254 = res_35268;
        } else {
            int64_t i_35269 = sext_i32_i64(i_35250);
            bool x_35270 = sle64(0, i_35269);
            bool y_35271 = slt64(i_35269, iota32_arg_25134);
            bool bounds_check_35272 = x_35270 && y_35271;
            bool index_certs_35273;
            
            if (!bounds_check_35272) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 15) ==
                        -1) {
                        global_failure_args[0] = i_35269;
                        global_failure_args[1] = iota32_arg_25134;
                        ;
                    }
                    return;
                }
            }
            
            float res_35274 = ((__global float *) res_r_mem_37492)[gtid_34089 *
                                                                   iota32_arg_25134 +
                                                                   i_35269];
            
            res_35254 = res_35274;
        }
        
        bool cond_35275 = !res_35247;
        int32_t fst_breakzq_35276;
        
        if (cond_35275) {
            fst_breakzq_35276 = -1;
        } else {
            int32_t res_35248 = ((__global int32_t *) mem_37424)[gtid_34089];
            bool cond_35277 = slt32(res_35248, y_35246);
            int32_t res_35278;
            
            if (cond_35277) {
                int32_t i_35279 = add32(x_35244, res_35248);
                int64_t i_35280 = sext_i32_i64(i_35279);
                int32_t x_35281 = ((__global
                                    int32_t *) res_mem_37112)[gtid_34089 *
                                                              N_24750 +
                                                              i_35280];
                int32_t res_35282 = sub32(x_35281, n_24755);
                
                res_35278 = res_35282;
            } else {
                res_35278 = -1;
            }
            fst_breakzq_35276 = res_35278;
        }
        
        bool cond_35283 = sle32(x_35244, 5);
        bool res_35284 = sle32(y_35246, 5);
        bool x_35285 = !cond_35283;
        bool y_35286 = res_35284 && x_35285;
        bool cond_35287 = cond_35283 || y_35286;
        int32_t fst_breakzq_35288;
        
        if (cond_35287) {
            fst_breakzq_35288 = -2;
        } else {
            fst_breakzq_35288 = fst_breakzq_35276;
        }
        ((__global int32_t *) mem_37495)[gtid_34089] = fst_breakzq_35288;
        ((__global float *) mem_37497)[gtid_34089] = res_35254;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35240
}
__kernel void mainzisegmap_34416(__global int *global_failure, int64_t m_24751,
                                 int64_t iota32_arg_25134, int64_t i_25162,
                                 __global unsigned char *mem_param_37438,
                                 __global unsigned char *mem_37465, __global
                                 unsigned char *mem_37468, __global
                                 unsigned char *mem_37471, __global
                                 unsigned char *mem_37474, __global
                                 unsigned char *mem_37477, __global
                                 unsigned char *mem_37480)
{
    #define segmap_group_sizze_35203 (mainzisegmap_group_sizze_34419)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38944;
    int32_t local_tid_38945;
    int64_t group_sizze_38948;
    int32_t wave_sizze_38947;
    int32_t group_tid_38946;
    
    global_tid_38944 = get_global_id(0);
    local_tid_38945 = get_local_id(0);
    group_sizze_38948 = get_local_size(0);
    wave_sizze_38947 = LOCKSTEP_WIDTH;
    group_tid_38946 = get_group_id(0);
    
    int32_t phys_tid_34416;
    
    phys_tid_34416 = global_tid_38944;
    
    int64_t gtid_34414;
    
    gtid_34414 = squot64(sext_i32_i64(group_tid_38946) *
                         segmap_group_sizze_35203 +
                         sext_i32_i64(local_tid_38945), iota32_arg_25134);
    
    int64_t gtid_34415;
    
    gtid_34415 = sext_i32_i64(group_tid_38946) * segmap_group_sizze_35203 +
        sext_i32_i64(local_tid_38945) - squot64(sext_i32_i64(group_tid_38946) *
                                                segmap_group_sizze_35203 +
                                                sext_i32_i64(local_tid_38945),
                                                iota32_arg_25134) *
        iota32_arg_25134;
    if (slt64(gtid_34414, m_24751) && slt64(gtid_34415, iota32_arg_25134)) {
        int32_t x_35216 = ((__global int32_t *) mem_37477)[gtid_34414 *
                                                           iota32_arg_25134 +
                                                           gtid_34415];
        float write_value_35221 = ((__global
                                    float *) mem_param_37438)[gtid_34414 *
                                                              iota32_arg_25134 +
                                                              gtid_34415];
        bool match_lit_35222 = 0 == x_35216;
        int64_t res_35223;
        
        if (match_lit_35222) {
            int64_t x_35217 = ((__global int64_t *) mem_37465)[gtid_34414 *
                                                               iota32_arg_25134 +
                                                               gtid_34415];
            int64_t res_35224 = sub64(x_35217, 1);
            
            res_35223 = res_35224;
        } else {
            int64_t res_35212 = ((__global int64_t *) mem_37465)[gtid_34414 *
                                                                 iota32_arg_25134 +
                                                                 i_25162];
            int64_t res_35213 = ((__global int64_t *) mem_37468)[gtid_34414 *
                                                                 iota32_arg_25134 +
                                                                 i_25162];
            int64_t res_35214 = ((__global int64_t *) mem_37471)[gtid_34414 *
                                                                 iota32_arg_25134 +
                                                                 i_25162];
            int64_t x_35218 = ((__global int64_t *) mem_37468)[gtid_34414 *
                                                               iota32_arg_25134 +
                                                               gtid_34415];
            int64_t x_35219 = ((__global int64_t *) mem_37471)[gtid_34414 *
                                                               iota32_arg_25134 +
                                                               gtid_34415];
            int64_t x_35220 = ((__global int64_t *) mem_37474)[gtid_34414 *
                                                               iota32_arg_25134 +
                                                               gtid_34415];
            bool match_lit_35225 = 1 == x_35216;
            int64_t x_35226;
            
            if (match_lit_35225) {
                int64_t x_35227 = add64(res_35212, x_35218);
                int64_t res_35228 = sub64(x_35227, 1);
                
                x_35226 = res_35228;
            } else {
                bool match_lit_35229 = 2 == x_35216;
                int64_t x_35230;
                
                if (match_lit_35229) {
                    int64_t x_35231 = add64(res_35212, res_35213);
                    int64_t x_35232 = add64(x_35219, x_35231);
                    int64_t res_35233 = sub64(x_35232, 1);
                    
                    x_35230 = res_35233;
                } else {
                    int64_t x_35234 = add64(res_35212, res_35213);
                    int64_t x_35235 = add64(res_35214, x_35234);
                    int64_t x_35236 = add64(x_35220, x_35235);
                    int64_t res_35237 = sub64(x_35236, 1);
                    
                    x_35230 = res_35237;
                }
                x_35226 = x_35230;
            }
            res_35223 = x_35226;
        }
        if ((sle64(0, gtid_34414) && slt64(gtid_34414, m_24751)) && (sle64(0,
                                                                           res_35223) &&
                                                                     slt64(res_35223,
                                                                           iota32_arg_25134))) {
            ((__global float *) mem_37480)[gtid_34414 * iota32_arg_25134 +
                                           res_35223] = write_value_35221;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35203
}
__kernel void mainzisegmap_34666(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_24750,
                                 int64_t m_24751, int64_t iota32_arg_25134,
                                 __global unsigned char *res_mem_37111, __global
                                 unsigned char *res_mem_37191, __global
                                 unsigned char *mem_37408, __global
                                 unsigned char *mem_37430)
{
    #define segmap_group_sizze_35009 (mainzisegmap_group_sizze_34669)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38813;
    int32_t local_tid_38814;
    int64_t group_sizze_38817;
    int32_t wave_sizze_38816;
    int32_t group_tid_38815;
    
    global_tid_38813 = get_global_id(0);
    local_tid_38814 = get_local_id(0);
    group_sizze_38817 = get_local_size(0);
    wave_sizze_38816 = LOCKSTEP_WIDTH;
    group_tid_38815 = get_group_id(0);
    
    int32_t phys_tid_34666;
    
    phys_tid_34666 = global_tid_38813;
    
    int64_t gtid_34664;
    
    gtid_34664 = squot64(sext_i32_i64(group_tid_38815) *
                         segmap_group_sizze_35009 +
                         sext_i32_i64(local_tid_38814), iota32_arg_25134);
    
    int64_t gtid_34665;
    
    gtid_34665 = sext_i32_i64(group_tid_38815) * segmap_group_sizze_35009 +
        sext_i32_i64(local_tid_38814) - squot64(sext_i32_i64(group_tid_38815) *
                                                segmap_group_sizze_35009 +
                                                sext_i32_i64(local_tid_38814),
                                                iota32_arg_25134) *
        iota32_arg_25134;
    if (slt64(gtid_34664, m_24751) && slt64(gtid_34665, iota32_arg_25134)) {
        int32_t x_35012 = ((__global int32_t *) res_mem_37191)[gtid_34664];
        int32_t y_35014 = ((__global int32_t *) mem_37408)[gtid_34664];
        int32_t index_primexp_35383 = sext_i64_i32(gtid_34665);
        bool cond_35016 = slt32(index_primexp_35383, y_35014);
        bool cond_35017;
        
        if (cond_35016) {
            int32_t i_35018 = add32(x_35012, index_primexp_35383);
            int64_t i_35019 = sext_i32_i64(i_35018);
            bool x_35020 = sle64(0, i_35019);
            bool y_35021 = slt64(i_35019, N_24750);
            bool bounds_check_35022 = x_35020 && y_35021;
            bool index_certs_35023;
            
            if (!bounds_check_35022) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 11) ==
                        -1) {
                        global_failure_args[0] = i_35019;
                        global_failure_args[1] = N_24750;
                        ;
                    }
                    return;
                }
            }
            
            float isnan_arg_35024 = ((__global
                                      float *) res_mem_37111)[gtid_34664 *
                                                              N_24750 +
                                                              i_35019];
            bool res_35025;
            
            res_35025 = futrts_isnan32(isnan_arg_35024);
            
            bool res_35026 = !res_35025;
            
            cond_35017 = res_35026;
        } else {
            cond_35017 = 0;
        }
        
        float res_35027;
        
        if (cond_35017) {
            int32_t i_35028 = add32(x_35012, index_primexp_35383);
            int64_t i_35029 = sext_i32_i64(i_35028);
            bool x_35030 = sle64(0, i_35029);
            bool y_35031 = slt64(i_35029, N_24750);
            bool bounds_check_35032 = x_35030 && y_35031;
            bool index_certs_35033;
            
            if (!bounds_check_35032) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 12) ==
                        -1) {
                        global_failure_args[0] = i_35029;
                        global_failure_args[1] = N_24750;
                        ;
                    }
                    return;
                }
            }
            
            float res_35034 = ((__global float *) res_mem_37111)[gtid_34664 *
                                                                 N_24750 +
                                                                 i_35029];
            
            res_35027 = res_35034;
        } else {
            res_35027 = INFINITY;
        }
        ((__global float *) mem_37430)[gtid_34664 * iota32_arg_25134 +
                                       gtid_34665] = res_35027;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35009
}
__kernel void mainzisegmap_34728(__global int *global_failure, int64_t m_24751,
                                 __global unsigned char *mem_37408, __global
                                 unsigned char *mem_37415, __global
                                 unsigned char *mem_37417, __global
                                 unsigned char *mem_37419, __global
                                 unsigned char *mem_37422, __global
                                 unsigned char *mem_37424, __global
                                 unsigned char *mem_37426)
{
    #define segmap_group_sizze_34976 (mainzisegmap_group_sizze_34730)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38808;
    int32_t local_tid_38809;
    int64_t group_sizze_38812;
    int32_t wave_sizze_38811;
    int32_t group_tid_38810;
    
    global_tid_38808 = get_global_id(0);
    local_tid_38809 = get_local_id(0);
    group_sizze_38812 = get_local_size(0);
    wave_sizze_38811 = LOCKSTEP_WIDTH;
    group_tid_38810 = get_group_id(0);
    
    int32_t phys_tid_34728;
    
    phys_tid_34728 = global_tid_38808;
    
    int64_t gtid_34727;
    
    gtid_34727 = sext_i32_i64(group_tid_38810) * segmap_group_sizze_34976 +
        sext_i32_i64(local_tid_38809);
    if (slt64(gtid_34727, m_24751)) {
        int32_t y_34981 = ((__global int32_t *) mem_37408)[gtid_34727];
        bool acc0_34983 = ((__global bool *) mem_37415)[gtid_34727];
        float acc0_34985 = ((__global float *) mem_37419)[gtid_34727];
        bool x_34988 = acc0_34983 && acc0_34983;
        int32_t res_34992;
        
        if (acc0_34983) {
            int32_t acc0_34984 = ((__global int32_t *) mem_37417)[gtid_34727];
            
            res_34992 = acc0_34984;
        } else {
            res_34992 = -1;
        }
        
        float res_34998 = sitofp_i32_f32(y_34981);
        float res_34999 = acc0_34985 / res_34998;
        
        ((__global bool *) mem_37422)[gtid_34727] = x_34988;
        ((__global int32_t *) mem_37424)[gtid_34727] = res_34992;
        ((__global float *) mem_37426)[gtid_34727] = res_34999;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34976
}
__kernel void mainzisegmap_34853(__global int *global_failure, int64_t m_24751,
                                 int64_t num_groups_34876, __global
                                 unsigned char *res_mem_37110, __global
                                 unsigned char *res_mem_37191, __global
                                 unsigned char *res_mem_37192, __global
                                 unsigned char *mem_37406, __global
                                 unsigned char *mem_37408)
{
    #define segmap_group_sizze_34875 (mainzisegmap_group_sizze_34855)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38646;
    int32_t local_tid_38647;
    int64_t group_sizze_38650;
    int32_t wave_sizze_38649;
    int32_t group_tid_38648;
    
    global_tid_38646 = get_global_id(0);
    local_tid_38647 = get_local_id(0);
    group_sizze_38650 = get_local_size(0);
    wave_sizze_38649 = LOCKSTEP_WIDTH;
    group_tid_38648 = get_group_id(0);
    
    int32_t phys_tid_34853;
    
    phys_tid_34853 = global_tid_38646;
    
    int32_t phys_group_id_38651;
    
    phys_group_id_38651 = get_group_id(0);
    for (int32_t i_38652 = 0; i_38652 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751, segmap_group_sizze_34875)) -
                   phys_group_id_38651, sext_i64_i32(num_groups_34876));
         i_38652++) {
        int32_t virt_group_id_38653 = phys_group_id_38651 + i_38652 *
                sext_i64_i32(num_groups_34876);
        int64_t gtid_34852 = sext_i32_i64(virt_group_id_38653) *
                segmap_group_sizze_34875 + sext_i32_i64(local_tid_38647);
        
        if (slt64(gtid_34852, m_24751)) {
            int32_t x_34882 = ((__global int32_t *) res_mem_37110)[gtid_34852];
            int32_t x_34883 = ((__global int32_t *) res_mem_37191)[gtid_34852];
            float x_34884 = ((__global float *) res_mem_37192)[gtid_34852];
            int32_t y_34885 = sub32(x_34882, x_34883);
            float res_34886 = sitofp_i32_f32(x_34883);
            float res_34887;
            
            res_34887 = futrts_sqrt32(res_34886);
            
            float y_34888 = x_34884 * res_34887;
            
            ((__global float *) mem_37406)[gtid_34852] = y_34888;
            ((__global int32_t *) mem_37408)[gtid_34852] = y_34885;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34875
}
__kernel void mainzisegmap_intragroup_31273(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *mem_36786_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_36776_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_36766_backing_aligned_2,
                                            int32_t k2p2zq_24768,
                                            int64_t res_24770, int64_t m_24901,
                                            int64_t nm_24902, int32_t res_24910,
                                            int64_t computed_group_sizze_31214,
                                            __global
                                            unsigned char *res_mem_36762,
                                            __global unsigned char *mem_36790)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36786_backing_2 = (__local volatile
                                                           char *) mem_36786_backing_aligned_0;
    __local volatile char *restrict mem_36776_backing_1 = (__local volatile
                                                           char *) mem_36776_backing_aligned_1;
    __local volatile char *restrict mem_36766_backing_0 = (__local volatile
                                                           char *) mem_36766_backing_aligned_2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_37879;
    int32_t local_tid_37880;
    int64_t group_sizze_37883;
    int32_t wave_sizze_37882;
    int32_t group_tid_37881;
    
    global_tid_37879 = get_global_id(0);
    local_tid_37880 = get_local_id(0);
    group_sizze_37883 = get_local_size(0);
    wave_sizze_37882 = LOCKSTEP_WIDTH;
    group_tid_37881 = get_group_id(0);
    
    int32_t phys_tid_31273;
    
    phys_tid_31273 = group_tid_37881;
    
    int32_t ltid_pre_37884;
    
    ltid_pre_37884 = squot32(local_tid_37880, sext_i64_i32(res_24770));
    
    int32_t ltid_pre_37885;
    
    ltid_pre_37885 = local_tid_37880 - squot32(local_tid_37880,
                                               sext_i64_i32(res_24770)) *
        sext_i64_i32(res_24770);
    
    int32_t ltid_pre_37886;
    
    ltid_pre_37886 = local_tid_37880;
    
    int64_t gtid_31212;
    
    gtid_31212 = sext_i32_i64(group_tid_37881);
    
    __local char *mem_36766;
    
    mem_36766 = (__local char *) mem_36766_backing_0;
    
    int64_t gtid_31215 = sext_i32_i64(ltid_pre_37886);
    int32_t phys_tid_31216 = local_tid_37880;
    
    if (slt64(gtid_31215, nm_24902)) {
        int64_t res_31412 = sdiv64(gtid_31215, m_24901);
        int64_t res_31413 = smod64(gtid_31215, m_24901);
        bool cond_31414 = slt64(res_31413, res_24770);
        float res_31415;
        
        if (cond_31414) {
            float res_31416 = ((__global float *) res_mem_36762)[gtid_31212 *
                                                                 (res_24770 *
                                                                  res_24770) +
                                                                 res_31412 *
                                                                 res_24770 +
                                                                 res_31413];
            
            res_31415 = res_31416;
        } else {
            int64_t y_31417 = add64(res_24770, res_31412);
            bool cond_31418 = res_31413 == y_31417;
            float res_31419;
            
            if (cond_31418) {
                res_31419 = 1.0F;
            } else {
                res_31419 = 0.0F;
            }
            res_31415 = res_31419;
        }
        ((__local float *) mem_36766)[gtid_31215] = res_31415;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_36776;
    
    mem_36776 = (__local char *) mem_36776_backing_1;
    for (int32_t i_31421 = 0; i_31421 < k2p2zq_24768; i_31421++) {
        int64_t i_31423 = sext_i32_i64(i_31421);
        bool x_31424 = sle64(0, i_31423);
        bool y_31425 = slt64(i_31423, nm_24902);
        bool bounds_check_31426 = x_31424 && y_31425;
        bool index_certs_31427;
        
        if (!bounds_check_31426) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                    global_failure_args[0] = i_31423;
                    global_failure_args[1] = nm_24902;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_31428 = ((__local float *) mem_36766)[i_31423];
        bool cond_31429 = v1_31428 == 0.0F;
        int64_t gtid_31226 = sext_i32_i64(ltid_pre_37886);
        int32_t phys_tid_31227 = local_tid_37880;
        
        if (slt64(gtid_31226, nm_24902)) {
            int32_t res_31432 = sext_i64_i32(gtid_31226);
            int32_t res_31433 = sdiv32(res_31432, res_24910);
            int32_t res_31434 = smod32(res_31432, res_24910);
            float res_31435;
            
            if (cond_31429) {
                int32_t x_31436 = mul32(res_24910, res_31433);
                int32_t i_31437 = add32(res_31434, x_31436);
                int64_t i_31438 = sext_i32_i64(i_31437);
                float res_31439 = ((__local float *) mem_36766)[i_31438];
                
                res_31435 = res_31439;
            } else {
                int64_t j_31440 = sext_i32_i64(res_31434);
                float x_31441 = ((__local float *) mem_36766)[j_31440];
                float x_31442 = x_31441 / v1_31428;
                int32_t y_31443 = sub32(k2p2zq_24768, 1);
                bool cond_31444 = slt32(res_31433, y_31443);
                float res_31445;
                
                if (cond_31444) {
                    int32_t x_31446 = add32(1, res_31433);
                    int32_t x_31447 = mul32(res_24910, x_31446);
                    int32_t i_31448 = add32(res_31434, x_31447);
                    int64_t i_31449 = sext_i32_i64(i_31448);
                    float x_31450 = ((__local float *) mem_36766)[i_31449];
                    int32_t i_31451 = add32(i_31421, x_31447);
                    int64_t i_31452 = sext_i32_i64(i_31451);
                    float x_31453 = ((__local float *) mem_36766)[i_31452];
                    float y_31454 = x_31442 * x_31453;
                    float res_31455 = x_31450 - y_31454;
                    
                    res_31445 = res_31455;
                } else {
                    res_31445 = x_31442;
                }
                res_31435 = res_31445;
            }
            ((__local float *) mem_36776)[gtid_31226] = res_31435;
        }
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_31253 = sext_i32_i64(ltid_pre_37886);
        int32_t phys_tid_31254 = local_tid_37880;
        
        if (slt64(write_i_31253, nm_24902)) {
            float write_value_31458 = ((__local
                                        float *) mem_36776)[write_i_31253];
            
            if (sle64(0, write_i_31253) && slt64(write_i_31253, nm_24902)) {
                ((__local float *) mem_36766)[write_i_31253] =
                    write_value_31458;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    __local char *mem_36786;
    
    mem_36786 = (__local char *) mem_36786_backing_2;
    
    int64_t gtid_31256 = sext_i32_i64(ltid_pre_37884);
    int64_t gtid_31257 = sext_i32_i64(ltid_pre_37885);
    int32_t phys_tid_31258 = local_tid_37880;
    
    if (slt64(gtid_31256, res_24770) && slt64(gtid_31257, res_24770)) {
        int64_t index_primexp_35325 = m_24901 * gtid_31256;
        int64_t i_31465 = add64(res_24770, gtid_31257);
        int64_t new_index_31466 = i_31465 + index_primexp_35325;
        float res_31467 = ((__local float *) mem_36766)[new_index_31466];
        
        ((__local float *) mem_36786)[gtid_31256 * res_24770 + gtid_31257] =
            res_31467;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_37888 = 0; i_37888 < sdiv_up64(res_24770 * res_24770 -
                                                  sext_i32_i64(local_tid_37880),
                                                  computed_group_sizze_31214);
         i_37888++) {
        ((__global float *) mem_36790)[gtid_31212 * (res_24770 * res_24770) +
                                       squot64(i_37888 *
                                               computed_group_sizze_31214 +
                                               sext_i32_i64(local_tid_37880),
                                               res_24770) * res_24770 +
                                       (i_37888 * computed_group_sizze_31214 +
                                        sext_i32_i64(local_tid_37880) -
                                        squot64(i_37888 *
                                                computed_group_sizze_31214 +
                                                sext_i32_i64(local_tid_37880),
                                                res_24770) * res_24770)] =
            ((__local float *) mem_36786)[squot64(i_37888 *
                                                  computed_group_sizze_31214 +
                                                  sext_i32_i64(local_tid_37880),
                                                  res_24770) * res_24770 +
                                          (i_37888 *
                                           computed_group_sizze_31214 +
                                           sext_i32_i64(local_tid_37880) -
                                           squot64(i_37888 *
                                                   computed_group_sizze_31214 +
                                                   sext_i32_i64(local_tid_37880),
                                                   res_24770) * res_24770)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_31617(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_36811_backing_aligned_0,
                                            int64_t m_24751,
                                            int32_t k2p2zq_24768,
                                            int64_t nm_24902, int32_t res_24910,
                                            int32_t i_32004, int64_t i_32006,
                                            int64_t ctx_param_ext_36797,
                                            int64_t ctx_param_ext_36798,
                                            int64_t ctx_param_ext_36800,
                                            __global
                                            unsigned char *mem_param_36802,
                                            __global unsigned char *mem_36807,
                                            __global unsigned char *mem_36815)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36811_backing_0 = (__local volatile
                                                           char *) mem_36811_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37915;
    int32_t local_tid_37916;
    int64_t group_sizze_37919;
    int32_t wave_sizze_37918;
    int32_t group_tid_37917;
    
    global_tid_37915 = get_global_id(0);
    local_tid_37916 = get_local_id(0);
    group_sizze_37919 = get_local_size(0);
    wave_sizze_37918 = LOCKSTEP_WIDTH;
    group_tid_37917 = get_group_id(0);
    
    int32_t phys_tid_31617;
    
    phys_tid_31617 = group_tid_37917;
    
    int32_t ltid_pre_37920;
    
    ltid_pre_37920 = local_tid_37916;
    
    int64_t gtid_31585;
    
    gtid_31585 = sext_i32_i64(group_tid_37917);
    
    float v1_32023 = ((__global float *) mem_param_36802)[ctx_param_ext_36797 +
                                                          (gtid_31585 *
                                                           ctx_param_ext_36798 +
                                                           i_32006 *
                                                           ctx_param_ext_36800)];
    bool cond_32024 = v1_32023 == 0.0F;
    __local char *mem_36811;
    
    mem_36811 = (__local char *) mem_36811_backing_0;
    
    int64_t gtid_31588 = sext_i32_i64(ltid_pre_37920);
    int32_t phys_tid_31589 = local_tid_37916;
    
    if (slt64(gtid_31588, nm_24902)) {
        int32_t res_32027 = sext_i64_i32(gtid_31588);
        int32_t res_32028 = sdiv32(res_32027, res_24910);
        int32_t res_32029 = smod32(res_32027, res_24910);
        float res_32030;
        
        if (cond_32024) {
            int32_t x_32031 = mul32(res_24910, res_32028);
            int32_t i_32032 = add32(res_32029, x_32031);
            int64_t i_32033 = sext_i32_i64(i_32032);
            float res_32034 = ((__global
                                float *) mem_param_36802)[ctx_param_ext_36797 +
                                                          (gtid_31585 *
                                                           ctx_param_ext_36798 +
                                                           i_32033 *
                                                           ctx_param_ext_36800)];
            
            res_32030 = res_32034;
        } else {
            int64_t j_32035 = sext_i32_i64(res_32029);
            float x_32036 = ((__global
                              float *) mem_param_36802)[ctx_param_ext_36797 +
                                                        (gtid_31585 *
                                                         ctx_param_ext_36798 +
                                                         j_32035 *
                                                         ctx_param_ext_36800)];
            float x_32037 = x_32036 / v1_32023;
            int32_t y_32038 = sub32(k2p2zq_24768, 1);
            bool cond_32039 = slt32(res_32028, y_32038);
            float res_32040;
            
            if (cond_32039) {
                int32_t x_32041 = add32(1, res_32028);
                int32_t x_32042 = mul32(res_24910, x_32041);
                int32_t i_32043 = add32(res_32029, x_32042);
                int64_t i_32044 = sext_i32_i64(i_32043);
                float x_32045 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_31585 *
                                                             ctx_param_ext_36798 +
                                                             i_32044 *
                                                             ctx_param_ext_36800)];
                int32_t i_32046 = add32(i_32004, x_32042);
                int64_t i_32047 = sext_i32_i64(i_32046);
                float x_32048 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_31585 *
                                                             ctx_param_ext_36798 +
                                                             i_32047 *
                                                             ctx_param_ext_36800)];
                float y_32049 = x_32037 * x_32048;
                float res_32050 = x_32045 - y_32049;
                
                res_32040 = res_32050;
            } else {
                res_32040 = x_32037;
            }
            res_32030 = res_32040;
        }
        ((__local float *) mem_36811)[gtid_31588] = res_32030;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_31615 = sext_i32_i64(ltid_pre_37920);
    int32_t phys_tid_31616 = local_tid_37916;
    
    if (slt64(write_i_31615, nm_24902)) {
        float write_value_32053 = ((__local float *) mem_36811)[write_i_31615];
        
        if (sle64(0, write_i_31615) && slt64(write_i_31615, nm_24902)) {
            ((__global float *) mem_36807)[gtid_31585 + write_i_31615 *
                                           m_24751] = write_value_32053;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_37916 == 0) {
        for (int64_t i_37921 = 0; i_37921 < nm_24902; i_37921++) {
            ((__global float *) mem_36815)[gtid_31585 * nm_24902 + i_37921] =
                ((__global float *) mem_36807)[gtid_31585 + i_37921 * m_24751];
        }
    }
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_32591(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37089_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37087_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37085_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37083_backing_aligned_3,
                                            int64_t N_24750, int64_t N_24752,
                                            int64_t i_25017, __global
                                            unsigned char *images_mem_36652,
                                            __global
                                            unsigned char *res_mem_37073,
                                            __global unsigned char *mem_37092,
                                            __global unsigned char *mem_37095,
                                            __global unsigned char *mem_37098)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37089_backing_3 = (__local volatile
                                                           char *) mem_37089_backing_aligned_0;
    __local volatile char *restrict mem_37087_backing_2 = (__local volatile
                                                           char *) mem_37087_backing_aligned_1;
    __local volatile char *restrict mem_37085_backing_1 = (__local volatile
                                                           char *) mem_37085_backing_aligned_2;
    __local volatile char *restrict mem_37083_backing_0 = (__local volatile
                                                           char *) mem_37083_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38220;
    int32_t local_tid_38221;
    int64_t group_sizze_38224;
    int32_t wave_sizze_38223;
    int32_t group_tid_38222;
    
    global_tid_38220 = get_global_id(0);
    local_tid_38221 = get_local_id(0);
    group_sizze_38224 = get_local_size(0);
    wave_sizze_38223 = LOCKSTEP_WIDTH;
    group_tid_38222 = get_group_id(0);
    
    int32_t phys_tid_32591;
    
    phys_tid_32591 = group_tid_38222;
    
    int32_t ltid_pre_38225;
    
    ltid_pre_38225 = local_tid_38221;
    
    int64_t gtid_32584;
    
    gtid_32584 = sext_i32_i64(group_tid_38222);
    
    __local char *mem_37083;
    
    mem_37083 = (__local char *) mem_37083_backing_0;
    
    __local char *mem_37085;
    
    mem_37085 = (__local char *) mem_37085_backing_1;
    
    int64_t gtid_32587 = sext_i32_i64(ltid_pre_38225);
    int32_t phys_tid_32588 = local_tid_38221;
    
    if (slt64(gtid_32587, N_24750)) {
        float x_32680 = ((__global float *) images_mem_36652)[gtid_32584 *
                                                              N_24752 +
                                                              gtid_32587];
        bool res_32682;
        
        res_32682 = futrts_isnan32(x_32680);
        
        bool cond_32683 = !res_32682;
        float res_32684;
        
        if (cond_32683) {
            float x_32681 = ((__global float *) res_mem_37073)[gtid_32584 *
                                                               N_24750 +
                                                               gtid_32587];
            float res_32685 = x_32680 - x_32681;
            
            res_32684 = res_32685;
        } else {
            res_32684 = NAN;
        }
        
        bool res_32686;
        
        res_32686 = futrts_isnan32(res_32684);
        
        bool res_32687 = !res_32686;
        int64_t res_32688 = btoi_bool_i64(res_32687);
        
        ((__local int64_t *) mem_37083)[gtid_32587] = res_32688;
        ((__local float *) mem_37085)[gtid_32587] = res_32684;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38226;
    
    dims_flat_38226 = N_24750;
    
    int64_t x_32677;
    int64_t x_32678;
    int64_t x_38228;
    int64_t x_38229;
    bool ltid_in_bounds_38231;
    
    ltid_in_bounds_38231 = slt64(sext_i32_i64(local_tid_38221), N_24750);
    
    int32_t skip_threads_38232;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38231) {
            x_32678 = ((volatile __local
                        int64_t *) mem_37083)[sext_i32_i64(local_tid_38221)];
            if ((local_tid_38221 - squot32(local_tid_38221, 32) * 32) == 0) {
                x_32677 = x_32678;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38232 = 1;
        while (slt32(skip_threads_38232, 32)) {
            if (sle32(skip_threads_38232, local_tid_38221 -
                      squot32(local_tid_38221, 32) * 32) &&
                ltid_in_bounds_38231) {
                // read operands
                {
                    x_32677 = ((volatile __local
                                int64_t *) mem_37083)[sext_i32_i64(local_tid_38221) -
                                                      sext_i32_i64(skip_threads_38232)];
                }
                // perform operation
                {
                    bool inactive_38233 =
                         slt64(srem64(sext_i32_i64(local_tid_38221), N_24750),
                               sext_i32_i64(local_tid_38221) -
                               sext_i32_i64(local_tid_38221 -
                               skip_threads_38232));
                    
                    if (inactive_38233) {
                        x_32677 = x_32678;
                    }
                    if (!inactive_38233) {
                        int64_t res_32679 = add64(x_32677, x_32678);
                        
                        x_32677 = res_32679;
                    }
                }
            }
            if (sle32(wave_sizze_38223, skip_threads_38232)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38232, local_tid_38221 -
                      squot32(local_tid_38221, 32) * 32) &&
                ltid_in_bounds_38231) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37083)[sext_i32_i64(local_tid_38221)] =
                        x_32677;
                    x_32678 = x_32677;
                }
            }
            if (sle32(wave_sizze_38223, skip_threads_38232)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38232 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38221 - squot32(local_tid_38221, 32) * 32) == 31 &&
            ltid_in_bounds_38231) {
            ((volatile __local
              int64_t *) mem_37083)[sext_i32_i64(squot32(local_tid_38221,
                                                         32))] = x_32677;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38234;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38221, 32) == 0 && ltid_in_bounds_38231) {
                x_38229 = ((volatile __local
                            int64_t *) mem_37083)[sext_i32_i64(local_tid_38221)];
                if ((local_tid_38221 - squot32(local_tid_38221, 32) * 32) ==
                    0) {
                    x_38228 = x_38229;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38234 = 1;
            while (slt32(skip_threads_38234, 32)) {
                if (sle32(skip_threads_38234, local_tid_38221 -
                          squot32(local_tid_38221, 32) * 32) &&
                    (squot32(local_tid_38221, 32) == 0 &&
                     ltid_in_bounds_38231)) {
                    // read operands
                    {
                        x_38228 = ((volatile __local
                                    int64_t *) mem_37083)[sext_i32_i64(local_tid_38221) -
                                                          sext_i32_i64(skip_threads_38234)];
                    }
                    // perform operation
                    {
                        bool inactive_38235 =
                             slt64(srem64(sext_i32_i64(local_tid_38221 * 32 +
                                          32 - 1), N_24750),
                                   sext_i32_i64(local_tid_38221 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38221 -
                                                 skip_threads_38234) * 32 + 32 -
                                   1));
                        
                        if (inactive_38235) {
                            x_38228 = x_38229;
                        }
                        if (!inactive_38235) {
                            int64_t res_38230 = add64(x_38228, x_38229);
                            
                            x_38228 = res_38230;
                        }
                    }
                }
                if (sle32(wave_sizze_38223, skip_threads_38234)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38234, local_tid_38221 -
                          squot32(local_tid_38221, 32) * 32) &&
                    (squot32(local_tid_38221, 32) == 0 &&
                     ltid_in_bounds_38231)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37083)[sext_i32_i64(local_tid_38221)] =
                            x_38228;
                        x_38229 = x_38228;
                    }
                }
                if (sle32(wave_sizze_38223, skip_threads_38234)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38234 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38221, 32) == 0 || !ltid_in_bounds_38231)) {
            // read operands
            {
                x_32678 = x_32677;
                x_32677 = ((__local
                            int64_t *) mem_37083)[sext_i32_i64(squot32(local_tid_38221,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38236 =
                     slt64(srem64(sext_i32_i64(local_tid_38221), N_24750),
                           sext_i32_i64(local_tid_38221) -
                           sext_i32_i64(squot32(local_tid_38221, 32) * 32 - 1));
                
                if (inactive_38236) {
                    x_32677 = x_32678;
                }
                if (!inactive_38236) {
                    int64_t res_32679 = add64(x_32677, x_32678);
                    
                    x_32677 = res_32679;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37083)[sext_i32_i64(local_tid_38221)] =
                    x_32677;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38221, 32) == 0) {
            ((__local int64_t *) mem_37083)[sext_i32_i64(local_tid_38221)] =
                x_32678;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_32689 = ((__local int64_t *) mem_37083)[i_25017];
    int32_t res_32690 = sext_i64_i32(res_32689);
    __local char *mem_37087;
    
    mem_37087 = (__local char *) mem_37087_backing_2;
    ((__local float *) mem_37087)[sext_i32_i64(local_tid_38221)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37089;
    
    mem_37089 = (__local char *) mem_37089_backing_3;
    ((__local int32_t *) mem_37089)[sext_i32_i64(local_tid_38221)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_32589 = sext_i32_i64(ltid_pre_38225);
    int32_t phys_tid_32590 = local_tid_38221;
    
    if (slt64(write_i_32589, N_24750)) {
        float x_32695 = ((__local float *) mem_37085)[write_i_32589];
        int32_t index_primexp_35347 = sext_i64_i32(write_i_32589);
        bool res_32698;
        
        res_32698 = futrts_isnan32(x_32695);
        
        bool res_32699 = !res_32698;
        int64_t res_32700;
        
        if (res_32699) {
            int64_t x_32696 = ((__local int64_t *) mem_37083)[write_i_32589];
            int64_t res_32701 = sub64(x_32696, 1);
            
            res_32700 = res_32701;
        } else {
            res_32700 = -1;
        }
        if (sle64(0, res_32700) && slt64(res_32700, N_24750)) {
            ((__local int32_t *) mem_37089)[res_32700] = index_primexp_35347;
        }
        if (sle64(0, res_32700) && slt64(res_32700, N_24750)) {
            ((__local float *) mem_37087)[res_32700] = x_32695;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38221 == 0) {
        ((__global int32_t *) mem_37092)[gtid_32584] = res_32690;
    }
    ((__global float *) mem_37095)[gtid_32584 * N_24750 +
                                   sext_i32_i64(local_tid_38221)] = ((__local
                                                                      float *) mem_37087)[sext_i32_i64(local_tid_38221)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_37098)[gtid_32584 * N_24750 +
                                     sext_i32_i64(local_tid_38221)] = ((__local
                                                                        int32_t *) mem_37089)[sext_i32_i64(local_tid_38221)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_32931(__global int *global_failure,
                                            __local volatile
                                            int64_t *red_arr_mem_38329_backing_aligned_0,
                                            __local volatile
                                            int64_t *red_arr_mem_38325_backing_aligned_1,
                                            int64_t N_24750, int64_t N_24752,
                                            float hfrac_24757,
                                            int64_t res_24764,
                                            int32_t k2p2_24766, __global
                                            unsigned char *images_mem_36652,
                                            __global
                                            unsigned char *res_mem_37111,
                                            __global unsigned char *mem_37171,
                                            __global unsigned char *mem_37173,
                                            __global unsigned char *mem_37175)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38329_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38329_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38325_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38325_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38319;
    int32_t local_tid_38320;
    int64_t group_sizze_38323;
    int32_t wave_sizze_38322;
    int32_t group_tid_38321;
    
    global_tid_38319 = get_global_id(0);
    local_tid_38320 = get_local_id(0);
    group_sizze_38323 = get_local_size(0);
    wave_sizze_38322 = LOCKSTEP_WIDTH;
    group_tid_38321 = get_group_id(0);
    
    int32_t phys_tid_32931;
    
    phys_tid_32931 = group_tid_38321;
    
    int32_t ltid_pre_38324;
    
    ltid_pre_38324 = local_tid_38320;
    
    int64_t gtid_32924;
    
    gtid_32924 = sext_i32_i64(group_tid_38321);
    
    int32_t res_33008;
    int64_t gtid_32927 = sext_i32_i64(ltid_pre_38324);
    int32_t phys_tid_32928 = local_tid_38320;
    __local char *red_arr_mem_38325;
    
    red_arr_mem_38325 = (__local char *) red_arr_mem_38325_backing_0;
    if (slt64(gtid_32927, res_24764)) {
        float x_33012 = ((__global float *) images_mem_36652)[gtid_32924 *
                                                              N_24752 +
                                                              gtid_32927];
        bool res_33013;
        
        res_33013 = futrts_isnan32(x_33012);
        
        bool cond_33014 = !res_33013;
        int32_t res_33015 = btoi_bool_i32(cond_33014);
        
        ((__local int32_t *) red_arr_mem_38325)[gtid_32927] = res_33015;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38327;
    int32_t skip_waves_38328;
    
    skip_waves_38328 = 1;
    
    int32_t x_33009;
    int32_t x_33010;
    
    offset_38327 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38320, sext_i64_i32(res_24764))) {
            x_33009 = ((__local
                        int32_t *) red_arr_mem_38325)[sext_i32_i64(local_tid_38320 +
                                                      offset_38327)];
        }
    }
    offset_38327 = 1;
    while (slt32(offset_38327, wave_sizze_38322)) {
        if (slt32(local_tid_38320 + offset_38327, sext_i64_i32(res_24764)) &&
            ((local_tid_38320 - squot32(local_tid_38320, wave_sizze_38322) *
              wave_sizze_38322) & (2 * offset_38327 - 1)) == 0) {
            // read array element
            {
                x_33010 = ((volatile __local
                            int32_t *) red_arr_mem_38325)[sext_i32_i64(local_tid_38320 +
                                                          offset_38327)];
            }
            // apply reduction operation
            {
                int32_t res_33011 = add32(x_33009, x_33010);
                
                x_33009 = res_33011;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38325)[sext_i32_i64(local_tid_38320)] =
                    x_33009;
            }
        }
        offset_38327 *= 2;
    }
    while (slt32(skip_waves_38328, squot32(sext_i64_i32(res_24764) +
                                           wave_sizze_38322 - 1,
                                           wave_sizze_38322))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38327 = skip_waves_38328 * wave_sizze_38322;
        if (slt32(local_tid_38320 + offset_38327, sext_i64_i32(res_24764)) &&
            ((local_tid_38320 - squot32(local_tid_38320, wave_sizze_38322) *
              wave_sizze_38322) == 0 && (squot32(local_tid_38320,
                                                 wave_sizze_38322) & (2 *
                                                                      skip_waves_38328 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_33010 = ((__local
                            int32_t *) red_arr_mem_38325)[sext_i32_i64(local_tid_38320 +
                                                          offset_38327)];
            }
            // apply reduction operation
            {
                int32_t res_33011 = add32(x_33009, x_33010);
                
                x_33009 = res_33011;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38325)[sext_i32_i64(local_tid_38320)] =
                    x_33009;
            }
        }
        skip_waves_38328 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_33008 = ((__local int32_t *) red_arr_mem_38325)[0];
    
    float res_33016;
    int64_t gtid_32929 = sext_i32_i64(ltid_pre_38324);
    int32_t phys_tid_32930 = local_tid_38320;
    __local char *red_arr_mem_38329;
    
    red_arr_mem_38329 = (__local char *) red_arr_mem_38329_backing_1;
    if (slt64(gtid_32929, res_24764)) {
        int32_t index_primexp_35355 = sext_i64_i32(gtid_32929);
        bool cond_33021 = slt32(index_primexp_35355, res_33008);
        float res_33022;
        
        if (cond_33021) {
            int64_t i_33023 = sext_i32_i64(index_primexp_35355);
            float res_33024 = ((__global float *) res_mem_37111)[gtid_32924 *
                                                                 N_24750 +
                                                                 i_33023];
            
            res_33022 = res_33024;
        } else {
            res_33022 = 0.0F;
        }
        
        float res_33025 = res_33022 * res_33022;
        
        ((__local float *) red_arr_mem_38329)[gtid_32929] = res_33025;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38331;
    int32_t skip_waves_38332;
    
    skip_waves_38332 = 1;
    
    float x_33017;
    float x_33018;
    
    offset_38331 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38320, sext_i64_i32(res_24764))) {
            x_33017 = ((__local
                        float *) red_arr_mem_38329)[sext_i32_i64(local_tid_38320 +
                                                    offset_38331)];
        }
    }
    offset_38331 = 1;
    while (slt32(offset_38331, wave_sizze_38322)) {
        if (slt32(local_tid_38320 + offset_38331, sext_i64_i32(res_24764)) &&
            ((local_tid_38320 - squot32(local_tid_38320, wave_sizze_38322) *
              wave_sizze_38322) & (2 * offset_38331 - 1)) == 0) {
            // read array element
            {
                x_33018 = ((volatile __local
                            float *) red_arr_mem_38329)[sext_i32_i64(local_tid_38320 +
                                                        offset_38331)];
            }
            // apply reduction operation
            {
                float res_33019 = x_33017 + x_33018;
                
                x_33017 = res_33019;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_38329)[sext_i32_i64(local_tid_38320)] =
                    x_33017;
            }
        }
        offset_38331 *= 2;
    }
    while (slt32(skip_waves_38332, squot32(sext_i64_i32(res_24764) +
                                           wave_sizze_38322 - 1,
                                           wave_sizze_38322))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38331 = skip_waves_38332 * wave_sizze_38322;
        if (slt32(local_tid_38320 + offset_38331, sext_i64_i32(res_24764)) &&
            ((local_tid_38320 - squot32(local_tid_38320, wave_sizze_38322) *
              wave_sizze_38322) == 0 && (squot32(local_tid_38320,
                                                 wave_sizze_38322) & (2 *
                                                                      skip_waves_38332 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_33018 = ((__local
                            float *) red_arr_mem_38329)[sext_i32_i64(local_tid_38320 +
                                                        offset_38331)];
            }
            // apply reduction operation
            {
                float res_33019 = x_33017 + x_33018;
                
                x_33017 = res_33019;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_38329)[sext_i32_i64(local_tid_38320)] =
                    x_33017;
            }
        }
        skip_waves_38332 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_33016 = ((__local float *) red_arr_mem_38329)[0];
    
    int32_t r32_arg_33026 = sub32(res_33008, k2p2_24766);
    float res_33027 = sitofp_i32_f32(r32_arg_33026);
    float sqrt_arg_33028 = res_33016 / res_33027;
    float res_33029;
    
    res_33029 = futrts_sqrt32(sqrt_arg_33028);
    
    float res_33030 = sitofp_i32_f32(res_33008);
    float t32_arg_33031 = hfrac_24757 * res_33030;
    int32_t res_33032 = fptosi_f32_i32(t32_arg_33031);
    
    if (local_tid_38320 == 0) {
        ((__global int32_t *) mem_37171)[gtid_32924] = res_33032;
    }
    if (local_tid_38320 == 0) {
        ((__global int32_t *) mem_37173)[gtid_32924] = res_33008;
    }
    if (local_tid_38320 == 0) {
        ((__global float *) mem_37175)[gtid_32924] = res_33029;
    }
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_33377(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *mem_37389_backing_aligned_0,
                                            __local volatile
                                            int64_t *double_buffer_mem_37629_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37387_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37385_backing_aligned_3,
                                            __local volatile
                                            int64_t *mem_37383_backing_aligned_4,
                                            __local volatile
                                            int64_t *mem_37381_backing_aligned_5,
                                            __local volatile
                                            int64_t *mem_37379_backing_aligned_6,
                                            __local volatile
                                            int64_t *mem_37369_backing_aligned_7,
                                            __local volatile
                                            int64_t *red_arr_mem_38618_backing_aligned_8,
                                            __local volatile
                                            int64_t *red_arr_mem_38616_backing_aligned_9,
                                            __local volatile
                                            int64_t *red_arr_mem_38614_backing_aligned_10,
                                            __local volatile
                                            int64_t *mem_37365_backing_aligned_11,
                                            int64_t N_24750, int32_t n_24755,
                                            int64_t iota32_arg_25134,
                                            int32_t iters_25160,
                                            int64_t i_25162, __global
                                            unsigned char *res_mem_37110,
                                            __global
                                            unsigned char *res_mem_37111,
                                            __global
                                            unsigned char *res_mem_37112,
                                            __global
                                            unsigned char *res_mem_37190,
                                            __global
                                            unsigned char *res_mem_37191,
                                            __global
                                            unsigned char *res_mem_37192,
                                            __global
                                            unsigned char *res_mem_37241,
                                            __global unsigned char *mem_37246,
                                            __global unsigned char *mem_37399,
                                            __global unsigned char *mem_37401,
                                            __global unsigned char *mem_37403)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37389_backing_11 = (__local volatile
                                                            char *) mem_37389_backing_aligned_0;
    __local volatile char *restrict double_buffer_mem_37629_backing_10 =
                          (__local volatile
                           char *) double_buffer_mem_37629_backing_aligned_1;
    __local volatile char *restrict mem_37387_backing_9 = (__local volatile
                                                           char *) mem_37387_backing_aligned_2;
    __local volatile char *restrict mem_37385_backing_8 = (__local volatile
                                                           char *) mem_37385_backing_aligned_3;
    __local volatile char *restrict mem_37383_backing_7 = (__local volatile
                                                           char *) mem_37383_backing_aligned_4;
    __local volatile char *restrict mem_37381_backing_6 = (__local volatile
                                                           char *) mem_37381_backing_aligned_5;
    __local volatile char *restrict mem_37379_backing_5 = (__local volatile
                                                           char *) mem_37379_backing_aligned_6;
    __local volatile char *restrict mem_37369_backing_4 = (__local volatile
                                                           char *) mem_37369_backing_aligned_7;
    __local volatile char *restrict red_arr_mem_38618_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_38618_backing_aligned_8;
    __local volatile char *restrict red_arr_mem_38616_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38616_backing_aligned_9;
    __local volatile char *restrict red_arr_mem_38614_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38614_backing_aligned_10;
    __local volatile char *restrict mem_37365_backing_0 = (__local volatile
                                                           char *) mem_37365_backing_aligned_11;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_38597;
    int32_t local_tid_38598;
    int64_t group_sizze_38601;
    int32_t wave_sizze_38600;
    int32_t group_tid_38599;
    
    global_tid_38597 = get_global_id(0);
    local_tid_38598 = get_local_id(0);
    group_sizze_38601 = get_local_size(0);
    wave_sizze_38600 = LOCKSTEP_WIDTH;
    group_tid_38599 = get_group_id(0);
    
    int32_t phys_tid_33377;
    
    phys_tid_33377 = group_tid_38599;
    
    int32_t ltid_pre_38602;
    
    ltid_pre_38602 = local_tid_38598;
    
    int64_t gtid_33344;
    
    gtid_33344 = sext_i32_i64(group_tid_38599);
    
    int32_t x_33856;
    
    x_33856 = ((__global int32_t *) res_mem_37110)[gtid_33344];
    
    int32_t x_33857 = ((__global int32_t *) res_mem_37191)[gtid_33344];
    float x_33858 = ((__global float *) res_mem_37192)[gtid_33344];
    int32_t x_33859 = ((__global int32_t *) res_mem_37190)[gtid_33344];
    float x_33860 = ((__global float *) res_mem_37241)[gtid_33344];
    int32_t y_33863 = sub32(x_33856, x_33857);
    float res_33864 = sitofp_i32_f32(x_33857);
    float res_33865;
    
    res_33865 = futrts_sqrt32(res_33864);
    
    float y_33866 = x_33858 * res_33865;
    __local char *mem_37365;
    
    mem_37365 = (__local char *) mem_37365_backing_0;
    
    int64_t gtid_33347 = sext_i32_i64(ltid_pre_38602);
    int32_t phys_tid_33348 = local_tid_38598;
    
    if (slt64(gtid_33347, iota32_arg_25134)) {
        int32_t index_primexp_35368 = sext_i64_i32(gtid_33347);
        bool cond_33879 = sle32(y_33863, index_primexp_35368);
        float res_33880;
        
        if (cond_33879) {
            res_33880 = 0.0F;
        } else {
            bool cond_33881 = index_primexp_35368 == 0;
            float res_33882;
            
            if (cond_33881) {
                res_33882 = x_33860;
            } else {
                int32_t x_33883 = sub32(x_33857, x_33859);
                int32_t i_33884 = add32(x_33883, index_primexp_35368);
                int64_t i_33885 = sext_i32_i64(i_33884);
                float negate_arg_33886 = ((__global
                                           float *) res_mem_37111)[gtid_33344 *
                                                                   N_24750 +
                                                                   i_33885];
                float x_33887 = 0.0F - negate_arg_33886;
                int32_t i_33888 = add32(x_33857, index_primexp_35368);
                int64_t i_33889 = sext_i32_i64(i_33888);
                float y_33890 = ((__global float *) res_mem_37111)[gtid_33344 *
                                                                   N_24750 +
                                                                   i_33889];
                float res_33891 = x_33887 + y_33890;
                
                res_33882 = res_33891;
            }
            res_33880 = res_33882;
        }
        ((__local float *) mem_37365)[gtid_33347] = res_33880;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38603;
    
    dims_flat_38603 = iota32_arg_25134;
    
    float x_33875;
    float x_33876;
    float x_38605;
    float x_38606;
    bool ltid_in_bounds_38608;
    
    ltid_in_bounds_38608 = slt64(sext_i32_i64(local_tid_38598),
                                 iota32_arg_25134);
    
    int32_t skip_threads_38609;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38608) {
            x_33876 = ((volatile __local
                        float *) mem_37365)[sext_i32_i64(local_tid_38598)];
            if ((local_tid_38598 - squot32(local_tid_38598, 32) * 32) == 0) {
                x_33875 = x_33876;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38609 = 1;
        while (slt32(skip_threads_38609, 32)) {
            if (sle32(skip_threads_38609, local_tid_38598 -
                      squot32(local_tid_38598, 32) * 32) &&
                ltid_in_bounds_38608) {
                // read operands
                {
                    x_33875 = ((volatile __local
                                float *) mem_37365)[sext_i32_i64(local_tid_38598) -
                                                    sext_i32_i64(skip_threads_38609)];
                }
                // perform operation
                {
                    bool inactive_38610 =
                         slt64(srem64(sext_i32_i64(local_tid_38598),
                                      iota32_arg_25134),
                               sext_i32_i64(local_tid_38598) -
                               sext_i32_i64(local_tid_38598 -
                               skip_threads_38609));
                    
                    if (inactive_38610) {
                        x_33875 = x_33876;
                    }
                    if (!inactive_38610) {
                        float res_33877 = x_33875 + x_33876;
                        
                        x_33875 = res_33877;
                    }
                }
            }
            if (sle32(wave_sizze_38600, skip_threads_38609)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38609, local_tid_38598 -
                      squot32(local_tid_38598, 32) * 32) &&
                ltid_in_bounds_38608) {
                // write result
                {
                    ((volatile __local
                      float *) mem_37365)[sext_i32_i64(local_tid_38598)] =
                        x_33875;
                    x_33876 = x_33875;
                }
            }
            if (sle32(wave_sizze_38600, skip_threads_38609)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38609 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38598 - squot32(local_tid_38598, 32) * 32) == 31 &&
            ltid_in_bounds_38608) {
            ((volatile __local
              float *) mem_37365)[sext_i32_i64(squot32(local_tid_38598, 32))] =
                x_33875;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38611;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38598, 32) == 0 && ltid_in_bounds_38608) {
                x_38606 = ((volatile __local
                            float *) mem_37365)[sext_i32_i64(local_tid_38598)];
                if ((local_tid_38598 - squot32(local_tid_38598, 32) * 32) ==
                    0) {
                    x_38605 = x_38606;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38611 = 1;
            while (slt32(skip_threads_38611, 32)) {
                if (sle32(skip_threads_38611, local_tid_38598 -
                          squot32(local_tid_38598, 32) * 32) &&
                    (squot32(local_tid_38598, 32) == 0 &&
                     ltid_in_bounds_38608)) {
                    // read operands
                    {
                        x_38605 = ((volatile __local
                                    float *) mem_37365)[sext_i32_i64(local_tid_38598) -
                                                        sext_i32_i64(skip_threads_38611)];
                    }
                    // perform operation
                    {
                        bool inactive_38612 =
                             slt64(srem64(sext_i32_i64(local_tid_38598 * 32 +
                                          32 - 1), iota32_arg_25134),
                                   sext_i32_i64(local_tid_38598 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38598 -
                                                 skip_threads_38611) * 32 + 32 -
                                   1));
                        
                        if (inactive_38612) {
                            x_38605 = x_38606;
                        }
                        if (!inactive_38612) {
                            float res_38607 = x_38605 + x_38606;
                            
                            x_38605 = res_38607;
                        }
                    }
                }
                if (sle32(wave_sizze_38600, skip_threads_38611)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38611, local_tid_38598 -
                          squot32(local_tid_38598, 32) * 32) &&
                    (squot32(local_tid_38598, 32) == 0 &&
                     ltid_in_bounds_38608)) {
                    // write result
                    {
                        ((volatile __local
                          float *) mem_37365)[sext_i32_i64(local_tid_38598)] =
                            x_38605;
                        x_38606 = x_38605;
                    }
                }
                if (sle32(wave_sizze_38600, skip_threads_38611)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38611 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38598, 32) == 0 || !ltid_in_bounds_38608)) {
            // read operands
            {
                x_33876 = x_33875;
                x_33875 = ((__local
                            float *) mem_37365)[sext_i32_i64(squot32(local_tid_38598,
                                                                     32)) - 1];
            }
            // perform operation
            {
                bool inactive_38613 =
                     slt64(srem64(sext_i32_i64(local_tid_38598),
                                  iota32_arg_25134),
                           sext_i32_i64(local_tid_38598) -
                           sext_i32_i64(squot32(local_tid_38598, 32) * 32 - 1));
                
                if (inactive_38613) {
                    x_33875 = x_33876;
                }
                if (!inactive_38613) {
                    float res_33877 = x_33875 + x_33876;
                    
                    x_33875 = res_33877;
                }
            }
            // write final result
            {
                ((__local float *) mem_37365)[sext_i32_i64(local_tid_38598)] =
                    x_33875;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38598, 32) == 0) {
            ((__local float *) mem_37365)[sext_i32_i64(local_tid_38598)] =
                x_33876;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    bool acc0_33897;
    int32_t acc0_33898;
    float acc0_33899;
    int64_t gtid_33349 = sext_i32_i64(ltid_pre_38602);
    int32_t phys_tid_33350 = local_tid_38598;
    __local char *red_arr_mem_38614;
    
    red_arr_mem_38614 = (__local char *) red_arr_mem_38614_backing_1;
    
    __local char *red_arr_mem_38616;
    
    red_arr_mem_38616 = (__local char *) red_arr_mem_38616_backing_2;
    
    __local char *red_arr_mem_38618;
    
    red_arr_mem_38618 = (__local char *) red_arr_mem_38618_backing_3;
    if (slt64(gtid_33349, iota32_arg_25134)) {
        float x_33914 = ((__local float *) mem_37365)[gtid_33349];
        float x_33915 = ((__global float *) mem_37246)[gtid_33349];
        int32_t index_primexp_35371 = sext_i64_i32(gtid_33349);
        float res_33918 = x_33914 / y_33866;
        bool cond_33919 = slt32(index_primexp_35371, y_33863);
        bool res_33920;
        
        res_33920 = futrts_isnan32(res_33918);
        
        bool res_33921 = !res_33920;
        bool x_33922 = cond_33919 && res_33921;
        float res_33923 = (float) fabs(res_33918);
        bool res_33924 = x_33915 < res_33923;
        bool x_33925 = x_33922 && res_33924;
        float res_33926;
        
        if (cond_33919) {
            res_33926 = res_33918;
        } else {
            res_33926 = 0.0F;
        }
        ((__local bool *) red_arr_mem_38614)[gtid_33349] = x_33925;
        ((__local int32_t *) red_arr_mem_38616)[gtid_33349] =
            index_primexp_35371;
        ((__local float *) red_arr_mem_38618)[gtid_33349] = res_33926;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38620;
    int32_t skip_waves_38621;
    
    skip_waves_38621 = 1;
    
    bool x_33900;
    int32_t x_33901;
    float x_33902;
    bool x_33903;
    int32_t x_33904;
    float x_33905;
    
    offset_38620 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38598, sext_i64_i32(iota32_arg_25134))) {
            x_33900 = ((__local
                        bool *) red_arr_mem_38614)[sext_i32_i64(local_tid_38598 +
                                                   offset_38620)];
            x_33901 = ((__local
                        int32_t *) red_arr_mem_38616)[sext_i32_i64(local_tid_38598 +
                                                      offset_38620)];
            x_33902 = ((__local
                        float *) red_arr_mem_38618)[sext_i32_i64(local_tid_38598 +
                                                    offset_38620)];
        }
    }
    offset_38620 = 1;
    while (slt32(offset_38620, wave_sizze_38600)) {
        if (slt32(local_tid_38598 + offset_38620,
                  sext_i64_i32(iota32_arg_25134)) && ((local_tid_38598 -
                                                       squot32(local_tid_38598,
                                                               wave_sizze_38600) *
                                                       wave_sizze_38600) & (2 *
                                                                            offset_38620 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_33903 = ((volatile __local
                            bool *) red_arr_mem_38614)[sext_i32_i64(local_tid_38598 +
                                                       offset_38620)];
                x_33904 = ((volatile __local
                            int32_t *) red_arr_mem_38616)[sext_i32_i64(local_tid_38598 +
                                                          offset_38620)];
                x_33905 = ((volatile __local
                            float *) red_arr_mem_38618)[sext_i32_i64(local_tid_38598 +
                                                        offset_38620)];
            }
            // apply reduction operation
            {
                bool res_33906;
                int32_t res_33907;
                
                if (x_33900) {
                    res_33906 = x_33900;
                    res_33907 = x_33901;
                } else {
                    bool x_33908 = x_33903 && x_33903;
                    bool x_33909 = !x_33903;
                    bool y_33910 = x_33900 && x_33909;
                    bool res_33911 = x_33908 || y_33910;
                    int32_t res_33912;
                    
                    if (x_33903) {
                        res_33912 = x_33904;
                    } else {
                        res_33912 = x_33901;
                    }
                    res_33906 = res_33911;
                    res_33907 = res_33912;
                }
                
                float res_33913 = x_33902 + x_33905;
                
                x_33900 = res_33906;
                x_33901 = res_33907;
                x_33902 = res_33913;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_38614)[sext_i32_i64(local_tid_38598)] =
                    x_33900;
                ((volatile __local
                  int32_t *) red_arr_mem_38616)[sext_i32_i64(local_tid_38598)] =
                    x_33901;
                ((volatile __local
                  float *) red_arr_mem_38618)[sext_i32_i64(local_tid_38598)] =
                    x_33902;
            }
        }
        offset_38620 *= 2;
    }
    while (slt32(skip_waves_38621, squot32(sext_i64_i32(iota32_arg_25134) +
                                           wave_sizze_38600 - 1,
                                           wave_sizze_38600))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38620 = skip_waves_38621 * wave_sizze_38600;
        if (slt32(local_tid_38598 + offset_38620,
                  sext_i64_i32(iota32_arg_25134)) && ((local_tid_38598 -
                                                       squot32(local_tid_38598,
                                                               wave_sizze_38600) *
                                                       wave_sizze_38600) == 0 &&
                                                      (squot32(local_tid_38598,
                                                               wave_sizze_38600) &
                                                       (2 * skip_waves_38621 -
                                                        1)) == 0)) {
            // read array element
            {
                x_33903 = ((__local
                            bool *) red_arr_mem_38614)[sext_i32_i64(local_tid_38598 +
                                                       offset_38620)];
                x_33904 = ((__local
                            int32_t *) red_arr_mem_38616)[sext_i32_i64(local_tid_38598 +
                                                          offset_38620)];
                x_33905 = ((__local
                            float *) red_arr_mem_38618)[sext_i32_i64(local_tid_38598 +
                                                        offset_38620)];
            }
            // apply reduction operation
            {
                bool res_33906;
                int32_t res_33907;
                
                if (x_33900) {
                    res_33906 = x_33900;
                    res_33907 = x_33901;
                } else {
                    bool x_33908 = x_33903 && x_33903;
                    bool x_33909 = !x_33903;
                    bool y_33910 = x_33900 && x_33909;
                    bool res_33911 = x_33908 || y_33910;
                    int32_t res_33912;
                    
                    if (x_33903) {
                        res_33912 = x_33904;
                    } else {
                        res_33912 = x_33901;
                    }
                    res_33906 = res_33911;
                    res_33907 = res_33912;
                }
                
                float res_33913 = x_33902 + x_33905;
                
                x_33900 = res_33906;
                x_33901 = res_33907;
                x_33902 = res_33913;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_38614)[sext_i32_i64(local_tid_38598)] =
                    x_33900;
                ((__local
                  int32_t *) red_arr_mem_38616)[sext_i32_i64(local_tid_38598)] =
                    x_33901;
                ((__local
                  float *) red_arr_mem_38618)[sext_i32_i64(local_tid_38598)] =
                    x_33902;
            }
        }
        skip_waves_38621 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_33897 = ((__local bool *) red_arr_mem_38614)[0];
    acc0_33898 = ((__local int32_t *) red_arr_mem_38616)[0];
    acc0_33899 = ((__local float *) red_arr_mem_38618)[0];
    
    bool x_33929 = acc0_33897 && acc0_33897;
    int32_t res_33933;
    
    if (acc0_33897) {
        res_33933 = acc0_33898;
    } else {
        res_33933 = -1;
    }
    
    float res_33939 = sitofp_i32_f32(y_33863);
    float res_33940 = acc0_33899 / res_33939;
    __local char *mem_37369;
    
    mem_37369 = (__local char *) mem_37369_backing_4;
    
    int64_t gtid_33351 = sext_i32_i64(ltid_pre_38602);
    int32_t phys_tid_33352 = local_tid_38598;
    
    if (slt64(gtid_33351, iota32_arg_25134)) {
        int32_t index_primexp_35374 = sext_i64_i32(gtid_33351);
        bool cond_33943 = slt32(index_primexp_35374, y_33863);
        bool cond_33944;
        
        if (cond_33943) {
            int32_t i_33945 = add32(x_33857, index_primexp_35374);
            int64_t i_33946 = sext_i32_i64(i_33945);
            bool x_33947 = sle64(0, i_33946);
            bool y_33948 = slt64(i_33946, N_24750);
            bool bounds_check_33949 = x_33947 && y_33948;
            bool index_certs_33950;
            
            if (!bounds_check_33949) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 6) ==
                        -1) {
                        global_failure_args[0] = i_33946;
                        global_failure_args[1] = N_24750;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float isnan_arg_33951 = ((__global
                                      float *) res_mem_37111)[gtid_33344 *
                                                              N_24750 +
                                                              i_33946];
            bool res_33952;
            
            res_33952 = futrts_isnan32(isnan_arg_33951);
            
            bool res_33953 = !res_33952;
            
            cond_33944 = res_33953;
        } else {
            cond_33944 = 0;
        }
        
        float res_33954;
        
        if (cond_33944) {
            int32_t i_33955 = add32(x_33857, index_primexp_35374);
            int64_t i_33956 = sext_i32_i64(i_33955);
            bool x_33957 = sle64(0, i_33956);
            bool y_33958 = slt64(i_33956, N_24750);
            bool bounds_check_33959 = x_33957 && y_33958;
            bool index_certs_33960;
            
            if (!bounds_check_33959) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 7) ==
                        -1) {
                        global_failure_args[0] = i_33956;
                        global_failure_args[1] = N_24750;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float res_33961 = ((__global float *) res_mem_37111)[gtid_33344 *
                                                                 N_24750 +
                                                                 i_33956];
            
            res_33954 = res_33961;
        } else {
            res_33954 = INFINITY;
        }
        ((__local float *) mem_37369)[gtid_33351] = res_33954;
    }
    
  error_3:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37379;
    
    mem_37379 = (__local char *) mem_37379_backing_5;
    
    __local char *mem_37381;
    
    mem_37381 = (__local char *) mem_37381_backing_6;
    
    __local char *mem_37383;
    
    mem_37383 = (__local char *) mem_37383_backing_7;
    
    __local char *mem_37385;
    
    mem_37385 = (__local char *) mem_37385_backing_8;
    
    __local char *mem_37387;
    
    mem_37387 = (__local char *) mem_37387_backing_9;
    
    __local char *double_buffer_mem_37629;
    
    double_buffer_mem_37629 = (__local
                               char *) double_buffer_mem_37629_backing_10;
    ((__local float *) double_buffer_mem_37629)[sext_i32_i64(local_tid_38598)] =
        ((__local float *) mem_37369)[sext_i32_i64(local_tid_38598)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37389;
    
    mem_37389 = (__local char *) mem_37389_backing_11;
    for (int32_t i_33963 = 0; i_33963 < iters_25160; i_33963++) {
        int32_t lifted_2_radix_sort_step_arg_33965 = mul32(2, i_33963);
        int32_t lifted_0_get_bit_arg_33966 = add32(1,
                                                   lifted_2_radix_sort_step_arg_33965);
        bool res_33967 = lifted_0_get_bit_arg_33966 == 31;
        bool res_33968 = lifted_2_radix_sort_step_arg_33965 == 31;
        int64_t gtid_33373 = sext_i32_i64(ltid_pre_38602);
        int32_t phys_tid_33374 = local_tid_38598;
        
        if (slt64(gtid_33373, iota32_arg_25134)) {
            float x_33986 = ((__local
                              float *) double_buffer_mem_37629)[gtid_33373];
            int32_t i32_arg_33987;
            
            i32_arg_33987 = futrts_to_bits32(x_33986);
            
            int32_t unsign_arg_33988 = ashr32(i32_arg_33987,
                                              lifted_0_get_bit_arg_33966);
            int32_t unsign_arg_33989 = 1 & unsign_arg_33988;
            int32_t unsign_arg_33990 = ashr32(i32_arg_33987, 31);
            int32_t unsign_arg_33991 = 1 & unsign_arg_33990;
            bool cond_33992 = unsign_arg_33991 == 1;
            bool x_33993 = !cond_33992;
            bool y_33994 = res_33967 && x_33993;
            bool cond_33995 = cond_33992 || y_33994;
            int32_t res_33996;
            
            if (cond_33995) {
                int32_t res_33997 = 1 ^ unsign_arg_33989;
                
                res_33996 = res_33997;
            } else {
                res_33996 = unsign_arg_33989;
            }
            
            int32_t x_33998 = mul32(2, res_33996);
            int32_t unsign_arg_33999 = ashr32(i32_arg_33987,
                                              lifted_2_radix_sort_step_arg_33965);
            int32_t unsign_arg_34000 = 1 & unsign_arg_33999;
            bool y_34001 = res_33968 && x_33993;
            bool cond_34002 = cond_33992 || y_34001;
            int32_t res_34003;
            
            if (cond_34002) {
                int32_t res_34004 = 1 ^ unsign_arg_34000;
                
                res_34003 = res_34004;
            } else {
                res_34003 = unsign_arg_34000;
            }
            
            int32_t res_34005 = add32(x_33998, res_34003);
            bool cond_34006 = res_34005 == 0;
            int64_t res_34007 = btoi_bool_i64(cond_34006);
            int64_t res_34008;
            int64_t res_34009;
            int64_t res_34010;
            
            if (cond_34006) {
                res_34008 = 0;
                res_34009 = 0;
                res_34010 = 0;
            } else {
                bool cond_34011 = res_34005 == 1;
                int64_t res_34012 = btoi_bool_i64(cond_34011);
                int64_t res_34013;
                int64_t res_34014;
                
                if (cond_34011) {
                    res_34013 = 0;
                    res_34014 = 0;
                } else {
                    bool cond_34015 = res_34005 == 2;
                    int64_t res_34016 = btoi_bool_i64(cond_34015);
                    bool cond_neg_34017 = !cond_34015;
                    int64_t res_34018 = btoi_bool_i64(cond_neg_34017);
                    
                    res_34013 = res_34016;
                    res_34014 = res_34018;
                }
                res_34008 = res_34012;
                res_34009 = res_34013;
                res_34010 = res_34014;
            }
            ((__local int64_t *) mem_37379)[gtid_33373] = res_34007;
            ((__local int64_t *) mem_37381)[gtid_33373] = res_34008;
            ((__local int64_t *) mem_37383)[gtid_33373] = res_34009;
            ((__local int64_t *) mem_37385)[gtid_33373] = res_34010;
            ((__local int32_t *) mem_37387)[gtid_33373] = res_34005;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t dims_flat_38623;
        
        dims_flat_38623 = iota32_arg_25134;
        
        int64_t x_33974;
        int64_t x_33975;
        int64_t x_33976;
        int64_t x_33977;
        int64_t x_33978;
        int64_t x_33979;
        int64_t x_33980;
        int64_t x_33981;
        int64_t x_38628;
        int64_t x_38629;
        int64_t x_38630;
        int64_t x_38631;
        int64_t x_38632;
        int64_t x_38633;
        int64_t x_38634;
        int64_t x_38635;
        bool ltid_in_bounds_38640;
        
        ltid_in_bounds_38640 = slt64(sext_i32_i64(local_tid_38598),
                                     iota32_arg_25134);
        
        int32_t skip_threads_38641;
        
        // read input for in-block scan
        {
            if (ltid_in_bounds_38640) {
                x_33978 = ((volatile __local
                            int64_t *) mem_37379)[sext_i32_i64(local_tid_38598)];
                x_33979 = ((volatile __local
                            int64_t *) mem_37381)[sext_i32_i64(local_tid_38598)];
                x_33980 = ((volatile __local
                            int64_t *) mem_37383)[sext_i32_i64(local_tid_38598)];
                x_33981 = ((volatile __local
                            int64_t *) mem_37385)[sext_i32_i64(local_tid_38598)];
                if ((local_tid_38598 - squot32(local_tid_38598, 32) * 32) ==
                    0) {
                    x_33974 = x_33978;
                    x_33975 = x_33979;
                    x_33976 = x_33980;
                    x_33977 = x_33981;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38641 = 1;
            while (slt32(skip_threads_38641, 32)) {
                if (sle32(skip_threads_38641, local_tid_38598 -
                          squot32(local_tid_38598, 32) * 32) &&
                    ltid_in_bounds_38640) {
                    // read operands
                    {
                        x_33974 = ((volatile __local
                                    int64_t *) mem_37379)[sext_i32_i64(local_tid_38598) -
                                                          sext_i32_i64(skip_threads_38641)];
                        x_33975 = ((volatile __local
                                    int64_t *) mem_37381)[sext_i32_i64(local_tid_38598) -
                                                          sext_i32_i64(skip_threads_38641)];
                        x_33976 = ((volatile __local
                                    int64_t *) mem_37383)[sext_i32_i64(local_tid_38598) -
                                                          sext_i32_i64(skip_threads_38641)];
                        x_33977 = ((volatile __local
                                    int64_t *) mem_37385)[sext_i32_i64(local_tid_38598) -
                                                          sext_i32_i64(skip_threads_38641)];
                    }
                    // perform operation
                    {
                        bool inactive_38642 =
                             slt64(srem64(sext_i32_i64(local_tid_38598),
                                          iota32_arg_25134),
                                   sext_i32_i64(local_tid_38598) -
                                   sext_i32_i64(local_tid_38598 -
                                   skip_threads_38641));
                        
                        if (inactive_38642) {
                            x_33974 = x_33978;
                            x_33975 = x_33979;
                            x_33976 = x_33980;
                            x_33977 = x_33981;
                        }
                        if (!inactive_38642) {
                            int64_t res_33982 = add64(x_33974, x_33978);
                            int64_t res_33983 = add64(x_33975, x_33979);
                            int64_t res_33984 = add64(x_33976, x_33980);
                            int64_t res_33985 = add64(x_33977, x_33981);
                            
                            x_33974 = res_33982;
                            x_33975 = res_33983;
                            x_33976 = res_33984;
                            x_33977 = res_33985;
                        }
                    }
                }
                if (sle32(wave_sizze_38600, skip_threads_38641)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38641, local_tid_38598 -
                          squot32(local_tid_38598, 32) * 32) &&
                    ltid_in_bounds_38640) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37379)[sext_i32_i64(local_tid_38598)] =
                            x_33974;
                        x_33978 = x_33974;
                        ((volatile __local
                          int64_t *) mem_37381)[sext_i32_i64(local_tid_38598)] =
                            x_33975;
                        x_33979 = x_33975;
                        ((volatile __local
                          int64_t *) mem_37383)[sext_i32_i64(local_tid_38598)] =
                            x_33976;
                        x_33980 = x_33976;
                        ((volatile __local
                          int64_t *) mem_37385)[sext_i32_i64(local_tid_38598)] =
                            x_33977;
                        x_33981 = x_33977;
                    }
                }
                if (sle32(wave_sizze_38600, skip_threads_38641)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38641 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_38598 - squot32(local_tid_38598, 32) * 32) == 31 &&
                ltid_in_bounds_38640) {
                ((volatile __local
                  int64_t *) mem_37379)[sext_i32_i64(squot32(local_tid_38598,
                                                             32))] = x_33974;
                ((volatile __local
                  int64_t *) mem_37381)[sext_i32_i64(squot32(local_tid_38598,
                                                             32))] = x_33975;
                ((volatile __local
                  int64_t *) mem_37383)[sext_i32_i64(squot32(local_tid_38598,
                                                             32))] = x_33976;
                ((volatile __local
                  int64_t *) mem_37385)[sext_i32_i64(squot32(local_tid_38598,
                                                             32))] = x_33977;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_38643;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_38598, 32) == 0 && ltid_in_bounds_38640) {
                    x_38632 = ((volatile __local
                                int64_t *) mem_37379)[sext_i32_i64(local_tid_38598)];
                    x_38633 = ((volatile __local
                                int64_t *) mem_37381)[sext_i32_i64(local_tid_38598)];
                    x_38634 = ((volatile __local
                                int64_t *) mem_37383)[sext_i32_i64(local_tid_38598)];
                    x_38635 = ((volatile __local
                                int64_t *) mem_37385)[sext_i32_i64(local_tid_38598)];
                    if ((local_tid_38598 - squot32(local_tid_38598, 32) * 32) ==
                        0) {
                        x_38628 = x_38632;
                        x_38629 = x_38633;
                        x_38630 = x_38634;
                        x_38631 = x_38635;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38643 = 1;
                while (slt32(skip_threads_38643, 32)) {
                    if (sle32(skip_threads_38643, local_tid_38598 -
                              squot32(local_tid_38598, 32) * 32) &&
                        (squot32(local_tid_38598, 32) == 0 &&
                         ltid_in_bounds_38640)) {
                        // read operands
                        {
                            x_38628 = ((volatile __local
                                        int64_t *) mem_37379)[sext_i32_i64(local_tid_38598) -
                                                              sext_i32_i64(skip_threads_38643)];
                            x_38629 = ((volatile __local
                                        int64_t *) mem_37381)[sext_i32_i64(local_tid_38598) -
                                                              sext_i32_i64(skip_threads_38643)];
                            x_38630 = ((volatile __local
                                        int64_t *) mem_37383)[sext_i32_i64(local_tid_38598) -
                                                              sext_i32_i64(skip_threads_38643)];
                            x_38631 = ((volatile __local
                                        int64_t *) mem_37385)[sext_i32_i64(local_tid_38598) -
                                                              sext_i32_i64(skip_threads_38643)];
                        }
                        // perform operation
                        {
                            bool inactive_38644 =
                                 slt64(srem64(sext_i32_i64(local_tid_38598 *
                                              32 + 32 - 1), iota32_arg_25134),
                                       sext_i32_i64(local_tid_38598 * 32 + 32 -
                                       1) - sext_i32_i64((local_tid_38598 -
                                                          skip_threads_38643) *
                                       32 + 32 - 1));
                            
                            if (inactive_38644) {
                                x_38628 = x_38632;
                                x_38629 = x_38633;
                                x_38630 = x_38634;
                                x_38631 = x_38635;
                            }
                            if (!inactive_38644) {
                                int64_t res_38636 = add64(x_38628, x_38632);
                                int64_t res_38637 = add64(x_38629, x_38633);
                                int64_t res_38638 = add64(x_38630, x_38634);
                                int64_t res_38639 = add64(x_38631, x_38635);
                                
                                x_38628 = res_38636;
                                x_38629 = res_38637;
                                x_38630 = res_38638;
                                x_38631 = res_38639;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38600, skip_threads_38643)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38643, local_tid_38598 -
                              squot32(local_tid_38598, 32) * 32) &&
                        (squot32(local_tid_38598, 32) == 0 &&
                         ltid_in_bounds_38640)) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) mem_37379)[sext_i32_i64(local_tid_38598)] =
                                x_38628;
                            x_38632 = x_38628;
                            ((volatile __local
                              int64_t *) mem_37381)[sext_i32_i64(local_tid_38598)] =
                                x_38629;
                            x_38633 = x_38629;
                            ((volatile __local
                              int64_t *) mem_37383)[sext_i32_i64(local_tid_38598)] =
                                x_38630;
                            x_38634 = x_38630;
                            ((volatile __local
                              int64_t *) mem_37385)[sext_i32_i64(local_tid_38598)] =
                                x_38631;
                            x_38635 = x_38631;
                        }
                    }
                    if (sle32(wave_sizze_38600, skip_threads_38643)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38643 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // carry-in for every block except the first
        {
            if (!(squot32(local_tid_38598, 32) == 0 || !ltid_in_bounds_38640)) {
                // read operands
                {
                    x_33978 = x_33974;
                    x_33979 = x_33975;
                    x_33980 = x_33976;
                    x_33981 = x_33977;
                    x_33974 = ((__local
                                int64_t *) mem_37379)[sext_i32_i64(squot32(local_tid_38598,
                                                                           32)) -
                                                      1];
                    x_33975 = ((__local
                                int64_t *) mem_37381)[sext_i32_i64(squot32(local_tid_38598,
                                                                           32)) -
                                                      1];
                    x_33976 = ((__local
                                int64_t *) mem_37383)[sext_i32_i64(squot32(local_tid_38598,
                                                                           32)) -
                                                      1];
                    x_33977 = ((__local
                                int64_t *) mem_37385)[sext_i32_i64(squot32(local_tid_38598,
                                                                           32)) -
                                                      1];
                }
                // perform operation
                {
                    bool inactive_38645 =
                         slt64(srem64(sext_i32_i64(local_tid_38598),
                                      iota32_arg_25134),
                               sext_i32_i64(local_tid_38598) -
                               sext_i32_i64(squot32(local_tid_38598, 32) * 32 -
                               1));
                    
                    if (inactive_38645) {
                        x_33974 = x_33978;
                        x_33975 = x_33979;
                        x_33976 = x_33980;
                        x_33977 = x_33981;
                    }
                    if (!inactive_38645) {
                        int64_t res_33982 = add64(x_33974, x_33978);
                        int64_t res_33983 = add64(x_33975, x_33979);
                        int64_t res_33984 = add64(x_33976, x_33980);
                        int64_t res_33985 = add64(x_33977, x_33981);
                        
                        x_33974 = res_33982;
                        x_33975 = res_33983;
                        x_33976 = res_33984;
                        x_33977 = res_33985;
                    }
                }
                // write final result
                {
                    ((__local
                      int64_t *) mem_37379)[sext_i32_i64(local_tid_38598)] =
                        x_33974;
                    ((__local
                      int64_t *) mem_37381)[sext_i32_i64(local_tid_38598)] =
                        x_33975;
                    ((__local
                      int64_t *) mem_37383)[sext_i32_i64(local_tid_38598)] =
                        x_33976;
                    ((__local
                      int64_t *) mem_37385)[sext_i32_i64(local_tid_38598)] =
                        x_33977;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_38598, 32) == 0) {
                ((__local int64_t *) mem_37379)[sext_i32_i64(local_tid_38598)] =
                    x_33978;
                ((__local int64_t *) mem_37381)[sext_i32_i64(local_tid_38598)] =
                    x_33979;
                ((__local int64_t *) mem_37383)[sext_i32_i64(local_tid_38598)] =
                    x_33980;
                ((__local int64_t *) mem_37385)[sext_i32_i64(local_tid_38598)] =
                    x_33981;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t res_34019 = ((__local int64_t *) mem_37379)[i_25162];
        int64_t res_34020 = ((__local int64_t *) mem_37381)[i_25162];
        int64_t res_34021 = ((__local int64_t *) mem_37383)[i_25162];
        
        ((__local float *) mem_37389)[sext_i32_i64(local_tid_38598)] = ((__local
                                                                         float *) double_buffer_mem_37629)[sext_i32_i64(local_tid_38598)];
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_33375 = sext_i32_i64(ltid_pre_38602);
        int32_t phys_tid_33376 = local_tid_38598;
        
        if (slt64(write_i_33375, iota32_arg_25134)) {
            int32_t x_34024 = ((__local int32_t *) mem_37387)[write_i_33375];
            float write_value_34029 = ((__local
                                        float *) double_buffer_mem_37629)[write_i_33375];
            bool match_lit_34030 = 0 == x_34024;
            int64_t res_34031;
            
            if (match_lit_34030) {
                int64_t x_34025 = ((__local
                                    int64_t *) mem_37379)[write_i_33375];
                int64_t res_34032 = sub64(x_34025, 1);
                
                res_34031 = res_34032;
            } else {
                int64_t x_34026 = ((__local
                                    int64_t *) mem_37381)[write_i_33375];
                int64_t x_34027 = ((__local
                                    int64_t *) mem_37383)[write_i_33375];
                int64_t x_34028 = ((__local
                                    int64_t *) mem_37385)[write_i_33375];
                bool match_lit_34033 = 1 == x_34024;
                int64_t x_34034;
                
                if (match_lit_34033) {
                    int64_t x_34035 = add64(res_34019, x_34026);
                    int64_t res_34036 = sub64(x_34035, 1);
                    
                    x_34034 = res_34036;
                } else {
                    bool match_lit_34037 = 2 == x_34024;
                    int64_t x_34038;
                    
                    if (match_lit_34037) {
                        int64_t x_34039 = add64(res_34019, res_34020);
                        int64_t x_34040 = add64(x_34027, x_34039);
                        int64_t res_34041 = sub64(x_34040, 1);
                        
                        x_34038 = res_34041;
                    } else {
                        int64_t x_34042 = add64(res_34019, res_34020);
                        int64_t x_34043 = add64(res_34021, x_34042);
                        int64_t x_34044 = add64(x_34028, x_34043);
                        int64_t res_34045 = sub64(x_34044, 1);
                        
                        x_34038 = res_34045;
                    }
                    x_34034 = x_34038;
                }
                res_34031 = x_34034;
            }
            if (sle64(0, res_34031) && slt64(res_34031, iota32_arg_25134)) {
                ((__local float *) mem_37389)[res_34031] = write_value_34029;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ((__local
          float *) double_buffer_mem_37629)[sext_i32_i64(local_tid_38598)] =
            ((__local float *) mem_37389)[sext_i32_i64(local_tid_38598)];
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    int32_t i_34046 = sdiv32(y_33863, 2);
    int32_t j_34047 = sub32(i_34046, 1);
    int32_t x_34048 = smod32(y_33863, 2);
    bool cond_34049 = x_34048 == 0;
    float res_34050;
    
    if (cond_34049) {
        int64_t j_34051 = sext_i32_i64(j_34047);
        bool x_34052 = sle64(0, j_34051);
        bool y_34053 = slt64(j_34051, iota32_arg_25134);
        bool bounds_check_34054 = x_34052 && y_34053;
        bool index_certs_34055;
        
        if (!bounds_check_34054) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 8) == -1) {
                    global_failure_args[0] = j_34051;
                    global_failure_args[1] = iota32_arg_25134;
                    ;
                }
                local_failure = true;
                goto error_6;
            }
        }
        
        float x_34056 = ((__local float *) double_buffer_mem_37629)[j_34051];
        int64_t i_34057 = sext_i32_i64(i_34046);
        bool x_34058 = sle64(0, i_34057);
        bool y_34059 = slt64(i_34057, iota32_arg_25134);
        bool bounds_check_34060 = x_34058 && y_34059;
        bool index_certs_34061;
        
        if (!bounds_check_34060) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 9) == -1) {
                    global_failure_args[0] = i_34057;
                    global_failure_args[1] = iota32_arg_25134;
                    ;
                }
                local_failure = true;
                goto error_6;
            }
        }
        
        float y_34062 = ((__local float *) double_buffer_mem_37629)[i_34057];
        float x_34063 = x_34056 + y_34062;
        float res_34064 = x_34063 / 2.0F;
        
        res_34050 = res_34064;
    } else {
        int64_t i_34065 = sext_i32_i64(i_34046);
        bool x_34066 = sle64(0, i_34065);
        bool y_34067 = slt64(i_34065, iota32_arg_25134);
        bool bounds_check_34068 = x_34066 && y_34067;
        bool index_certs_34069;
        
        if (!bounds_check_34068) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 10) == -1) {
                    global_failure_args[0] = i_34065;
                    global_failure_args[1] = iota32_arg_25134;
                    ;
                }
                local_failure = true;
                goto error_6;
            }
        }
        
        float res_34070 = ((__local float *) double_buffer_mem_37629)[i_34065];
        
        res_34050 = res_34070;
    }
    
    bool cond_34071 = !x_33929;
    int32_t fst_breakzq_34072;
    
    if (cond_34071) {
        fst_breakzq_34072 = -1;
    } else {
        bool cond_34073 = slt32(res_33933, y_33863);
        int32_t res_34074;
        
        if (cond_34073) {
            int32_t i_34075 = add32(x_33857, res_33933);
            int64_t i_34076 = sext_i32_i64(i_34075);
            int32_t x_34077 = ((__global int32_t *) res_mem_37112)[gtid_33344 *
                                                                   N_24750 +
                                                                   i_34076];
            int32_t res_34078 = sub32(x_34077, n_24755);
            
            res_34074 = res_34078;
        } else {
            res_34074 = -1;
        }
        fst_breakzq_34072 = res_34074;
    }
    
    bool cond_34079 = sle32(x_33857, 5);
    bool res_34080 = sle32(y_33863, 5);
    bool x_34081 = !cond_34079;
    bool y_34082 = res_34080 && x_34081;
    bool cond_34083 = cond_34079 || y_34082;
    int32_t fst_breakzq_34084;
    
    if (cond_34083) {
        fst_breakzq_34084 = -2;
    } else {
        fst_breakzq_34084 = fst_breakzq_34072;
    }
    if (local_tid_38598 == 0) {
        ((__global int32_t *) mem_37399)[gtid_33344] = fst_breakzq_34084;
    }
    if (local_tid_38598 == 0) {
        ((__global float *) mem_37401)[gtid_33344] = res_33940;
    }
    if (local_tid_38598 == 0) {
        ((__global float *) mem_37403)[gtid_33344] = res_34050;
    }
    
  error_6:
    return;
}
__kernel void mainzisegmap_intragroup_34151(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37457_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37455_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37453_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37451_backing_aligned_3,
                                            __local volatile
                                            int64_t *mem_37449_backing_aligned_4,
                                            __local volatile
                                            int64_t *mem_37447_backing_aligned_5,
                                            int64_t m_24751,
                                            int64_t iota32_arg_25134,
                                            int64_t i_25162,
                                            int32_t lifted_2_radix_sort_step_arg_35039,
                                            int32_t lifted_0_get_bit_arg_35040,
                                            unsigned char res_35041,
                                            unsigned char res_35042, __global
                                            unsigned char *mem_param_37438,
                                            __global unsigned char *mem_37443,
                                            __global unsigned char *mem_37461)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37457_backing_5 = (__local volatile
                                                           char *) mem_37457_backing_aligned_0;
    __local volatile char *restrict mem_37455_backing_4 = (__local volatile
                                                           char *) mem_37455_backing_aligned_1;
    __local volatile char *restrict mem_37453_backing_3 = (__local volatile
                                                           char *) mem_37453_backing_aligned_2;
    __local volatile char *restrict mem_37451_backing_2 = (__local volatile
                                                           char *) mem_37451_backing_aligned_3;
    __local volatile char *restrict mem_37449_backing_1 = (__local volatile
                                                           char *) mem_37449_backing_aligned_4;
    __local volatile char *restrict mem_37447_backing_0 = (__local volatile
                                                           char *) mem_37447_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38820;
    int32_t local_tid_38821;
    int64_t group_sizze_38824;
    int32_t wave_sizze_38823;
    int32_t group_tid_38822;
    
    global_tid_38820 = get_global_id(0);
    local_tid_38821 = get_local_id(0);
    group_sizze_38824 = get_local_size(0);
    wave_sizze_38823 = LOCKSTEP_WIDTH;
    group_tid_38822 = get_group_id(0);
    
    int32_t phys_tid_34151;
    
    phys_tid_34151 = group_tid_38822;
    
    int32_t ltid_pre_38825;
    
    ltid_pre_38825 = local_tid_38821;
    
    int64_t gtid_34144;
    
    gtid_34144 = sext_i32_i64(group_tid_38822);
    
    __local char *mem_37447;
    
    mem_37447 = (__local char *) mem_37447_backing_0;
    
    __local char *mem_37449;
    
    mem_37449 = (__local char *) mem_37449_backing_1;
    
    __local char *mem_37451;
    
    mem_37451 = (__local char *) mem_37451_backing_2;
    
    __local char *mem_37453;
    
    mem_37453 = (__local char *) mem_37453_backing_3;
    
    __local char *mem_37455;
    
    mem_37455 = (__local char *) mem_37455_backing_4;
    
    int64_t gtid_34147 = sext_i32_i64(ltid_pre_38825);
    int32_t phys_tid_34148 = local_tid_38821;
    
    if (slt64(gtid_34147, iota32_arg_25134)) {
        float x_35072 = ((__global float *) mem_param_37438)[gtid_34144 *
                                                             iota32_arg_25134 +
                                                             gtid_34147];
        int32_t i32_arg_35073;
        
        i32_arg_35073 = futrts_to_bits32(x_35072);
        
        int32_t unsign_arg_35074 = ashr32(i32_arg_35073,
                                          lifted_0_get_bit_arg_35040);
        int32_t unsign_arg_35075 = 1 & unsign_arg_35074;
        int32_t unsign_arg_35076 = ashr32(i32_arg_35073, 31);
        int32_t unsign_arg_35077 = 1 & unsign_arg_35076;
        bool cond_35078 = unsign_arg_35077 == 1;
        bool x_35079 = !cond_35078;
        bool y_35080 = res_35041 && x_35079;
        bool cond_35081 = cond_35078 || y_35080;
        int32_t res_35082;
        
        if (cond_35081) {
            int32_t res_35083 = 1 ^ unsign_arg_35075;
            
            res_35082 = res_35083;
        } else {
            res_35082 = unsign_arg_35075;
        }
        
        int32_t x_35084 = mul32(2, res_35082);
        int32_t unsign_arg_35085 = ashr32(i32_arg_35073,
                                          lifted_2_radix_sort_step_arg_35039);
        int32_t unsign_arg_35086 = 1 & unsign_arg_35085;
        bool y_35087 = res_35042 && x_35079;
        bool cond_35088 = cond_35078 || y_35087;
        int32_t res_35089;
        
        if (cond_35088) {
            int32_t res_35090 = 1 ^ unsign_arg_35086;
            
            res_35089 = res_35090;
        } else {
            res_35089 = unsign_arg_35086;
        }
        
        int32_t res_35091 = add32(x_35084, res_35089);
        bool cond_35092 = res_35091 == 0;
        int64_t res_35093 = btoi_bool_i64(cond_35092);
        int64_t res_35094;
        int64_t res_35095;
        int64_t res_35096;
        
        if (cond_35092) {
            res_35094 = 0;
            res_35095 = 0;
            res_35096 = 0;
        } else {
            bool cond_35097 = res_35091 == 1;
            int64_t res_35098 = btoi_bool_i64(cond_35097);
            int64_t res_35099;
            int64_t res_35100;
            
            if (cond_35097) {
                res_35099 = 0;
                res_35100 = 0;
            } else {
                bool cond_35101 = res_35091 == 2;
                int64_t res_35102 = btoi_bool_i64(cond_35101);
                bool cond_neg_35103 = !cond_35101;
                int64_t res_35104 = btoi_bool_i64(cond_neg_35103);
                
                res_35099 = res_35102;
                res_35100 = res_35104;
            }
            res_35094 = res_35098;
            res_35095 = res_35099;
            res_35096 = res_35100;
        }
        ((__local int64_t *) mem_37447)[gtid_34147] = res_35093;
        ((__local int64_t *) mem_37449)[gtid_34147] = res_35094;
        ((__local int64_t *) mem_37451)[gtid_34147] = res_35095;
        ((__local int64_t *) mem_37453)[gtid_34147] = res_35096;
        ((__local int32_t *) mem_37455)[gtid_34147] = res_35091;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38826;
    
    dims_flat_38826 = iota32_arg_25134;
    
    int64_t x_35060;
    int64_t x_35061;
    int64_t x_35062;
    int64_t x_35063;
    int64_t x_35064;
    int64_t x_35065;
    int64_t x_35066;
    int64_t x_35067;
    int64_t x_38831;
    int64_t x_38832;
    int64_t x_38833;
    int64_t x_38834;
    int64_t x_38835;
    int64_t x_38836;
    int64_t x_38837;
    int64_t x_38838;
    bool ltid_in_bounds_38843;
    
    ltid_in_bounds_38843 = slt64(sext_i32_i64(local_tid_38821),
                                 iota32_arg_25134);
    
    int32_t skip_threads_38844;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38843) {
            x_35064 = ((volatile __local
                        int64_t *) mem_37447)[sext_i32_i64(local_tid_38821)];
            x_35065 = ((volatile __local
                        int64_t *) mem_37449)[sext_i32_i64(local_tid_38821)];
            x_35066 = ((volatile __local
                        int64_t *) mem_37451)[sext_i32_i64(local_tid_38821)];
            x_35067 = ((volatile __local
                        int64_t *) mem_37453)[sext_i32_i64(local_tid_38821)];
            if ((local_tid_38821 - squot32(local_tid_38821, 32) * 32) == 0) {
                x_35060 = x_35064;
                x_35061 = x_35065;
                x_35062 = x_35066;
                x_35063 = x_35067;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38844 = 1;
        while (slt32(skip_threads_38844, 32)) {
            if (sle32(skip_threads_38844, local_tid_38821 -
                      squot32(local_tid_38821, 32) * 32) &&
                ltid_in_bounds_38843) {
                // read operands
                {
                    x_35060 = ((volatile __local
                                int64_t *) mem_37447)[sext_i32_i64(local_tid_38821) -
                                                      sext_i32_i64(skip_threads_38844)];
                    x_35061 = ((volatile __local
                                int64_t *) mem_37449)[sext_i32_i64(local_tid_38821) -
                                                      sext_i32_i64(skip_threads_38844)];
                    x_35062 = ((volatile __local
                                int64_t *) mem_37451)[sext_i32_i64(local_tid_38821) -
                                                      sext_i32_i64(skip_threads_38844)];
                    x_35063 = ((volatile __local
                                int64_t *) mem_37453)[sext_i32_i64(local_tid_38821) -
                                                      sext_i32_i64(skip_threads_38844)];
                }
                // perform operation
                {
                    bool inactive_38845 =
                         slt64(srem64(sext_i32_i64(local_tid_38821),
                                      iota32_arg_25134),
                               sext_i32_i64(local_tid_38821) -
                               sext_i32_i64(local_tid_38821 -
                               skip_threads_38844));
                    
                    if (inactive_38845) {
                        x_35060 = x_35064;
                        x_35061 = x_35065;
                        x_35062 = x_35066;
                        x_35063 = x_35067;
                    }
                    if (!inactive_38845) {
                        int64_t res_35068 = add64(x_35060, x_35064);
                        int64_t res_35069 = add64(x_35061, x_35065);
                        int64_t res_35070 = add64(x_35062, x_35066);
                        int64_t res_35071 = add64(x_35063, x_35067);
                        
                        x_35060 = res_35068;
                        x_35061 = res_35069;
                        x_35062 = res_35070;
                        x_35063 = res_35071;
                    }
                }
            }
            if (sle32(wave_sizze_38823, skip_threads_38844)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38844, local_tid_38821 -
                      squot32(local_tid_38821, 32) * 32) &&
                ltid_in_bounds_38843) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37447)[sext_i32_i64(local_tid_38821)] =
                        x_35060;
                    x_35064 = x_35060;
                    ((volatile __local
                      int64_t *) mem_37449)[sext_i32_i64(local_tid_38821)] =
                        x_35061;
                    x_35065 = x_35061;
                    ((volatile __local
                      int64_t *) mem_37451)[sext_i32_i64(local_tid_38821)] =
                        x_35062;
                    x_35066 = x_35062;
                    ((volatile __local
                      int64_t *) mem_37453)[sext_i32_i64(local_tid_38821)] =
                        x_35063;
                    x_35067 = x_35063;
                }
            }
            if (sle32(wave_sizze_38823, skip_threads_38844)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38844 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38821 - squot32(local_tid_38821, 32) * 32) == 31 &&
            ltid_in_bounds_38843) {
            ((volatile __local
              int64_t *) mem_37447)[sext_i32_i64(squot32(local_tid_38821,
                                                         32))] = x_35060;
            ((volatile __local
              int64_t *) mem_37449)[sext_i32_i64(squot32(local_tid_38821,
                                                         32))] = x_35061;
            ((volatile __local
              int64_t *) mem_37451)[sext_i32_i64(squot32(local_tid_38821,
                                                         32))] = x_35062;
            ((volatile __local
              int64_t *) mem_37453)[sext_i32_i64(squot32(local_tid_38821,
                                                         32))] = x_35063;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38846;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38821, 32) == 0 && ltid_in_bounds_38843) {
                x_38835 = ((volatile __local
                            int64_t *) mem_37447)[sext_i32_i64(local_tid_38821)];
                x_38836 = ((volatile __local
                            int64_t *) mem_37449)[sext_i32_i64(local_tid_38821)];
                x_38837 = ((volatile __local
                            int64_t *) mem_37451)[sext_i32_i64(local_tid_38821)];
                x_38838 = ((volatile __local
                            int64_t *) mem_37453)[sext_i32_i64(local_tid_38821)];
                if ((local_tid_38821 - squot32(local_tid_38821, 32) * 32) ==
                    0) {
                    x_38831 = x_38835;
                    x_38832 = x_38836;
                    x_38833 = x_38837;
                    x_38834 = x_38838;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38846 = 1;
            while (slt32(skip_threads_38846, 32)) {
                if (sle32(skip_threads_38846, local_tid_38821 -
                          squot32(local_tid_38821, 32) * 32) &&
                    (squot32(local_tid_38821, 32) == 0 &&
                     ltid_in_bounds_38843)) {
                    // read operands
                    {
                        x_38831 = ((volatile __local
                                    int64_t *) mem_37447)[sext_i32_i64(local_tid_38821) -
                                                          sext_i32_i64(skip_threads_38846)];
                        x_38832 = ((volatile __local
                                    int64_t *) mem_37449)[sext_i32_i64(local_tid_38821) -
                                                          sext_i32_i64(skip_threads_38846)];
                        x_38833 = ((volatile __local
                                    int64_t *) mem_37451)[sext_i32_i64(local_tid_38821) -
                                                          sext_i32_i64(skip_threads_38846)];
                        x_38834 = ((volatile __local
                                    int64_t *) mem_37453)[sext_i32_i64(local_tid_38821) -
                                                          sext_i32_i64(skip_threads_38846)];
                    }
                    // perform operation
                    {
                        bool inactive_38847 =
                             slt64(srem64(sext_i32_i64(local_tid_38821 * 32 +
                                          32 - 1), iota32_arg_25134),
                                   sext_i32_i64(local_tid_38821 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38821 -
                                                 skip_threads_38846) * 32 + 32 -
                                   1));
                        
                        if (inactive_38847) {
                            x_38831 = x_38835;
                            x_38832 = x_38836;
                            x_38833 = x_38837;
                            x_38834 = x_38838;
                        }
                        if (!inactive_38847) {
                            int64_t res_38839 = add64(x_38831, x_38835);
                            int64_t res_38840 = add64(x_38832, x_38836);
                            int64_t res_38841 = add64(x_38833, x_38837);
                            int64_t res_38842 = add64(x_38834, x_38838);
                            
                            x_38831 = res_38839;
                            x_38832 = res_38840;
                            x_38833 = res_38841;
                            x_38834 = res_38842;
                        }
                    }
                }
                if (sle32(wave_sizze_38823, skip_threads_38846)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38846, local_tid_38821 -
                          squot32(local_tid_38821, 32) * 32) &&
                    (squot32(local_tid_38821, 32) == 0 &&
                     ltid_in_bounds_38843)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37447)[sext_i32_i64(local_tid_38821)] =
                            x_38831;
                        x_38835 = x_38831;
                        ((volatile __local
                          int64_t *) mem_37449)[sext_i32_i64(local_tid_38821)] =
                            x_38832;
                        x_38836 = x_38832;
                        ((volatile __local
                          int64_t *) mem_37451)[sext_i32_i64(local_tid_38821)] =
                            x_38833;
                        x_38837 = x_38833;
                        ((volatile __local
                          int64_t *) mem_37453)[sext_i32_i64(local_tid_38821)] =
                            x_38834;
                        x_38838 = x_38834;
                    }
                }
                if (sle32(wave_sizze_38823, skip_threads_38846)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38846 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38821, 32) == 0 || !ltid_in_bounds_38843)) {
            // read operands
            {
                x_35064 = x_35060;
                x_35065 = x_35061;
                x_35066 = x_35062;
                x_35067 = x_35063;
                x_35060 = ((__local
                            int64_t *) mem_37447)[sext_i32_i64(squot32(local_tid_38821,
                                                                       32)) -
                                                  1];
                x_35061 = ((__local
                            int64_t *) mem_37449)[sext_i32_i64(squot32(local_tid_38821,
                                                                       32)) -
                                                  1];
                x_35062 = ((__local
                            int64_t *) mem_37451)[sext_i32_i64(squot32(local_tid_38821,
                                                                       32)) -
                                                  1];
                x_35063 = ((__local
                            int64_t *) mem_37453)[sext_i32_i64(squot32(local_tid_38821,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38848 =
                     slt64(srem64(sext_i32_i64(local_tid_38821),
                                  iota32_arg_25134),
                           sext_i32_i64(local_tid_38821) -
                           sext_i32_i64(squot32(local_tid_38821, 32) * 32 - 1));
                
                if (inactive_38848) {
                    x_35060 = x_35064;
                    x_35061 = x_35065;
                    x_35062 = x_35066;
                    x_35063 = x_35067;
                }
                if (!inactive_38848) {
                    int64_t res_35068 = add64(x_35060, x_35064);
                    int64_t res_35069 = add64(x_35061, x_35065);
                    int64_t res_35070 = add64(x_35062, x_35066);
                    int64_t res_35071 = add64(x_35063, x_35067);
                    
                    x_35060 = res_35068;
                    x_35061 = res_35069;
                    x_35062 = res_35070;
                    x_35063 = res_35071;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37447)[sext_i32_i64(local_tid_38821)] =
                    x_35060;
                ((__local int64_t *) mem_37449)[sext_i32_i64(local_tid_38821)] =
                    x_35061;
                ((__local int64_t *) mem_37451)[sext_i32_i64(local_tid_38821)] =
                    x_35062;
                ((__local int64_t *) mem_37453)[sext_i32_i64(local_tid_38821)] =
                    x_35063;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38821, 32) == 0) {
            ((__local int64_t *) mem_37447)[sext_i32_i64(local_tid_38821)] =
                x_35064;
            ((__local int64_t *) mem_37449)[sext_i32_i64(local_tid_38821)] =
                x_35065;
            ((__local int64_t *) mem_37451)[sext_i32_i64(local_tid_38821)] =
                x_35066;
            ((__local int64_t *) mem_37453)[sext_i32_i64(local_tid_38821)] =
                x_35067;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_35105 = ((__local int64_t *) mem_37447)[i_25162];
    int64_t res_35106 = ((__local int64_t *) mem_37449)[i_25162];
    int64_t res_35107 = ((__local int64_t *) mem_37451)[i_25162];
    __local char *mem_37457;
    
    mem_37457 = (__local char *) mem_37457_backing_5;
    ((__local float *) mem_37457)[sext_i32_i64(local_tid_38821)] = ((__global
                                                                     float *) mem_37443)[gtid_34144 +
                                                                                         sext_i32_i64(local_tid_38821) *
                                                                                         m_24751];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_34149 = sext_i32_i64(ltid_pre_38825);
    int32_t phys_tid_34150 = local_tid_38821;
    
    if (slt64(write_i_34149, iota32_arg_25134)) {
        int32_t x_35110 = ((__local int32_t *) mem_37455)[write_i_34149];
        float write_value_35115 = ((__global
                                    float *) mem_param_37438)[gtid_34144 *
                                                              iota32_arg_25134 +
                                                              write_i_34149];
        bool match_lit_35116 = 0 == x_35110;
        int64_t res_35117;
        
        if (match_lit_35116) {
            int64_t x_35111 = ((__local int64_t *) mem_37447)[write_i_34149];
            int64_t res_35118 = sub64(x_35111, 1);
            
            res_35117 = res_35118;
        } else {
            int64_t x_35112 = ((__local int64_t *) mem_37449)[write_i_34149];
            int64_t x_35113 = ((__local int64_t *) mem_37451)[write_i_34149];
            int64_t x_35114 = ((__local int64_t *) mem_37453)[write_i_34149];
            bool match_lit_35119 = 1 == x_35110;
            int64_t x_35120;
            
            if (match_lit_35119) {
                int64_t x_35121 = add64(res_35105, x_35112);
                int64_t res_35122 = sub64(x_35121, 1);
                
                x_35120 = res_35122;
            } else {
                bool match_lit_35123 = 2 == x_35110;
                int64_t x_35124;
                
                if (match_lit_35123) {
                    int64_t x_35125 = add64(res_35105, res_35106);
                    int64_t x_35126 = add64(x_35113, x_35125);
                    int64_t res_35127 = sub64(x_35126, 1);
                    
                    x_35124 = res_35127;
                } else {
                    int64_t x_35128 = add64(res_35105, res_35106);
                    int64_t x_35129 = add64(res_35107, x_35128);
                    int64_t x_35130 = add64(x_35114, x_35129);
                    int64_t res_35131 = sub64(x_35130, 1);
                    
                    x_35124 = res_35131;
                }
                x_35120 = x_35124;
            }
            res_35117 = x_35120;
        }
        if (sle64(0, res_35117) && slt64(res_35117, iota32_arg_25134)) {
            ((__local float *) mem_37457)[res_35117] = write_value_35115;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37461)[gtid_34144 * iota32_arg_25134 +
                                   sext_i32_i64(local_tid_38821)] = ((__local
                                                                      float *) mem_37457)[sext_i32_i64(local_tid_38821)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_35467(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_36911_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_36908_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_36889_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_36886_backing_aligned_3,
                                            int64_t m_24751, int64_t N_24752,
                                            int64_t res_24764,
                                            int64_t res_24770,
                                            int64_t num_groups_y_35465,
                                            int64_t num_whole_tiles_35483,
                                            int64_t residual_input_35633,
                                            unsigned char cond_35634, __global
                                            unsigned char *images_mem_36652,
                                            __global unsigned char *mem_36664,
                                            __global unsigned char *mem_36926)
{
    #define tile_sizze_35462 (mainzitile_sizze_35461)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36911_backing_7 = (__local volatile
                                                           char *) mem_36911_backing_aligned_0;
    __local volatile char *restrict mem_36908_backing_6 = (__local volatile
                                                           char *) mem_36908_backing_aligned_1;
    __local volatile char *restrict mem_36889_backing_1 = (__local volatile
                                                           char *) mem_36889_backing_aligned_2;
    __local volatile char *restrict mem_36886_backing_0 = (__local volatile
                                                           char *) mem_36886_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37957;
    int32_t local_tid_37958;
    int64_t group_sizze_37961;
    int32_t wave_sizze_37960;
    int32_t group_tid_37959;
    
    global_tid_37957 = get_global_id(0);
    local_tid_37958 = get_local_id(0);
    group_sizze_37961 = get_local_size(0);
    wave_sizze_37960 = LOCKSTEP_WIDTH;
    group_tid_37959 = get_group_id(0);
    
    int32_t gid_flat_35467;
    
    gid_flat_35467 = group_tid_37959;
    
    int32_t ltid_pre_37962;
    
    ltid_pre_37962 = squot32(local_tid_37958, sext_i64_i32(tile_sizze_35462));
    
    int32_t ltid_pre_37963;
    
    ltid_pre_37963 = local_tid_37958 - squot32(local_tid_37958,
                                               sext_i64_i32(tile_sizze_35462)) *
        sext_i64_i32(tile_sizze_35462);
    
    int64_t gid_x_35459;
    
    gid_x_35459 = squot64(sext_i32_i64(group_tid_37959), num_groups_y_35465);
    
    int64_t gid_y_35460;
    
    gid_y_35460 = sext_i32_i64(group_tid_37959) -
        squot64(sext_i32_i64(group_tid_37959), num_groups_y_35465) *
        num_groups_y_35465;
    
    float mem_36871[1];
    int64_t ltid_x_35484 = sext_i32_i64(ltid_pre_37962);
    int64_t ltid_y_35485 = sext_i32_i64(ltid_pre_37963);
    int32_t ltid_flat_35486 = local_tid_37958;
    
    if (slt64(ltid_x_35484, tile_sizze_35462) && slt64(ltid_y_35485,
                                                       tile_sizze_35462)) {
        mem_36871[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35583 = gid_x_35459 * tile_sizze_35462;
    int64_t binop_x_35585 = gid_y_35460 * tile_sizze_35462;
    __local char *mem_36886;
    
    mem_36886 = (__local char *) mem_36886_backing_0;
    
    __local char *mem_36889;
    
    mem_36889 = (__local char *) mem_36889_backing_1;
    
    float accs_mem_36904[1];
    float mem_param_36879[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_36879[i_2] = mem_36871[i_2];
    for (int64_t tile_id_35495 = 0; tile_id_35495 < num_whole_tiles_35483;
         tile_id_35495++) {
        int64_t binop_x_35579 = tile_sizze_35462 * tile_id_35495;
        int64_t ltid_x_35496 = sext_i32_i64(ltid_pre_37962);
        int64_t ltid_y_35497 = sext_i32_i64(ltid_pre_37963);
        int32_t ltid_flat_35498 = local_tid_37958;
        int64_t i_35580 = ltid_x_35496 + binop_x_35579;
        int64_t j_35582 = ltid_y_35497 + binop_x_35579;
        int64_t gtid_35584 = ltid_x_35496 + binop_x_35583;
        int64_t gtid_35586 = ltid_y_35497 + binop_x_35585;
        bool binop_x_35589 = slt64(i_35580, res_24764);
        bool binop_y_35590 = slt64(gtid_35586, res_24770);
        bool cond_35591 = binop_x_35589 && binop_y_35590;
        float pre_35592;
        
        if (cond_35591) {
            float x_35593 = ((__global float *) mem_36664)[i_35580 * res_24770 +
                                                           gtid_35586];
            
            pre_35592 = x_35593;
        } else {
            pre_35592 = 0.0F;
        }
        
        bool binop_x_35595 = slt64(j_35582, res_24764);
        bool binop_y_35596 = slt64(gtid_35584, m_24751);
        bool cond_35597 = binop_x_35595 && binop_y_35596;
        float pre_35598;
        
        if (cond_35597) {
            float x_35599 = ((__global float *) images_mem_36652)[gtid_35584 *
                                                                  N_24752 +
                                                                  j_35582];
            
            pre_35598 = x_35599;
        } else {
            pre_35598 = 0.0F;
        }
        ((__local float *) mem_36886)[ltid_x_35496 * tile_sizze_35462 +
                                      ltid_y_35497] = pre_35592;
        ((__local float *) mem_36889)[ltid_x_35496 * tile_sizze_35462 +
                                      ltid_y_35497] = pre_35598;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_36893[1];
        int64_t ltid_x_35541 = sext_i32_i64(ltid_pre_37962);
        int64_t ltid_y_35542 = sext_i32_i64(ltid_pre_37963);
        int32_t ltid_flat_35543 = local_tid_37958;
        int64_t gtid_35603 = ltid_x_35541 + binop_x_35583;
        int64_t gtid_35605 = ltid_y_35542 + binop_x_35585;
        float acc_35608 = mem_param_36879[0];
        bool binop_x_35611 = slt64(gtid_35603, m_24751);
        bool binop_y_35612 = slt64(gtid_35605, res_24770);
        bool cond_35613 = binop_x_35611 && binop_y_35612;
        float acc_35614;
        
        if (cond_35613) {
            float x_35615;
            float redout_36539 = acc_35608;
            
            for (int64_t i_36540 = 0; i_36540 < tile_sizze_35462; i_36540++) {
                float x_35620 = ((__local float *) mem_36889)[ltid_x_35541 *
                                                              tile_sizze_35462 +
                                                              i_36540];
                bool res_35621;
                
                res_35621 = futrts_isnan32(x_35620);
                
                float res_35622;
                
                if (res_35621) {
                    res_35622 = 0.0F;
                } else {
                    float x_35619 = ((__local float *) mem_36886)[i_36540 *
                                                                  tile_sizze_35462 +
                                                                  ltid_y_35542];
                    float res_35623 = x_35619 * x_35620;
                    
                    res_35622 = res_35623;
                }
                
                float res_35618 = res_35622 + redout_36539;
                float redout_tmp_37966 = res_35618;
                
                redout_36539 = redout_tmp_37966;
            }
            x_35615 = redout_36539;
            acc_35614 = x_35615;
        } else {
            acc_35614 = acc_35608;
        }
        mem_36893[0] = acc_35614;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_37964[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_37964[i_3] = mem_36893[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_36879[i_4] = mem_param_tmp_37964[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_36904[i_5] = mem_param_36879[i_5];
    
    __local char *mem_36908;
    
    mem_36908 = (__local char *) mem_36908_backing_6;
    
    __local char *mem_36911;
    
    mem_36911 = (__local char *) mem_36911_backing_7;
    
    float mem_36915[1];
    float mem_37580[1];
    
    if (cond_35634) {
        mem_37580[0] = accs_mem_36904[0];
    } else {
        int64_t binop_x_35720 = tile_sizze_35462 * num_whole_tiles_35483;
        int64_t ltid_x_35635 = sext_i32_i64(ltid_pre_37962);
        int64_t ltid_y_35636 = sext_i32_i64(ltid_pre_37963);
        int32_t ltid_flat_35637 = local_tid_37958;
        int64_t i_35721 = ltid_x_35635 + binop_x_35720;
        int64_t j_35723 = ltid_y_35636 + binop_x_35720;
        int64_t gtid_35725 = binop_x_35583 + ltid_x_35635;
        int64_t gtid_35727 = binop_x_35585 + ltid_y_35636;
        bool binop_x_35730 = slt64(i_35721, res_24764);
        bool binop_y_35731 = slt64(gtid_35727, res_24770);
        bool cond_35732 = binop_x_35730 && binop_y_35731;
        float pre_35733;
        
        if (cond_35732) {
            float x_35734 = ((__global float *) mem_36664)[i_35721 * res_24770 +
                                                           gtid_35727];
            
            pre_35733 = x_35734;
        } else {
            pre_35733 = 0.0F;
        }
        
        bool binop_x_35736 = slt64(j_35723, res_24764);
        bool binop_y_35737 = slt64(gtid_35725, m_24751);
        bool cond_35738 = binop_x_35736 && binop_y_35737;
        float pre_35739;
        
        if (cond_35738) {
            float x_35740 = ((__global float *) images_mem_36652)[gtid_35725 *
                                                                  N_24752 +
                                                                  j_35723];
            
            pre_35739 = x_35740;
        } else {
            pre_35739 = 0.0F;
        }
        ((__local float *) mem_36908)[ltid_x_35635 * tile_sizze_35462 +
                                      ltid_y_35636] = pre_35733;
        ((__local float *) mem_36911)[ltid_x_35635 * tile_sizze_35462 +
                                      ltid_y_35636] = pre_35739;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_35682 = sext_i32_i64(ltid_pre_37962);
        int64_t ltid_y_35683 = sext_i32_i64(ltid_pre_37963);
        int32_t ltid_flat_35684 = local_tid_37958;
        int64_t gtid_35746 = binop_x_35583 + ltid_x_35682;
        int64_t gtid_35748 = binop_x_35585 + ltid_y_35683;
        float acc_35751 = accs_mem_36904[0];
        bool binop_x_35754 = slt64(gtid_35746, m_24751);
        bool binop_y_35755 = slt64(gtid_35748, res_24770);
        bool cond_35756 = binop_x_35754 && binop_y_35755;
        float acc_35757;
        
        if (cond_35756) {
            float x_35758;
            float redout_36541 = acc_35751;
            
            for (int64_t i_36542 = 0; i_36542 < residual_input_35633;
                 i_36542++) {
                float x_35763 = ((__local float *) mem_36911)[ltid_x_35682 *
                                                              tile_sizze_35462 +
                                                              i_36542];
                bool res_35764;
                
                res_35764 = futrts_isnan32(x_35763);
                
                float res_35765;
                
                if (res_35764) {
                    res_35765 = 0.0F;
                } else {
                    float x_35762 = ((__local float *) mem_36908)[i_36542 *
                                                                  tile_sizze_35462 +
                                                                  ltid_y_35683];
                    float res_35766 = x_35762 * x_35763;
                    
                    res_35765 = res_35766;
                }
                
                float res_35761 = res_35765 + redout_36541;
                float redout_tmp_37967 = res_35761;
                
                redout_36541 = redout_tmp_37967;
            }
            x_35758 = redout_36541;
            acc_35757 = x_35758;
        } else {
            acc_35757 = acc_35751;
        }
        mem_36915[0] = acc_35757;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37580[0] = mem_36915[0];
    }
    
    int64_t thread_out_index_37968 = gid_x_35459 * tile_sizze_35462 +
            sext_i32_i64(ltid_pre_37962);
    int64_t thread_out_index_37969 = gid_y_35460 * tile_sizze_35462 +
            sext_i32_i64(ltid_pre_37963);
    
    if (slt64(thread_out_index_37968, m_24751) && slt64(thread_out_index_37969,
                                                        res_24770)) {
        ((__global float *) mem_36926)[thread_out_index_37968 * res_24770 +
                                       thread_out_index_37969] = mem_37580[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35462
}
__kernel void mainzisegmap_intragroup_35789(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37048_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37045_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_37026_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_37023_backing_aligned_3,
                                            int64_t N_24750, int64_t m_24751,
                                            int64_t res_24770,
                                            int64_t num_groups_y_35787,
                                            int64_t num_whole_tiles_35805,
                                            int64_t residual_input_35949,
                                            unsigned char cond_35950, __global
                                            unsigned char *res_mem_36979,
                                            __global unsigned char *mem_37003,
                                            __global unsigned char *mem_37063)
{
    #define tile_sizze_35784 (mainzitile_sizze_35783)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37048_backing_7 = (__local volatile
                                                           char *) mem_37048_backing_aligned_0;
    __local volatile char *restrict mem_37045_backing_6 = (__local volatile
                                                           char *) mem_37045_backing_aligned_1;
    __local volatile char *restrict mem_37026_backing_1 = (__local volatile
                                                           char *) mem_37026_backing_aligned_2;
    __local volatile char *restrict mem_37023_backing_0 = (__local volatile
                                                           char *) mem_37023_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38126;
    int32_t local_tid_38127;
    int64_t group_sizze_38130;
    int32_t wave_sizze_38129;
    int32_t group_tid_38128;
    
    global_tid_38126 = get_global_id(0);
    local_tid_38127 = get_local_id(0);
    group_sizze_38130 = get_local_size(0);
    wave_sizze_38129 = LOCKSTEP_WIDTH;
    group_tid_38128 = get_group_id(0);
    
    int32_t gid_flat_35789;
    
    gid_flat_35789 = group_tid_38128;
    
    int32_t ltid_pre_38131;
    
    ltid_pre_38131 = squot32(local_tid_38127, sext_i64_i32(tile_sizze_35784));
    
    int32_t ltid_pre_38132;
    
    ltid_pre_38132 = local_tid_38127 - squot32(local_tid_38127,
                                               sext_i64_i32(tile_sizze_35784)) *
        sext_i64_i32(tile_sizze_35784);
    
    int64_t gid_x_35781;
    
    gid_x_35781 = squot64(sext_i32_i64(group_tid_38128), num_groups_y_35787);
    
    int64_t gid_y_35782;
    
    gid_y_35782 = sext_i32_i64(group_tid_38128) -
        squot64(sext_i32_i64(group_tid_38128), num_groups_y_35787) *
        num_groups_y_35787;
    
    float mem_37008[1];
    int64_t ltid_x_35806 = sext_i32_i64(ltid_pre_38131);
    int64_t ltid_y_35807 = sext_i32_i64(ltid_pre_38132);
    int32_t ltid_flat_35808 = local_tid_38127;
    
    if (slt64(ltid_x_35806, tile_sizze_35784) && slt64(ltid_y_35807,
                                                       tile_sizze_35784)) {
        mem_37008[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35903 = gid_x_35781 * tile_sizze_35784;
    int64_t binop_x_35905 = gid_y_35782 * tile_sizze_35784;
    __local char *mem_37023;
    
    mem_37023 = (__local char *) mem_37023_backing_0;
    
    __local char *mem_37026;
    
    mem_37026 = (__local char *) mem_37026_backing_1;
    
    float accs_mem_37041[1];
    float mem_param_37016[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_37016[i_2] = mem_37008[i_2];
    for (int64_t tile_id_35817 = 0; tile_id_35817 < num_whole_tiles_35805;
         tile_id_35817++) {
        int64_t binop_x_35899 = tile_sizze_35784 * tile_id_35817;
        int64_t ltid_x_35818 = sext_i32_i64(ltid_pre_38131);
        int64_t ltid_y_35819 = sext_i32_i64(ltid_pre_38132);
        int32_t ltid_flat_35820 = local_tid_38127;
        int64_t i_35900 = ltid_x_35818 + binop_x_35899;
        int64_t j_35902 = ltid_y_35819 + binop_x_35899;
        int64_t gtid_35904 = ltid_x_35818 + binop_x_35903;
        int64_t gtid_35906 = ltid_y_35819 + binop_x_35905;
        bool binop_x_35909 = slt64(j_35902, res_24770);
        bool binop_y_35910 = slt64(gtid_35904, m_24751);
        bool cond_35911 = binop_x_35909 && binop_y_35910;
        float pre_35912;
        
        if (cond_35911) {
            float x_35913 = ((__global float *) res_mem_36979)[gtid_35904 *
                                                               res_24770 +
                                                               j_35902];
            
            pre_35912 = x_35913;
        } else {
            pre_35912 = 0.0F;
        }
        
        bool binop_x_35915 = slt64(i_35900, res_24770);
        bool binop_y_35916 = slt64(gtid_35906, N_24750);
        bool cond_35917 = binop_x_35915 && binop_y_35916;
        float pre_35918;
        
        if (cond_35917) {
            float x_35919 = ((__global float *) mem_37003)[i_35900 * N_24750 +
                                                           gtid_35906];
            
            pre_35918 = x_35919;
        } else {
            pre_35918 = 0.0F;
        }
        ((__local float *) mem_37023)[ltid_x_35818 * tile_sizze_35784 +
                                      ltid_y_35819] = pre_35912;
        ((__local float *) mem_37026)[ltid_x_35818 * tile_sizze_35784 +
                                      ltid_y_35819] = pre_35918;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37030[1];
        int64_t ltid_x_35863 = sext_i32_i64(ltid_pre_38131);
        int64_t ltid_y_35864 = sext_i32_i64(ltid_pre_38132);
        int32_t ltid_flat_35865 = local_tid_38127;
        int64_t gtid_35923 = ltid_x_35863 + binop_x_35903;
        int64_t gtid_35925 = ltid_y_35864 + binop_x_35905;
        float acc_35928 = mem_param_37016[0];
        bool binop_x_35931 = slt64(gtid_35923, m_24751);
        bool binop_y_35932 = slt64(gtid_35925, N_24750);
        bool cond_35933 = binop_x_35931 && binop_y_35932;
        float acc_35934;
        
        if (cond_35933) {
            float x_35935;
            float redout_36557 = acc_35928;
            
            for (int64_t i_36558 = 0; i_36558 < tile_sizze_35784; i_36558++) {
                float x_35939 = ((__local float *) mem_37023)[ltid_x_35863 *
                                                              tile_sizze_35784 +
                                                              i_36558];
                float x_35940 = ((__local float *) mem_37026)[i_36558 *
                                                              tile_sizze_35784 +
                                                              ltid_y_35864];
                float res_35941 = x_35939 * x_35940;
                float res_35938 = res_35941 + redout_36557;
                float redout_tmp_38135 = res_35938;
                
                redout_36557 = redout_tmp_38135;
            }
            x_35935 = redout_36557;
            acc_35934 = x_35935;
        } else {
            acc_35934 = acc_35928;
        }
        mem_37030[0] = acc_35934;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38133[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_38133[i_3] = mem_37030[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_37016[i_4] = mem_param_tmp_38133[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_37041[i_5] = mem_param_37016[i_5];
    
    __local char *mem_37045;
    
    mem_37045 = (__local char *) mem_37045_backing_6;
    
    __local char *mem_37048;
    
    mem_37048 = (__local char *) mem_37048_backing_7;
    
    float mem_37052[1];
    float mem_37592[1];
    
    if (cond_35950) {
        mem_37592[0] = accs_mem_37041[0];
    } else {
        int64_t binop_x_36034 = tile_sizze_35784 * num_whole_tiles_35805;
        int64_t ltid_x_35951 = sext_i32_i64(ltid_pre_38131);
        int64_t ltid_y_35952 = sext_i32_i64(ltid_pre_38132);
        int32_t ltid_flat_35953 = local_tid_38127;
        int64_t i_36035 = ltid_x_35951 + binop_x_36034;
        int64_t j_36037 = ltid_y_35952 + binop_x_36034;
        int64_t gtid_36039 = binop_x_35903 + ltid_x_35951;
        int64_t gtid_36041 = binop_x_35905 + ltid_y_35952;
        bool binop_x_36044 = slt64(j_36037, res_24770);
        bool binop_y_36045 = slt64(gtid_36039, m_24751);
        bool cond_36046 = binop_x_36044 && binop_y_36045;
        float pre_36047;
        
        if (cond_36046) {
            float x_36048 = ((__global float *) res_mem_36979)[gtid_36039 *
                                                               res_24770 +
                                                               j_36037];
            
            pre_36047 = x_36048;
        } else {
            pre_36047 = 0.0F;
        }
        
        bool binop_x_36050 = slt64(i_36035, res_24770);
        bool binop_y_36051 = slt64(gtid_36041, N_24750);
        bool cond_36052 = binop_x_36050 && binop_y_36051;
        float pre_36053;
        
        if (cond_36052) {
            float x_36054 = ((__global float *) mem_37003)[i_36035 * N_24750 +
                                                           gtid_36041];
            
            pre_36053 = x_36054;
        } else {
            pre_36053 = 0.0F;
        }
        ((__local float *) mem_37045)[ltid_x_35951 * tile_sizze_35784 +
                                      ltid_y_35952] = pre_36047;
        ((__local float *) mem_37048)[ltid_x_35951 * tile_sizze_35784 +
                                      ltid_y_35952] = pre_36053;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_35998 = sext_i32_i64(ltid_pre_38131);
        int64_t ltid_y_35999 = sext_i32_i64(ltid_pre_38132);
        int32_t ltid_flat_36000 = local_tid_38127;
        int64_t gtid_36060 = binop_x_35903 + ltid_x_35998;
        int64_t gtid_36062 = binop_x_35905 + ltid_y_35999;
        float acc_36065 = accs_mem_37041[0];
        bool binop_x_36068 = slt64(gtid_36060, m_24751);
        bool binop_y_36069 = slt64(gtid_36062, N_24750);
        bool cond_36070 = binop_x_36068 && binop_y_36069;
        float acc_36071;
        
        if (cond_36070) {
            float x_36072;
            float redout_36559 = acc_36065;
            
            for (int64_t i_36560 = 0; i_36560 < residual_input_35949;
                 i_36560++) {
                float x_36076 = ((__local float *) mem_37045)[ltid_x_35998 *
                                                              tile_sizze_35784 +
                                                              i_36560];
                float x_36077 = ((__local float *) mem_37048)[i_36560 *
                                                              tile_sizze_35784 +
                                                              ltid_y_35999];
                float res_36078 = x_36076 * x_36077;
                float res_36075 = res_36078 + redout_36559;
                float redout_tmp_38136 = res_36075;
                
                redout_36559 = redout_tmp_38136;
            }
            x_36072 = redout_36559;
            acc_36071 = x_36072;
        } else {
            acc_36071 = acc_36065;
        }
        mem_37052[0] = acc_36071;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37592[0] = mem_37052[0];
    }
    
    int64_t thread_out_index_38137 = gid_x_35781 * tile_sizze_35784 +
            sext_i32_i64(ltid_pre_38131);
    int64_t thread_out_index_38138 = gid_y_35782 * tile_sizze_35784 +
            sext_i32_i64(ltid_pre_38132);
    
    if (slt64(thread_out_index_38137, m_24751) && slt64(thread_out_index_38138,
                                                        N_24750)) {
        ((__global float *) mem_37063)[thread_out_index_38137 * N_24750 +
                                       thread_out_index_38138] = mem_37592[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35784
}
__kernel void mainzisegmap_intragroup_36094(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37145_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37132_backing_aligned_1,
                                            int64_t m_24751, int32_t n_24755,
                                            float hfrac_24757,
                                            int64_t res_24764,
                                            int32_t k2p2_24766,
                                            int64_t num_whole_tiles_36102,
                                            int64_t residual_input_36223,
                                            unsigned char cond_36224, __global
                                            unsigned char *mem_37115, __global
                                            unsigned char *mem_37118, __global
                                            unsigned char *mem_37162, __global
                                            unsigned char *mem_37164, __global
                                            unsigned char *mem_37166)
{
    #define segmap_group_sizze_32966 (mainzisegmap_group_sizze_32935)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37145_backing_5 = (__local volatile
                                                           char *) mem_37145_backing_aligned_0;
    __local volatile char *restrict mem_37132_backing_0 = (__local volatile
                                                           char *) mem_37132_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38306;
    int32_t local_tid_38307;
    int64_t group_sizze_38310;
    int32_t wave_sizze_38309;
    int32_t group_tid_38308;
    
    global_tid_38306 = get_global_id(0);
    local_tid_38307 = get_local_id(0);
    group_sizze_38310 = get_local_size(0);
    wave_sizze_38309 = LOCKSTEP_WIDTH;
    group_tid_38308 = get_group_id(0);
    
    int32_t gid_flat_36094;
    
    gid_flat_36094 = group_tid_38308;
    
    int32_t ltid_pre_38311;
    
    ltid_pre_38311 = local_tid_38307;
    
    int64_t gid_36093;
    
    gid_36093 = sext_i32_i64(group_tid_38308);
    
    float mem_37122[1];
    int64_t ltid_36103 = sext_i32_i64(ltid_pre_38311);
    int32_t ltid_flat_36104 = local_tid_38307;
    
    if (slt64(ltid_36103, segmap_group_sizze_32966)) {
        mem_37122[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_36189 = segmap_group_sizze_32966 * gid_36093;
    __local char *mem_37132;
    
    mem_37132 = (__local char *) mem_37132_backing_0;
    
    float accs_mem_37142[1];
    float mem_param_37127[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37127[i_1] = mem_37122[i_1];
    for (int64_t tile_id_36110 = 0; tile_id_36110 < num_whole_tiles_36102;
         tile_id_36110++) {
        int64_t binop_x_36171 = segmap_group_sizze_32966 * tile_id_36110;
        int64_t ltid_36111 = sext_i32_i64(ltid_pre_38311);
        int32_t ltid_flat_36112 = local_tid_38307;
        
        if (slt64(ltid_36111, segmap_group_sizze_32966)) {
            int64_t j_36172 = ltid_36111 + binop_x_36171;
            bool cond_36184 = slt64(j_36172, res_24764);
            int32_t pre_36185;
            
            if (cond_36184) {
                int32_t index_primexp_36509 = sext_i64_i32(j_36172);
                
                pre_36185 = index_primexp_36509;
            } else {
                pre_36185 = 0;
            }
            ((__local int32_t *) mem_37132)[ltid_36111] = pre_36185;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37135[1];
        int64_t ltid_36138 = sext_i32_i64(ltid_pre_38311);
        int32_t ltid_flat_36139 = local_tid_38307;
        
        if (slt64(ltid_36138, segmap_group_sizze_32966)) {
            int64_t gtid_36190 = ltid_36138 + binop_x_36189;
            int32_t res_36192;
            int32_t redout_36561 = 0;
            
            for (int32_t i_36639 = 0; i_36639 < n_24755; i_36639++) {
                int64_t i_36562 = sext_i32_i64(i_36639);
                float x_36196 = ((__global float *) mem_37115)[i_36562 *
                                                               m_24751 +
                                                               gtid_36190];
                bool res_36197;
                
                res_36197 = futrts_isnan32(x_36196);
                
                bool cond_36198 = !res_36197;
                int32_t res_36199 = btoi_bool_i32(cond_36198);
                int32_t res_36195 = add32(res_36199, redout_36561);
                int32_t redout_tmp_38314 = res_36195;
                
                redout_36561 = redout_tmp_38314;
            }
            res_36192 = redout_36561;
            
            float acc_36200 = mem_param_37127[0];
            bool cond_36201 = slt64(gtid_36190, m_24751);
            float acc_36202;
            
            if (cond_36201) {
                float x_36203;
                float redout_36563 = acc_36200;
                
                for (int64_t i_36564 = 0; i_36564 < segmap_group_sizze_32966;
                     i_36564++) {
                    int32_t x_36207 = ((__local int32_t *) mem_37132)[i_36564];
                    bool cond_36208 = slt32(x_36207, res_36192);
                    float res_36209;
                    
                    if (cond_36208) {
                        int64_t i_36210 = sext_i32_i64(x_36207);
                        float res_36211 = ((__global
                                            float *) mem_37118)[i_36210 *
                                                                m_24751 +
                                                                gtid_36190];
                        
                        res_36209 = res_36211;
                    } else {
                        res_36209 = 0.0F;
                    }
                    
                    float res_36212 = res_36209 * res_36209;
                    float res_36206 = res_36212 + redout_36563;
                    float redout_tmp_38315 = res_36206;
                    
                    redout_36563 = redout_tmp_38315;
                }
                x_36203 = redout_36563;
                acc_36202 = x_36203;
            } else {
                acc_36202 = acc_36200;
            }
            mem_37135[0] = acc_36202;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38312[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38312[i_2] = mem_37135[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37127[i_3] = mem_param_tmp_38312[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37142[i_4] = mem_param_37127[i_4];
    
    __local char *mem_37145;
    
    mem_37145 = (__local char *) mem_37145_backing_5;
    
    float mem_37148[1];
    float mem_37601[1];
    
    if (cond_36224) {
        mem_37601[0] = accs_mem_37142[0];
    } else {
        int64_t binop_x_36234 = segmap_group_sizze_32966 *
                num_whole_tiles_36102;
        int64_t ltid_36225 = sext_i32_i64(ltid_pre_38311);
        int32_t ltid_flat_36226 = local_tid_38307;
        
        if (slt64(ltid_36225, segmap_group_sizze_32966)) {
            int64_t j_36235 = ltid_36225 + binop_x_36234;
            bool cond_36247 = slt64(j_36235, res_24764);
            int32_t pre_36248;
            
            if (cond_36247) {
                int32_t index_primexp_36510 = sext_i64_i32(j_36235);
                
                pre_36248 = index_primexp_36510;
            } else {
                pre_36248 = 0;
            }
            ((__local int32_t *) mem_37145)[ltid_36225] = pre_36248;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36253 = sext_i32_i64(ltid_pre_38311);
        int32_t ltid_flat_36254 = local_tid_38307;
        
        if (slt64(ltid_36253, segmap_group_sizze_32966)) {
            int64_t gtid_36261 = binop_x_36189 + ltid_36253;
            int32_t res_36263;
            int32_t redout_36565 = 0;
            
            for (int32_t i_36640 = 0; i_36640 < n_24755; i_36640++) {
                int64_t i_36566 = sext_i32_i64(i_36640);
                float x_36267 = ((__global float *) mem_37115)[i_36566 *
                                                               m_24751 +
                                                               gtid_36261];
                bool res_36268;
                
                res_36268 = futrts_isnan32(x_36267);
                
                bool cond_36269 = !res_36268;
                int32_t res_36270 = btoi_bool_i32(cond_36269);
                int32_t res_36266 = add32(res_36270, redout_36565);
                int32_t redout_tmp_38316 = res_36266;
                
                redout_36565 = redout_tmp_38316;
            }
            res_36263 = redout_36565;
            
            float acc_36271 = accs_mem_37142[0];
            bool cond_36272 = slt64(gtid_36261, m_24751);
            float acc_36273;
            
            if (cond_36272) {
                float x_36274;
                float redout_36567 = acc_36271;
                
                for (int64_t i_36568 = 0; i_36568 < residual_input_36223;
                     i_36568++) {
                    int32_t x_36278 = ((__local int32_t *) mem_37145)[i_36568];
                    bool cond_36279 = slt32(x_36278, res_36263);
                    float res_36280;
                    
                    if (cond_36279) {
                        int64_t i_36281 = sext_i32_i64(x_36278);
                        float res_36282 = ((__global
                                            float *) mem_37118)[i_36281 *
                                                                m_24751 +
                                                                gtid_36261];
                        
                        res_36280 = res_36282;
                    } else {
                        res_36280 = 0.0F;
                    }
                    
                    float res_36283 = res_36280 * res_36280;
                    float res_36277 = res_36283 + redout_36567;
                    float redout_tmp_38317 = res_36277;
                    
                    redout_36567 = redout_tmp_38317;
                }
                x_36274 = redout_36567;
                acc_36273 = x_36274;
            } else {
                acc_36273 = acc_36271;
            }
            mem_37148[0] = acc_36273;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37601[0] = mem_37148[0];
    }
    
    int32_t mem_37156[1];
    int32_t mem_37158[1];
    float mem_37160[1];
    int64_t ltid_36286 = sext_i32_i64(ltid_pre_38311);
    int32_t ltid_flat_36287 = local_tid_38307;
    
    if (slt64(ltid_36286, segmap_group_sizze_32966)) {
        int64_t gtid_36297 = binop_x_36189 + ltid_36286;
        bool cond_36299 = slt64(gtid_36297, m_24751);
        int32_t postlude_36300;
        int32_t postlude_36301;
        float postlude_36302;
        
        if (cond_36299) {
            float res_36298 = mem_37601[0];
            int32_t res_36304;
            int32_t redout_36569 = 0;
            
            for (int32_t i_36641 = 0; i_36641 < n_24755; i_36641++) {
                int64_t i_36570 = sext_i32_i64(i_36641);
                float x_36308 = ((__global float *) mem_37115)[i_36570 *
                                                               m_24751 +
                                                               gtid_36297];
                bool res_36309;
                
                res_36309 = futrts_isnan32(x_36308);
                
                bool cond_36310 = !res_36309;
                int32_t res_36311 = btoi_bool_i32(cond_36310);
                int32_t res_36307 = add32(res_36311, redout_36569);
                int32_t redout_tmp_38318 = res_36307;
                
                redout_36569 = redout_tmp_38318;
            }
            res_36304 = redout_36569;
            
            int32_t r32_arg_36312 = sub32(res_36304, k2p2_24766);
            float res_36313 = sitofp_i32_f32(r32_arg_36312);
            float sqrt_arg_36314 = res_36298 / res_36313;
            float res_36315;
            
            res_36315 = futrts_sqrt32(sqrt_arg_36314);
            
            float res_36316 = sitofp_i32_f32(res_36304);
            float t32_arg_36317 = hfrac_24757 * res_36316;
            int32_t res_36318 = fptosi_f32_i32(t32_arg_36317);
            
            postlude_36300 = res_36318;
            postlude_36301 = res_36304;
            postlude_36302 = res_36315;
        } else {
            postlude_36300 = 0;
            postlude_36301 = 0;
            postlude_36302 = 0.0F;
        }
        mem_37156[0] = postlude_36300;
        mem_37158[0] = postlude_36301;
        mem_37160[0] = postlude_36302;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_38307) + segmap_group_sizze_32966 *
              sext_i32_i64(group_tid_38308), m_24751)) {
        ((__global int32_t *) mem_37162)[sext_i32_i64(local_tid_38307) +
                                         segmap_group_sizze_32966 *
                                         sext_i32_i64(group_tid_38308)] =
            mem_37156[0];
    }
    if (slt64(sext_i32_i64(local_tid_38307) + segmap_group_sizze_32966 *
              sext_i32_i64(group_tid_38308), m_24751)) {
        ((__global int32_t *) mem_37164)[sext_i32_i64(local_tid_38307) +
                                         segmap_group_sizze_32966 *
                                         sext_i32_i64(group_tid_38308)] =
            mem_37158[0];
    }
    if (slt64(sext_i32_i64(local_tid_38307) + segmap_group_sizze_32966 *
              sext_i32_i64(group_tid_38308), m_24751)) {
        ((__global float *) mem_37166)[sext_i32_i64(local_tid_38307) +
                                       segmap_group_sizze_32966 *
                                       sext_i32_i64(group_tid_38308)] =
            mem_37160[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_32966
}
__kernel void mainzisegmap_intragroup_36326(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_37227_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_37214_backing_aligned_1,
                                            int64_t N_24750, int64_t m_24751,
                                            int64_t res_25112,
                                            int64_t num_whole_tiles_36346,
                                            int64_t residual_input_36445,
                                            unsigned char cond_36446, __global
                                            unsigned char *res_mem_37111,
                                            __global
                                            unsigned char *res_mem_37190,
                                            __global
                                            unsigned char *res_mem_37191,
                                            __global unsigned char *mem_37237)
{
    #define segmap_group_sizze_33203 (mainzisegmap_group_sizze_33184)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37227_backing_5 = (__local volatile
                                                           char *) mem_37227_backing_aligned_0;
    __local volatile char *restrict mem_37214_backing_0 = (__local volatile
                                                           char *) mem_37214_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38492;
    int32_t local_tid_38493;
    int64_t group_sizze_38496;
    int32_t wave_sizze_38495;
    int32_t group_tid_38494;
    
    global_tid_38492 = get_global_id(0);
    local_tid_38493 = get_local_id(0);
    group_sizze_38496 = get_local_size(0);
    wave_sizze_38495 = LOCKSTEP_WIDTH;
    group_tid_38494 = get_group_id(0);
    
    int32_t gid_flat_36326;
    
    gid_flat_36326 = group_tid_38494;
    
    int32_t ltid_pre_38497;
    
    ltid_pre_38497 = local_tid_38493;
    
    int64_t gid_36325;
    
    gid_36325 = sext_i32_i64(group_tid_38494);
    
    int64_t binop_x_36335;
    
    binop_x_36335 = segmap_group_sizze_33203 * gid_36325;
    
    int32_t mem_37199[1];
    int32_t mem_37201[1];
    int64_t ltid_36327 = sext_i32_i64(ltid_pre_38497);
    int32_t ltid_flat_36328 = local_tid_38493;
    
    if (slt64(ltid_36327, segmap_group_sizze_33203)) {
        int64_t gtid_36336 = ltid_36327 + binop_x_36335;
        bool cond_36337 = slt64(gtid_36336, m_24751);
        int32_t pre_36338;
        int32_t pre_36339;
        
        if (cond_36337) {
            int32_t x_36340 = ((__global int32_t *) res_mem_37191)[gtid_36336];
            int32_t x_36341 = ((__global int32_t *) res_mem_37190)[gtid_36336];
            
            pre_36338 = x_36340;
            pre_36339 = x_36341;
        } else {
            pre_36338 = 0;
            pre_36339 = 0;
        }
        mem_37199[0] = pre_36338;
        mem_37201[0] = pre_36339;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float mem_37204[1];
    int64_t ltid_36347 = sext_i32_i64(ltid_pre_38497);
    int32_t ltid_flat_36348 = local_tid_38493;
    
    if (slt64(ltid_36347, segmap_group_sizze_33203)) {
        mem_37204[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37214;
    
    mem_37214 = (__local char *) mem_37214_backing_0;
    
    float accs_mem_37224[1];
    float mem_param_37209[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37209[i_1] = mem_37204[i_1];
    for (int64_t tile_id_36354 = 0; tile_id_36354 < num_whole_tiles_36346;
         tile_id_36354++) {
        int64_t binop_x_36403 = segmap_group_sizze_33203 * tile_id_36354;
        int64_t ltid_36355 = sext_i32_i64(ltid_pre_38497);
        int32_t ltid_flat_36356 = local_tid_38493;
        
        if (slt64(ltid_36355, segmap_group_sizze_33203)) {
            int64_t j_36404 = ltid_36355 + binop_x_36403;
            bool cond_36409 = slt64(j_36404, res_25112);
            int32_t pre_36410;
            
            if (cond_36409) {
                int32_t index_primexp_36511 = sext_i64_i32(j_36404);
                
                pre_36410 = index_primexp_36511;
            } else {
                pre_36410 = 0;
            }
            ((__local int32_t *) mem_37214)[ltid_36355] = pre_36410;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37217[1];
        int64_t ltid_36375 = sext_i32_i64(ltid_pre_38497);
        int32_t ltid_flat_36376 = local_tid_38493;
        
        if (slt64(ltid_36375, segmap_group_sizze_33203)) {
            int64_t gtid_36415 = binop_x_36335 + ltid_36375;
            float acc_36418 = mem_param_37209[0];
            bool cond_36419 = slt64(gtid_36415, m_24751);
            float acc_36420;
            
            if (cond_36419) {
                int32_t x_36416 = mem_37199[0];
                int32_t x_36417 = mem_37201[0];
                float x_36421;
                float redout_36571 = acc_36418;
                
                for (int64_t i_36572 = 0; i_36572 < segmap_group_sizze_33203;
                     i_36572++) {
                    int32_t x_36425 = ((__local int32_t *) mem_37214)[i_36572];
                    bool cond_36426 = slt32(x_36425, x_36417);
                    float res_36427;
                    
                    if (cond_36426) {
                        int32_t x_36428 = add32(x_36416, x_36425);
                        int32_t x_36429 = sub32(x_36428, x_36417);
                        int32_t i_36430 = add32(1, x_36429);
                        int64_t i_36431 = sext_i32_i64(i_36430);
                        float res_36432 = ((__global
                                            float *) res_mem_37111)[gtid_36415 *
                                                                    N_24750 +
                                                                    i_36431];
                        
                        res_36427 = res_36432;
                    } else {
                        res_36427 = 0.0F;
                    }
                    
                    float res_36424 = res_36427 + redout_36571;
                    float redout_tmp_38500 = res_36424;
                    
                    redout_36571 = redout_tmp_38500;
                }
                x_36421 = redout_36571;
                acc_36420 = x_36421;
            } else {
                acc_36420 = acc_36418;
            }
            mem_37217[0] = acc_36420;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38498[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38498[i_2] = mem_37217[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37209[i_3] = mem_param_tmp_38498[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37224[i_4] = mem_param_37209[i_4];
    
    __local char *mem_37227;
    
    mem_37227 = (__local char *) mem_37227_backing_5;
    
    float mem_37230[1];
    float mem_37610[1];
    
    if (cond_36446) {
        mem_37610[0] = accs_mem_37224[0];
    } else {
        int64_t binop_x_36456 = segmap_group_sizze_33203 *
                num_whole_tiles_36346;
        int64_t ltid_36447 = sext_i32_i64(ltid_pre_38497);
        int32_t ltid_flat_36448 = local_tid_38493;
        
        if (slt64(ltid_36447, segmap_group_sizze_33203)) {
            int64_t j_36457 = ltid_36447 + binop_x_36456;
            bool cond_36462 = slt64(j_36457, res_25112);
            int32_t pre_36463;
            
            if (cond_36462) {
                int32_t index_primexp_36512 = sext_i64_i32(j_36457);
                
                pre_36463 = index_primexp_36512;
            } else {
                pre_36463 = 0;
            }
            ((__local int32_t *) mem_37227)[ltid_36447] = pre_36463;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36468 = sext_i32_i64(ltid_pre_38497);
        int32_t ltid_flat_36469 = local_tid_38493;
        
        if (slt64(ltid_36468, segmap_group_sizze_33203)) {
            int64_t gtid_36476 = binop_x_36335 + ltid_36468;
            float acc_36479 = accs_mem_37224[0];
            bool cond_36480 = slt64(gtid_36476, m_24751);
            float acc_36481;
            
            if (cond_36480) {
                int32_t x_36477 = mem_37199[0];
                int32_t x_36478 = mem_37201[0];
                float x_36482;
                float redout_36573 = acc_36479;
                
                for (int64_t i_36574 = 0; i_36574 < residual_input_36445;
                     i_36574++) {
                    int32_t x_36486 = ((__local int32_t *) mem_37227)[i_36574];
                    bool cond_36487 = slt32(x_36486, x_36478);
                    float res_36488;
                    
                    if (cond_36487) {
                        int32_t x_36489 = add32(x_36477, x_36486);
                        int32_t x_36490 = sub32(x_36489, x_36478);
                        int32_t i_36491 = add32(1, x_36490);
                        int64_t i_36492 = sext_i32_i64(i_36491);
                        float res_36493 = ((__global
                                            float *) res_mem_37111)[gtid_36476 *
                                                                    N_24750 +
                                                                    i_36492];
                        
                        res_36488 = res_36493;
                    } else {
                        res_36488 = 0.0F;
                    }
                    
                    float res_36485 = res_36488 + redout_36573;
                    float redout_tmp_38501 = res_36485;
                    
                    redout_36573 = redout_tmp_38501;
                }
                x_36482 = redout_36573;
                acc_36481 = x_36482;
            } else {
                acc_36481 = acc_36479;
            }
            mem_37230[0] = acc_36481;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37610[0] = mem_37230[0];
    }
    if (slt64(sext_i32_i64(local_tid_38493) + segmap_group_sizze_33203 *
              sext_i32_i64(group_tid_38494), m_24751)) {
        ((__global float *) mem_37237)[sext_i32_i64(local_tid_38493) +
                                       segmap_group_sizze_33203 *
                                       sext_i32_i64(group_tid_38494)] =
            mem_37610[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_33203
}
__kernel void mainzisegred_large_31052(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_37853_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_37851_backing_aligned_1,
                                       int64_t N_24750, int64_t N_24752,
                                       int64_t res_24764, int64_t res_24770,
                                       int64_t num_groups_31191, __global
                                       unsigned char *images_mem_36652, __global
                                       unsigned char *binop_p_mem_36661,
                                       __global unsigned char *mem_36744,
                                       __global unsigned char *mem_36749,
                                       int64_t groups_per_segment_37837,
                                       int64_t elements_per_thread_37838,
                                       int64_t virt_num_groups_37839,
                                       int64_t threads_per_segment_37841,
                                       __global
                                       unsigned char *group_res_arr_mem_37842,
                                       __global
                                       unsigned char *mainzicounter_mem_37844)
{
    #define segred_group_sizze_31190 (mainzisegred_group_sizze_31046)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_37853_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_37853_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_37851_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37851_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37846;
    int32_t local_tid_37847;
    int64_t group_sizze_37850;
    int32_t wave_sizze_37849;
    int32_t group_tid_37848;
    
    global_tid_37846 = get_global_id(0);
    local_tid_37847 = get_local_id(0);
    group_sizze_37850 = get_local_size(0);
    wave_sizze_37849 = LOCKSTEP_WIDTH;
    group_tid_37848 = get_group_id(0);
    
    int32_t phys_tid_31052;
    
    phys_tid_31052 = global_tid_37846;
    
    __local char *red_arr_mem_37851;
    
    red_arr_mem_37851 = (__local char *) red_arr_mem_37851_backing_0;
    
    __local char *sync_arr_mem_37853;
    
    sync_arr_mem_37853 = (__local char *) sync_arr_mem_37853_backing_1;
    
    int32_t phys_group_id_37855;
    
    phys_group_id_37855 = get_group_id(0);
    for (int32_t i_37856 = 0; i_37856 <
         sdiv_up32(sext_i64_i32(virt_num_groups_37839) - phys_group_id_37855,
                   sext_i64_i32(num_groups_31191)); i_37856++) {
        int32_t virt_group_id_37857 = phys_group_id_37855 + i_37856 *
                sext_i64_i32(num_groups_31191);
        int32_t flat_segment_id_37858 = squot32(virt_group_id_37857,
                                                sext_i64_i32(groups_per_segment_37837));
        int64_t global_tid_37859 = srem64(sext_i32_i64(virt_group_id_37857) *
                                          segred_group_sizze_31190 +
                                          sext_i32_i64(local_tid_37847),
                                          segred_group_sizze_31190 *
                                          groups_per_segment_37837);
        int64_t gtid_31039 = squot64(sext_i32_i64(flat_segment_id_37858),
                                     res_24770 * res_24770);
        int64_t gtid_31040 = squot64(sext_i32_i64(flat_segment_id_37858) -
                                     squot64(sext_i32_i64(flat_segment_id_37858),
                                             res_24770 * res_24770) *
                                     (res_24770 * res_24770), res_24770);
        int64_t gtid_31041 = sext_i32_i64(flat_segment_id_37858) -
                squot64(sext_i32_i64(flat_segment_id_37858), res_24770 *
                        res_24770) * (res_24770 * res_24770) -
                squot64(sext_i32_i64(flat_segment_id_37858) -
                        squot64(sext_i32_i64(flat_segment_id_37858), res_24770 *
                                res_24770) * (res_24770 * res_24770),
                        res_24770) * res_24770;
        int64_t gtid_31051;
        float x_acc_37860;
        int64_t chunk_sizze_37861;
        
        chunk_sizze_37861 = smin64(elements_per_thread_37838,
                                   sdiv_up64(res_24764 -
                                             sext_i32_i64(sext_i64_i32(global_tid_37859)),
                                             threads_per_segment_37841));
        
        float x_31194;
        float x_31195;
        
        // neutral-initialise the accumulators
        {
            x_acc_37860 = 0.0F;
        }
        for (int64_t i_37865 = 0; i_37865 < chunk_sizze_37861; i_37865++) {
            gtid_31051 = sext_i32_i64(sext_i64_i32(global_tid_37859)) +
                threads_per_segment_37841 * i_37865;
            // apply map function
            {
                float x_31200 = ((__global
                                  float *) images_mem_36652)[gtid_31039 *
                                                             N_24752 +
                                                             gtid_31051];
                float x_31201 = ((__global
                                  float *) binop_p_mem_36661)[gtid_31040 *
                                                              N_24750 +
                                                              gtid_31051];
                float x_31202 = ((__global float *) mem_36744)[gtid_31041 *
                                                               N_24750 +
                                                               gtid_31051];
                float x_31203 = x_31201 * x_31202;
                bool res_31204;
                
                res_31204 = futrts_isnan32(x_31200);
                
                float y_31205;
                
                if (res_31204) {
                    y_31205 = 0.0F;
                } else {
                    y_31205 = 1.0F;
                }
                
                float res_31206 = x_31203 * y_31205;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_31194 = x_acc_37860;
                }
                // load new values
                {
                    x_31195 = res_31206;
                }
                // apply reduction operator
                {
                    float res_31196 = x_31194 + x_31195;
                    
                    // store in accumulator
                    {
                        x_acc_37860 = res_31196;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_31194 = x_acc_37860;
            ((__local
              float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847)] =
                x_31194;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_37866;
        int32_t skip_waves_37867;
        
        skip_waves_37867 = 1;
        
        float x_37862;
        float x_37863;
        
        offset_37866 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_37847,
                      sext_i64_i32(segred_group_sizze_31190))) {
                x_37862 = ((__local
                            float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847 +
                                                        offset_37866)];
            }
        }
        offset_37866 = 1;
        while (slt32(offset_37866, wave_sizze_37849)) {
            if (slt32(local_tid_37847 + offset_37866,
                      sext_i64_i32(segred_group_sizze_31190)) &&
                ((local_tid_37847 - squot32(local_tid_37847, wave_sizze_37849) *
                  wave_sizze_37849) & (2 * offset_37866 - 1)) == 0) {
                // read array element
                {
                    x_37863 = ((volatile __local
                                float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847 +
                                                            offset_37866)];
                }
                // apply reduction operation
                {
                    float res_37864 = x_37862 + x_37863;
                    
                    x_37862 = res_37864;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847)] =
                        x_37862;
                }
            }
            offset_37866 *= 2;
        }
        while (slt32(skip_waves_37867,
                     squot32(sext_i64_i32(segred_group_sizze_31190) +
                             wave_sizze_37849 - 1, wave_sizze_37849))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_37866 = skip_waves_37867 * wave_sizze_37849;
            if (slt32(local_tid_37847 + offset_37866,
                      sext_i64_i32(segred_group_sizze_31190)) &&
                ((local_tid_37847 - squot32(local_tid_37847, wave_sizze_37849) *
                  wave_sizze_37849) == 0 && (squot32(local_tid_37847,
                                                     wave_sizze_37849) & (2 *
                                                                          skip_waves_37867 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_37863 = ((__local
                                float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847 +
                                                            offset_37866)];
                }
                // apply reduction operation
                {
                    float res_37864 = x_37862 + x_37863;
                    
                    x_37862 = res_37864;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847)] =
                        x_37862;
                }
            }
            skip_waves_37867 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_37847) == 0) {
                x_acc_37860 = x_37862;
            }
        }
        if (groups_per_segment_37837 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_37847 == 0) {
                    ((__global float *) mem_36749)[gtid_31039 * (res_24770 *
                                                                 res_24770) +
                                                   gtid_31040 * res_24770 +
                                                   gtid_31041] = x_acc_37860;
                }
            }
        } else {
            int32_t old_counter_37868;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_37847 == 0) {
                    ((__global
                      float *) group_res_arr_mem_37842)[sext_i32_i64(virt_group_id_37857) *
                                                        segred_group_sizze_31190] =
                        x_acc_37860;
                    mem_fence_global();
                    old_counter_37868 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_37844)[sext_i32_i64(srem32(flat_segment_id_37858,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_37853)[0] =
                        old_counter_37868 == groups_per_segment_37837 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_37869;
            
            is_last_group_37869 = ((__local bool *) sync_arr_mem_37853)[0];
            if (is_last_group_37869) {
                if (local_tid_37847 == 0) {
                    old_counter_37868 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_37844)[sext_i32_i64(srem32(flat_segment_id_37858,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_37837));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_37870 =
                            sdiv_up64(groups_per_segment_37837,
                                      segred_group_sizze_31190);
                    
                    x_31194 = 0.0F;
                    for (int64_t i_37871 = 0; i_37871 < read_per_thread_37870;
                         i_37871++) {
                        int64_t group_res_id_37872 =
                                sext_i32_i64(local_tid_37847) *
                                read_per_thread_37870 + i_37871;
                        int64_t index_of_group_res_37873 =
                                sext_i32_i64(flat_segment_id_37858) *
                                groups_per_segment_37837 + group_res_id_37872;
                        
                        if (slt64(group_res_id_37872,
                                  groups_per_segment_37837)) {
                            x_31195 = ((__global
                                        float *) group_res_arr_mem_37842)[index_of_group_res_37873 *
                                                                          segred_group_sizze_31190];
                            
                            float res_31196;
                            
                            res_31196 = x_31194 + x_31195;
                            x_31194 = res_31196;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847)] =
                    x_31194;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_37874;
                    int32_t skip_waves_37875;
                    
                    skip_waves_37875 = 1;
                    
                    float x_37862;
                    float x_37863;
                    
                    offset_37874 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_37847,
                                  sext_i64_i32(segred_group_sizze_31190))) {
                            x_37862 = ((__local
                                        float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847 +
                                                                    offset_37874)];
                        }
                    }
                    offset_37874 = 1;
                    while (slt32(offset_37874, wave_sizze_37849)) {
                        if (slt32(local_tid_37847 + offset_37874,
                                  sext_i64_i32(segred_group_sizze_31190)) &&
                            ((local_tid_37847 - squot32(local_tid_37847,
                                                        wave_sizze_37849) *
                              wave_sizze_37849) & (2 * offset_37874 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_37863 = ((volatile __local
                                            float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847 +
                                                                        offset_37874)];
                            }
                            // apply reduction operation
                            {
                                float res_37864 = x_37862 + x_37863;
                                
                                x_37862 = res_37864;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847)] =
                                    x_37862;
                            }
                        }
                        offset_37874 *= 2;
                    }
                    while (slt32(skip_waves_37875,
                                 squot32(sext_i64_i32(segred_group_sizze_31190) +
                                         wave_sizze_37849 - 1,
                                         wave_sizze_37849))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_37874 = skip_waves_37875 * wave_sizze_37849;
                        if (slt32(local_tid_37847 + offset_37874,
                                  sext_i64_i32(segred_group_sizze_31190)) &&
                            ((local_tid_37847 - squot32(local_tid_37847,
                                                        wave_sizze_37849) *
                              wave_sizze_37849) == 0 &&
                             (squot32(local_tid_37847, wave_sizze_37849) & (2 *
                                                                            skip_waves_37875 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_37863 = ((__local
                                            float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847 +
                                                                        offset_37874)];
                            }
                            // apply reduction operation
                            {
                                float res_37864 = x_37862 + x_37863;
                                
                                x_37862 = res_37864;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_37851)[sext_i32_i64(local_tid_37847)] =
                                    x_37862;
                            }
                        }
                        skip_waves_37875 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_37847 == 0) {
                            ((__global float *) mem_36749)[gtid_31039 *
                                                           (res_24770 *
                                                            res_24770) +
                                                           gtid_31040 *
                                                           res_24770 +
                                                           gtid_31041] =
                                x_37862;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31190
}
__kernel void mainzisegred_large_32225(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38007_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38005_backing_aligned_1,
                                       int64_t N_24750, int64_t N_24752,
                                       int64_t res_24764, int64_t res_24770,
                                       int64_t num_groups_32278, __global
                                       unsigned char *images_mem_36652, __global
                                       unsigned char *binop_p_mem_36661,
                                       __global unsigned char *mem_36930,
                                       int64_t groups_per_segment_37991,
                                       int64_t elements_per_thread_37992,
                                       int64_t virt_num_groups_37993,
                                       int64_t threads_per_segment_37995,
                                       __global
                                       unsigned char *group_res_arr_mem_37996,
                                       __global
                                       unsigned char *mainzicounter_mem_37998)
{
    #define segred_group_sizze_32277 (mainzisegred_group_sizze_32219)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38007_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38007_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38005_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38005_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38000;
    int32_t local_tid_38001;
    int64_t group_sizze_38004;
    int32_t wave_sizze_38003;
    int32_t group_tid_38002;
    
    global_tid_38000 = get_global_id(0);
    local_tid_38001 = get_local_id(0);
    group_sizze_38004 = get_local_size(0);
    wave_sizze_38003 = LOCKSTEP_WIDTH;
    group_tid_38002 = get_group_id(0);
    
    int32_t phys_tid_32225;
    
    phys_tid_32225 = global_tid_38000;
    
    __local char *red_arr_mem_38005;
    
    red_arr_mem_38005 = (__local char *) red_arr_mem_38005_backing_0;
    
    __local char *sync_arr_mem_38007;
    
    sync_arr_mem_38007 = (__local char *) sync_arr_mem_38007_backing_1;
    
    int32_t phys_group_id_38009;
    
    phys_group_id_38009 = get_group_id(0);
    for (int32_t i_38010 = 0; i_38010 <
         sdiv_up32(sext_i64_i32(virt_num_groups_37993) - phys_group_id_38009,
                   sext_i64_i32(num_groups_32278)); i_38010++) {
        int32_t virt_group_id_38011 = phys_group_id_38009 + i_38010 *
                sext_i64_i32(num_groups_32278);
        int32_t flat_segment_id_38012 = squot32(virt_group_id_38011,
                                                sext_i64_i32(groups_per_segment_37991));
        int64_t global_tid_38013 = srem64(sext_i32_i64(virt_group_id_38011) *
                                          segred_group_sizze_32277 +
                                          sext_i32_i64(local_tid_38001),
                                          segred_group_sizze_32277 *
                                          groups_per_segment_37991);
        int64_t gtid_32214 = squot64(sext_i32_i64(flat_segment_id_38012),
                                     res_24770);
        int64_t gtid_32215 = sext_i32_i64(flat_segment_id_38012) -
                squot64(sext_i32_i64(flat_segment_id_38012), res_24770) *
                res_24770;
        int64_t gtid_32224;
        float x_acc_38014;
        int64_t chunk_sizze_38015;
        
        chunk_sizze_38015 = smin64(elements_per_thread_37992,
                                   sdiv_up64(res_24764 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38013)),
                                             threads_per_segment_37995));
        
        float x_32281;
        float x_32282;
        
        // neutral-initialise the accumulators
        {
            x_acc_38014 = 0.0F;
        }
        for (int64_t i_38019 = 0; i_38019 < chunk_sizze_38015; i_38019++) {
            gtid_32224 = sext_i32_i64(sext_i64_i32(global_tid_38013)) +
                threads_per_segment_37995 * i_38019;
            // apply map function
            {
                float x_32287 = ((__global
                                  float *) images_mem_36652)[gtid_32214 *
                                                             N_24752 +
                                                             gtid_32224];
                bool res_32288;
                
                res_32288 = futrts_isnan32(x_32287);
                
                float res_32289;
                
                if (res_32288) {
                    res_32289 = 0.0F;
                } else {
                    float x_32286 = ((__global
                                      float *) binop_p_mem_36661)[gtid_32215 *
                                                                  N_24750 +
                                                                  gtid_32224];
                    float res_32290 = x_32286 * x_32287;
                    
                    res_32289 = res_32290;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_32281 = x_acc_38014;
                }
                // load new values
                {
                    x_32282 = res_32289;
                }
                // apply reduction operator
                {
                    float res_32283 = x_32281 + x_32282;
                    
                    // store in accumulator
                    {
                        x_acc_38014 = res_32283;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32281 = x_acc_38014;
            ((__local
              float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001)] =
                x_32281;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38020;
        int32_t skip_waves_38021;
        
        skip_waves_38021 = 1;
        
        float x_38016;
        float x_38017;
        
        offset_38020 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38001,
                      sext_i64_i32(segred_group_sizze_32277))) {
                x_38016 = ((__local
                            float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001 +
                                                        offset_38020)];
            }
        }
        offset_38020 = 1;
        while (slt32(offset_38020, wave_sizze_38003)) {
            if (slt32(local_tid_38001 + offset_38020,
                      sext_i64_i32(segred_group_sizze_32277)) &&
                ((local_tid_38001 - squot32(local_tid_38001, wave_sizze_38003) *
                  wave_sizze_38003) & (2 * offset_38020 - 1)) == 0) {
                // read array element
                {
                    x_38017 = ((volatile __local
                                float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001 +
                                                            offset_38020)];
                }
                // apply reduction operation
                {
                    float res_38018 = x_38016 + x_38017;
                    
                    x_38016 = res_38018;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001)] =
                        x_38016;
                }
            }
            offset_38020 *= 2;
        }
        while (slt32(skip_waves_38021,
                     squot32(sext_i64_i32(segred_group_sizze_32277) +
                             wave_sizze_38003 - 1, wave_sizze_38003))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38020 = skip_waves_38021 * wave_sizze_38003;
            if (slt32(local_tid_38001 + offset_38020,
                      sext_i64_i32(segred_group_sizze_32277)) &&
                ((local_tid_38001 - squot32(local_tid_38001, wave_sizze_38003) *
                  wave_sizze_38003) == 0 && (squot32(local_tid_38001,
                                                     wave_sizze_38003) & (2 *
                                                                          skip_waves_38021 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38017 = ((__local
                                float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001 +
                                                            offset_38020)];
                }
                // apply reduction operation
                {
                    float res_38018 = x_38016 + x_38017;
                    
                    x_38016 = res_38018;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001)] =
                        x_38016;
                }
            }
            skip_waves_38021 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38001) == 0) {
                x_acc_38014 = x_38016;
            }
        }
        if (groups_per_segment_37991 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38001 == 0) {
                    ((__global float *) mem_36930)[gtid_32214 * res_24770 +
                                                   gtid_32215] = x_acc_38014;
                }
            }
        } else {
            int32_t old_counter_38022;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38001 == 0) {
                    ((__global
                      float *) group_res_arr_mem_37996)[sext_i32_i64(virt_group_id_38011) *
                                                        segred_group_sizze_32277] =
                        x_acc_38014;
                    mem_fence_global();
                    old_counter_38022 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_37998)[sext_i32_i64(srem32(flat_segment_id_38012,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38007)[0] =
                        old_counter_38022 == groups_per_segment_37991 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38023;
            
            is_last_group_38023 = ((__local bool *) sync_arr_mem_38007)[0];
            if (is_last_group_38023) {
                if (local_tid_38001 == 0) {
                    old_counter_38022 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_37998)[sext_i32_i64(srem32(flat_segment_id_38012,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_37991));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38024 =
                            sdiv_up64(groups_per_segment_37991,
                                      segred_group_sizze_32277);
                    
                    x_32281 = 0.0F;
                    for (int64_t i_38025 = 0; i_38025 < read_per_thread_38024;
                         i_38025++) {
                        int64_t group_res_id_38026 =
                                sext_i32_i64(local_tid_38001) *
                                read_per_thread_38024 + i_38025;
                        int64_t index_of_group_res_38027 =
                                sext_i32_i64(flat_segment_id_38012) *
                                groups_per_segment_37991 + group_res_id_38026;
                        
                        if (slt64(group_res_id_38026,
                                  groups_per_segment_37991)) {
                            x_32282 = ((__global
                                        float *) group_res_arr_mem_37996)[index_of_group_res_38027 *
                                                                          segred_group_sizze_32277];
                            
                            float res_32283;
                            
                            res_32283 = x_32281 + x_32282;
                            x_32281 = res_32283;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001)] =
                    x_32281;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38028;
                    int32_t skip_waves_38029;
                    
                    skip_waves_38029 = 1;
                    
                    float x_38016;
                    float x_38017;
                    
                    offset_38028 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38001,
                                  sext_i64_i32(segred_group_sizze_32277))) {
                            x_38016 = ((__local
                                        float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001 +
                                                                    offset_38028)];
                        }
                    }
                    offset_38028 = 1;
                    while (slt32(offset_38028, wave_sizze_38003)) {
                        if (slt32(local_tid_38001 + offset_38028,
                                  sext_i64_i32(segred_group_sizze_32277)) &&
                            ((local_tid_38001 - squot32(local_tid_38001,
                                                        wave_sizze_38003) *
                              wave_sizze_38003) & (2 * offset_38028 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38017 = ((volatile __local
                                            float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001 +
                                                                        offset_38028)];
                            }
                            // apply reduction operation
                            {
                                float res_38018 = x_38016 + x_38017;
                                
                                x_38016 = res_38018;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001)] =
                                    x_38016;
                            }
                        }
                        offset_38028 *= 2;
                    }
                    while (slt32(skip_waves_38029,
                                 squot32(sext_i64_i32(segred_group_sizze_32277) +
                                         wave_sizze_38003 - 1,
                                         wave_sizze_38003))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38028 = skip_waves_38029 * wave_sizze_38003;
                        if (slt32(local_tid_38001 + offset_38028,
                                  sext_i64_i32(segred_group_sizze_32277)) &&
                            ((local_tid_38001 - squot32(local_tid_38001,
                                                        wave_sizze_38003) *
                              wave_sizze_38003) == 0 &&
                             (squot32(local_tid_38001, wave_sizze_38003) & (2 *
                                                                            skip_waves_38029 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38017 = ((__local
                                            float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001 +
                                                                        offset_38028)];
                            }
                            // apply reduction operation
                            {
                                float res_38018 = x_38016 + x_38017;
                                
                                x_38016 = res_38018;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38005)[sext_i32_i64(local_tid_38001)] =
                                    x_38016;
                            }
                        }
                        skip_waves_38029 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38001 == 0) {
                            ((__global float *) mem_36930)[gtid_32214 *
                                                           res_24770 +
                                                           gtid_32215] =
                                x_38016;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32277
}
__kernel void mainzisegred_large_32362(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38088_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38086_backing_aligned_1,
                                       int64_t res_24770,
                                       int64_t num_groups_32411, __global
                                       unsigned char *res_mem_36845, __global
                                       unsigned char *res_mem_36936, __global
                                       unsigned char *mem_36973,
                                       int64_t groups_per_segment_38072,
                                       int64_t elements_per_thread_38073,
                                       int64_t virt_num_groups_38074,
                                       int64_t threads_per_segment_38076,
                                       __global
                                       unsigned char *group_res_arr_mem_38077,
                                       __global
                                       unsigned char *mainzicounter_mem_38079)
{
    #define segred_group_sizze_32410 (mainzisegred_group_sizze_32356)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38088_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38088_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38086_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38086_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38081;
    int32_t local_tid_38082;
    int64_t group_sizze_38085;
    int32_t wave_sizze_38084;
    int32_t group_tid_38083;
    
    global_tid_38081 = get_global_id(0);
    local_tid_38082 = get_local_id(0);
    group_sizze_38085 = get_local_size(0);
    wave_sizze_38084 = LOCKSTEP_WIDTH;
    group_tid_38083 = get_group_id(0);
    
    int32_t phys_tid_32362;
    
    phys_tid_32362 = global_tid_38081;
    
    __local char *red_arr_mem_38086;
    
    red_arr_mem_38086 = (__local char *) red_arr_mem_38086_backing_0;
    
    __local char *sync_arr_mem_38088;
    
    sync_arr_mem_38088 = (__local char *) sync_arr_mem_38088_backing_1;
    
    int32_t phys_group_id_38090;
    
    phys_group_id_38090 = get_group_id(0);
    for (int32_t i_38091 = 0; i_38091 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38074) - phys_group_id_38090,
                   sext_i64_i32(num_groups_32411)); i_38091++) {
        int32_t virt_group_id_38092 = phys_group_id_38090 + i_38091 *
                sext_i64_i32(num_groups_32411);
        int32_t flat_segment_id_38093 = squot32(virt_group_id_38092,
                                                sext_i64_i32(groups_per_segment_38072));
        int64_t global_tid_38094 = srem64(sext_i32_i64(virt_group_id_38092) *
                                          segred_group_sizze_32410 +
                                          sext_i32_i64(local_tid_38082),
                                          segred_group_sizze_32410 *
                                          groups_per_segment_38072);
        int64_t gtid_32351 = squot64(sext_i32_i64(flat_segment_id_38093),
                                     res_24770);
        int64_t gtid_32352 = sext_i32_i64(flat_segment_id_38093) -
                squot64(sext_i32_i64(flat_segment_id_38093), res_24770) *
                res_24770;
        int64_t gtid_32361;
        float x_acc_38095;
        int64_t chunk_sizze_38096;
        
        chunk_sizze_38096 = smin64(elements_per_thread_38073,
                                   sdiv_up64(res_24770 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38094)),
                                             threads_per_segment_38076));
        
        float x_32414;
        float x_32415;
        
        // neutral-initialise the accumulators
        {
            x_acc_38095 = 0.0F;
        }
        for (int64_t i_38100 = 0; i_38100 < chunk_sizze_38096; i_38100++) {
            gtid_32361 = sext_i32_i64(sext_i64_i32(global_tid_38094)) +
                threads_per_segment_38076 * i_38100;
            // apply map function
            {
                float x_32420 = ((__global float *) res_mem_36936)[gtid_32351 *
                                                                   res_24770 +
                                                                   gtid_32361];
                float x_32421 = ((__global float *) res_mem_36845)[gtid_32351 *
                                                                   (res_24770 *
                                                                    res_24770) +
                                                                   gtid_32352 *
                                                                   res_24770 +
                                                                   gtid_32361];
                float res_32422 = x_32420 * x_32421;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_32414 = x_acc_38095;
                }
                // load new values
                {
                    x_32415 = res_32422;
                }
                // apply reduction operator
                {
                    float res_32416 = x_32414 + x_32415;
                    
                    // store in accumulator
                    {
                        x_acc_38095 = res_32416;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32414 = x_acc_38095;
            ((__local
              float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082)] =
                x_32414;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38101;
        int32_t skip_waves_38102;
        
        skip_waves_38102 = 1;
        
        float x_38097;
        float x_38098;
        
        offset_38101 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38082,
                      sext_i64_i32(segred_group_sizze_32410))) {
                x_38097 = ((__local
                            float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082 +
                                                        offset_38101)];
            }
        }
        offset_38101 = 1;
        while (slt32(offset_38101, wave_sizze_38084)) {
            if (slt32(local_tid_38082 + offset_38101,
                      sext_i64_i32(segred_group_sizze_32410)) &&
                ((local_tid_38082 - squot32(local_tid_38082, wave_sizze_38084) *
                  wave_sizze_38084) & (2 * offset_38101 - 1)) == 0) {
                // read array element
                {
                    x_38098 = ((volatile __local
                                float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082 +
                                                            offset_38101)];
                }
                // apply reduction operation
                {
                    float res_38099 = x_38097 + x_38098;
                    
                    x_38097 = res_38099;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082)] =
                        x_38097;
                }
            }
            offset_38101 *= 2;
        }
        while (slt32(skip_waves_38102,
                     squot32(sext_i64_i32(segred_group_sizze_32410) +
                             wave_sizze_38084 - 1, wave_sizze_38084))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38101 = skip_waves_38102 * wave_sizze_38084;
            if (slt32(local_tid_38082 + offset_38101,
                      sext_i64_i32(segred_group_sizze_32410)) &&
                ((local_tid_38082 - squot32(local_tid_38082, wave_sizze_38084) *
                  wave_sizze_38084) == 0 && (squot32(local_tid_38082,
                                                     wave_sizze_38084) & (2 *
                                                                          skip_waves_38102 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38098 = ((__local
                                float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082 +
                                                            offset_38101)];
                }
                // apply reduction operation
                {
                    float res_38099 = x_38097 + x_38098;
                    
                    x_38097 = res_38099;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082)] =
                        x_38097;
                }
            }
            skip_waves_38102 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38082) == 0) {
                x_acc_38095 = x_38097;
            }
        }
        if (groups_per_segment_38072 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38082 == 0) {
                    ((__global float *) mem_36973)[gtid_32351 * res_24770 +
                                                   gtid_32352] = x_acc_38095;
                }
            }
        } else {
            int32_t old_counter_38103;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38082 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38077)[sext_i32_i64(virt_group_id_38092) *
                                                        segred_group_sizze_32410] =
                        x_acc_38095;
                    mem_fence_global();
                    old_counter_38103 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38079)[sext_i32_i64(srem32(flat_segment_id_38093,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38088)[0] =
                        old_counter_38103 == groups_per_segment_38072 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38104;
            
            is_last_group_38104 = ((__local bool *) sync_arr_mem_38088)[0];
            if (is_last_group_38104) {
                if (local_tid_38082 == 0) {
                    old_counter_38103 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38079)[sext_i32_i64(srem32(flat_segment_id_38093,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38072));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38105 =
                            sdiv_up64(groups_per_segment_38072,
                                      segred_group_sizze_32410);
                    
                    x_32414 = 0.0F;
                    for (int64_t i_38106 = 0; i_38106 < read_per_thread_38105;
                         i_38106++) {
                        int64_t group_res_id_38107 =
                                sext_i32_i64(local_tid_38082) *
                                read_per_thread_38105 + i_38106;
                        int64_t index_of_group_res_38108 =
                                sext_i32_i64(flat_segment_id_38093) *
                                groups_per_segment_38072 + group_res_id_38107;
                        
                        if (slt64(group_res_id_38107,
                                  groups_per_segment_38072)) {
                            x_32415 = ((__global
                                        float *) group_res_arr_mem_38077)[index_of_group_res_38108 *
                                                                          segred_group_sizze_32410];
                            
                            float res_32416;
                            
                            res_32416 = x_32414 + x_32415;
                            x_32414 = res_32416;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082)] =
                    x_32414;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38109;
                    int32_t skip_waves_38110;
                    
                    skip_waves_38110 = 1;
                    
                    float x_38097;
                    float x_38098;
                    
                    offset_38109 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38082,
                                  sext_i64_i32(segred_group_sizze_32410))) {
                            x_38097 = ((__local
                                        float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082 +
                                                                    offset_38109)];
                        }
                    }
                    offset_38109 = 1;
                    while (slt32(offset_38109, wave_sizze_38084)) {
                        if (slt32(local_tid_38082 + offset_38109,
                                  sext_i64_i32(segred_group_sizze_32410)) &&
                            ((local_tid_38082 - squot32(local_tid_38082,
                                                        wave_sizze_38084) *
                              wave_sizze_38084) & (2 * offset_38109 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38098 = ((volatile __local
                                            float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082 +
                                                                        offset_38109)];
                            }
                            // apply reduction operation
                            {
                                float res_38099 = x_38097 + x_38098;
                                
                                x_38097 = res_38099;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082)] =
                                    x_38097;
                            }
                        }
                        offset_38109 *= 2;
                    }
                    while (slt32(skip_waves_38110,
                                 squot32(sext_i64_i32(segred_group_sizze_32410) +
                                         wave_sizze_38084 - 1,
                                         wave_sizze_38084))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38109 = skip_waves_38110 * wave_sizze_38084;
                        if (slt32(local_tid_38082 + offset_38109,
                                  sext_i64_i32(segred_group_sizze_32410)) &&
                            ((local_tid_38082 - squot32(local_tid_38082,
                                                        wave_sizze_38084) *
                              wave_sizze_38084) == 0 &&
                             (squot32(local_tid_38082, wave_sizze_38084) & (2 *
                                                                            skip_waves_38110 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38098 = ((__local
                                            float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082 +
                                                                        offset_38109)];
                            }
                            // apply reduction operation
                            {
                                float res_38099 = x_38097 + x_38098;
                                
                                x_38097 = res_38099;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38086)[sext_i32_i64(local_tid_38082)] =
                                    x_38097;
                            }
                        }
                        skip_waves_38110 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38082 == 0) {
                            ((__global float *) mem_36973)[gtid_32351 *
                                                           res_24770 +
                                                           gtid_32352] =
                                x_38097;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32410
}
__kernel void mainzisegred_large_32492(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38176_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38174_backing_aligned_1,
                                       int64_t N_24750, int64_t res_24770,
                                       int64_t num_groups_32539, __global
                                       unsigned char *mem_36668, __global
                                       unsigned char *res_mem_36979, __global
                                       unsigned char *mem_37067,
                                       int64_t groups_per_segment_38160,
                                       int64_t elements_per_thread_38161,
                                       int64_t virt_num_groups_38162,
                                       int64_t threads_per_segment_38164,
                                       __global
                                       unsigned char *group_res_arr_mem_38165,
                                       __global
                                       unsigned char *mainzicounter_mem_38167)
{
    #define segred_group_sizze_32538 (mainzisegred_group_sizze_32486)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38176_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38176_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38174_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38174_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38169;
    int32_t local_tid_38170;
    int64_t group_sizze_38173;
    int32_t wave_sizze_38172;
    int32_t group_tid_38171;
    
    global_tid_38169 = get_global_id(0);
    local_tid_38170 = get_local_id(0);
    group_sizze_38173 = get_local_size(0);
    wave_sizze_38172 = LOCKSTEP_WIDTH;
    group_tid_38171 = get_group_id(0);
    
    int32_t phys_tid_32492;
    
    phys_tid_32492 = global_tid_38169;
    
    __local char *red_arr_mem_38174;
    
    red_arr_mem_38174 = (__local char *) red_arr_mem_38174_backing_0;
    
    __local char *sync_arr_mem_38176;
    
    sync_arr_mem_38176 = (__local char *) sync_arr_mem_38176_backing_1;
    
    int32_t phys_group_id_38178;
    
    phys_group_id_38178 = get_group_id(0);
    for (int32_t i_38179 = 0; i_38179 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38162) - phys_group_id_38178,
                   sext_i64_i32(num_groups_32539)); i_38179++) {
        int32_t virt_group_id_38180 = phys_group_id_38178 + i_38179 *
                sext_i64_i32(num_groups_32539);
        int32_t flat_segment_id_38181 = squot32(virt_group_id_38180,
                                                sext_i64_i32(groups_per_segment_38160));
        int64_t global_tid_38182 = srem64(sext_i32_i64(virt_group_id_38180) *
                                          segred_group_sizze_32538 +
                                          sext_i32_i64(local_tid_38170),
                                          segred_group_sizze_32538 *
                                          groups_per_segment_38160);
        int64_t gtid_32481 = squot64(sext_i32_i64(flat_segment_id_38181),
                                     N_24750);
        int64_t gtid_32482 = sext_i32_i64(flat_segment_id_38181) -
                squot64(sext_i32_i64(flat_segment_id_38181), N_24750) * N_24750;
        int64_t gtid_32491;
        float x_acc_38183;
        int64_t chunk_sizze_38184;
        
        chunk_sizze_38184 = smin64(elements_per_thread_38161,
                                   sdiv_up64(res_24770 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38182)),
                                             threads_per_segment_38164));
        
        float x_32542;
        float x_32543;
        
        // neutral-initialise the accumulators
        {
            x_acc_38183 = 0.0F;
        }
        for (int64_t i_38188 = 0; i_38188 < chunk_sizze_38184; i_38188++) {
            gtid_32491 = sext_i32_i64(sext_i64_i32(global_tid_38182)) +
                threads_per_segment_38164 * i_38188;
            // apply map function
            {
                float x_32547 = ((__global float *) res_mem_36979)[gtid_32481 *
                                                                   res_24770 +
                                                                   gtid_32491];
                float x_32548 = ((__global float *) mem_36668)[gtid_32482 *
                                                               res_24770 +
                                                               gtid_32491];
                float res_32549 = x_32547 * x_32548;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_32542 = x_acc_38183;
                }
                // load new values
                {
                    x_32543 = res_32549;
                }
                // apply reduction operator
                {
                    float res_32544 = x_32542 + x_32543;
                    
                    // store in accumulator
                    {
                        x_acc_38183 = res_32544;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32542 = x_acc_38183;
            ((__local
              float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170)] =
                x_32542;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38189;
        int32_t skip_waves_38190;
        
        skip_waves_38190 = 1;
        
        float x_38185;
        float x_38186;
        
        offset_38189 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38170,
                      sext_i64_i32(segred_group_sizze_32538))) {
                x_38185 = ((__local
                            float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170 +
                                                        offset_38189)];
            }
        }
        offset_38189 = 1;
        while (slt32(offset_38189, wave_sizze_38172)) {
            if (slt32(local_tid_38170 + offset_38189,
                      sext_i64_i32(segred_group_sizze_32538)) &&
                ((local_tid_38170 - squot32(local_tid_38170, wave_sizze_38172) *
                  wave_sizze_38172) & (2 * offset_38189 - 1)) == 0) {
                // read array element
                {
                    x_38186 = ((volatile __local
                                float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170 +
                                                            offset_38189)];
                }
                // apply reduction operation
                {
                    float res_38187 = x_38185 + x_38186;
                    
                    x_38185 = res_38187;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170)] =
                        x_38185;
                }
            }
            offset_38189 *= 2;
        }
        while (slt32(skip_waves_38190,
                     squot32(sext_i64_i32(segred_group_sizze_32538) +
                             wave_sizze_38172 - 1, wave_sizze_38172))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38189 = skip_waves_38190 * wave_sizze_38172;
            if (slt32(local_tid_38170 + offset_38189,
                      sext_i64_i32(segred_group_sizze_32538)) &&
                ((local_tid_38170 - squot32(local_tid_38170, wave_sizze_38172) *
                  wave_sizze_38172) == 0 && (squot32(local_tid_38170,
                                                     wave_sizze_38172) & (2 *
                                                                          skip_waves_38190 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38186 = ((__local
                                float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170 +
                                                            offset_38189)];
                }
                // apply reduction operation
                {
                    float res_38187 = x_38185 + x_38186;
                    
                    x_38185 = res_38187;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170)] =
                        x_38185;
                }
            }
            skip_waves_38190 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38170) == 0) {
                x_acc_38183 = x_38185;
            }
        }
        if (groups_per_segment_38160 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38170 == 0) {
                    ((__global float *) mem_37067)[gtid_32481 * N_24750 +
                                                   gtid_32482] = x_acc_38183;
                }
            }
        } else {
            int32_t old_counter_38191;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38170 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38165)[sext_i32_i64(virt_group_id_38180) *
                                                        segred_group_sizze_32538] =
                        x_acc_38183;
                    mem_fence_global();
                    old_counter_38191 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38167)[sext_i32_i64(srem32(flat_segment_id_38181,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38176)[0] =
                        old_counter_38191 == groups_per_segment_38160 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38192;
            
            is_last_group_38192 = ((__local bool *) sync_arr_mem_38176)[0];
            if (is_last_group_38192) {
                if (local_tid_38170 == 0) {
                    old_counter_38191 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38167)[sext_i32_i64(srem32(flat_segment_id_38181,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38160));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38193 =
                            sdiv_up64(groups_per_segment_38160,
                                      segred_group_sizze_32538);
                    
                    x_32542 = 0.0F;
                    for (int64_t i_38194 = 0; i_38194 < read_per_thread_38193;
                         i_38194++) {
                        int64_t group_res_id_38195 =
                                sext_i32_i64(local_tid_38170) *
                                read_per_thread_38193 + i_38194;
                        int64_t index_of_group_res_38196 =
                                sext_i32_i64(flat_segment_id_38181) *
                                groups_per_segment_38160 + group_res_id_38195;
                        
                        if (slt64(group_res_id_38195,
                                  groups_per_segment_38160)) {
                            x_32543 = ((__global
                                        float *) group_res_arr_mem_38165)[index_of_group_res_38196 *
                                                                          segred_group_sizze_32538];
                            
                            float res_32544;
                            
                            res_32544 = x_32542 + x_32543;
                            x_32542 = res_32544;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170)] =
                    x_32542;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38197;
                    int32_t skip_waves_38198;
                    
                    skip_waves_38198 = 1;
                    
                    float x_38185;
                    float x_38186;
                    
                    offset_38197 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38170,
                                  sext_i64_i32(segred_group_sizze_32538))) {
                            x_38185 = ((__local
                                        float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170 +
                                                                    offset_38197)];
                        }
                    }
                    offset_38197 = 1;
                    while (slt32(offset_38197, wave_sizze_38172)) {
                        if (slt32(local_tid_38170 + offset_38197,
                                  sext_i64_i32(segred_group_sizze_32538)) &&
                            ((local_tid_38170 - squot32(local_tid_38170,
                                                        wave_sizze_38172) *
                              wave_sizze_38172) & (2 * offset_38197 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38186 = ((volatile __local
                                            float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170 +
                                                                        offset_38197)];
                            }
                            // apply reduction operation
                            {
                                float res_38187 = x_38185 + x_38186;
                                
                                x_38185 = res_38187;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170)] =
                                    x_38185;
                            }
                        }
                        offset_38197 *= 2;
                    }
                    while (slt32(skip_waves_38198,
                                 squot32(sext_i64_i32(segred_group_sizze_32538) +
                                         wave_sizze_38172 - 1,
                                         wave_sizze_38172))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38197 = skip_waves_38198 * wave_sizze_38172;
                        if (slt32(local_tid_38170 + offset_38197,
                                  sext_i64_i32(segred_group_sizze_32538)) &&
                            ((local_tid_38170 - squot32(local_tid_38170,
                                                        wave_sizze_38172) *
                              wave_sizze_38172) == 0 &&
                             (squot32(local_tid_38170, wave_sizze_38172) & (2 *
                                                                            skip_waves_38198 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38186 = ((__local
                                            float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170 +
                                                                        offset_38197)];
                            }
                            // apply reduction operation
                            {
                                float res_38187 = x_38185 + x_38186;
                                
                                x_38185 = res_38187;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38174)[sext_i32_i64(local_tid_38170)] =
                                    x_38185;
                            }
                        }
                        skip_waves_38198 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38170 == 0) {
                            ((__global float *) mem_37067)[gtid_32481 *
                                                           N_24750 +
                                                           gtid_32482] =
                                x_38185;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32538
}
__kernel void mainzisegred_large_33058(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38430_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38428_backing_aligned_1,
                                       int64_t N_24750, int64_t res_24764,
                                       int64_t num_groups_33105, __global
                                       unsigned char *res_mem_37111, __global
                                       unsigned char *mem_37178, __global
                                       unsigned char *mem_37181,
                                       int64_t groups_per_segment_38414,
                                       int64_t elements_per_thread_38415,
                                       int64_t virt_num_groups_38416,
                                       int64_t threads_per_segment_38418,
                                       __global
                                       unsigned char *group_res_arr_mem_38419,
                                       __global
                                       unsigned char *mainzicounter_mem_38421)
{
    #define segred_group_sizze_33104 (mainzisegred_group_sizze_33052)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38430_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38430_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38428_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38428_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38423;
    int32_t local_tid_38424;
    int64_t group_sizze_38427;
    int32_t wave_sizze_38426;
    int32_t group_tid_38425;
    
    global_tid_38423 = get_global_id(0);
    local_tid_38424 = get_local_id(0);
    group_sizze_38427 = get_local_size(0);
    wave_sizze_38426 = LOCKSTEP_WIDTH;
    group_tid_38425 = get_group_id(0);
    
    int32_t phys_tid_33058;
    
    phys_tid_33058 = global_tid_38423;
    
    __local char *red_arr_mem_38428;
    
    red_arr_mem_38428 = (__local char *) red_arr_mem_38428_backing_0;
    
    __local char *sync_arr_mem_38430;
    
    sync_arr_mem_38430 = (__local char *) sync_arr_mem_38430_backing_1;
    
    int32_t phys_group_id_38432;
    
    phys_group_id_38432 = get_group_id(0);
    for (int32_t i_38433 = 0; i_38433 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38416) - phys_group_id_38432,
                   sext_i64_i32(num_groups_33105)); i_38433++) {
        int32_t virt_group_id_38434 = phys_group_id_38432 + i_38433 *
                sext_i64_i32(num_groups_33105);
        int32_t flat_segment_id_38435 = squot32(virt_group_id_38434,
                                                sext_i64_i32(groups_per_segment_38414));
        int64_t global_tid_38436 = srem64(sext_i32_i64(virt_group_id_38434) *
                                          segred_group_sizze_33104 +
                                          sext_i32_i64(local_tid_38424),
                                          segred_group_sizze_33104 *
                                          groups_per_segment_38414);
        int64_t gtid_33049 = sext_i32_i64(flat_segment_id_38435);
        int64_t gtid_33057;
        float x_acc_38437;
        int64_t chunk_sizze_38438;
        
        chunk_sizze_38438 = smin64(elements_per_thread_38415,
                                   sdiv_up64(res_24764 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38436)),
                                             threads_per_segment_38418));
        
        float x_33108;
        float x_33109;
        
        // neutral-initialise the accumulators
        {
            x_acc_38437 = 0.0F;
        }
        for (int64_t i_38442 = 0; i_38442 < chunk_sizze_38438; i_38442++) {
            gtid_33057 = sext_i32_i64(sext_i64_i32(global_tid_38436)) +
                threads_per_segment_38418 * i_38442;
            // apply map function
            {
                int32_t res_33112 = ((__global
                                      int32_t *) mem_37178)[gtid_33049];
                int32_t index_primexp_35358 = sext_i64_i32(gtid_33057);
                bool cond_33114 = slt32(index_primexp_35358, res_33112);
                float res_33115;
                
                if (cond_33114) {
                    int64_t i_33116 = sext_i32_i64(index_primexp_35358);
                    float res_33117 = ((__global
                                        float *) res_mem_37111)[gtid_33049 *
                                                                N_24750 +
                                                                i_33116];
                    
                    res_33115 = res_33117;
                } else {
                    res_33115 = 0.0F;
                }
                
                float res_33118 = res_33115 * res_33115;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_33108 = x_acc_38437;
                }
                // load new values
                {
                    x_33109 = res_33118;
                }
                // apply reduction operator
                {
                    float res_33110 = x_33108 + x_33109;
                    
                    // store in accumulator
                    {
                        x_acc_38437 = res_33110;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_33108 = x_acc_38437;
            ((__local
              float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424)] =
                x_33108;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38443;
        int32_t skip_waves_38444;
        
        skip_waves_38444 = 1;
        
        float x_38439;
        float x_38440;
        
        offset_38443 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38424,
                      sext_i64_i32(segred_group_sizze_33104))) {
                x_38439 = ((__local
                            float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424 +
                                                        offset_38443)];
            }
        }
        offset_38443 = 1;
        while (slt32(offset_38443, wave_sizze_38426)) {
            if (slt32(local_tid_38424 + offset_38443,
                      sext_i64_i32(segred_group_sizze_33104)) &&
                ((local_tid_38424 - squot32(local_tid_38424, wave_sizze_38426) *
                  wave_sizze_38426) & (2 * offset_38443 - 1)) == 0) {
                // read array element
                {
                    x_38440 = ((volatile __local
                                float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424 +
                                                            offset_38443)];
                }
                // apply reduction operation
                {
                    float res_38441 = x_38439 + x_38440;
                    
                    x_38439 = res_38441;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424)] =
                        x_38439;
                }
            }
            offset_38443 *= 2;
        }
        while (slt32(skip_waves_38444,
                     squot32(sext_i64_i32(segred_group_sizze_33104) +
                             wave_sizze_38426 - 1, wave_sizze_38426))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38443 = skip_waves_38444 * wave_sizze_38426;
            if (slt32(local_tid_38424 + offset_38443,
                      sext_i64_i32(segred_group_sizze_33104)) &&
                ((local_tid_38424 - squot32(local_tid_38424, wave_sizze_38426) *
                  wave_sizze_38426) == 0 && (squot32(local_tid_38424,
                                                     wave_sizze_38426) & (2 *
                                                                          skip_waves_38444 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38440 = ((__local
                                float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424 +
                                                            offset_38443)];
                }
                // apply reduction operation
                {
                    float res_38441 = x_38439 + x_38440;
                    
                    x_38439 = res_38441;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424)] =
                        x_38439;
                }
            }
            skip_waves_38444 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38424) == 0) {
                x_acc_38437 = x_38439;
            }
        }
        if (groups_per_segment_38414 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38424 == 0) {
                    ((__global float *) mem_37181)[gtid_33049] = x_acc_38437;
                }
            }
        } else {
            int32_t old_counter_38445;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38424 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38419)[sext_i32_i64(virt_group_id_38434) *
                                                        segred_group_sizze_33104] =
                        x_acc_38437;
                    mem_fence_global();
                    old_counter_38445 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38421)[sext_i32_i64(srem32(flat_segment_id_38435,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38430)[0] =
                        old_counter_38445 == groups_per_segment_38414 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38446;
            
            is_last_group_38446 = ((__local bool *) sync_arr_mem_38430)[0];
            if (is_last_group_38446) {
                if (local_tid_38424 == 0) {
                    old_counter_38445 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38421)[sext_i32_i64(srem32(flat_segment_id_38435,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38414));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38447 =
                            sdiv_up64(groups_per_segment_38414,
                                      segred_group_sizze_33104);
                    
                    x_33108 = 0.0F;
                    for (int64_t i_38448 = 0; i_38448 < read_per_thread_38447;
                         i_38448++) {
                        int64_t group_res_id_38449 =
                                sext_i32_i64(local_tid_38424) *
                                read_per_thread_38447 + i_38448;
                        int64_t index_of_group_res_38450 =
                                sext_i32_i64(flat_segment_id_38435) *
                                groups_per_segment_38414 + group_res_id_38449;
                        
                        if (slt64(group_res_id_38449,
                                  groups_per_segment_38414)) {
                            x_33109 = ((__global
                                        float *) group_res_arr_mem_38419)[index_of_group_res_38450 *
                                                                          segred_group_sizze_33104];
                            
                            float res_33110;
                            
                            res_33110 = x_33108 + x_33109;
                            x_33108 = res_33110;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424)] =
                    x_33108;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38451;
                    int32_t skip_waves_38452;
                    
                    skip_waves_38452 = 1;
                    
                    float x_38439;
                    float x_38440;
                    
                    offset_38451 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38424,
                                  sext_i64_i32(segred_group_sizze_33104))) {
                            x_38439 = ((__local
                                        float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424 +
                                                                    offset_38451)];
                        }
                    }
                    offset_38451 = 1;
                    while (slt32(offset_38451, wave_sizze_38426)) {
                        if (slt32(local_tid_38424 + offset_38451,
                                  sext_i64_i32(segred_group_sizze_33104)) &&
                            ((local_tid_38424 - squot32(local_tid_38424,
                                                        wave_sizze_38426) *
                              wave_sizze_38426) & (2 * offset_38451 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38440 = ((volatile __local
                                            float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424 +
                                                                        offset_38451)];
                            }
                            // apply reduction operation
                            {
                                float res_38441 = x_38439 + x_38440;
                                
                                x_38439 = res_38441;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424)] =
                                    x_38439;
                            }
                        }
                        offset_38451 *= 2;
                    }
                    while (slt32(skip_waves_38452,
                                 squot32(sext_i64_i32(segred_group_sizze_33104) +
                                         wave_sizze_38426 - 1,
                                         wave_sizze_38426))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38451 = skip_waves_38452 * wave_sizze_38426;
                        if (slt32(local_tid_38424 + offset_38451,
                                  sext_i64_i32(segred_group_sizze_33104)) &&
                            ((local_tid_38424 - squot32(local_tid_38424,
                                                        wave_sizze_38426) *
                              wave_sizze_38426) == 0 &&
                             (squot32(local_tid_38424, wave_sizze_38426) & (2 *
                                                                            skip_waves_38452 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38440 = ((__local
                                            float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424 +
                                                                        offset_38451)];
                            }
                            // apply reduction operation
                            {
                                float res_38441 = x_38439 + x_38440;
                                
                                x_38439 = res_38441;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38428)[sext_i32_i64(local_tid_38424)] =
                                    x_38439;
                            }
                        }
                        skip_waves_38452 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38424 == 0) {
                            ((__global float *) mem_37181)[gtid_33049] =
                                x_38439;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33104
}
__kernel void mainzisegred_large_33079(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38370_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38368_backing_aligned_1,
                                       int64_t N_24752, int64_t res_24764,
                                       int64_t num_groups_33091, __global
                                       unsigned char *images_mem_36652, __global
                                       unsigned char *mem_37178,
                                       int64_t groups_per_segment_38354,
                                       int64_t elements_per_thread_38355,
                                       int64_t virt_num_groups_38356,
                                       int64_t threads_per_segment_38358,
                                       __global
                                       unsigned char *group_res_arr_mem_38359,
                                       __global
                                       unsigned char *mainzicounter_mem_38361)
{
    #define segred_group_sizze_33090 (mainzisegred_group_sizze_33073)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38370_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38370_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38368_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38368_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38363;
    int32_t local_tid_38364;
    int64_t group_sizze_38367;
    int32_t wave_sizze_38366;
    int32_t group_tid_38365;
    
    global_tid_38363 = get_global_id(0);
    local_tid_38364 = get_local_id(0);
    group_sizze_38367 = get_local_size(0);
    wave_sizze_38366 = LOCKSTEP_WIDTH;
    group_tid_38365 = get_group_id(0);
    
    int32_t phys_tid_33079;
    
    phys_tid_33079 = global_tid_38363;
    
    __local char *red_arr_mem_38368;
    
    red_arr_mem_38368 = (__local char *) red_arr_mem_38368_backing_0;
    
    __local char *sync_arr_mem_38370;
    
    sync_arr_mem_38370 = (__local char *) sync_arr_mem_38370_backing_1;
    
    int32_t phys_group_id_38372;
    
    phys_group_id_38372 = get_group_id(0);
    for (int32_t i_38373 = 0; i_38373 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38356) - phys_group_id_38372,
                   sext_i64_i32(num_groups_33091)); i_38373++) {
        int32_t virt_group_id_38374 = phys_group_id_38372 + i_38373 *
                sext_i64_i32(num_groups_33091);
        int32_t flat_segment_id_38375 = squot32(virt_group_id_38374,
                                                sext_i64_i32(groups_per_segment_38354));
        int64_t global_tid_38376 = srem64(sext_i32_i64(virt_group_id_38374) *
                                          segred_group_sizze_33090 +
                                          sext_i32_i64(local_tid_38364),
                                          segred_group_sizze_33090 *
                                          groups_per_segment_38354);
        int64_t gtid_33070 = sext_i32_i64(flat_segment_id_38375);
        int64_t gtid_33078;
        int32_t x_acc_38377;
        int64_t chunk_sizze_38378;
        
        chunk_sizze_38378 = smin64(elements_per_thread_38355,
                                   sdiv_up64(res_24764 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38376)),
                                             threads_per_segment_38358));
        
        int32_t x_33094;
        int32_t x_33095;
        
        // neutral-initialise the accumulators
        {
            x_acc_38377 = 0;
        }
        for (int64_t i_38382 = 0; i_38382 < chunk_sizze_38378; i_38382++) {
            gtid_33078 = sext_i32_i64(sext_i64_i32(global_tid_38376)) +
                threads_per_segment_38358 * i_38382;
            // apply map function
            {
                float x_33098 = ((__global
                                  float *) images_mem_36652)[gtid_33070 *
                                                             N_24752 +
                                                             gtid_33078];
                bool res_33099;
                
                res_33099 = futrts_isnan32(x_33098);
                
                bool cond_33100 = !res_33099;
                int32_t res_33101 = btoi_bool_i32(cond_33100);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_33094 = x_acc_38377;
                }
                // load new values
                {
                    x_33095 = res_33101;
                }
                // apply reduction operator
                {
                    int32_t res_33096 = add32(x_33094, x_33095);
                    
                    // store in accumulator
                    {
                        x_acc_38377 = res_33096;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_33094 = x_acc_38377;
            ((__local
              int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364)] =
                x_33094;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38383;
        int32_t skip_waves_38384;
        
        skip_waves_38384 = 1;
        
        int32_t x_38379;
        int32_t x_38380;
        
        offset_38383 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38364,
                      sext_i64_i32(segred_group_sizze_33090))) {
                x_38379 = ((__local
                            int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364 +
                                                          offset_38383)];
            }
        }
        offset_38383 = 1;
        while (slt32(offset_38383, wave_sizze_38366)) {
            if (slt32(local_tid_38364 + offset_38383,
                      sext_i64_i32(segred_group_sizze_33090)) &&
                ((local_tid_38364 - squot32(local_tid_38364, wave_sizze_38366) *
                  wave_sizze_38366) & (2 * offset_38383 - 1)) == 0) {
                // read array element
                {
                    x_38380 = ((volatile __local
                                int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364 +
                                                              offset_38383)];
                }
                // apply reduction operation
                {
                    int32_t res_38381 = add32(x_38379, x_38380);
                    
                    x_38379 = res_38381;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364)] =
                        x_38379;
                }
            }
            offset_38383 *= 2;
        }
        while (slt32(skip_waves_38384,
                     squot32(sext_i64_i32(segred_group_sizze_33090) +
                             wave_sizze_38366 - 1, wave_sizze_38366))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38383 = skip_waves_38384 * wave_sizze_38366;
            if (slt32(local_tid_38364 + offset_38383,
                      sext_i64_i32(segred_group_sizze_33090)) &&
                ((local_tid_38364 - squot32(local_tid_38364, wave_sizze_38366) *
                  wave_sizze_38366) == 0 && (squot32(local_tid_38364,
                                                     wave_sizze_38366) & (2 *
                                                                          skip_waves_38384 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38380 = ((__local
                                int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364 +
                                                              offset_38383)];
                }
                // apply reduction operation
                {
                    int32_t res_38381 = add32(x_38379, x_38380);
                    
                    x_38379 = res_38381;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364)] =
                        x_38379;
                }
            }
            skip_waves_38384 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38364) == 0) {
                x_acc_38377 = x_38379;
            }
        }
        if (groups_per_segment_38354 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38364 == 0) {
                    ((__global int32_t *) mem_37178)[gtid_33070] = x_acc_38377;
                }
            }
        } else {
            int32_t old_counter_38385;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38364 == 0) {
                    ((__global
                      int32_t *) group_res_arr_mem_38359)[sext_i32_i64(virt_group_id_38374) *
                                                          segred_group_sizze_33090] =
                        x_acc_38377;
                    mem_fence_global();
                    old_counter_38385 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38361)[sext_i32_i64(srem32(flat_segment_id_38375,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38370)[0] =
                        old_counter_38385 == groups_per_segment_38354 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38386;
            
            is_last_group_38386 = ((__local bool *) sync_arr_mem_38370)[0];
            if (is_last_group_38386) {
                if (local_tid_38364 == 0) {
                    old_counter_38385 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38361)[sext_i32_i64(srem32(flat_segment_id_38375,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38354));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38387 =
                            sdiv_up64(groups_per_segment_38354,
                                      segred_group_sizze_33090);
                    
                    x_33094 = 0;
                    for (int64_t i_38388 = 0; i_38388 < read_per_thread_38387;
                         i_38388++) {
                        int64_t group_res_id_38389 =
                                sext_i32_i64(local_tid_38364) *
                                read_per_thread_38387 + i_38388;
                        int64_t index_of_group_res_38390 =
                                sext_i32_i64(flat_segment_id_38375) *
                                groups_per_segment_38354 + group_res_id_38389;
                        
                        if (slt64(group_res_id_38389,
                                  groups_per_segment_38354)) {
                            x_33095 = ((__global
                                        int32_t *) group_res_arr_mem_38359)[index_of_group_res_38390 *
                                                                            segred_group_sizze_33090];
                            
                            int32_t res_33096;
                            
                            res_33096 = add32(x_33094, x_33095);
                            x_33094 = res_33096;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364)] =
                    x_33094;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38391;
                    int32_t skip_waves_38392;
                    
                    skip_waves_38392 = 1;
                    
                    int32_t x_38379;
                    int32_t x_38380;
                    
                    offset_38391 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38364,
                                  sext_i64_i32(segred_group_sizze_33090))) {
                            x_38379 = ((__local
                                        int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364 +
                                                                      offset_38391)];
                        }
                    }
                    offset_38391 = 1;
                    while (slt32(offset_38391, wave_sizze_38366)) {
                        if (slt32(local_tid_38364 + offset_38391,
                                  sext_i64_i32(segred_group_sizze_33090)) &&
                            ((local_tid_38364 - squot32(local_tid_38364,
                                                        wave_sizze_38366) *
                              wave_sizze_38366) & (2 * offset_38391 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38380 = ((volatile __local
                                            int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364 +
                                                                          offset_38391)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38381 = add32(x_38379, x_38380);
                                
                                x_38379 = res_38381;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364)] =
                                    x_38379;
                            }
                        }
                        offset_38391 *= 2;
                    }
                    while (slt32(skip_waves_38392,
                                 squot32(sext_i64_i32(segred_group_sizze_33090) +
                                         wave_sizze_38366 - 1,
                                         wave_sizze_38366))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38391 = skip_waves_38392 * wave_sizze_38366;
                        if (slt32(local_tid_38364 + offset_38391,
                                  sext_i64_i32(segred_group_sizze_33090)) &&
                            ((local_tid_38364 - squot32(local_tid_38364,
                                                        wave_sizze_38366) *
                              wave_sizze_38366) == 0 &&
                             (squot32(local_tid_38364, wave_sizze_38366) & (2 *
                                                                            skip_waves_38392 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38380 = ((__local
                                            int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364 +
                                                                          offset_38391)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38381 = add32(x_38379, x_38380);
                                
                                x_38379 = res_38381;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_38368)[sext_i32_i64(local_tid_38364)] =
                                    x_38379;
                            }
                        }
                        skip_waves_38392 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38364 == 0) {
                            ((__global int32_t *) mem_37178)[gtid_33070] =
                                x_38379;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33090
}
__kernel void mainzisegred_large_33230(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38539_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38537_backing_aligned_1,
                                       int64_t N_24750, int64_t res_25112,
                                       int64_t num_groups_33248, __global
                                       unsigned char *res_mem_37111, __global
                                       unsigned char *res_mem_37190, __global
                                       unsigned char *res_mem_37191, __global
                                       unsigned char *mem_37240,
                                       int64_t groups_per_segment_38523,
                                       int64_t elements_per_thread_38524,
                                       int64_t virt_num_groups_38525,
                                       int64_t threads_per_segment_38527,
                                       __global
                                       unsigned char *group_res_arr_mem_38528,
                                       __global
                                       unsigned char *mainzicounter_mem_38530)
{
    #define segred_group_sizze_33247 (mainzisegred_group_sizze_33224)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38539_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38539_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38537_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38537_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38532;
    int32_t local_tid_38533;
    int64_t group_sizze_38536;
    int32_t wave_sizze_38535;
    int32_t group_tid_38534;
    
    global_tid_38532 = get_global_id(0);
    local_tid_38533 = get_local_id(0);
    group_sizze_38536 = get_local_size(0);
    wave_sizze_38535 = LOCKSTEP_WIDTH;
    group_tid_38534 = get_group_id(0);
    
    int32_t phys_tid_33230;
    
    phys_tid_33230 = global_tid_38532;
    
    __local char *red_arr_mem_38537;
    
    red_arr_mem_38537 = (__local char *) red_arr_mem_38537_backing_0;
    
    __local char *sync_arr_mem_38539;
    
    sync_arr_mem_38539 = (__local char *) sync_arr_mem_38539_backing_1;
    
    int32_t phys_group_id_38541;
    
    phys_group_id_38541 = get_group_id(0);
    for (int32_t i_38542 = 0; i_38542 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38525) - phys_group_id_38541,
                   sext_i64_i32(num_groups_33248)); i_38542++) {
        int32_t virt_group_id_38543 = phys_group_id_38541 + i_38542 *
                sext_i64_i32(num_groups_33248);
        int32_t flat_segment_id_38544 = squot32(virt_group_id_38543,
                                                sext_i64_i32(groups_per_segment_38523));
        int64_t global_tid_38545 = srem64(sext_i32_i64(virt_group_id_38543) *
                                          segred_group_sizze_33247 +
                                          sext_i32_i64(local_tid_38533),
                                          segred_group_sizze_33247 *
                                          groups_per_segment_38523);
        int64_t gtid_33221 = sext_i32_i64(flat_segment_id_38544);
        int64_t gtid_33229;
        float x_acc_38546;
        int64_t chunk_sizze_38547;
        
        chunk_sizze_38547 = smin64(elements_per_thread_38524,
                                   sdiv_up64(res_25112 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38545)),
                                             threads_per_segment_38527));
        
        float x_33251;
        float x_33252;
        
        // neutral-initialise the accumulators
        {
            x_acc_38546 = 0.0F;
        }
        for (int64_t i_38551 = 0; i_38551 < chunk_sizze_38547; i_38551++) {
            gtid_33229 = sext_i32_i64(sext_i64_i32(global_tid_38545)) +
                threads_per_segment_38527 * i_38551;
            // apply map function
            {
                int32_t x_33256 = ((__global
                                    int32_t *) res_mem_37190)[gtid_33221];
                int32_t index_primexp_35363 = sext_i64_i32(gtid_33229);
                bool cond_33258 = slt32(index_primexp_35363, x_33256);
                float res_33259;
                
                if (cond_33258) {
                    int32_t x_33255 = ((__global
                                        int32_t *) res_mem_37191)[gtid_33221];
                    int32_t x_33260 = add32(x_33255, index_primexp_35363);
                    int32_t x_33261 = sub32(x_33260, x_33256);
                    int32_t i_33262 = add32(1, x_33261);
                    int64_t i_33263 = sext_i32_i64(i_33262);
                    float res_33264 = ((__global
                                        float *) res_mem_37111)[gtid_33221 *
                                                                N_24750 +
                                                                i_33263];
                    
                    res_33259 = res_33264;
                } else {
                    res_33259 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_33251 = x_acc_38546;
                }
                // load new values
                {
                    x_33252 = res_33259;
                }
                // apply reduction operator
                {
                    float res_33253 = x_33251 + x_33252;
                    
                    // store in accumulator
                    {
                        x_acc_38546 = res_33253;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_33251 = x_acc_38546;
            ((__local
              float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533)] =
                x_33251;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38552;
        int32_t skip_waves_38553;
        
        skip_waves_38553 = 1;
        
        float x_38548;
        float x_38549;
        
        offset_38552 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38533,
                      sext_i64_i32(segred_group_sizze_33247))) {
                x_38548 = ((__local
                            float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533 +
                                                        offset_38552)];
            }
        }
        offset_38552 = 1;
        while (slt32(offset_38552, wave_sizze_38535)) {
            if (slt32(local_tid_38533 + offset_38552,
                      sext_i64_i32(segred_group_sizze_33247)) &&
                ((local_tid_38533 - squot32(local_tid_38533, wave_sizze_38535) *
                  wave_sizze_38535) & (2 * offset_38552 - 1)) == 0) {
                // read array element
                {
                    x_38549 = ((volatile __local
                                float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533 +
                                                            offset_38552)];
                }
                // apply reduction operation
                {
                    float res_38550 = x_38548 + x_38549;
                    
                    x_38548 = res_38550;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533)] =
                        x_38548;
                }
            }
            offset_38552 *= 2;
        }
        while (slt32(skip_waves_38553,
                     squot32(sext_i64_i32(segred_group_sizze_33247) +
                             wave_sizze_38535 - 1, wave_sizze_38535))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38552 = skip_waves_38553 * wave_sizze_38535;
            if (slt32(local_tid_38533 + offset_38552,
                      sext_i64_i32(segred_group_sizze_33247)) &&
                ((local_tid_38533 - squot32(local_tid_38533, wave_sizze_38535) *
                  wave_sizze_38535) == 0 && (squot32(local_tid_38533,
                                                     wave_sizze_38535) & (2 *
                                                                          skip_waves_38553 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38549 = ((__local
                                float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533 +
                                                            offset_38552)];
                }
                // apply reduction operation
                {
                    float res_38550 = x_38548 + x_38549;
                    
                    x_38548 = res_38550;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533)] =
                        x_38548;
                }
            }
            skip_waves_38553 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38533) == 0) {
                x_acc_38546 = x_38548;
            }
        }
        if (groups_per_segment_38523 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38533 == 0) {
                    ((__global float *) mem_37240)[gtid_33221] = x_acc_38546;
                }
            }
        } else {
            int32_t old_counter_38554;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38533 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38528)[sext_i32_i64(virt_group_id_38543) *
                                                        segred_group_sizze_33247] =
                        x_acc_38546;
                    mem_fence_global();
                    old_counter_38554 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38530)[sext_i32_i64(srem32(flat_segment_id_38544,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38539)[0] =
                        old_counter_38554 == groups_per_segment_38523 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38555;
            
            is_last_group_38555 = ((__local bool *) sync_arr_mem_38539)[0];
            if (is_last_group_38555) {
                if (local_tid_38533 == 0) {
                    old_counter_38554 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38530)[sext_i32_i64(srem32(flat_segment_id_38544,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38523));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38556 =
                            sdiv_up64(groups_per_segment_38523,
                                      segred_group_sizze_33247);
                    
                    x_33251 = 0.0F;
                    for (int64_t i_38557 = 0; i_38557 < read_per_thread_38556;
                         i_38557++) {
                        int64_t group_res_id_38558 =
                                sext_i32_i64(local_tid_38533) *
                                read_per_thread_38556 + i_38557;
                        int64_t index_of_group_res_38559 =
                                sext_i32_i64(flat_segment_id_38544) *
                                groups_per_segment_38523 + group_res_id_38558;
                        
                        if (slt64(group_res_id_38558,
                                  groups_per_segment_38523)) {
                            x_33252 = ((__global
                                        float *) group_res_arr_mem_38528)[index_of_group_res_38559 *
                                                                          segred_group_sizze_33247];
                            
                            float res_33253;
                            
                            res_33253 = x_33251 + x_33252;
                            x_33251 = res_33253;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533)] =
                    x_33251;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38560;
                    int32_t skip_waves_38561;
                    
                    skip_waves_38561 = 1;
                    
                    float x_38548;
                    float x_38549;
                    
                    offset_38560 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38533,
                                  sext_i64_i32(segred_group_sizze_33247))) {
                            x_38548 = ((__local
                                        float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533 +
                                                                    offset_38560)];
                        }
                    }
                    offset_38560 = 1;
                    while (slt32(offset_38560, wave_sizze_38535)) {
                        if (slt32(local_tid_38533 + offset_38560,
                                  sext_i64_i32(segred_group_sizze_33247)) &&
                            ((local_tid_38533 - squot32(local_tid_38533,
                                                        wave_sizze_38535) *
                              wave_sizze_38535) & (2 * offset_38560 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38549 = ((volatile __local
                                            float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533 +
                                                                        offset_38560)];
                            }
                            // apply reduction operation
                            {
                                float res_38550 = x_38548 + x_38549;
                                
                                x_38548 = res_38550;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533)] =
                                    x_38548;
                            }
                        }
                        offset_38560 *= 2;
                    }
                    while (slt32(skip_waves_38561,
                                 squot32(sext_i64_i32(segred_group_sizze_33247) +
                                         wave_sizze_38535 - 1,
                                         wave_sizze_38535))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38560 = skip_waves_38561 * wave_sizze_38535;
                        if (slt32(local_tid_38533 + offset_38560,
                                  sext_i64_i32(segred_group_sizze_33247)) &&
                            ((local_tid_38533 - squot32(local_tid_38533,
                                                        wave_sizze_38535) *
                              wave_sizze_38535) == 0 &&
                             (squot32(local_tid_38533, wave_sizze_38535) & (2 *
                                                                            skip_waves_38561 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38549 = ((__local
                                            float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533 +
                                                                        offset_38560)];
                            }
                            // apply reduction operation
                            {
                                float res_38550 = x_38548 + x_38549;
                                
                                x_38548 = res_38550;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38537)[sext_i32_i64(local_tid_38533)] =
                                    x_38548;
                            }
                        }
                        skip_waves_38561 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38533 == 0) {
                            ((__global float *) mem_37240)[gtid_33221] =
                                x_38548;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33247
}
__kernel void mainzisegred_large_34765(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_38770_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38768_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_38766_backing_aligned_2,
                                       __local volatile
                                       int64_t *red_arr_mem_38764_backing_aligned_3,
                                       int64_t iota32_arg_25134,
                                       int64_t num_groups_34938, __global
                                       unsigned char *mem_37246, __global
                                       unsigned char *mem_37406, __global
                                       unsigned char *mem_37408, __global
                                       unsigned char *mem_37412, __global
                                       unsigned char *mem_37415, __global
                                       unsigned char *mem_37417, __global
                                       unsigned char *mem_37419,
                                       int64_t groups_per_segment_38746,
                                       int64_t elements_per_thread_38747,
                                       int64_t virt_num_groups_38748, __global
                                       unsigned char *group_res_arr_mem_38751,
                                       __global
                                       unsigned char *group_res_arr_mem_38753,
                                       __global
                                       unsigned char *group_res_arr_mem_38755,
                                       __global
                                       unsigned char *mainzicounter_mem_38757)
{
    #define segred_group_sizze_34937 (mainzisegred_group_sizze_34759)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38770_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_38770_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38768_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38768_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38766_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38766_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_38764_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38764_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38759;
    int32_t local_tid_38760;
    int64_t group_sizze_38763;
    int32_t wave_sizze_38762;
    int32_t group_tid_38761;
    
    global_tid_38759 = get_global_id(0);
    local_tid_38760 = get_local_id(0);
    group_sizze_38763 = get_local_size(0);
    wave_sizze_38762 = LOCKSTEP_WIDTH;
    group_tid_38761 = get_group_id(0);
    
    int32_t phys_tid_34765;
    
    phys_tid_34765 = global_tid_38759;
    
    __local char *red_arr_mem_38764;
    
    red_arr_mem_38764 = (__local char *) red_arr_mem_38764_backing_0;
    
    __local char *red_arr_mem_38766;
    
    red_arr_mem_38766 = (__local char *) red_arr_mem_38766_backing_1;
    
    __local char *red_arr_mem_38768;
    
    red_arr_mem_38768 = (__local char *) red_arr_mem_38768_backing_2;
    
    __local char *sync_arr_mem_38770;
    
    sync_arr_mem_38770 = (__local char *) sync_arr_mem_38770_backing_3;
    
    int32_t phys_group_id_38772;
    
    phys_group_id_38772 = get_group_id(0);
    for (int32_t i_38773 = 0; i_38773 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38748) - phys_group_id_38772,
                   sext_i64_i32(num_groups_34938)); i_38773++) {
        int32_t virt_group_id_38774 = phys_group_id_38772 + i_38773 *
                sext_i64_i32(num_groups_34938);
        int32_t flat_segment_id_38775 = squot32(virt_group_id_38774,
                                                sext_i64_i32(groups_per_segment_38746));
        int64_t global_tid_38776 = srem64(sext_i32_i64(virt_group_id_38774) *
                                          segred_group_sizze_34937 +
                                          sext_i32_i64(local_tid_38760),
                                          segred_group_sizze_34937 *
                                          groups_per_segment_38746);
        int64_t gtid_34756 = sext_i32_i64(flat_segment_id_38775);
        int64_t gtid_34764;
        bool x_acc_38777;
        int32_t x_acc_38778;
        float x_acc_38779;
        int64_t chunk_sizze_38780;
        int64_t starting_point_38781;
        
        starting_point_38781 = sext_i32_i64(sext_i64_i32(global_tid_38776)) *
            elements_per_thread_38747;
        
        int64_t remaining_elements_38782;
        
        remaining_elements_38782 = iota32_arg_25134 - starting_point_38781;
        if (sle64(remaining_elements_38782, 0) || sle64(iota32_arg_25134,
                                                        starting_point_38781)) {
            chunk_sizze_38780 = 0;
        } else {
            if (slt64(iota32_arg_25134,
                      (sext_i32_i64(sext_i64_i32(global_tid_38776)) + 1) *
                      elements_per_thread_38747)) {
                chunk_sizze_38780 = iota32_arg_25134 -
                    sext_i32_i64(sext_i64_i32(global_tid_38776)) *
                    elements_per_thread_38747;
            } else {
                chunk_sizze_38780 = elements_per_thread_38747;
            }
        }
        
        bool x_34943;
        int32_t x_34944;
        float x_34945;
        bool x_34946;
        int32_t x_34947;
        float x_34948;
        
        // neutral-initialise the accumulators
        {
            x_acc_38777 = 0;
            x_acc_38778 = -1;
            x_acc_38779 = 0.0F;
        }
        for (int64_t i_38797 = 0; i_38797 < elements_per_thread_38747;
             i_38797++) {
            gtid_34764 = sext_i32_i64(local_tid_38760) +
                (sext_i32_i64(squot32(sext_i64_i32(global_tid_38776),
                                      sext_i64_i32(segred_group_sizze_34937))) *
                 elements_per_thread_38747 + i_38797) *
                segred_group_sizze_34937;
            if (slt64(gtid_34764, iota32_arg_25134)) {
                // apply map function
                {
                    int32_t y_34957 = ((__global
                                        int32_t *) mem_37408)[gtid_34756];
                    float y_34958 = ((__global float *) mem_37406)[gtid_34756];
                    float x_34962 = ((__global float *) mem_37412)[gtid_34756 *
                                                                   iota32_arg_25134 +
                                                                   gtid_34764];
                    float x_34963 = ((__global float *) mem_37246)[gtid_34764];
                    int32_t index_primexp_35380 = sext_i64_i32(gtid_34764);
                    float res_34966 = x_34962 / y_34958;
                    bool cond_34967 = slt32(index_primexp_35380, y_34957);
                    bool res_34968;
                    
                    res_34968 = futrts_isnan32(res_34966);
                    
                    bool res_34969 = !res_34968;
                    bool x_34970 = cond_34967 && res_34969;
                    float res_34971 = (float) fabs(res_34966);
                    bool res_34972 = x_34963 < res_34971;
                    bool x_34973 = x_34970 && res_34972;
                    float res_34974;
                    
                    if (cond_34967) {
                        res_34974 = res_34966;
                    } else {
                        res_34974 = 0.0F;
                    }
                    // save map-out results
                    { }
                    // load accumulator
                    {
                        x_34943 = x_acc_38777;
                        x_34944 = x_acc_38778;
                        x_34945 = x_acc_38779;
                    }
                    // load new values
                    {
                        x_34946 = x_34973;
                        x_34947 = index_primexp_35380;
                        x_34948 = res_34974;
                    }
                    // apply reduction operator
                    {
                        bool res_34949;
                        int32_t res_34950;
                        
                        if (x_34943) {
                            res_34949 = x_34943;
                            res_34950 = x_34944;
                        } else {
                            bool x_34951 = x_34946 && x_34946;
                            bool x_34952 = !x_34946;
                            bool y_34953 = x_34943 && x_34952;
                            bool res_34954 = x_34951 || y_34953;
                            int32_t res_34955;
                            
                            if (x_34946) {
                                res_34955 = x_34947;
                            } else {
                                res_34955 = x_34944;
                            }
                            res_34949 = res_34954;
                            res_34950 = res_34955;
                        }
                        
                        float res_34956 = x_34945 + x_34948;
                        
                        // store in accumulator
                        {
                            x_acc_38777 = res_34949;
                            x_acc_38778 = res_34950;
                            x_acc_38779 = res_34956;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_34943 = x_acc_38777;
                x_34944 = x_acc_38778;
                x_34945 = x_acc_38779;
                ((__local
                  bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760)] =
                    x_34943;
                ((__local
                  int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760)] =
                    x_34944;
                ((__local
                  float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760)] =
                    x_34945;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_38798;
            int32_t skip_waves_38799;
            
            skip_waves_38799 = 1;
            
            bool x_38783;
            int32_t x_38784;
            float x_38785;
            bool x_38786;
            int32_t x_38787;
            float x_38788;
            
            offset_38798 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38760,
                          sext_i64_i32(segred_group_sizze_34937))) {
                    x_38783 = ((__local
                                bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760 +
                                                           offset_38798)];
                    x_38784 = ((__local
                                int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760 +
                                                              offset_38798)];
                    x_38785 = ((__local
                                float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760 +
                                                            offset_38798)];
                }
            }
            offset_38798 = 1;
            while (slt32(offset_38798, wave_sizze_38762)) {
                if (slt32(local_tid_38760 + offset_38798,
                          sext_i64_i32(segred_group_sizze_34937)) &&
                    ((local_tid_38760 - squot32(local_tid_38760,
                                                wave_sizze_38762) *
                      wave_sizze_38762) & (2 * offset_38798 - 1)) == 0) {
                    // read array element
                    {
                        x_38786 = ((volatile __local
                                    bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760 +
                                                               offset_38798)];
                        x_38787 = ((volatile __local
                                    int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760 +
                                                                  offset_38798)];
                        x_38788 = ((volatile __local
                                    float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760 +
                                                                offset_38798)];
                    }
                    // apply reduction operation
                    {
                        bool res_38789;
                        int32_t res_38790;
                        
                        if (x_38783) {
                            res_38789 = x_38783;
                            res_38790 = x_38784;
                        } else {
                            bool x_38791 = x_38786 && x_38786;
                            bool x_38792 = !x_38786;
                            bool y_38793 = x_38783 && x_38792;
                            bool res_38794 = x_38791 || y_38793;
                            int32_t res_38795;
                            
                            if (x_38786) {
                                res_38795 = x_38787;
                            } else {
                                res_38795 = x_38784;
                            }
                            res_38789 = res_38794;
                            res_38790 = res_38795;
                        }
                        
                        float res_38796 = x_38785 + x_38788;
                        
                        x_38783 = res_38789;
                        x_38784 = res_38790;
                        x_38785 = res_38796;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760)] =
                            x_38783;
                        ((volatile __local
                          int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760)] =
                            x_38784;
                        ((volatile __local
                          float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760)] =
                            x_38785;
                    }
                }
                offset_38798 *= 2;
            }
            while (slt32(skip_waves_38799,
                         squot32(sext_i64_i32(segred_group_sizze_34937) +
                                 wave_sizze_38762 - 1, wave_sizze_38762))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38798 = skip_waves_38799 * wave_sizze_38762;
                if (slt32(local_tid_38760 + offset_38798,
                          sext_i64_i32(segred_group_sizze_34937)) &&
                    ((local_tid_38760 - squot32(local_tid_38760,
                                                wave_sizze_38762) *
                      wave_sizze_38762) == 0 && (squot32(local_tid_38760,
                                                         wave_sizze_38762) &
                                                 (2 * skip_waves_38799 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38786 = ((__local
                                    bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760 +
                                                               offset_38798)];
                        x_38787 = ((__local
                                    int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760 +
                                                                  offset_38798)];
                        x_38788 = ((__local
                                    float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760 +
                                                                offset_38798)];
                    }
                    // apply reduction operation
                    {
                        bool res_38789;
                        int32_t res_38790;
                        
                        if (x_38783) {
                            res_38789 = x_38783;
                            res_38790 = x_38784;
                        } else {
                            bool x_38791 = x_38786 && x_38786;
                            bool x_38792 = !x_38786;
                            bool y_38793 = x_38783 && x_38792;
                            bool res_38794 = x_38791 || y_38793;
                            int32_t res_38795;
                            
                            if (x_38786) {
                                res_38795 = x_38787;
                            } else {
                                res_38795 = x_38784;
                            }
                            res_38789 = res_38794;
                            res_38790 = res_38795;
                        }
                        
                        float res_38796 = x_38785 + x_38788;
                        
                        x_38783 = res_38789;
                        x_38784 = res_38790;
                        x_38785 = res_38796;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760)] =
                            x_38783;
                        ((__local
                          int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760)] =
                            x_38784;
                        ((__local
                          float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760)] =
                            x_38785;
                    }
                }
                skip_waves_38799 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_38760) == 0) {
                    x_acc_38777 = x_38783;
                    x_acc_38778 = x_38784;
                    x_acc_38779 = x_38785;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_38760) == 0)) {
                    x_acc_38777 = 0;
                    x_acc_38778 = -1;
                    x_acc_38779 = 0.0F;
                }
            }
        }
        x_34943 = x_acc_38777;
        x_34944 = x_acc_38778;
        x_34945 = x_acc_38779;
        if (groups_per_segment_38746 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38760 == 0) {
                    ((__global bool *) mem_37415)[gtid_34756] = x_acc_38777;
                    ((__global int32_t *) mem_37417)[gtid_34756] = x_acc_38778;
                    ((__global float *) mem_37419)[gtid_34756] = x_acc_38779;
                }
            }
        } else {
            int32_t old_counter_38800;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38760 == 0) {
                    ((__global
                      bool *) group_res_arr_mem_38751)[sext_i32_i64(virt_group_id_38774) *
                                                       segred_group_sizze_34937] =
                        x_acc_38777;
                    ((__global
                      int32_t *) group_res_arr_mem_38753)[sext_i32_i64(virt_group_id_38774) *
                                                          segred_group_sizze_34937] =
                        x_acc_38778;
                    ((__global
                      float *) group_res_arr_mem_38755)[sext_i32_i64(virt_group_id_38774) *
                                                        segred_group_sizze_34937] =
                        x_acc_38779;
                    mem_fence_global();
                    old_counter_38800 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38757)[sext_i32_i64(srem32(flat_segment_id_38775,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38770)[0] =
                        old_counter_38800 == groups_per_segment_38746 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38801;
            
            is_last_group_38801 = ((__local bool *) sync_arr_mem_38770)[0];
            if (is_last_group_38801) {
                if (local_tid_38760 == 0) {
                    old_counter_38800 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_38757)[sext_i32_i64(srem32(flat_segment_id_38775,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_38746));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38802 =
                            sdiv_up64(groups_per_segment_38746,
                                      segred_group_sizze_34937);
                    
                    x_34943 = 0;
                    x_34944 = -1;
                    x_34945 = 0.0F;
                    for (int64_t i_38803 = 0; i_38803 < read_per_thread_38802;
                         i_38803++) {
                        int64_t group_res_id_38804 =
                                sext_i32_i64(local_tid_38760) *
                                read_per_thread_38802 + i_38803;
                        int64_t index_of_group_res_38805 =
                                sext_i32_i64(flat_segment_id_38775) *
                                groups_per_segment_38746 + group_res_id_38804;
                        
                        if (slt64(group_res_id_38804,
                                  groups_per_segment_38746)) {
                            x_34946 = ((__global
                                        bool *) group_res_arr_mem_38751)[index_of_group_res_38805 *
                                                                         segred_group_sizze_34937];
                            x_34947 = ((__global
                                        int32_t *) group_res_arr_mem_38753)[index_of_group_res_38805 *
                                                                            segred_group_sizze_34937];
                            x_34948 = ((__global
                                        float *) group_res_arr_mem_38755)[index_of_group_res_38805 *
                                                                          segred_group_sizze_34937];
                            
                            bool res_34949;
                            int32_t res_34950;
                            
                            if (x_34943) {
                                res_34949 = x_34943;
                                res_34950 = x_34944;
                            } else {
                                bool x_34951 = x_34946 && x_34946;
                                bool x_34952 = !x_34946;
                                bool y_34953 = x_34943 && x_34952;
                                bool res_34954 = x_34951 || y_34953;
                                int32_t res_34955;
                                
                                if (x_34946) {
                                    res_34955 = x_34947;
                                } else {
                                    res_34955 = x_34944;
                                }
                                res_34949 = res_34954;
                                res_34950 = res_34955;
                            }
                            
                            float res_34956 = x_34945 + x_34948;
                            
                            x_34943 = res_34949;
                            x_34944 = res_34950;
                            x_34945 = res_34956;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760)] =
                    x_34943;
                ((__local
                  int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760)] =
                    x_34944;
                ((__local
                  float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760)] =
                    x_34945;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38806;
                    int32_t skip_waves_38807;
                    
                    skip_waves_38807 = 1;
                    
                    bool x_38783;
                    int32_t x_38784;
                    float x_38785;
                    bool x_38786;
                    int32_t x_38787;
                    float x_38788;
                    
                    offset_38806 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38760,
                                  sext_i64_i32(segred_group_sizze_34937))) {
                            x_38783 = ((__local
                                        bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760 +
                                                                   offset_38806)];
                            x_38784 = ((__local
                                        int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760 +
                                                                      offset_38806)];
                            x_38785 = ((__local
                                        float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760 +
                                                                    offset_38806)];
                        }
                    }
                    offset_38806 = 1;
                    while (slt32(offset_38806, wave_sizze_38762)) {
                        if (slt32(local_tid_38760 + offset_38806,
                                  sext_i64_i32(segred_group_sizze_34937)) &&
                            ((local_tid_38760 - squot32(local_tid_38760,
                                                        wave_sizze_38762) *
                              wave_sizze_38762) & (2 * offset_38806 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38786 = ((volatile __local
                                            bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760 +
                                                                       offset_38806)];
                                x_38787 = ((volatile __local
                                            int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760 +
                                                                          offset_38806)];
                                x_38788 = ((volatile __local
                                            float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760 +
                                                                        offset_38806)];
                            }
                            // apply reduction operation
                            {
                                bool res_38789;
                                int32_t res_38790;
                                
                                if (x_38783) {
                                    res_38789 = x_38783;
                                    res_38790 = x_38784;
                                } else {
                                    bool x_38791 = x_38786 && x_38786;
                                    bool x_38792 = !x_38786;
                                    bool y_38793 = x_38783 && x_38792;
                                    bool res_38794 = x_38791 || y_38793;
                                    int32_t res_38795;
                                    
                                    if (x_38786) {
                                        res_38795 = x_38787;
                                    } else {
                                        res_38795 = x_38784;
                                    }
                                    res_38789 = res_38794;
                                    res_38790 = res_38795;
                                }
                                
                                float res_38796 = x_38785 + x_38788;
                                
                                x_38783 = res_38789;
                                x_38784 = res_38790;
                                x_38785 = res_38796;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760)] =
                                    x_38783;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760)] =
                                    x_38784;
                                ((volatile __local
                                  float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760)] =
                                    x_38785;
                            }
                        }
                        offset_38806 *= 2;
                    }
                    while (slt32(skip_waves_38807,
                                 squot32(sext_i64_i32(segred_group_sizze_34937) +
                                         wave_sizze_38762 - 1,
                                         wave_sizze_38762))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38806 = skip_waves_38807 * wave_sizze_38762;
                        if (slt32(local_tid_38760 + offset_38806,
                                  sext_i64_i32(segred_group_sizze_34937)) &&
                            ((local_tid_38760 - squot32(local_tid_38760,
                                                        wave_sizze_38762) *
                              wave_sizze_38762) == 0 &&
                             (squot32(local_tid_38760, wave_sizze_38762) & (2 *
                                                                            skip_waves_38807 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38786 = ((__local
                                            bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760 +
                                                                       offset_38806)];
                                x_38787 = ((__local
                                            int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760 +
                                                                          offset_38806)];
                                x_38788 = ((__local
                                            float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760 +
                                                                        offset_38806)];
                            }
                            // apply reduction operation
                            {
                                bool res_38789;
                                int32_t res_38790;
                                
                                if (x_38783) {
                                    res_38789 = x_38783;
                                    res_38790 = x_38784;
                                } else {
                                    bool x_38791 = x_38786 && x_38786;
                                    bool x_38792 = !x_38786;
                                    bool y_38793 = x_38783 && x_38792;
                                    bool res_38794 = x_38791 || y_38793;
                                    int32_t res_38795;
                                    
                                    if (x_38786) {
                                        res_38795 = x_38787;
                                    } else {
                                        res_38795 = x_38784;
                                    }
                                    res_38789 = res_38794;
                                    res_38790 = res_38795;
                                }
                                
                                float res_38796 = x_38785 + x_38788;
                                
                                x_38783 = res_38789;
                                x_38784 = res_38790;
                                x_38785 = res_38796;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_38764)[sext_i32_i64(local_tid_38760)] =
                                    x_38783;
                                ((__local
                                  int32_t *) red_arr_mem_38766)[sext_i32_i64(local_tid_38760)] =
                                    x_38784;
                                ((__local
                                  float *) red_arr_mem_38768)[sext_i32_i64(local_tid_38760)] =
                                    x_38785;
                            }
                        }
                        skip_waves_38807 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38760 == 0) {
                            ((__global bool *) mem_37415)[gtid_34756] = x_38783;
                            ((__global int32_t *) mem_37417)[gtid_34756] =
                                x_38784;
                            ((__global float *) mem_37419)[gtid_34756] =
                                x_38785;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_34937
}
__kernel void mainzisegred_nonseg_33148(__global int *global_failure,
                                        __local volatile
                                        int64_t *red_arr_mem_38473_backing_aligned_0,
                                        __local volatile
                                        int64_t *sync_arr_mem_38471_backing_aligned_1,
                                        int64_t m_24751,
                                        int64_t num_groups_33143, __global
                                        unsigned char *res_mem_37190, __global
                                        unsigned char *mem_37195, __global
                                        unsigned char *mainzicounter_mem_38461,
                                        __global
                                        unsigned char *group_res_arr_mem_38463,
                                        int64_t num_threads_38465)
{
    #define segred_group_sizze_33141 (mainzisegred_group_sizze_33140)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38473_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38473_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_38471_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_38471_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38466;
    int32_t local_tid_38467;
    int64_t group_sizze_38470;
    int32_t wave_sizze_38469;
    int32_t group_tid_38468;
    
    global_tid_38466 = get_global_id(0);
    local_tid_38467 = get_local_id(0);
    group_sizze_38470 = get_local_size(0);
    wave_sizze_38469 = LOCKSTEP_WIDTH;
    group_tid_38468 = get_group_id(0);
    
    int32_t phys_tid_33148;
    
    phys_tid_33148 = global_tid_38466;
    
    __local char *sync_arr_mem_38471;
    
    sync_arr_mem_38471 = (__local char *) sync_arr_mem_38471_backing_0;
    
    __local char *red_arr_mem_38473;
    
    red_arr_mem_38473 = (__local char *) red_arr_mem_38473_backing_1;
    
    int64_t dummy_33146;
    
    dummy_33146 = 0;
    
    int64_t gtid_33147;
    
    gtid_33147 = 0;
    
    int32_t x_acc_38475;
    int64_t chunk_sizze_38476;
    
    chunk_sizze_38476 = smin64(sdiv_up64(m_24751,
                                         sext_i32_i64(sext_i64_i32(segred_group_sizze_33141 *
                                         num_groups_33143))),
                               sdiv_up64(m_24751 - sext_i32_i64(phys_tid_33148),
                                         num_threads_38465));
    
    int32_t x_25108;
    int32_t x_25109;
    
    // neutral-initialise the accumulators
    {
        x_acc_38475 = 0;
    }
    for (int64_t i_38480 = 0; i_38480 < chunk_sizze_38476; i_38480++) {
        gtid_33147 = sext_i32_i64(phys_tid_33148) + num_threads_38465 * i_38480;
        // apply map function
        {
            int32_t x_25111 = ((__global int32_t *) res_mem_37190)[gtid_33147];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_25108 = x_acc_38475;
            }
            // load new values
            {
                x_25109 = x_25111;
            }
            // apply reduction operator
            {
                int32_t res_25110 = smax32(x_25108, x_25109);
                
                // store in accumulator
                {
                    x_acc_38475 = res_25110;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_25108 = x_acc_38475;
        ((__local int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467)] =
            x_25108;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38481;
    int32_t skip_waves_38482;
    
    skip_waves_38482 = 1;
    
    int32_t x_38477;
    int32_t x_38478;
    
    offset_38481 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38467, sext_i64_i32(segred_group_sizze_33141))) {
            x_38477 = ((__local
                        int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467 +
                                                      offset_38481)];
        }
    }
    offset_38481 = 1;
    while (slt32(offset_38481, wave_sizze_38469)) {
        if (slt32(local_tid_38467 + offset_38481,
                  sext_i64_i32(segred_group_sizze_33141)) && ((local_tid_38467 -
                                                               squot32(local_tid_38467,
                                                                       wave_sizze_38469) *
                                                               wave_sizze_38469) &
                                                              (2 *
                                                               offset_38481 -
                                                               1)) == 0) {
            // read array element
            {
                x_38478 = ((volatile __local
                            int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467 +
                                                          offset_38481)];
            }
            // apply reduction operation
            {
                int32_t res_38479 = smax32(x_38477, x_38478);
                
                x_38477 = res_38479;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467)] =
                    x_38477;
            }
        }
        offset_38481 *= 2;
    }
    while (slt32(skip_waves_38482,
                 squot32(sext_i64_i32(segred_group_sizze_33141) +
                         wave_sizze_38469 - 1, wave_sizze_38469))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38481 = skip_waves_38482 * wave_sizze_38469;
        if (slt32(local_tid_38467 + offset_38481,
                  sext_i64_i32(segred_group_sizze_33141)) && ((local_tid_38467 -
                                                               squot32(local_tid_38467,
                                                                       wave_sizze_38469) *
                                                               wave_sizze_38469) ==
                                                              0 &&
                                                              (squot32(local_tid_38467,
                                                                       wave_sizze_38469) &
                                                               (2 *
                                                                skip_waves_38482 -
                                                                1)) == 0)) {
            // read array element
            {
                x_38478 = ((__local
                            int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467 +
                                                          offset_38481)];
            }
            // apply reduction operation
            {
                int32_t res_38479 = smax32(x_38477, x_38478);
                
                x_38477 = res_38479;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467)] =
                    x_38477;
            }
        }
        skip_waves_38482 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_38467) == 0) {
            x_acc_38475 = x_38477;
        }
    }
    
    int32_t old_counter_38483;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_38467 == 0) {
            ((__global
              int32_t *) group_res_arr_mem_38463)[sext_i32_i64(group_tid_38468) *
                                                  segred_group_sizze_33141] =
                x_acc_38475;
            mem_fence_global();
            old_counter_38483 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_38461)[0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_38471)[0] = old_counter_38483 ==
                num_groups_33143 - 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_38484;
    
    is_last_group_38484 = ((__local bool *) sync_arr_mem_38471)[0];
    if (is_last_group_38484) {
        if (local_tid_38467 == 0) {
            old_counter_38483 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_38461)[0],
                                                      (int) (0 -
                                                             num_groups_33143));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_38485 = sdiv_up64(num_groups_33143,
                                                      segred_group_sizze_33141);
            
            x_25108 = 0;
            for (int64_t i_38486 = 0; i_38486 < read_per_thread_38485;
                 i_38486++) {
                int64_t group_res_id_38487 = sext_i32_i64(local_tid_38467) *
                        read_per_thread_38485 + i_38486;
                int64_t index_of_group_res_38488 = group_res_id_38487;
                
                if (slt64(group_res_id_38487, num_groups_33143)) {
                    x_25109 = ((__global
                                int32_t *) group_res_arr_mem_38463)[index_of_group_res_38488 *
                                                                    segred_group_sizze_33141];
                    
                    int32_t res_25110;
                    
                    res_25110 = smax32(x_25108, x_25109);
                    x_25108 = res_25110;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467)] =
            x_25108;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_38489;
            int32_t skip_waves_38490;
            
            skip_waves_38490 = 1;
            
            int32_t x_38477;
            int32_t x_38478;
            
            offset_38489 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38467,
                          sext_i64_i32(segred_group_sizze_33141))) {
                    x_38477 = ((__local
                                int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467 +
                                                              offset_38489)];
                }
            }
            offset_38489 = 1;
            while (slt32(offset_38489, wave_sizze_38469)) {
                if (slt32(local_tid_38467 + offset_38489,
                          sext_i64_i32(segred_group_sizze_33141)) &&
                    ((local_tid_38467 - squot32(local_tid_38467,
                                                wave_sizze_38469) *
                      wave_sizze_38469) & (2 * offset_38489 - 1)) == 0) {
                    // read array element
                    {
                        x_38478 = ((volatile __local
                                    int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467 +
                                                                  offset_38489)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38479 = smax32(x_38477, x_38478);
                        
                        x_38477 = res_38479;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467)] =
                            x_38477;
                    }
                }
                offset_38489 *= 2;
            }
            while (slt32(skip_waves_38490,
                         squot32(sext_i64_i32(segred_group_sizze_33141) +
                                 wave_sizze_38469 - 1, wave_sizze_38469))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38489 = skip_waves_38490 * wave_sizze_38469;
                if (slt32(local_tid_38467 + offset_38489,
                          sext_i64_i32(segred_group_sizze_33141)) &&
                    ((local_tid_38467 - squot32(local_tid_38467,
                                                wave_sizze_38469) *
                      wave_sizze_38469) == 0 && (squot32(local_tid_38467,
                                                         wave_sizze_38469) &
                                                 (2 * skip_waves_38490 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38478 = ((__local
                                    int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467 +
                                                                  offset_38489)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38479 = smax32(x_38477, x_38478);
                        
                        x_38477 = res_38479;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_38473)[sext_i32_i64(local_tid_38467)] =
                            x_38477;
                    }
                }
                skip_waves_38490 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_38467 == 0) {
                    ((__global int32_t *) mem_37195)[0] = x_38477;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33141
}
__kernel void mainzisegred_small_31052(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_37823_backing_aligned_0,
                                       int64_t N_24750, int64_t m_24751,
                                       int64_t N_24752, int64_t res_24764,
                                       int64_t res_24770,
                                       int64_t num_groups_31191, __global
                                       unsigned char *images_mem_36652, __global
                                       unsigned char *binop_p_mem_36661,
                                       __global unsigned char *mem_36744,
                                       __global unsigned char *mem_36749,
                                       int64_t segment_sizze_nonzzero_37816)
{
    #define segred_group_sizze_31190 (mainzisegred_group_sizze_31046)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_37823_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37823_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37818;
    int32_t local_tid_37819;
    int64_t group_sizze_37822;
    int32_t wave_sizze_37821;
    int32_t group_tid_37820;
    
    global_tid_37818 = get_global_id(0);
    local_tid_37819 = get_local_id(0);
    group_sizze_37822 = get_local_size(0);
    wave_sizze_37821 = LOCKSTEP_WIDTH;
    group_tid_37820 = get_group_id(0);
    
    int32_t phys_tid_31052;
    
    phys_tid_31052 = global_tid_37818;
    
    __local char *red_arr_mem_37823;
    
    red_arr_mem_37823 = (__local char *) red_arr_mem_37823_backing_0;
    
    int32_t phys_group_id_37825;
    
    phys_group_id_37825 = get_group_id(0);
    for (int32_t i_37826 = 0; i_37826 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751 * res_24770 * res_24770,
                                          squot64(segred_group_sizze_31190,
                                                  segment_sizze_nonzzero_37816))) -
                   phys_group_id_37825, sext_i64_i32(num_groups_31191));
         i_37826++) {
        int32_t virt_group_id_37827 = phys_group_id_37825 + i_37826 *
                sext_i64_i32(num_groups_31191);
        int64_t gtid_31039 = squot64(squot64(sext_i32_i64(local_tid_37819),
                                             segment_sizze_nonzzero_37816) +
                                     sext_i32_i64(virt_group_id_37827) *
                                     squot64(segred_group_sizze_31190,
                                             segment_sizze_nonzzero_37816),
                                     res_24770 * res_24770);
        int64_t gtid_31040 = squot64(squot64(sext_i32_i64(local_tid_37819),
                                             segment_sizze_nonzzero_37816) +
                                     sext_i32_i64(virt_group_id_37827) *
                                     squot64(segred_group_sizze_31190,
                                             segment_sizze_nonzzero_37816) -
                                     squot64(squot64(sext_i32_i64(local_tid_37819),
                                                     segment_sizze_nonzzero_37816) +
                                             sext_i32_i64(virt_group_id_37827) *
                                             squot64(segred_group_sizze_31190,
                                                     segment_sizze_nonzzero_37816),
                                             res_24770 * res_24770) *
                                     (res_24770 * res_24770), res_24770);
        int64_t gtid_31041 = squot64(sext_i32_i64(local_tid_37819),
                                     segment_sizze_nonzzero_37816) +
                sext_i32_i64(virt_group_id_37827) *
                squot64(segred_group_sizze_31190,
                        segment_sizze_nonzzero_37816) -
                squot64(squot64(sext_i32_i64(local_tid_37819),
                                segment_sizze_nonzzero_37816) +
                        sext_i32_i64(virt_group_id_37827) *
                        squot64(segred_group_sizze_31190,
                                segment_sizze_nonzzero_37816), res_24770 *
                        res_24770) * (res_24770 * res_24770) -
                squot64(squot64(sext_i32_i64(local_tid_37819),
                                segment_sizze_nonzzero_37816) +
                        sext_i32_i64(virt_group_id_37827) *
                        squot64(segred_group_sizze_31190,
                                segment_sizze_nonzzero_37816) -
                        squot64(squot64(sext_i32_i64(local_tid_37819),
                                        segment_sizze_nonzzero_37816) +
                                sext_i32_i64(virt_group_id_37827) *
                                squot64(segred_group_sizze_31190,
                                        segment_sizze_nonzzero_37816),
                                res_24770 * res_24770) * (res_24770 *
                                                          res_24770),
                        res_24770) * res_24770;
        int64_t gtid_31051 = srem64(sext_i32_i64(local_tid_37819), res_24764);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24764) && (((slt64(gtid_31039, m_24751) &&
                                          slt64(gtid_31040, res_24770)) &&
                                         slt64(gtid_31041, res_24770)) &&
                                        slt64(sext_i32_i64(local_tid_37819),
                                              res_24764 *
                                              squot64(segred_group_sizze_31190,
                                                      segment_sizze_nonzzero_37816)))) {
                float x_31200 = ((__global
                                  float *) images_mem_36652)[gtid_31039 *
                                                             N_24752 +
                                                             gtid_31051];
                float x_31201 = ((__global
                                  float *) binop_p_mem_36661)[gtid_31040 *
                                                              N_24750 +
                                                              gtid_31051];
                float x_31202 = ((__global float *) mem_36744)[gtid_31041 *
                                                               N_24750 +
                                                               gtid_31051];
                float x_31203 = x_31201 * x_31202;
                bool res_31204;
                
                res_31204 = futrts_isnan32(x_31200);
                
                float y_31205;
                
                if (res_31204) {
                    y_31205 = 0.0F;
                } else {
                    y_31205 = 1.0F;
                }
                
                float res_31206 = x_31203 * y_31205;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)] =
                        res_31206;
                }
            } else {
                ((__local
                  float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24764)) {
            // perform segmented scan to imitate reduction
            {
                float x_31194;
                float x_31195;
                float x_37828;
                float x_37829;
                bool ltid_in_bounds_37831;
                
                ltid_in_bounds_37831 = slt64(sext_i32_i64(local_tid_37819),
                                             res_24764 *
                                             squot64(segred_group_sizze_31190,
                                                     segment_sizze_nonzzero_37816));
                
                int32_t skip_threads_37832;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_37831) {
                        x_31195 = ((volatile __local
                                    float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)];
                        if ((local_tid_37819 - squot32(local_tid_37819, 32) *
                             32) == 0) {
                            x_31194 = x_31195;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_37832 = 1;
                    while (slt32(skip_threads_37832, 32)) {
                        if (sle32(skip_threads_37832, local_tid_37819 -
                                  squot32(local_tid_37819, 32) * 32) &&
                            ltid_in_bounds_37831) {
                            // read operands
                            {
                                x_31194 = ((volatile __local
                                            float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819) -
                                                                        sext_i32_i64(skip_threads_37832)];
                            }
                            // perform operation
                            {
                                bool inactive_37833 =
                                     slt64(srem64(sext_i32_i64(local_tid_37819),
                                                  res_24764),
                                           sext_i32_i64(local_tid_37819) -
                                           sext_i32_i64(local_tid_37819 -
                                           skip_threads_37832));
                                
                                if (inactive_37833) {
                                    x_31194 = x_31195;
                                }
                                if (!inactive_37833) {
                                    float res_31196 = x_31194 + x_31195;
                                    
                                    x_31194 = res_31196;
                                }
                            }
                        }
                        if (sle32(wave_sizze_37821, skip_threads_37832)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_37832, local_tid_37819 -
                                  squot32(local_tid_37819, 32) * 32) &&
                            ltid_in_bounds_37831) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)] =
                                    x_31194;
                                x_31195 = x_31194;
                            }
                        }
                        if (sle32(wave_sizze_37821, skip_threads_37832)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_37832 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_37819 - squot32(local_tid_37819, 32) * 32) ==
                        31 && ltid_in_bounds_37831) {
                        ((volatile __local
                          float *) red_arr_mem_37823)[sext_i32_i64(squot32(local_tid_37819,
                                                                           32))] =
                            x_31194;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_37834;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_37819, 32) == 0 &&
                            ltid_in_bounds_37831) {
                            x_37829 = ((volatile __local
                                        float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)];
                            if ((local_tid_37819 - squot32(local_tid_37819,
                                                           32) * 32) == 0) {
                                x_37828 = x_37829;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_37834 = 1;
                        while (slt32(skip_threads_37834, 32)) {
                            if (sle32(skip_threads_37834, local_tid_37819 -
                                      squot32(local_tid_37819, 32) * 32) &&
                                (squot32(local_tid_37819, 32) == 0 &&
                                 ltid_in_bounds_37831)) {
                                // read operands
                                {
                                    x_37828 = ((volatile __local
                                                float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819) -
                                                                            sext_i32_i64(skip_threads_37834)];
                                }
                                // perform operation
                                {
                                    bool inactive_37835 =
                                         slt64(srem64(sext_i32_i64(local_tid_37819 *
                                                      32 + 32 - 1), res_24764),
                                               sext_i32_i64(local_tid_37819 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_37819 -
                                                             skip_threads_37834) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_37835) {
                                        x_37828 = x_37829;
                                    }
                                    if (!inactive_37835) {
                                        float res_37830 = x_37828 + x_37829;
                                        
                                        x_37828 = res_37830;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_37821, skip_threads_37834)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_37834, local_tid_37819 -
                                      squot32(local_tid_37819, 32) * 32) &&
                                (squot32(local_tid_37819, 32) == 0 &&
                                 ltid_in_bounds_37831)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)] =
                                        x_37828;
                                    x_37829 = x_37828;
                                }
                            }
                            if (sle32(wave_sizze_37821, skip_threads_37834)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_37834 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_37819, 32) == 0 ||
                          !ltid_in_bounds_37831)) {
                        // read operands
                        {
                            x_31195 = x_31194;
                            x_31194 = ((__local
                                        float *) red_arr_mem_37823)[sext_i32_i64(squot32(local_tid_37819,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_37836 =
                                 slt64(srem64(sext_i32_i64(local_tid_37819),
                                              res_24764),
                                       sext_i32_i64(local_tid_37819) -
                                       sext_i32_i64(squot32(local_tid_37819,
                                                            32) * 32 - 1));
                            
                            if (inactive_37836) {
                                x_31194 = x_31195;
                            }
                            if (!inactive_37836) {
                                float res_31196 = x_31194 + x_31195;
                                
                                x_31194 = res_31196;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)] =
                                x_31194;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_37819, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_37823)[sext_i32_i64(local_tid_37819)] =
                            x_31195;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_37827) *
                      squot64(segred_group_sizze_31190,
                              segment_sizze_nonzzero_37816) +
                      sext_i32_i64(local_tid_37819), m_24751 * res_24770 *
                      res_24770) && slt64(sext_i32_i64(local_tid_37819),
                                          squot64(segred_group_sizze_31190,
                                                  segment_sizze_nonzzero_37816))) {
                ((__global
                  float *) mem_36749)[squot64(sext_i32_i64(virt_group_id_37827) *
                                              squot64(segred_group_sizze_31190,
                                                      segment_sizze_nonzzero_37816) +
                                              sext_i32_i64(local_tid_37819),
                                              res_24770 * res_24770) *
                                      (res_24770 * res_24770) +
                                      squot64(sext_i32_i64(virt_group_id_37827) *
                                              squot64(segred_group_sizze_31190,
                                                      segment_sizze_nonzzero_37816) +
                                              sext_i32_i64(local_tid_37819) -
                                              squot64(sext_i32_i64(virt_group_id_37827) *
                                                      squot64(segred_group_sizze_31190,
                                                              segment_sizze_nonzzero_37816) +
                                                      sext_i32_i64(local_tid_37819),
                                                      res_24770 * res_24770) *
                                              (res_24770 * res_24770),
                                              res_24770) * res_24770 +
                                      (sext_i32_i64(virt_group_id_37827) *
                                       squot64(segred_group_sizze_31190,
                                               segment_sizze_nonzzero_37816) +
                                       sext_i32_i64(local_tid_37819) -
                                       squot64(sext_i32_i64(virt_group_id_37827) *
                                               squot64(segred_group_sizze_31190,
                                                       segment_sizze_nonzzero_37816) +
                                               sext_i32_i64(local_tid_37819),
                                               res_24770 * res_24770) *
                                       (res_24770 * res_24770) -
                                       squot64(sext_i32_i64(virt_group_id_37827) *
                                               squot64(segred_group_sizze_31190,
                                                       segment_sizze_nonzzero_37816) +
                                               sext_i32_i64(local_tid_37819) -
                                               squot64(sext_i32_i64(virt_group_id_37827) *
                                                       squot64(segred_group_sizze_31190,
                                                               segment_sizze_nonzzero_37816) +
                                                       sext_i32_i64(local_tid_37819),
                                                       res_24770 * res_24770) *
                                               (res_24770 * res_24770),
                                               res_24770) * res_24770)] =
                    ((__local
                      float *) red_arr_mem_37823)[(sext_i32_i64(local_tid_37819) +
                                                   1) *
                                                  segment_sizze_nonzzero_37816 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31190
}
__kernel void mainzisegred_small_32225(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_37977_backing_aligned_0,
                                       int64_t N_24750, int64_t m_24751,
                                       int64_t N_24752, int64_t res_24764,
                                       int64_t res_24770,
                                       int64_t num_groups_32278, __global
                                       unsigned char *images_mem_36652, __global
                                       unsigned char *binop_p_mem_36661,
                                       __global unsigned char *mem_36930,
                                       int64_t segment_sizze_nonzzero_37970)
{
    #define segred_group_sizze_32277 (mainzisegred_group_sizze_32219)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_37977_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37977_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37972;
    int32_t local_tid_37973;
    int64_t group_sizze_37976;
    int32_t wave_sizze_37975;
    int32_t group_tid_37974;
    
    global_tid_37972 = get_global_id(0);
    local_tid_37973 = get_local_id(0);
    group_sizze_37976 = get_local_size(0);
    wave_sizze_37975 = LOCKSTEP_WIDTH;
    group_tid_37974 = get_group_id(0);
    
    int32_t phys_tid_32225;
    
    phys_tid_32225 = global_tid_37972;
    
    __local char *red_arr_mem_37977;
    
    red_arr_mem_37977 = (__local char *) red_arr_mem_37977_backing_0;
    
    int32_t phys_group_id_37979;
    
    phys_group_id_37979 = get_group_id(0);
    for (int32_t i_37980 = 0; i_37980 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751 * res_24770,
                                          squot64(segred_group_sizze_32277,
                                                  segment_sizze_nonzzero_37970))) -
                   phys_group_id_37979, sext_i64_i32(num_groups_32278));
         i_37980++) {
        int32_t virt_group_id_37981 = phys_group_id_37979 + i_37980 *
                sext_i64_i32(num_groups_32278);
        int64_t gtid_32214 = squot64(squot64(sext_i32_i64(local_tid_37973),
                                             segment_sizze_nonzzero_37970) +
                                     sext_i32_i64(virt_group_id_37981) *
                                     squot64(segred_group_sizze_32277,
                                             segment_sizze_nonzzero_37970),
                                     res_24770);
        int64_t gtid_32215 = squot64(sext_i32_i64(local_tid_37973),
                                     segment_sizze_nonzzero_37970) +
                sext_i32_i64(virt_group_id_37981) *
                squot64(segred_group_sizze_32277,
                        segment_sizze_nonzzero_37970) -
                squot64(squot64(sext_i32_i64(local_tid_37973),
                                segment_sizze_nonzzero_37970) +
                        sext_i32_i64(virt_group_id_37981) *
                        squot64(segred_group_sizze_32277,
                                segment_sizze_nonzzero_37970), res_24770) *
                res_24770;
        int64_t gtid_32224 = srem64(sext_i32_i64(local_tid_37973), res_24764);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24764) && ((slt64(gtid_32214, m_24751) &&
                                         slt64(gtid_32215, res_24770)) &&
                                        slt64(sext_i32_i64(local_tid_37973),
                                              res_24764 *
                                              squot64(segred_group_sizze_32277,
                                                      segment_sizze_nonzzero_37970)))) {
                float x_32287 = ((__global
                                  float *) images_mem_36652)[gtid_32214 *
                                                             N_24752 +
                                                             gtid_32224];
                bool res_32288;
                
                res_32288 = futrts_isnan32(x_32287);
                
                float res_32289;
                
                if (res_32288) {
                    res_32289 = 0.0F;
                } else {
                    float x_32286 = ((__global
                                      float *) binop_p_mem_36661)[gtid_32215 *
                                                                  N_24750 +
                                                                  gtid_32224];
                    float res_32290 = x_32286 * x_32287;
                    
                    res_32289 = res_32290;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)] =
                        res_32289;
                }
            } else {
                ((__local
                  float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24764)) {
            // perform segmented scan to imitate reduction
            {
                float x_32281;
                float x_32282;
                float x_37982;
                float x_37983;
                bool ltid_in_bounds_37985;
                
                ltid_in_bounds_37985 = slt64(sext_i32_i64(local_tid_37973),
                                             res_24764 *
                                             squot64(segred_group_sizze_32277,
                                                     segment_sizze_nonzzero_37970));
                
                int32_t skip_threads_37986;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_37985) {
                        x_32282 = ((volatile __local
                                    float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)];
                        if ((local_tid_37973 - squot32(local_tid_37973, 32) *
                             32) == 0) {
                            x_32281 = x_32282;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_37986 = 1;
                    while (slt32(skip_threads_37986, 32)) {
                        if (sle32(skip_threads_37986, local_tid_37973 -
                                  squot32(local_tid_37973, 32) * 32) &&
                            ltid_in_bounds_37985) {
                            // read operands
                            {
                                x_32281 = ((volatile __local
                                            float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973) -
                                                                        sext_i32_i64(skip_threads_37986)];
                            }
                            // perform operation
                            {
                                bool inactive_37987 =
                                     slt64(srem64(sext_i32_i64(local_tid_37973),
                                                  res_24764),
                                           sext_i32_i64(local_tid_37973) -
                                           sext_i32_i64(local_tid_37973 -
                                           skip_threads_37986));
                                
                                if (inactive_37987) {
                                    x_32281 = x_32282;
                                }
                                if (!inactive_37987) {
                                    float res_32283 = x_32281 + x_32282;
                                    
                                    x_32281 = res_32283;
                                }
                            }
                        }
                        if (sle32(wave_sizze_37975, skip_threads_37986)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_37986, local_tid_37973 -
                                  squot32(local_tid_37973, 32) * 32) &&
                            ltid_in_bounds_37985) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)] =
                                    x_32281;
                                x_32282 = x_32281;
                            }
                        }
                        if (sle32(wave_sizze_37975, skip_threads_37986)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_37986 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_37973 - squot32(local_tid_37973, 32) * 32) ==
                        31 && ltid_in_bounds_37985) {
                        ((volatile __local
                          float *) red_arr_mem_37977)[sext_i32_i64(squot32(local_tid_37973,
                                                                           32))] =
                            x_32281;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_37988;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_37973, 32) == 0 &&
                            ltid_in_bounds_37985) {
                            x_37983 = ((volatile __local
                                        float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)];
                            if ((local_tid_37973 - squot32(local_tid_37973,
                                                           32) * 32) == 0) {
                                x_37982 = x_37983;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_37988 = 1;
                        while (slt32(skip_threads_37988, 32)) {
                            if (sle32(skip_threads_37988, local_tid_37973 -
                                      squot32(local_tid_37973, 32) * 32) &&
                                (squot32(local_tid_37973, 32) == 0 &&
                                 ltid_in_bounds_37985)) {
                                // read operands
                                {
                                    x_37982 = ((volatile __local
                                                float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973) -
                                                                            sext_i32_i64(skip_threads_37988)];
                                }
                                // perform operation
                                {
                                    bool inactive_37989 =
                                         slt64(srem64(sext_i32_i64(local_tid_37973 *
                                                      32 + 32 - 1), res_24764),
                                               sext_i32_i64(local_tid_37973 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_37973 -
                                                             skip_threads_37988) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_37989) {
                                        x_37982 = x_37983;
                                    }
                                    if (!inactive_37989) {
                                        float res_37984 = x_37982 + x_37983;
                                        
                                        x_37982 = res_37984;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_37975, skip_threads_37988)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_37988, local_tid_37973 -
                                      squot32(local_tid_37973, 32) * 32) &&
                                (squot32(local_tid_37973, 32) == 0 &&
                                 ltid_in_bounds_37985)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)] =
                                        x_37982;
                                    x_37983 = x_37982;
                                }
                            }
                            if (sle32(wave_sizze_37975, skip_threads_37988)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_37988 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_37973, 32) == 0 ||
                          !ltid_in_bounds_37985)) {
                        // read operands
                        {
                            x_32282 = x_32281;
                            x_32281 = ((__local
                                        float *) red_arr_mem_37977)[sext_i32_i64(squot32(local_tid_37973,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_37990 =
                                 slt64(srem64(sext_i32_i64(local_tid_37973),
                                              res_24764),
                                       sext_i32_i64(local_tid_37973) -
                                       sext_i32_i64(squot32(local_tid_37973,
                                                            32) * 32 - 1));
                            
                            if (inactive_37990) {
                                x_32281 = x_32282;
                            }
                            if (!inactive_37990) {
                                float res_32283 = x_32281 + x_32282;
                                
                                x_32281 = res_32283;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)] =
                                x_32281;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_37973, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_37977)[sext_i32_i64(local_tid_37973)] =
                            x_32282;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_37981) *
                      squot64(segred_group_sizze_32277,
                              segment_sizze_nonzzero_37970) +
                      sext_i32_i64(local_tid_37973), m_24751 * res_24770) &&
                slt64(sext_i32_i64(local_tid_37973),
                      squot64(segred_group_sizze_32277,
                              segment_sizze_nonzzero_37970))) {
                ((__global
                  float *) mem_36930)[squot64(sext_i32_i64(virt_group_id_37981) *
                                              squot64(segred_group_sizze_32277,
                                                      segment_sizze_nonzzero_37970) +
                                              sext_i32_i64(local_tid_37973),
                                              res_24770) * res_24770 +
                                      (sext_i32_i64(virt_group_id_37981) *
                                       squot64(segred_group_sizze_32277,
                                               segment_sizze_nonzzero_37970) +
                                       sext_i32_i64(local_tid_37973) -
                                       squot64(sext_i32_i64(virt_group_id_37981) *
                                               squot64(segred_group_sizze_32277,
                                                       segment_sizze_nonzzero_37970) +
                                               sext_i32_i64(local_tid_37973),
                                               res_24770) * res_24770)] =
                    ((__local
                      float *) red_arr_mem_37977)[(sext_i32_i64(local_tid_37973) +
                                                   1) *
                                                  segment_sizze_nonzzero_37970 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32277
}
__kernel void mainzisegred_small_32362(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38058_backing_aligned_0,
                                       int64_t m_24751, int64_t res_24770,
                                       int64_t num_groups_32411, __global
                                       unsigned char *res_mem_36845, __global
                                       unsigned char *res_mem_36936, __global
                                       unsigned char *mem_36973,
                                       int64_t segment_sizze_nonzzero_38051)
{
    #define segred_group_sizze_32410 (mainzisegred_group_sizze_32356)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38058_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38058_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38053;
    int32_t local_tid_38054;
    int64_t group_sizze_38057;
    int32_t wave_sizze_38056;
    int32_t group_tid_38055;
    
    global_tid_38053 = get_global_id(0);
    local_tid_38054 = get_local_id(0);
    group_sizze_38057 = get_local_size(0);
    wave_sizze_38056 = LOCKSTEP_WIDTH;
    group_tid_38055 = get_group_id(0);
    
    int32_t phys_tid_32362;
    
    phys_tid_32362 = global_tid_38053;
    
    __local char *red_arr_mem_38058;
    
    red_arr_mem_38058 = (__local char *) red_arr_mem_38058_backing_0;
    
    int32_t phys_group_id_38060;
    
    phys_group_id_38060 = get_group_id(0);
    for (int32_t i_38061 = 0; i_38061 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751 * res_24770,
                                          squot64(segred_group_sizze_32410,
                                                  segment_sizze_nonzzero_38051))) -
                   phys_group_id_38060, sext_i64_i32(num_groups_32411));
         i_38061++) {
        int32_t virt_group_id_38062 = phys_group_id_38060 + i_38061 *
                sext_i64_i32(num_groups_32411);
        int64_t gtid_32351 = squot64(squot64(sext_i32_i64(local_tid_38054),
                                             segment_sizze_nonzzero_38051) +
                                     sext_i32_i64(virt_group_id_38062) *
                                     squot64(segred_group_sizze_32410,
                                             segment_sizze_nonzzero_38051),
                                     res_24770);
        int64_t gtid_32352 = squot64(sext_i32_i64(local_tid_38054),
                                     segment_sizze_nonzzero_38051) +
                sext_i32_i64(virt_group_id_38062) *
                squot64(segred_group_sizze_32410,
                        segment_sizze_nonzzero_38051) -
                squot64(squot64(sext_i32_i64(local_tid_38054),
                                segment_sizze_nonzzero_38051) +
                        sext_i32_i64(virt_group_id_38062) *
                        squot64(segred_group_sizze_32410,
                                segment_sizze_nonzzero_38051), res_24770) *
                res_24770;
        int64_t gtid_32361 = srem64(sext_i32_i64(local_tid_38054), res_24770);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24770) && ((slt64(gtid_32351, m_24751) &&
                                         slt64(gtid_32352, res_24770)) &&
                                        slt64(sext_i32_i64(local_tid_38054),
                                              res_24770 *
                                              squot64(segred_group_sizze_32410,
                                                      segment_sizze_nonzzero_38051)))) {
                float x_32420 = ((__global float *) res_mem_36936)[gtid_32351 *
                                                                   res_24770 +
                                                                   gtid_32361];
                float x_32421 = ((__global float *) res_mem_36845)[gtid_32351 *
                                                                   (res_24770 *
                                                                    res_24770) +
                                                                   gtid_32352 *
                                                                   res_24770 +
                                                                   gtid_32361];
                float res_32422 = x_32420 * x_32421;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)] =
                        res_32422;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24770)) {
            // perform segmented scan to imitate reduction
            {
                float x_32414;
                float x_32415;
                float x_38063;
                float x_38064;
                bool ltid_in_bounds_38066;
                
                ltid_in_bounds_38066 = slt64(sext_i32_i64(local_tid_38054),
                                             res_24770 *
                                             squot64(segred_group_sizze_32410,
                                                     segment_sizze_nonzzero_38051));
                
                int32_t skip_threads_38067;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38066) {
                        x_32415 = ((volatile __local
                                    float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)];
                        if ((local_tid_38054 - squot32(local_tid_38054, 32) *
                             32) == 0) {
                            x_32414 = x_32415;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38067 = 1;
                    while (slt32(skip_threads_38067, 32)) {
                        if (sle32(skip_threads_38067, local_tid_38054 -
                                  squot32(local_tid_38054, 32) * 32) &&
                            ltid_in_bounds_38066) {
                            // read operands
                            {
                                x_32414 = ((volatile __local
                                            float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054) -
                                                                        sext_i32_i64(skip_threads_38067)];
                            }
                            // perform operation
                            {
                                bool inactive_38068 =
                                     slt64(srem64(sext_i32_i64(local_tid_38054),
                                                  res_24770),
                                           sext_i32_i64(local_tid_38054) -
                                           sext_i32_i64(local_tid_38054 -
                                           skip_threads_38067));
                                
                                if (inactive_38068) {
                                    x_32414 = x_32415;
                                }
                                if (!inactive_38068) {
                                    float res_32416 = x_32414 + x_32415;
                                    
                                    x_32414 = res_32416;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38056, skip_threads_38067)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38067, local_tid_38054 -
                                  squot32(local_tid_38054, 32) * 32) &&
                            ltid_in_bounds_38066) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)] =
                                    x_32414;
                                x_32415 = x_32414;
                            }
                        }
                        if (sle32(wave_sizze_38056, skip_threads_38067)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38067 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38054 - squot32(local_tid_38054, 32) * 32) ==
                        31 && ltid_in_bounds_38066) {
                        ((volatile __local
                          float *) red_arr_mem_38058)[sext_i32_i64(squot32(local_tid_38054,
                                                                           32))] =
                            x_32414;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38069;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38054, 32) == 0 &&
                            ltid_in_bounds_38066) {
                            x_38064 = ((volatile __local
                                        float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)];
                            if ((local_tid_38054 - squot32(local_tid_38054,
                                                           32) * 32) == 0) {
                                x_38063 = x_38064;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38069 = 1;
                        while (slt32(skip_threads_38069, 32)) {
                            if (sle32(skip_threads_38069, local_tid_38054 -
                                      squot32(local_tid_38054, 32) * 32) &&
                                (squot32(local_tid_38054, 32) == 0 &&
                                 ltid_in_bounds_38066)) {
                                // read operands
                                {
                                    x_38063 = ((volatile __local
                                                float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054) -
                                                                            sext_i32_i64(skip_threads_38069)];
                                }
                                // perform operation
                                {
                                    bool inactive_38070 =
                                         slt64(srem64(sext_i32_i64(local_tid_38054 *
                                                      32 + 32 - 1), res_24770),
                                               sext_i32_i64(local_tid_38054 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38054 -
                                                             skip_threads_38069) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38070) {
                                        x_38063 = x_38064;
                                    }
                                    if (!inactive_38070) {
                                        float res_38065 = x_38063 + x_38064;
                                        
                                        x_38063 = res_38065;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38056, skip_threads_38069)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38069, local_tid_38054 -
                                      squot32(local_tid_38054, 32) * 32) &&
                                (squot32(local_tid_38054, 32) == 0 &&
                                 ltid_in_bounds_38066)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)] =
                                        x_38063;
                                    x_38064 = x_38063;
                                }
                            }
                            if (sle32(wave_sizze_38056, skip_threads_38069)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38069 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38054, 32) == 0 ||
                          !ltid_in_bounds_38066)) {
                        // read operands
                        {
                            x_32415 = x_32414;
                            x_32414 = ((__local
                                        float *) red_arr_mem_38058)[sext_i32_i64(squot32(local_tid_38054,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38071 =
                                 slt64(srem64(sext_i32_i64(local_tid_38054),
                                              res_24770),
                                       sext_i32_i64(local_tid_38054) -
                                       sext_i32_i64(squot32(local_tid_38054,
                                                            32) * 32 - 1));
                            
                            if (inactive_38071) {
                                x_32414 = x_32415;
                            }
                            if (!inactive_38071) {
                                float res_32416 = x_32414 + x_32415;
                                
                                x_32414 = res_32416;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)] =
                                x_32414;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38054, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38058)[sext_i32_i64(local_tid_38054)] =
                            x_32415;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38062) *
                      squot64(segred_group_sizze_32410,
                              segment_sizze_nonzzero_38051) +
                      sext_i32_i64(local_tid_38054), m_24751 * res_24770) &&
                slt64(sext_i32_i64(local_tid_38054),
                      squot64(segred_group_sizze_32410,
                              segment_sizze_nonzzero_38051))) {
                ((__global
                  float *) mem_36973)[squot64(sext_i32_i64(virt_group_id_38062) *
                                              squot64(segred_group_sizze_32410,
                                                      segment_sizze_nonzzero_38051) +
                                              sext_i32_i64(local_tid_38054),
                                              res_24770) * res_24770 +
                                      (sext_i32_i64(virt_group_id_38062) *
                                       squot64(segred_group_sizze_32410,
                                               segment_sizze_nonzzero_38051) +
                                       sext_i32_i64(local_tid_38054) -
                                       squot64(sext_i32_i64(virt_group_id_38062) *
                                               squot64(segred_group_sizze_32410,
                                                       segment_sizze_nonzzero_38051) +
                                               sext_i32_i64(local_tid_38054),
                                               res_24770) * res_24770)] =
                    ((__local
                      float *) red_arr_mem_38058)[(sext_i32_i64(local_tid_38054) +
                                                   1) *
                                                  segment_sizze_nonzzero_38051 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32410
}
__kernel void mainzisegred_small_32492(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38146_backing_aligned_0,
                                       int64_t N_24750, int64_t m_24751,
                                       int64_t res_24770,
                                       int64_t num_groups_32539, __global
                                       unsigned char *mem_36668, __global
                                       unsigned char *res_mem_36979, __global
                                       unsigned char *mem_37067,
                                       int64_t segment_sizze_nonzzero_38139)
{
    #define segred_group_sizze_32538 (mainzisegred_group_sizze_32486)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38146_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38146_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38141;
    int32_t local_tid_38142;
    int64_t group_sizze_38145;
    int32_t wave_sizze_38144;
    int32_t group_tid_38143;
    
    global_tid_38141 = get_global_id(0);
    local_tid_38142 = get_local_id(0);
    group_sizze_38145 = get_local_size(0);
    wave_sizze_38144 = LOCKSTEP_WIDTH;
    group_tid_38143 = get_group_id(0);
    
    int32_t phys_tid_32492;
    
    phys_tid_32492 = global_tid_38141;
    
    __local char *red_arr_mem_38146;
    
    red_arr_mem_38146 = (__local char *) red_arr_mem_38146_backing_0;
    
    int32_t phys_group_id_38148;
    
    phys_group_id_38148 = get_group_id(0);
    for (int32_t i_38149 = 0; i_38149 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751 * N_24750,
                                          squot64(segred_group_sizze_32538,
                                                  segment_sizze_nonzzero_38139))) -
                   phys_group_id_38148, sext_i64_i32(num_groups_32539));
         i_38149++) {
        int32_t virt_group_id_38150 = phys_group_id_38148 + i_38149 *
                sext_i64_i32(num_groups_32539);
        int64_t gtid_32481 = squot64(squot64(sext_i32_i64(local_tid_38142),
                                             segment_sizze_nonzzero_38139) +
                                     sext_i32_i64(virt_group_id_38150) *
                                     squot64(segred_group_sizze_32538,
                                             segment_sizze_nonzzero_38139),
                                     N_24750);
        int64_t gtid_32482 = squot64(sext_i32_i64(local_tid_38142),
                                     segment_sizze_nonzzero_38139) +
                sext_i32_i64(virt_group_id_38150) *
                squot64(segred_group_sizze_32538,
                        segment_sizze_nonzzero_38139) -
                squot64(squot64(sext_i32_i64(local_tid_38142),
                                segment_sizze_nonzzero_38139) +
                        sext_i32_i64(virt_group_id_38150) *
                        squot64(segred_group_sizze_32538,
                                segment_sizze_nonzzero_38139), N_24750) *
                N_24750;
        int64_t gtid_32491 = srem64(sext_i32_i64(local_tid_38142), res_24770);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24770) && ((slt64(gtid_32481, m_24751) &&
                                         slt64(gtid_32482, N_24750)) &&
                                        slt64(sext_i32_i64(local_tid_38142),
                                              res_24770 *
                                              squot64(segred_group_sizze_32538,
                                                      segment_sizze_nonzzero_38139)))) {
                float x_32547 = ((__global float *) res_mem_36979)[gtid_32481 *
                                                                   res_24770 +
                                                                   gtid_32491];
                float x_32548 = ((__global float *) mem_36668)[gtid_32482 *
                                                               res_24770 +
                                                               gtid_32491];
                float res_32549 = x_32547 * x_32548;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)] =
                        res_32549;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24770)) {
            // perform segmented scan to imitate reduction
            {
                float x_32542;
                float x_32543;
                float x_38151;
                float x_38152;
                bool ltid_in_bounds_38154;
                
                ltid_in_bounds_38154 = slt64(sext_i32_i64(local_tid_38142),
                                             res_24770 *
                                             squot64(segred_group_sizze_32538,
                                                     segment_sizze_nonzzero_38139));
                
                int32_t skip_threads_38155;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38154) {
                        x_32543 = ((volatile __local
                                    float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)];
                        if ((local_tid_38142 - squot32(local_tid_38142, 32) *
                             32) == 0) {
                            x_32542 = x_32543;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38155 = 1;
                    while (slt32(skip_threads_38155, 32)) {
                        if (sle32(skip_threads_38155, local_tid_38142 -
                                  squot32(local_tid_38142, 32) * 32) &&
                            ltid_in_bounds_38154) {
                            // read operands
                            {
                                x_32542 = ((volatile __local
                                            float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142) -
                                                                        sext_i32_i64(skip_threads_38155)];
                            }
                            // perform operation
                            {
                                bool inactive_38156 =
                                     slt64(srem64(sext_i32_i64(local_tid_38142),
                                                  res_24770),
                                           sext_i32_i64(local_tid_38142) -
                                           sext_i32_i64(local_tid_38142 -
                                           skip_threads_38155));
                                
                                if (inactive_38156) {
                                    x_32542 = x_32543;
                                }
                                if (!inactive_38156) {
                                    float res_32544 = x_32542 + x_32543;
                                    
                                    x_32542 = res_32544;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38144, skip_threads_38155)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38155, local_tid_38142 -
                                  squot32(local_tid_38142, 32) * 32) &&
                            ltid_in_bounds_38154) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)] =
                                    x_32542;
                                x_32543 = x_32542;
                            }
                        }
                        if (sle32(wave_sizze_38144, skip_threads_38155)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38155 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38142 - squot32(local_tid_38142, 32) * 32) ==
                        31 && ltid_in_bounds_38154) {
                        ((volatile __local
                          float *) red_arr_mem_38146)[sext_i32_i64(squot32(local_tid_38142,
                                                                           32))] =
                            x_32542;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38157;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38142, 32) == 0 &&
                            ltid_in_bounds_38154) {
                            x_38152 = ((volatile __local
                                        float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)];
                            if ((local_tid_38142 - squot32(local_tid_38142,
                                                           32) * 32) == 0) {
                                x_38151 = x_38152;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38157 = 1;
                        while (slt32(skip_threads_38157, 32)) {
                            if (sle32(skip_threads_38157, local_tid_38142 -
                                      squot32(local_tid_38142, 32) * 32) &&
                                (squot32(local_tid_38142, 32) == 0 &&
                                 ltid_in_bounds_38154)) {
                                // read operands
                                {
                                    x_38151 = ((volatile __local
                                                float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142) -
                                                                            sext_i32_i64(skip_threads_38157)];
                                }
                                // perform operation
                                {
                                    bool inactive_38158 =
                                         slt64(srem64(sext_i32_i64(local_tid_38142 *
                                                      32 + 32 - 1), res_24770),
                                               sext_i32_i64(local_tid_38142 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38142 -
                                                             skip_threads_38157) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38158) {
                                        x_38151 = x_38152;
                                    }
                                    if (!inactive_38158) {
                                        float res_38153 = x_38151 + x_38152;
                                        
                                        x_38151 = res_38153;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38144, skip_threads_38157)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38157, local_tid_38142 -
                                      squot32(local_tid_38142, 32) * 32) &&
                                (squot32(local_tid_38142, 32) == 0 &&
                                 ltid_in_bounds_38154)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)] =
                                        x_38151;
                                    x_38152 = x_38151;
                                }
                            }
                            if (sle32(wave_sizze_38144, skip_threads_38157)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38157 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38142, 32) == 0 ||
                          !ltid_in_bounds_38154)) {
                        // read operands
                        {
                            x_32543 = x_32542;
                            x_32542 = ((__local
                                        float *) red_arr_mem_38146)[sext_i32_i64(squot32(local_tid_38142,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38159 =
                                 slt64(srem64(sext_i32_i64(local_tid_38142),
                                              res_24770),
                                       sext_i32_i64(local_tid_38142) -
                                       sext_i32_i64(squot32(local_tid_38142,
                                                            32) * 32 - 1));
                            
                            if (inactive_38159) {
                                x_32542 = x_32543;
                            }
                            if (!inactive_38159) {
                                float res_32544 = x_32542 + x_32543;
                                
                                x_32542 = res_32544;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)] =
                                x_32542;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38142, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38146)[sext_i32_i64(local_tid_38142)] =
                            x_32543;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38150) *
                      squot64(segred_group_sizze_32538,
                              segment_sizze_nonzzero_38139) +
                      sext_i32_i64(local_tid_38142), m_24751 * N_24750) &&
                slt64(sext_i32_i64(local_tid_38142),
                      squot64(segred_group_sizze_32538,
                              segment_sizze_nonzzero_38139))) {
                ((__global
                  float *) mem_37067)[squot64(sext_i32_i64(virt_group_id_38150) *
                                              squot64(segred_group_sizze_32538,
                                                      segment_sizze_nonzzero_38139) +
                                              sext_i32_i64(local_tid_38142),
                                              N_24750) * N_24750 +
                                      (sext_i32_i64(virt_group_id_38150) *
                                       squot64(segred_group_sizze_32538,
                                               segment_sizze_nonzzero_38139) +
                                       sext_i32_i64(local_tid_38142) -
                                       squot64(sext_i32_i64(virt_group_id_38150) *
                                               squot64(segred_group_sizze_32538,
                                                       segment_sizze_nonzzero_38139) +
                                               sext_i32_i64(local_tid_38142),
                                               N_24750) * N_24750)] = ((__local
                                                                        float *) red_arr_mem_38146)[(sext_i32_i64(local_tid_38142) +
                                                                                                     1) *
                                                                                                    segment_sizze_nonzzero_38139 -
                                                                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32538
}
__kernel void mainzisegred_small_33058(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38400_backing_aligned_0,
                                       int64_t N_24750, int64_t m_24751,
                                       int64_t res_24764,
                                       int64_t num_groups_33105, __global
                                       unsigned char *res_mem_37111, __global
                                       unsigned char *mem_37178, __global
                                       unsigned char *mem_37181,
                                       int64_t segment_sizze_nonzzero_38393)
{
    #define segred_group_sizze_33104 (mainzisegred_group_sizze_33052)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38400_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38400_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38395;
    int32_t local_tid_38396;
    int64_t group_sizze_38399;
    int32_t wave_sizze_38398;
    int32_t group_tid_38397;
    
    global_tid_38395 = get_global_id(0);
    local_tid_38396 = get_local_id(0);
    group_sizze_38399 = get_local_size(0);
    wave_sizze_38398 = LOCKSTEP_WIDTH;
    group_tid_38397 = get_group_id(0);
    
    int32_t phys_tid_33058;
    
    phys_tid_33058 = global_tid_38395;
    
    __local char *red_arr_mem_38400;
    
    red_arr_mem_38400 = (__local char *) red_arr_mem_38400_backing_0;
    
    int32_t phys_group_id_38402;
    
    phys_group_id_38402 = get_group_id(0);
    for (int32_t i_38403 = 0; i_38403 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751,
                                          squot64(segred_group_sizze_33104,
                                                  segment_sizze_nonzzero_38393))) -
                   phys_group_id_38402, sext_i64_i32(num_groups_33105));
         i_38403++) {
        int32_t virt_group_id_38404 = phys_group_id_38402 + i_38403 *
                sext_i64_i32(num_groups_33105);
        int64_t gtid_33049 = squot64(sext_i32_i64(local_tid_38396),
                                     segment_sizze_nonzzero_38393) +
                sext_i32_i64(virt_group_id_38404) *
                squot64(segred_group_sizze_33104, segment_sizze_nonzzero_38393);
        int64_t gtid_33057 = srem64(sext_i32_i64(local_tid_38396), res_24764);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24764) && (slt64(gtid_33049, m_24751) &&
                                        slt64(sext_i32_i64(local_tid_38396),
                                              res_24764 *
                                              squot64(segred_group_sizze_33104,
                                                      segment_sizze_nonzzero_38393)))) {
                int32_t res_33112 = ((__global
                                      int32_t *) mem_37178)[gtid_33049];
                int32_t index_primexp_35358 = sext_i64_i32(gtid_33057);
                bool cond_33114 = slt32(index_primexp_35358, res_33112);
                float res_33115;
                
                if (cond_33114) {
                    int64_t i_33116 = sext_i32_i64(index_primexp_35358);
                    float res_33117 = ((__global
                                        float *) res_mem_37111)[gtid_33049 *
                                                                N_24750 +
                                                                i_33116];
                    
                    res_33115 = res_33117;
                } else {
                    res_33115 = 0.0F;
                }
                
                float res_33118 = res_33115 * res_33115;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)] =
                        res_33118;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24764)) {
            // perform segmented scan to imitate reduction
            {
                float x_33108;
                float x_33109;
                float x_38405;
                float x_38406;
                bool ltid_in_bounds_38408;
                
                ltid_in_bounds_38408 = slt64(sext_i32_i64(local_tid_38396),
                                             res_24764 *
                                             squot64(segred_group_sizze_33104,
                                                     segment_sizze_nonzzero_38393));
                
                int32_t skip_threads_38409;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38408) {
                        x_33109 = ((volatile __local
                                    float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)];
                        if ((local_tid_38396 - squot32(local_tid_38396, 32) *
                             32) == 0) {
                            x_33108 = x_33109;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38409 = 1;
                    while (slt32(skip_threads_38409, 32)) {
                        if (sle32(skip_threads_38409, local_tid_38396 -
                                  squot32(local_tid_38396, 32) * 32) &&
                            ltid_in_bounds_38408) {
                            // read operands
                            {
                                x_33108 = ((volatile __local
                                            float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396) -
                                                                        sext_i32_i64(skip_threads_38409)];
                            }
                            // perform operation
                            {
                                bool inactive_38410 =
                                     slt64(srem64(sext_i32_i64(local_tid_38396),
                                                  res_24764),
                                           sext_i32_i64(local_tid_38396) -
                                           sext_i32_i64(local_tid_38396 -
                                           skip_threads_38409));
                                
                                if (inactive_38410) {
                                    x_33108 = x_33109;
                                }
                                if (!inactive_38410) {
                                    float res_33110 = x_33108 + x_33109;
                                    
                                    x_33108 = res_33110;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38398, skip_threads_38409)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38409, local_tid_38396 -
                                  squot32(local_tid_38396, 32) * 32) &&
                            ltid_in_bounds_38408) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)] =
                                    x_33108;
                                x_33109 = x_33108;
                            }
                        }
                        if (sle32(wave_sizze_38398, skip_threads_38409)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38409 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38396 - squot32(local_tid_38396, 32) * 32) ==
                        31 && ltid_in_bounds_38408) {
                        ((volatile __local
                          float *) red_arr_mem_38400)[sext_i32_i64(squot32(local_tid_38396,
                                                                           32))] =
                            x_33108;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38411;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38396, 32) == 0 &&
                            ltid_in_bounds_38408) {
                            x_38406 = ((volatile __local
                                        float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)];
                            if ((local_tid_38396 - squot32(local_tid_38396,
                                                           32) * 32) == 0) {
                                x_38405 = x_38406;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38411 = 1;
                        while (slt32(skip_threads_38411, 32)) {
                            if (sle32(skip_threads_38411, local_tid_38396 -
                                      squot32(local_tid_38396, 32) * 32) &&
                                (squot32(local_tid_38396, 32) == 0 &&
                                 ltid_in_bounds_38408)) {
                                // read operands
                                {
                                    x_38405 = ((volatile __local
                                                float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396) -
                                                                            sext_i32_i64(skip_threads_38411)];
                                }
                                // perform operation
                                {
                                    bool inactive_38412 =
                                         slt64(srem64(sext_i32_i64(local_tid_38396 *
                                                      32 + 32 - 1), res_24764),
                                               sext_i32_i64(local_tid_38396 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38396 -
                                                             skip_threads_38411) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38412) {
                                        x_38405 = x_38406;
                                    }
                                    if (!inactive_38412) {
                                        float res_38407 = x_38405 + x_38406;
                                        
                                        x_38405 = res_38407;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38398, skip_threads_38411)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38411, local_tid_38396 -
                                      squot32(local_tid_38396, 32) * 32) &&
                                (squot32(local_tid_38396, 32) == 0 &&
                                 ltid_in_bounds_38408)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)] =
                                        x_38405;
                                    x_38406 = x_38405;
                                }
                            }
                            if (sle32(wave_sizze_38398, skip_threads_38411)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38411 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38396, 32) == 0 ||
                          !ltid_in_bounds_38408)) {
                        // read operands
                        {
                            x_33109 = x_33108;
                            x_33108 = ((__local
                                        float *) red_arr_mem_38400)[sext_i32_i64(squot32(local_tid_38396,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38413 =
                                 slt64(srem64(sext_i32_i64(local_tid_38396),
                                              res_24764),
                                       sext_i32_i64(local_tid_38396) -
                                       sext_i32_i64(squot32(local_tid_38396,
                                                            32) * 32 - 1));
                            
                            if (inactive_38413) {
                                x_33108 = x_33109;
                            }
                            if (!inactive_38413) {
                                float res_33110 = x_33108 + x_33109;
                                
                                x_33108 = res_33110;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)] =
                                x_33108;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38396, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38400)[sext_i32_i64(local_tid_38396)] =
                            x_33109;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38404) *
                      squot64(segred_group_sizze_33104,
                              segment_sizze_nonzzero_38393) +
                      sext_i32_i64(local_tid_38396), m_24751) &&
                slt64(sext_i32_i64(local_tid_38396),
                      squot64(segred_group_sizze_33104,
                              segment_sizze_nonzzero_38393))) {
                ((__global
                  float *) mem_37181)[sext_i32_i64(virt_group_id_38404) *
                                      squot64(segred_group_sizze_33104,
                                              segment_sizze_nonzzero_38393) +
                                      sext_i32_i64(local_tid_38396)] = ((__local
                                                                         float *) red_arr_mem_38400)[(sext_i32_i64(local_tid_38396) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38393 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33104
}
__kernel void mainzisegred_small_33079(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38340_backing_aligned_0,
                                       int64_t m_24751, int64_t N_24752,
                                       int64_t res_24764,
                                       int64_t num_groups_33091, __global
                                       unsigned char *images_mem_36652, __global
                                       unsigned char *mem_37178,
                                       int64_t segment_sizze_nonzzero_38333)
{
    #define segred_group_sizze_33090 (mainzisegred_group_sizze_33073)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38340_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38340_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38335;
    int32_t local_tid_38336;
    int64_t group_sizze_38339;
    int32_t wave_sizze_38338;
    int32_t group_tid_38337;
    
    global_tid_38335 = get_global_id(0);
    local_tid_38336 = get_local_id(0);
    group_sizze_38339 = get_local_size(0);
    wave_sizze_38338 = LOCKSTEP_WIDTH;
    group_tid_38337 = get_group_id(0);
    
    int32_t phys_tid_33079;
    
    phys_tid_33079 = global_tid_38335;
    
    __local char *red_arr_mem_38340;
    
    red_arr_mem_38340 = (__local char *) red_arr_mem_38340_backing_0;
    
    int32_t phys_group_id_38342;
    
    phys_group_id_38342 = get_group_id(0);
    for (int32_t i_38343 = 0; i_38343 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751,
                                          squot64(segred_group_sizze_33090,
                                                  segment_sizze_nonzzero_38333))) -
                   phys_group_id_38342, sext_i64_i32(num_groups_33091));
         i_38343++) {
        int32_t virt_group_id_38344 = phys_group_id_38342 + i_38343 *
                sext_i64_i32(num_groups_33091);
        int64_t gtid_33070 = squot64(sext_i32_i64(local_tid_38336),
                                     segment_sizze_nonzzero_38333) +
                sext_i32_i64(virt_group_id_38344) *
                squot64(segred_group_sizze_33090, segment_sizze_nonzzero_38333);
        int64_t gtid_33078 = srem64(sext_i32_i64(local_tid_38336), res_24764);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24764) && (slt64(gtid_33070, m_24751) &&
                                        slt64(sext_i32_i64(local_tid_38336),
                                              res_24764 *
                                              squot64(segred_group_sizze_33090,
                                                      segment_sizze_nonzzero_38333)))) {
                float x_33098 = ((__global
                                  float *) images_mem_36652)[gtid_33070 *
                                                             N_24752 +
                                                             gtid_33078];
                bool res_33099;
                
                res_33099 = futrts_isnan32(x_33098);
                
                bool cond_33100 = !res_33099;
                int32_t res_33101 = btoi_bool_i32(cond_33100);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)] =
                        res_33101;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24764)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_33094;
                int32_t x_33095;
                int32_t x_38345;
                int32_t x_38346;
                bool ltid_in_bounds_38348;
                
                ltid_in_bounds_38348 = slt64(sext_i32_i64(local_tid_38336),
                                             res_24764 *
                                             squot64(segred_group_sizze_33090,
                                                     segment_sizze_nonzzero_38333));
                
                int32_t skip_threads_38349;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38348) {
                        x_33095 = ((volatile __local
                                    int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)];
                        if ((local_tid_38336 - squot32(local_tid_38336, 32) *
                             32) == 0) {
                            x_33094 = x_33095;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38349 = 1;
                    while (slt32(skip_threads_38349, 32)) {
                        if (sle32(skip_threads_38349, local_tid_38336 -
                                  squot32(local_tid_38336, 32) * 32) &&
                            ltid_in_bounds_38348) {
                            // read operands
                            {
                                x_33094 = ((volatile __local
                                            int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336) -
                                                                          sext_i32_i64(skip_threads_38349)];
                            }
                            // perform operation
                            {
                                bool inactive_38350 =
                                     slt64(srem64(sext_i32_i64(local_tid_38336),
                                                  res_24764),
                                           sext_i32_i64(local_tid_38336) -
                                           sext_i32_i64(local_tid_38336 -
                                           skip_threads_38349));
                                
                                if (inactive_38350) {
                                    x_33094 = x_33095;
                                }
                                if (!inactive_38350) {
                                    int32_t res_33096 = add32(x_33094, x_33095);
                                    
                                    x_33094 = res_33096;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38338, skip_threads_38349)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38349, local_tid_38336 -
                                  squot32(local_tid_38336, 32) * 32) &&
                            ltid_in_bounds_38348) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)] =
                                    x_33094;
                                x_33095 = x_33094;
                            }
                        }
                        if (sle32(wave_sizze_38338, skip_threads_38349)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38349 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38336 - squot32(local_tid_38336, 32) * 32) ==
                        31 && ltid_in_bounds_38348) {
                        ((volatile __local
                          int32_t *) red_arr_mem_38340)[sext_i32_i64(squot32(local_tid_38336,
                                                                             32))] =
                            x_33094;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38351;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38336, 32) == 0 &&
                            ltid_in_bounds_38348) {
                            x_38346 = ((volatile __local
                                        int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)];
                            if ((local_tid_38336 - squot32(local_tid_38336,
                                                           32) * 32) == 0) {
                                x_38345 = x_38346;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38351 = 1;
                        while (slt32(skip_threads_38351, 32)) {
                            if (sle32(skip_threads_38351, local_tid_38336 -
                                      squot32(local_tid_38336, 32) * 32) &&
                                (squot32(local_tid_38336, 32) == 0 &&
                                 ltid_in_bounds_38348)) {
                                // read operands
                                {
                                    x_38345 = ((volatile __local
                                                int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336) -
                                                                              sext_i32_i64(skip_threads_38351)];
                                }
                                // perform operation
                                {
                                    bool inactive_38352 =
                                         slt64(srem64(sext_i32_i64(local_tid_38336 *
                                                      32 + 32 - 1), res_24764),
                                               sext_i32_i64(local_tid_38336 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38336 -
                                                             skip_threads_38351) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38352) {
                                        x_38345 = x_38346;
                                    }
                                    if (!inactive_38352) {
                                        int32_t res_38347 = add32(x_38345,
                                                                  x_38346);
                                        
                                        x_38345 = res_38347;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38338, skip_threads_38351)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38351, local_tid_38336 -
                                      squot32(local_tid_38336, 32) * 32) &&
                                (squot32(local_tid_38336, 32) == 0 &&
                                 ltid_in_bounds_38348)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)] =
                                        x_38345;
                                    x_38346 = x_38345;
                                }
                            }
                            if (sle32(wave_sizze_38338, skip_threads_38351)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38351 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38336, 32) == 0 ||
                          !ltid_in_bounds_38348)) {
                        // read operands
                        {
                            x_33095 = x_33094;
                            x_33094 = ((__local
                                        int32_t *) red_arr_mem_38340)[sext_i32_i64(squot32(local_tid_38336,
                                                                                           32)) -
                                                                      1];
                        }
                        // perform operation
                        {
                            bool inactive_38353 =
                                 slt64(srem64(sext_i32_i64(local_tid_38336),
                                              res_24764),
                                       sext_i32_i64(local_tid_38336) -
                                       sext_i32_i64(squot32(local_tid_38336,
                                                            32) * 32 - 1));
                            
                            if (inactive_38353) {
                                x_33094 = x_33095;
                            }
                            if (!inactive_38353) {
                                int32_t res_33096 = add32(x_33094, x_33095);
                                
                                x_33094 = res_33096;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)] =
                                x_33094;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38336, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_38340)[sext_i32_i64(local_tid_38336)] =
                            x_33095;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38344) *
                      squot64(segred_group_sizze_33090,
                              segment_sizze_nonzzero_38333) +
                      sext_i32_i64(local_tid_38336), m_24751) &&
                slt64(sext_i32_i64(local_tid_38336),
                      squot64(segred_group_sizze_33090,
                              segment_sizze_nonzzero_38333))) {
                ((__global
                  int32_t *) mem_37178)[sext_i32_i64(virt_group_id_38344) *
                                        squot64(segred_group_sizze_33090,
                                                segment_sizze_nonzzero_38333) +
                                        sext_i32_i64(local_tid_38336)] =
                    ((__local
                      int32_t *) red_arr_mem_38340)[(sext_i32_i64(local_tid_38336) +
                                                     1) *
                                                    segment_sizze_nonzzero_38333 -
                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33090
}
__kernel void mainzisegred_small_33230(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38509_backing_aligned_0,
                                       int64_t N_24750, int64_t m_24751,
                                       int64_t res_25112,
                                       int64_t num_groups_33248, __global
                                       unsigned char *res_mem_37111, __global
                                       unsigned char *res_mem_37190, __global
                                       unsigned char *res_mem_37191, __global
                                       unsigned char *mem_37240,
                                       int64_t segment_sizze_nonzzero_38502)
{
    #define segred_group_sizze_33247 (mainzisegred_group_sizze_33224)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38509_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38509_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38504;
    int32_t local_tid_38505;
    int64_t group_sizze_38508;
    int32_t wave_sizze_38507;
    int32_t group_tid_38506;
    
    global_tid_38504 = get_global_id(0);
    local_tid_38505 = get_local_id(0);
    group_sizze_38508 = get_local_size(0);
    wave_sizze_38507 = LOCKSTEP_WIDTH;
    group_tid_38506 = get_group_id(0);
    
    int32_t phys_tid_33230;
    
    phys_tid_33230 = global_tid_38504;
    
    __local char *red_arr_mem_38509;
    
    red_arr_mem_38509 = (__local char *) red_arr_mem_38509_backing_0;
    
    int32_t phys_group_id_38511;
    
    phys_group_id_38511 = get_group_id(0);
    for (int32_t i_38512 = 0; i_38512 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751,
                                          squot64(segred_group_sizze_33247,
                                                  segment_sizze_nonzzero_38502))) -
                   phys_group_id_38511, sext_i64_i32(num_groups_33248));
         i_38512++) {
        int32_t virt_group_id_38513 = phys_group_id_38511 + i_38512 *
                sext_i64_i32(num_groups_33248);
        int64_t gtid_33221 = squot64(sext_i32_i64(local_tid_38505),
                                     segment_sizze_nonzzero_38502) +
                sext_i32_i64(virt_group_id_38513) *
                squot64(segred_group_sizze_33247, segment_sizze_nonzzero_38502);
        int64_t gtid_33229 = srem64(sext_i32_i64(local_tid_38505), res_25112);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_25112) && (slt64(gtid_33221, m_24751) &&
                                        slt64(sext_i32_i64(local_tid_38505),
                                              res_25112 *
                                              squot64(segred_group_sizze_33247,
                                                      segment_sizze_nonzzero_38502)))) {
                int32_t x_33256 = ((__global
                                    int32_t *) res_mem_37190)[gtid_33221];
                int32_t index_primexp_35363 = sext_i64_i32(gtid_33229);
                bool cond_33258 = slt32(index_primexp_35363, x_33256);
                float res_33259;
                
                if (cond_33258) {
                    int32_t x_33255 = ((__global
                                        int32_t *) res_mem_37191)[gtid_33221];
                    int32_t x_33260 = add32(x_33255, index_primexp_35363);
                    int32_t x_33261 = sub32(x_33260, x_33256);
                    int32_t i_33262 = add32(1, x_33261);
                    int64_t i_33263 = sext_i32_i64(i_33262);
                    float res_33264 = ((__global
                                        float *) res_mem_37111)[gtid_33221 *
                                                                N_24750 +
                                                                i_33263];
                    
                    res_33259 = res_33264;
                } else {
                    res_33259 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)] =
                        res_33259;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_25112)) {
            // perform segmented scan to imitate reduction
            {
                float x_33251;
                float x_33252;
                float x_38514;
                float x_38515;
                bool ltid_in_bounds_38517;
                
                ltid_in_bounds_38517 = slt64(sext_i32_i64(local_tid_38505),
                                             res_25112 *
                                             squot64(segred_group_sizze_33247,
                                                     segment_sizze_nonzzero_38502));
                
                int32_t skip_threads_38518;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38517) {
                        x_33252 = ((volatile __local
                                    float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)];
                        if ((local_tid_38505 - squot32(local_tid_38505, 32) *
                             32) == 0) {
                            x_33251 = x_33252;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38518 = 1;
                    while (slt32(skip_threads_38518, 32)) {
                        if (sle32(skip_threads_38518, local_tid_38505 -
                                  squot32(local_tid_38505, 32) * 32) &&
                            ltid_in_bounds_38517) {
                            // read operands
                            {
                                x_33251 = ((volatile __local
                                            float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505) -
                                                                        sext_i32_i64(skip_threads_38518)];
                            }
                            // perform operation
                            {
                                bool inactive_38519 =
                                     slt64(srem64(sext_i32_i64(local_tid_38505),
                                                  res_25112),
                                           sext_i32_i64(local_tid_38505) -
                                           sext_i32_i64(local_tid_38505 -
                                           skip_threads_38518));
                                
                                if (inactive_38519) {
                                    x_33251 = x_33252;
                                }
                                if (!inactive_38519) {
                                    float res_33253 = x_33251 + x_33252;
                                    
                                    x_33251 = res_33253;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38507, skip_threads_38518)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38518, local_tid_38505 -
                                  squot32(local_tid_38505, 32) * 32) &&
                            ltid_in_bounds_38517) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)] =
                                    x_33251;
                                x_33252 = x_33251;
                            }
                        }
                        if (sle32(wave_sizze_38507, skip_threads_38518)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38518 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38505 - squot32(local_tid_38505, 32) * 32) ==
                        31 && ltid_in_bounds_38517) {
                        ((volatile __local
                          float *) red_arr_mem_38509)[sext_i32_i64(squot32(local_tid_38505,
                                                                           32))] =
                            x_33251;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38520;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38505, 32) == 0 &&
                            ltid_in_bounds_38517) {
                            x_38515 = ((volatile __local
                                        float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)];
                            if ((local_tid_38505 - squot32(local_tid_38505,
                                                           32) * 32) == 0) {
                                x_38514 = x_38515;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38520 = 1;
                        while (slt32(skip_threads_38520, 32)) {
                            if (sle32(skip_threads_38520, local_tid_38505 -
                                      squot32(local_tid_38505, 32) * 32) &&
                                (squot32(local_tid_38505, 32) == 0 &&
                                 ltid_in_bounds_38517)) {
                                // read operands
                                {
                                    x_38514 = ((volatile __local
                                                float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505) -
                                                                            sext_i32_i64(skip_threads_38520)];
                                }
                                // perform operation
                                {
                                    bool inactive_38521 =
                                         slt64(srem64(sext_i32_i64(local_tid_38505 *
                                                      32 + 32 - 1), res_25112),
                                               sext_i32_i64(local_tid_38505 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38505 -
                                                             skip_threads_38520) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38521) {
                                        x_38514 = x_38515;
                                    }
                                    if (!inactive_38521) {
                                        float res_38516 = x_38514 + x_38515;
                                        
                                        x_38514 = res_38516;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38507, skip_threads_38520)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38520, local_tid_38505 -
                                      squot32(local_tid_38505, 32) * 32) &&
                                (squot32(local_tid_38505, 32) == 0 &&
                                 ltid_in_bounds_38517)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)] =
                                        x_38514;
                                    x_38515 = x_38514;
                                }
                            }
                            if (sle32(wave_sizze_38507, skip_threads_38520)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38520 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38505, 32) == 0 ||
                          !ltid_in_bounds_38517)) {
                        // read operands
                        {
                            x_33252 = x_33251;
                            x_33251 = ((__local
                                        float *) red_arr_mem_38509)[sext_i32_i64(squot32(local_tid_38505,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38522 =
                                 slt64(srem64(sext_i32_i64(local_tid_38505),
                                              res_25112),
                                       sext_i32_i64(local_tid_38505) -
                                       sext_i32_i64(squot32(local_tid_38505,
                                                            32) * 32 - 1));
                            
                            if (inactive_38522) {
                                x_33251 = x_33252;
                            }
                            if (!inactive_38522) {
                                float res_33253 = x_33251 + x_33252;
                                
                                x_33251 = res_33253;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)] =
                                x_33251;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38505, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38509)[sext_i32_i64(local_tid_38505)] =
                            x_33252;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38513) *
                      squot64(segred_group_sizze_33247,
                              segment_sizze_nonzzero_38502) +
                      sext_i32_i64(local_tid_38505), m_24751) &&
                slt64(sext_i32_i64(local_tid_38505),
                      squot64(segred_group_sizze_33247,
                              segment_sizze_nonzzero_38502))) {
                ((__global
                  float *) mem_37240)[sext_i32_i64(virt_group_id_38513) *
                                      squot64(segred_group_sizze_33247,
                                              segment_sizze_nonzzero_38502) +
                                      sext_i32_i64(local_tid_38505)] = ((__local
                                                                         float *) red_arr_mem_38509)[(sext_i32_i64(local_tid_38505) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38502 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33247
}
__kernel void mainzisegred_small_34765(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_38721_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_38719_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_38717_backing_aligned_2,
                                       int64_t m_24751,
                                       int64_t iota32_arg_25134,
                                       int64_t num_groups_34938, __global
                                       unsigned char *mem_37246, __global
                                       unsigned char *mem_37406, __global
                                       unsigned char *mem_37408, __global
                                       unsigned char *mem_37412, __global
                                       unsigned char *mem_37415, __global
                                       unsigned char *mem_37417, __global
                                       unsigned char *mem_37419,
                                       int64_t segment_sizze_nonzzero_38710)
{
    #define segred_group_sizze_34937 (mainzisegred_group_sizze_34759)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38721_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38721_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38719_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38719_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38717_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38717_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38712;
    int32_t local_tid_38713;
    int64_t group_sizze_38716;
    int32_t wave_sizze_38715;
    int32_t group_tid_38714;
    
    global_tid_38712 = get_global_id(0);
    local_tid_38713 = get_local_id(0);
    group_sizze_38716 = get_local_size(0);
    wave_sizze_38715 = LOCKSTEP_WIDTH;
    group_tid_38714 = get_group_id(0);
    
    int32_t phys_tid_34765;
    
    phys_tid_34765 = global_tid_38712;
    
    __local char *red_arr_mem_38717;
    
    red_arr_mem_38717 = (__local char *) red_arr_mem_38717_backing_0;
    
    __local char *red_arr_mem_38719;
    
    red_arr_mem_38719 = (__local char *) red_arr_mem_38719_backing_1;
    
    __local char *red_arr_mem_38721;
    
    red_arr_mem_38721 = (__local char *) red_arr_mem_38721_backing_2;
    
    int32_t phys_group_id_38723;
    
    phys_group_id_38723 = get_group_id(0);
    for (int32_t i_38724 = 0; i_38724 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24751,
                                          squot64(segred_group_sizze_34937,
                                                  segment_sizze_nonzzero_38710))) -
                   phys_group_id_38723, sext_i64_i32(num_groups_34938));
         i_38724++) {
        int32_t virt_group_id_38725 = phys_group_id_38723 + i_38724 *
                sext_i64_i32(num_groups_34938);
        int64_t gtid_34756 = squot64(sext_i32_i64(local_tid_38713),
                                     segment_sizze_nonzzero_38710) +
                sext_i32_i64(virt_group_id_38725) *
                squot64(segred_group_sizze_34937, segment_sizze_nonzzero_38710);
        int64_t gtid_34764 = srem64(sext_i32_i64(local_tid_38713),
                                    iota32_arg_25134);
        
        // apply map function if in bounds
        {
            if (slt64(0, iota32_arg_25134) && (slt64(gtid_34756, m_24751) &&
                                               slt64(sext_i32_i64(local_tid_38713),
                                                     iota32_arg_25134 *
                                                     squot64(segred_group_sizze_34937,
                                                             segment_sizze_nonzzero_38710)))) {
                int32_t y_34957 = ((__global int32_t *) mem_37408)[gtid_34756];
                float y_34958 = ((__global float *) mem_37406)[gtid_34756];
                float x_34962 = ((__global float *) mem_37412)[gtid_34756 *
                                                               iota32_arg_25134 +
                                                               gtid_34764];
                float x_34963 = ((__global float *) mem_37246)[gtid_34764];
                int32_t index_primexp_35380 = sext_i64_i32(gtid_34764);
                float res_34966 = x_34962 / y_34958;
                bool cond_34967 = slt32(index_primexp_35380, y_34957);
                bool res_34968;
                
                res_34968 = futrts_isnan32(res_34966);
                
                bool res_34969 = !res_34968;
                bool x_34970 = cond_34967 && res_34969;
                float res_34971 = (float) fabs(res_34966);
                bool res_34972 = x_34963 < res_34971;
                bool x_34973 = x_34970 && res_34972;
                float res_34974;
                
                if (cond_34967) {
                    res_34974 = res_34966;
                } else {
                    res_34974 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)] =
                        x_34973;
                    ((__local
                      int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)] =
                        index_primexp_35380;
                    ((__local
                      float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)] =
                        res_34974;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)] = 0;
                ((__local
                  int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)] =
                    -1;
                ((__local
                  float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, iota32_arg_25134)) {
            // perform segmented scan to imitate reduction
            {
                bool x_34943;
                int32_t x_34944;
                float x_34945;
                bool x_34946;
                int32_t x_34947;
                float x_34948;
                bool x_38726;
                int32_t x_38727;
                float x_38728;
                bool x_38729;
                int32_t x_38730;
                float x_38731;
                bool ltid_in_bounds_38740;
                
                ltid_in_bounds_38740 = slt64(sext_i32_i64(local_tid_38713),
                                             iota32_arg_25134 *
                                             squot64(segred_group_sizze_34937,
                                                     segment_sizze_nonzzero_38710));
                
                int32_t skip_threads_38741;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38740) {
                        x_34946 = ((volatile __local
                                    bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)];
                        x_34947 = ((volatile __local
                                    int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)];
                        x_34948 = ((volatile __local
                                    float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)];
                        if ((local_tid_38713 - squot32(local_tid_38713, 32) *
                             32) == 0) {
                            x_34943 = x_34946;
                            x_34944 = x_34947;
                            x_34945 = x_34948;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38741 = 1;
                    while (slt32(skip_threads_38741, 32)) {
                        if (sle32(skip_threads_38741, local_tid_38713 -
                                  squot32(local_tid_38713, 32) * 32) &&
                            ltid_in_bounds_38740) {
                            // read operands
                            {
                                x_34943 = ((volatile __local
                                            bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713) -
                                                                       sext_i32_i64(skip_threads_38741)];
                                x_34944 = ((volatile __local
                                            int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713) -
                                                                          sext_i32_i64(skip_threads_38741)];
                                x_34945 = ((volatile __local
                                            float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713) -
                                                                        sext_i32_i64(skip_threads_38741)];
                            }
                            // perform operation
                            {
                                bool inactive_38742 =
                                     slt64(srem64(sext_i32_i64(local_tid_38713),
                                                  iota32_arg_25134),
                                           sext_i32_i64(local_tid_38713) -
                                           sext_i32_i64(local_tid_38713 -
                                           skip_threads_38741));
                                
                                if (inactive_38742) {
                                    x_34943 = x_34946;
                                    x_34944 = x_34947;
                                    x_34945 = x_34948;
                                }
                                if (!inactive_38742) {
                                    bool res_34949;
                                    int32_t res_34950;
                                    
                                    if (x_34943) {
                                        res_34949 = x_34943;
                                        res_34950 = x_34944;
                                    } else {
                                        bool x_34951 = x_34946 && x_34946;
                                        bool x_34952 = !x_34946;
                                        bool y_34953 = x_34943 && x_34952;
                                        bool res_34954 = x_34951 || y_34953;
                                        int32_t res_34955;
                                        
                                        if (x_34946) {
                                            res_34955 = x_34947;
                                        } else {
                                            res_34955 = x_34944;
                                        }
                                        res_34949 = res_34954;
                                        res_34950 = res_34955;
                                    }
                                    
                                    float res_34956 = x_34945 + x_34948;
                                    
                                    x_34943 = res_34949;
                                    x_34944 = res_34950;
                                    x_34945 = res_34956;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38715, skip_threads_38741)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38741, local_tid_38713 -
                                  squot32(local_tid_38713, 32) * 32) &&
                            ltid_in_bounds_38740) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)] =
                                    x_34943;
                                x_34946 = x_34943;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)] =
                                    x_34944;
                                x_34947 = x_34944;
                                ((volatile __local
                                  float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)] =
                                    x_34945;
                                x_34948 = x_34945;
                            }
                        }
                        if (sle32(wave_sizze_38715, skip_threads_38741)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38741 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38713 - squot32(local_tid_38713, 32) * 32) ==
                        31 && ltid_in_bounds_38740) {
                        ((volatile __local
                          bool *) red_arr_mem_38717)[sext_i32_i64(squot32(local_tid_38713,
                                                                          32))] =
                            x_34943;
                        ((volatile __local
                          int32_t *) red_arr_mem_38719)[sext_i32_i64(squot32(local_tid_38713,
                                                                             32))] =
                            x_34944;
                        ((volatile __local
                          float *) red_arr_mem_38721)[sext_i32_i64(squot32(local_tid_38713,
                                                                           32))] =
                            x_34945;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38743;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38713, 32) == 0 &&
                            ltid_in_bounds_38740) {
                            x_38729 = ((volatile __local
                                        bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)];
                            x_38730 = ((volatile __local
                                        int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)];
                            x_38731 = ((volatile __local
                                        float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)];
                            if ((local_tid_38713 - squot32(local_tid_38713,
                                                           32) * 32) == 0) {
                                x_38726 = x_38729;
                                x_38727 = x_38730;
                                x_38728 = x_38731;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38743 = 1;
                        while (slt32(skip_threads_38743, 32)) {
                            if (sle32(skip_threads_38743, local_tid_38713 -
                                      squot32(local_tid_38713, 32) * 32) &&
                                (squot32(local_tid_38713, 32) == 0 &&
                                 ltid_in_bounds_38740)) {
                                // read operands
                                {
                                    x_38726 = ((volatile __local
                                                bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713) -
                                                                           sext_i32_i64(skip_threads_38743)];
                                    x_38727 = ((volatile __local
                                                int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713) -
                                                                              sext_i32_i64(skip_threads_38743)];
                                    x_38728 = ((volatile __local
                                                float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713) -
                                                                            sext_i32_i64(skip_threads_38743)];
                                }
                                // perform operation
                                {
                                    bool inactive_38744 =
                                         slt64(srem64(sext_i32_i64(local_tid_38713 *
                                                      32 + 32 - 1),
                                                      iota32_arg_25134),
                                               sext_i32_i64(local_tid_38713 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38713 -
                                                             skip_threads_38743) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38744) {
                                        x_38726 = x_38729;
                                        x_38727 = x_38730;
                                        x_38728 = x_38731;
                                    }
                                    if (!inactive_38744) {
                                        bool res_38732;
                                        int32_t res_38733;
                                        
                                        if (x_38726) {
                                            res_38732 = x_38726;
                                            res_38733 = x_38727;
                                        } else {
                                            bool x_38734 = x_38729 && x_38729;
                                            bool x_38735 = !x_38729;
                                            bool y_38736 = x_38726 && x_38735;
                                            bool res_38737 = x_38734 || y_38736;
                                            int32_t res_38738;
                                            
                                            if (x_38729) {
                                                res_38738 = x_38730;
                                            } else {
                                                res_38738 = x_38727;
                                            }
                                            res_38732 = res_38737;
                                            res_38733 = res_38738;
                                        }
                                        
                                        float res_38739 = x_38728 + x_38731;
                                        
                                        x_38726 = res_38732;
                                        x_38727 = res_38733;
                                        x_38728 = res_38739;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38715, skip_threads_38743)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38743, local_tid_38713 -
                                      squot32(local_tid_38713, 32) * 32) &&
                                (squot32(local_tid_38713, 32) == 0 &&
                                 ltid_in_bounds_38740)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)] =
                                        x_38726;
                                    x_38729 = x_38726;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)] =
                                        x_38727;
                                    x_38730 = x_38727;
                                    ((volatile __local
                                      float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)] =
                                        x_38728;
                                    x_38731 = x_38728;
                                }
                            }
                            if (sle32(wave_sizze_38715, skip_threads_38743)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38743 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38713, 32) == 0 ||
                          !ltid_in_bounds_38740)) {
                        // read operands
                        {
                            x_34946 = x_34943;
                            x_34947 = x_34944;
                            x_34948 = x_34945;
                            x_34943 = ((__local
                                        bool *) red_arr_mem_38717)[sext_i32_i64(squot32(local_tid_38713,
                                                                                        32)) -
                                                                   1];
                            x_34944 = ((__local
                                        int32_t *) red_arr_mem_38719)[sext_i32_i64(squot32(local_tid_38713,
                                                                                           32)) -
                                                                      1];
                            x_34945 = ((__local
                                        float *) red_arr_mem_38721)[sext_i32_i64(squot32(local_tid_38713,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38745 =
                                 slt64(srem64(sext_i32_i64(local_tid_38713),
                                              iota32_arg_25134),
                                       sext_i32_i64(local_tid_38713) -
                                       sext_i32_i64(squot32(local_tid_38713,
                                                            32) * 32 - 1));
                            
                            if (inactive_38745) {
                                x_34943 = x_34946;
                                x_34944 = x_34947;
                                x_34945 = x_34948;
                            }
                            if (!inactive_38745) {
                                bool res_34949;
                                int32_t res_34950;
                                
                                if (x_34943) {
                                    res_34949 = x_34943;
                                    res_34950 = x_34944;
                                } else {
                                    bool x_34951 = x_34946 && x_34946;
                                    bool x_34952 = !x_34946;
                                    bool y_34953 = x_34943 && x_34952;
                                    bool res_34954 = x_34951 || y_34953;
                                    int32_t res_34955;
                                    
                                    if (x_34946) {
                                        res_34955 = x_34947;
                                    } else {
                                        res_34955 = x_34944;
                                    }
                                    res_34949 = res_34954;
                                    res_34950 = res_34955;
                                }
                                
                                float res_34956 = x_34945 + x_34948;
                                
                                x_34943 = res_34949;
                                x_34944 = res_34950;
                                x_34945 = res_34956;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)] =
                                x_34943;
                            ((__local
                              int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)] =
                                x_34944;
                            ((__local
                              float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)] =
                                x_34945;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38713, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_38717)[sext_i32_i64(local_tid_38713)] =
                            x_34946;
                        ((__local
                          int32_t *) red_arr_mem_38719)[sext_i32_i64(local_tid_38713)] =
                            x_34947;
                        ((__local
                          float *) red_arr_mem_38721)[sext_i32_i64(local_tid_38713)] =
                            x_34948;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38725) *
                      squot64(segred_group_sizze_34937,
                              segment_sizze_nonzzero_38710) +
                      sext_i32_i64(local_tid_38713), m_24751) &&
                slt64(sext_i32_i64(local_tid_38713),
                      squot64(segred_group_sizze_34937,
                              segment_sizze_nonzzero_38710))) {
                ((__global
                  bool *) mem_37415)[sext_i32_i64(virt_group_id_38725) *
                                     squot64(segred_group_sizze_34937,
                                             segment_sizze_nonzzero_38710) +
                                     sext_i32_i64(local_tid_38713)] = ((__local
                                                                        bool *) red_arr_mem_38717)[(sext_i32_i64(local_tid_38713) +
                                                                                                    1) *
                                                                                                   segment_sizze_nonzzero_38710 -
                                                                                                   1];
                ((__global
                  int32_t *) mem_37417)[sext_i32_i64(virt_group_id_38725) *
                                        squot64(segred_group_sizze_34937,
                                                segment_sizze_nonzzero_38710) +
                                        sext_i32_i64(local_tid_38713)] =
                    ((__local
                      int32_t *) red_arr_mem_38719)[(sext_i32_i64(local_tid_38713) +
                                                     1) *
                                                    segment_sizze_nonzzero_38710 -
                                                    1];
                ((__global
                  float *) mem_37419)[sext_i32_i64(virt_group_id_38725) *
                                      squot64(segred_group_sizze_34937,
                                              segment_sizze_nonzzero_38710) +
                                      sext_i32_i64(local_tid_38713)] = ((__local
                                                                         float *) red_arr_mem_38721)[(sext_i32_i64(local_tid_38713) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38710 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_34937
}
__kernel void mainDetailedzicopy_37932(int64_t m_24014, int64_t nm_24165,
                                       int64_t ctx_param_ext_36797,
                                       int64_t ctx_param_ext_36798,
                                       int64_t ctx_param_ext_36800, __global
                                       unsigned char *mem_param_36802, __global
                                       unsigned char *mem_36807)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_gtid_37932;
    int32_t copy_ltid_37933;
    int32_t copy_gid_37934;
    
    copy_gtid_37932 = get_global_id(0);
    copy_ltid_37933 = get_local_id(0);
    copy_gid_37934 = get_group_id(0);
    if (slt64(sext_i32_i64(copy_gtid_37932), m_24014 * nm_24165)) {
        ((__global float *) mem_36807)[(sext_i32_i64(copy_gtid_37932) -
                                        squot64(sext_i32_i64(copy_gtid_37932),
                                                nm_24165) * nm_24165) *
                                       m_24014 +
                                       squot64(sext_i32_i64(copy_gtid_37932),
                                               nm_24165)] = ((__global
                                                              float *) mem_param_36802)[ctx_param_ext_36797 +
                                                                                        (squot64(sext_i32_i64(copy_gtid_37932),
                                                                                                 nm_24165) *
                                                                                         ctx_param_ext_36798 +
                                                                                         (sext_i32_i64(copy_gtid_37932) -
                                                                                          squot64(sext_i32_i64(copy_gtid_37932),
                                                                                                  nm_24165) *
                                                                                          nm_24165) *
                                                                                         ctx_param_ext_36800)];
    }
    
  error_0:
    return;
}
__kernel void mainDetailedziscan_stage1_27862(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38267_backing_aligned_0,
                                              int64_t N_24013, int64_t m_24014,
                                              int64_t N_24015, __global
                                              unsigned char *images_mem_36652,
                                              __global
                                              unsigned char *res_mem_37073,
                                              __global unsigned char *mem_37102,
                                              __global unsigned char *mem_37105,
                                              int32_t num_threads_38261)
{
    #define segscan_group_sizze_27879 (mainDetailedzisegscan_group_sizze_27856)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38267_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38267_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38262;
    int32_t local_tid_38263;
    int64_t group_sizze_38266;
    int32_t wave_sizze_38265;
    int32_t group_tid_38264;
    
    global_tid_38262 = get_global_id(0);
    local_tid_38263 = get_local_id(0);
    group_sizze_38266 = get_local_size(0);
    wave_sizze_38265 = LOCKSTEP_WIDTH;
    group_tid_38264 = get_group_id(0);
    
    int32_t phys_tid_27862;
    
    phys_tid_27862 = global_tid_38262;
    
    __local char *scan_arr_mem_38267;
    
    scan_arr_mem_38267 = (__local char *) scan_arr_mem_38267_backing_0;
    
    int64_t x_27884;
    int64_t x_27885;
    
    x_27884 = 0;
    for (int64_t j_38269 = 0; j_38269 < sdiv_up64(m_24014 * N_24013,
                                                  sext_i32_i64(num_threads_38261));
         j_38269++) {
        int64_t chunk_offset_38270 = segscan_group_sizze_27879 * j_38269 +
                sext_i32_i64(group_tid_38264) * (segscan_group_sizze_27879 *
                                                 sdiv_up64(m_24014 * N_24013,
                                                           sext_i32_i64(num_threads_38261)));
        int64_t flat_idx_38271 = chunk_offset_38270 +
                sext_i32_i64(local_tid_38263);
        int64_t gtid_27853 = squot64(flat_idx_38271, N_24013);
        int64_t gtid_27861 = flat_idx_38271 - squot64(flat_idx_38271, N_24013) *
                N_24013;
        
        // threads in bounds read input
        {
            if (slt64(gtid_27853, m_24014) && slt64(gtid_27861, N_24013)) {
                float x_27889 = ((__global
                                  float *) images_mem_36652)[gtid_27853 *
                                                             N_24015 +
                                                             gtid_27861];
                bool res_27891;
                
                res_27891 = futrts_isnan32(x_27889);
                
                bool cond_27892 = !res_27891;
                float res_27893;
                
                if (cond_27892) {
                    float x_27890 = ((__global
                                      float *) res_mem_37073)[gtid_27853 *
                                                              N_24013 +
                                                              gtid_27861];
                    float res_27894 = x_27889 - x_27890;
                    
                    res_27893 = res_27894;
                } else {
                    res_27893 = NAN;
                }
                
                bool res_27895;
                
                res_27895 = futrts_isnan32(res_27893);
                
                bool res_27896 = !res_27895;
                int64_t res_27897 = btoi_bool_i64(res_27896);
                
                // write to-scan values to parameters
                {
                    x_27885 = res_27897;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_37105)[gtid_27853 * N_24013 +
                                                   gtid_27861] = res_27893;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_27853, m_24014) && slt64(gtid_27861,
                                                          N_24013))) {
                    x_27885 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_27886 = add64(x_27884, x_27885);
                
                ((__local
                  int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)] =
                    res_27886;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38272;
            int64_t x_38273;
            int64_t x_38275;
            int64_t x_38276;
            bool ltid_in_bounds_38278;
            
            ltid_in_bounds_38278 = slt64(sext_i32_i64(local_tid_38263),
                                         segscan_group_sizze_27879);
            
            int32_t skip_threads_38279;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38278) {
                    x_38273 = ((volatile __local
                                int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)];
                    if ((local_tid_38263 - squot32(local_tid_38263, 32) * 32) ==
                        0) {
                        x_38272 = x_38273;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38279 = 1;
                while (slt32(skip_threads_38279, 32)) {
                    if (sle32(skip_threads_38279, local_tid_38263 -
                              squot32(local_tid_38263, 32) * 32) &&
                        ltid_in_bounds_38278) {
                        // read operands
                        {
                            x_38272 = ((volatile __local
                                        int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263) -
                                                                       sext_i32_i64(skip_threads_38279)];
                        }
                        // perform operation
                        {
                            bool inactive_38280 =
                                 slt64(srem64(sext_i32_i64(local_tid_38263) +
                                              chunk_offset_38270, N_24013),
                                       sext_i32_i64(local_tid_38263) +
                                       chunk_offset_38270 -
                                       (sext_i32_i64(local_tid_38263 -
                                        skip_threads_38279) +
                                        chunk_offset_38270));
                            
                            if (inactive_38280) {
                                x_38272 = x_38273;
                            }
                            if (!inactive_38280) {
                                int64_t res_38274 = add64(x_38272, x_38273);
                                
                                x_38272 = res_38274;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38265, skip_threads_38279)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38279, local_tid_38263 -
                              squot32(local_tid_38263, 32) * 32) &&
                        ltid_in_bounds_38278) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)] =
                                x_38272;
                            x_38273 = x_38272;
                        }
                    }
                    if (sle32(wave_sizze_38265, skip_threads_38279)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38279 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38263 - squot32(local_tid_38263, 32) * 32) ==
                    31 && ltid_in_bounds_38278) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38267)[sext_i32_i64(squot32(local_tid_38263,
                                                                          32))] =
                        x_38272;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38281;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38263, 32) == 0 &&
                        ltid_in_bounds_38278) {
                        x_38276 = ((volatile __local
                                    int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)];
                        if ((local_tid_38263 - squot32(local_tid_38263, 32) *
                             32) == 0) {
                            x_38275 = x_38276;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38281 = 1;
                    while (slt32(skip_threads_38281, 32)) {
                        if (sle32(skip_threads_38281, local_tid_38263 -
                                  squot32(local_tid_38263, 32) * 32) &&
                            (squot32(local_tid_38263, 32) == 0 &&
                             ltid_in_bounds_38278)) {
                            // read operands
                            {
                                x_38275 = ((volatile __local
                                            int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263) -
                                                                           sext_i32_i64(skip_threads_38281)];
                            }
                            // perform operation
                            {
                                bool inactive_38282 =
                                     slt64(srem64(sext_i32_i64(local_tid_38263 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38270, N_24013),
                                           sext_i32_i64(local_tid_38263 * 32 +
                                           32 - 1) + chunk_offset_38270 -
                                           (sext_i32_i64((local_tid_38263 -
                                                          skip_threads_38281) *
                                            32 + 32 - 1) + chunk_offset_38270));
                                
                                if (inactive_38282) {
                                    x_38275 = x_38276;
                                }
                                if (!inactive_38282) {
                                    int64_t res_38277 = add64(x_38275, x_38276);
                                    
                                    x_38275 = res_38277;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38265, skip_threads_38281)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38281, local_tid_38263 -
                                  squot32(local_tid_38263, 32) * 32) &&
                            (squot32(local_tid_38263, 32) == 0 &&
                             ltid_in_bounds_38278)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)] =
                                    x_38275;
                                x_38276 = x_38275;
                            }
                        }
                        if (sle32(wave_sizze_38265, skip_threads_38281)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38281 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38263, 32) == 0 ||
                      !ltid_in_bounds_38278)) {
                    // read operands
                    {
                        x_38273 = x_38272;
                        x_38272 = ((__local
                                    int64_t *) scan_arr_mem_38267)[sext_i32_i64(squot32(local_tid_38263,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_38283 =
                             slt64(srem64(sext_i32_i64(local_tid_38263) +
                                          chunk_offset_38270, N_24013),
                                   sext_i32_i64(local_tid_38263) +
                                   chunk_offset_38270 -
                                   (sext_i32_i64(squot32(local_tid_38263, 32) *
                                    32 - 1) + chunk_offset_38270));
                        
                        if (inactive_38283) {
                            x_38272 = x_38273;
                        }
                        if (!inactive_38283) {
                            int64_t res_38274 = add64(x_38272, x_38273);
                            
                            x_38272 = res_38274;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)] =
                            x_38272;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38263, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)] =
                        x_38273;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_27853, m_24014) && slt64(gtid_27861, N_24013)) {
                    ((__global int64_t *) mem_37102)[gtid_27853 * N_24013 +
                                                     gtid_27861] = ((__local
                                                                     int64_t *) scan_arr_mem_38267)[sext_i32_i64(local_tid_38263)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38284 = slt64(srem64(chunk_offset_38270 +
                                                          segscan_group_sizze_27879,
                                                          N_24013),
                                                   chunk_offset_38270 +
                                                   segscan_group_sizze_27879 -
                                                   (chunk_offset_38270 +
                                                    segscan_group_sizze_27879 -
                                                    1));
                bool should_load_carry_38285 = local_tid_38263 == 0 &&
                     !crosses_segment_38284;
                
                if (should_load_carry_38285) {
                    x_27884 = ((__local
                                int64_t *) scan_arr_mem_38267)[segscan_group_sizze_27879 -
                                                               1];
                }
                if (!should_load_carry_38285) {
                    x_27884 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_27879
}
__kernel void mainDetailedziscan_stage1_29636(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38900_backing_aligned_0,
                                              __local volatile
                                              int64_t *scan_arr_mem_38898_backing_aligned_1,
                                              __local volatile
                                              int64_t *scan_arr_mem_38896_backing_aligned_2,
                                              __local volatile
                                              int64_t *scan_arr_mem_38894_backing_aligned_3,
                                              int64_t m_24014,
                                              int64_t iota32_arg_24397,
                                              int32_t lifted_2_radix_sort_step_arg_30216,
                                              int32_t lifted_0_get_bit_arg_30217,
                                              unsigned char res_30218,
                                              unsigned char res_30219, __global
                                              unsigned char *mem_param_37490,
                                              __global unsigned char *mem_37517,
                                              __global unsigned char *mem_37520,
                                              __global unsigned char *mem_37523,
                                              __global unsigned char *mem_37526,
                                              __global unsigned char *mem_37529,
                                              int32_t num_threads_38888)
{
    #define segscan_group_sizze_30311 (mainDetailedzisegscan_group_sizze_29630)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38900_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_38900_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_38898_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_38898_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_38896_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_38896_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_38894_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38894_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38889;
    int32_t local_tid_38890;
    int64_t group_sizze_38893;
    int32_t wave_sizze_38892;
    int32_t group_tid_38891;
    
    global_tid_38889 = get_global_id(0);
    local_tid_38890 = get_local_id(0);
    group_sizze_38893 = get_local_size(0);
    wave_sizze_38892 = LOCKSTEP_WIDTH;
    group_tid_38891 = get_group_id(0);
    
    int32_t phys_tid_29636;
    
    phys_tid_29636 = global_tid_38889;
    
    __local char *scan_arr_mem_38894;
    __local char *scan_arr_mem_38896;
    __local char *scan_arr_mem_38898;
    __local char *scan_arr_mem_38900;
    
    scan_arr_mem_38894 = (__local char *) scan_arr_mem_38894_backing_0;
    scan_arr_mem_38896 = (__local char *) scan_arr_mem_38896_backing_1;
    scan_arr_mem_38898 = (__local char *) scan_arr_mem_38898_backing_2;
    scan_arr_mem_38900 = (__local char *) scan_arr_mem_38900_backing_3;
    
    int64_t x_30319;
    int64_t x_30320;
    int64_t x_30321;
    int64_t x_30322;
    int64_t x_30323;
    int64_t x_30324;
    int64_t x_30325;
    int64_t x_30326;
    
    x_30319 = 0;
    x_30320 = 0;
    x_30321 = 0;
    x_30322 = 0;
    for (int64_t j_38902 = 0; j_38902 < sdiv_up64(m_24014 * iota32_arg_24397,
                                                  sext_i32_i64(num_threads_38888));
         j_38902++) {
        int64_t chunk_offset_38903 = segscan_group_sizze_30311 * j_38902 +
                sext_i32_i64(group_tid_38891) * (segscan_group_sizze_30311 *
                                                 sdiv_up64(m_24014 *
                                                           iota32_arg_24397,
                                                           sext_i32_i64(num_threads_38888)));
        int64_t flat_idx_38904 = chunk_offset_38903 +
                sext_i32_i64(local_tid_38890);
        int64_t gtid_29627 = squot64(flat_idx_38904, iota32_arg_24397);
        int64_t gtid_29635 = flat_idx_38904 - squot64(flat_idx_38904,
                                                      iota32_arg_24397) *
                iota32_arg_24397;
        
        // threads in bounds read input
        {
            if (slt64(gtid_29627, m_24014) && slt64(gtid_29635,
                                                    iota32_arg_24397)) {
                float x_30332 = ((__global
                                  float *) mem_param_37490)[gtid_29627 *
                                                            iota32_arg_24397 +
                                                            gtid_29635];
                int32_t i32_arg_30333;
                
                i32_arg_30333 = futrts_to_bits32(x_30332);
                
                int32_t unsign_arg_30334 = ashr32(i32_arg_30333,
                                                  lifted_0_get_bit_arg_30217);
                int32_t unsign_arg_30335 = 1 & unsign_arg_30334;
                int32_t unsign_arg_30336 = ashr32(i32_arg_30333, 31);
                int32_t unsign_arg_30337 = 1 & unsign_arg_30336;
                bool cond_30338 = unsign_arg_30337 == 1;
                bool x_30339 = !cond_30338;
                bool y_30340 = res_30218 && x_30339;
                bool cond_30341 = cond_30338 || y_30340;
                int32_t res_30342;
                
                if (cond_30341) {
                    int32_t res_30343 = 1 ^ unsign_arg_30335;
                    
                    res_30342 = res_30343;
                } else {
                    res_30342 = unsign_arg_30335;
                }
                
                int32_t x_30344 = mul32(2, res_30342);
                int32_t unsign_arg_30345 = ashr32(i32_arg_30333,
                                                  lifted_2_radix_sort_step_arg_30216);
                int32_t unsign_arg_30346 = 1 & unsign_arg_30345;
                bool y_30347 = res_30219 && x_30339;
                bool cond_30348 = cond_30338 || y_30347;
                int32_t res_30349;
                
                if (cond_30348) {
                    int32_t res_30350 = 1 ^ unsign_arg_30346;
                    
                    res_30349 = res_30350;
                } else {
                    res_30349 = unsign_arg_30346;
                }
                
                int32_t res_30351 = add32(x_30344, res_30349);
                bool cond_30352 = res_30351 == 0;
                int64_t res_30353 = btoi_bool_i64(cond_30352);
                int64_t res_30354;
                int64_t res_30355;
                int64_t res_30356;
                
                if (cond_30352) {
                    res_30354 = 0;
                    res_30355 = 0;
                    res_30356 = 0;
                } else {
                    bool cond_30357 = res_30351 == 1;
                    int64_t res_30358 = btoi_bool_i64(cond_30357);
                    int64_t res_30359;
                    int64_t res_30360;
                    
                    if (cond_30357) {
                        res_30359 = 0;
                        res_30360 = 0;
                    } else {
                        bool cond_30361 = res_30351 == 2;
                        int64_t res_30362 = btoi_bool_i64(cond_30361);
                        bool cond_neg_30363 = !cond_30361;
                        int64_t res_30364 = btoi_bool_i64(cond_neg_30363);
                        
                        res_30359 = res_30362;
                        res_30360 = res_30364;
                    }
                    res_30354 = res_30358;
                    res_30355 = res_30359;
                    res_30356 = res_30360;
                }
                // write to-scan values to parameters
                {
                    x_30323 = res_30353;
                    x_30324 = res_30354;
                    x_30325 = res_30355;
                    x_30326 = res_30356;
                }
                // write mapped values results to global memory
                {
                    ((__global int32_t *) mem_37529)[gtid_29627 *
                                                     iota32_arg_24397 +
                                                     gtid_29635] = res_30351;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_29627, m_24014) && slt64(gtid_29635,
                                                          iota32_arg_24397))) {
                    x_30323 = 0;
                    x_30324 = 0;
                    x_30325 = 0;
                    x_30326 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_30327 = add64(x_30319, x_30323);
                int64_t res_30328 = add64(x_30320, x_30324);
                int64_t res_30329 = add64(x_30321, x_30325);
                int64_t res_30330 = add64(x_30322, x_30326);
                
                ((__local
                  int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)] =
                    res_30327;
                ((__local
                  int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)] =
                    res_30328;
                ((__local
                  int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)] =
                    res_30329;
                ((__local
                  int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)] =
                    res_30330;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_38905;
            int64_t x_38906;
            int64_t x_38907;
            int64_t x_38908;
            int64_t x_38909;
            int64_t x_38910;
            int64_t x_38911;
            int64_t x_38912;
            int64_t x_38917;
            int64_t x_38918;
            int64_t x_38919;
            int64_t x_38920;
            int64_t x_38921;
            int64_t x_38922;
            int64_t x_38923;
            int64_t x_38924;
            bool ltid_in_bounds_38929;
            
            ltid_in_bounds_38929 = slt64(sext_i32_i64(local_tid_38890),
                                         segscan_group_sizze_30311);
            
            int32_t skip_threads_38930;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38929) {
                    x_38909 = ((volatile __local
                                int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)];
                    x_38910 = ((volatile __local
                                int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)];
                    x_38911 = ((volatile __local
                                int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)];
                    x_38912 = ((volatile __local
                                int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)];
                    if ((local_tid_38890 - squot32(local_tid_38890, 32) * 32) ==
                        0) {
                        x_38905 = x_38909;
                        x_38906 = x_38910;
                        x_38907 = x_38911;
                        x_38908 = x_38912;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38930 = 1;
                while (slt32(skip_threads_38930, 32)) {
                    if (sle32(skip_threads_38930, local_tid_38890 -
                              squot32(local_tid_38890, 32) * 32) &&
                        ltid_in_bounds_38929) {
                        // read operands
                        {
                            x_38905 = ((volatile __local
                                        int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890) -
                                                                       sext_i32_i64(skip_threads_38930)];
                            x_38906 = ((volatile __local
                                        int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890) -
                                                                       sext_i32_i64(skip_threads_38930)];
                            x_38907 = ((volatile __local
                                        int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890) -
                                                                       sext_i32_i64(skip_threads_38930)];
                            x_38908 = ((volatile __local
                                        int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890) -
                                                                       sext_i32_i64(skip_threads_38930)];
                        }
                        // perform operation
                        {
                            bool inactive_38931 =
                                 slt64(srem64(sext_i32_i64(local_tid_38890) +
                                              chunk_offset_38903,
                                              iota32_arg_24397),
                                       sext_i32_i64(local_tid_38890) +
                                       chunk_offset_38903 -
                                       (sext_i32_i64(local_tid_38890 -
                                        skip_threads_38930) +
                                        chunk_offset_38903));
                            
                            if (inactive_38931) {
                                x_38905 = x_38909;
                                x_38906 = x_38910;
                                x_38907 = x_38911;
                                x_38908 = x_38912;
                            }
                            if (!inactive_38931) {
                                int64_t res_38913 = add64(x_38905, x_38909);
                                int64_t res_38914 = add64(x_38906, x_38910);
                                int64_t res_38915 = add64(x_38907, x_38911);
                                int64_t res_38916 = add64(x_38908, x_38912);
                                
                                x_38905 = res_38913;
                                x_38906 = res_38914;
                                x_38907 = res_38915;
                                x_38908 = res_38916;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38892, skip_threads_38930)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38930, local_tid_38890 -
                              squot32(local_tid_38890, 32) * 32) &&
                        ltid_in_bounds_38929) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)] =
                                x_38905;
                            x_38909 = x_38905;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)] =
                                x_38906;
                            x_38910 = x_38906;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)] =
                                x_38907;
                            x_38911 = x_38907;
                            ((volatile __local
                              int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)] =
                                x_38908;
                            x_38912 = x_38908;
                        }
                    }
                    if (sle32(wave_sizze_38892, skip_threads_38930)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38930 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38890 - squot32(local_tid_38890, 32) * 32) ==
                    31 && ltid_in_bounds_38929) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38894)[sext_i32_i64(squot32(local_tid_38890,
                                                                          32))] =
                        x_38905;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38896)[sext_i32_i64(squot32(local_tid_38890,
                                                                          32))] =
                        x_38906;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38898)[sext_i32_i64(squot32(local_tid_38890,
                                                                          32))] =
                        x_38907;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38900)[sext_i32_i64(squot32(local_tid_38890,
                                                                          32))] =
                        x_38908;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38932;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38890, 32) == 0 &&
                        ltid_in_bounds_38929) {
                        x_38921 = ((volatile __local
                                    int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)];
                        x_38922 = ((volatile __local
                                    int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)];
                        x_38923 = ((volatile __local
                                    int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)];
                        x_38924 = ((volatile __local
                                    int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)];
                        if ((local_tid_38890 - squot32(local_tid_38890, 32) *
                             32) == 0) {
                            x_38917 = x_38921;
                            x_38918 = x_38922;
                            x_38919 = x_38923;
                            x_38920 = x_38924;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38932 = 1;
                    while (slt32(skip_threads_38932, 32)) {
                        if (sle32(skip_threads_38932, local_tid_38890 -
                                  squot32(local_tid_38890, 32) * 32) &&
                            (squot32(local_tid_38890, 32) == 0 &&
                             ltid_in_bounds_38929)) {
                            // read operands
                            {
                                x_38917 = ((volatile __local
                                            int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890) -
                                                                           sext_i32_i64(skip_threads_38932)];
                                x_38918 = ((volatile __local
                                            int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890) -
                                                                           sext_i32_i64(skip_threads_38932)];
                                x_38919 = ((volatile __local
                                            int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890) -
                                                                           sext_i32_i64(skip_threads_38932)];
                                x_38920 = ((volatile __local
                                            int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890) -
                                                                           sext_i32_i64(skip_threads_38932)];
                            }
                            // perform operation
                            {
                                bool inactive_38933 =
                                     slt64(srem64(sext_i32_i64(local_tid_38890 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38903,
                                                  iota32_arg_24397),
                                           sext_i32_i64(local_tid_38890 * 32 +
                                           32 - 1) + chunk_offset_38903 -
                                           (sext_i32_i64((local_tid_38890 -
                                                          skip_threads_38932) *
                                            32 + 32 - 1) + chunk_offset_38903));
                                
                                if (inactive_38933) {
                                    x_38917 = x_38921;
                                    x_38918 = x_38922;
                                    x_38919 = x_38923;
                                    x_38920 = x_38924;
                                }
                                if (!inactive_38933) {
                                    int64_t res_38925 = add64(x_38917, x_38921);
                                    int64_t res_38926 = add64(x_38918, x_38922);
                                    int64_t res_38927 = add64(x_38919, x_38923);
                                    int64_t res_38928 = add64(x_38920, x_38924);
                                    
                                    x_38917 = res_38925;
                                    x_38918 = res_38926;
                                    x_38919 = res_38927;
                                    x_38920 = res_38928;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38892, skip_threads_38932)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38932, local_tid_38890 -
                                  squot32(local_tid_38890, 32) * 32) &&
                            (squot32(local_tid_38890, 32) == 0 &&
                             ltid_in_bounds_38929)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)] =
                                    x_38917;
                                x_38921 = x_38917;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)] =
                                    x_38918;
                                x_38922 = x_38918;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)] =
                                    x_38919;
                                x_38923 = x_38919;
                                ((volatile __local
                                  int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)] =
                                    x_38920;
                                x_38924 = x_38920;
                            }
                        }
                        if (sle32(wave_sizze_38892, skip_threads_38932)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38932 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38890, 32) == 0 ||
                      !ltid_in_bounds_38929)) {
                    // read operands
                    {
                        x_38909 = x_38905;
                        x_38910 = x_38906;
                        x_38911 = x_38907;
                        x_38912 = x_38908;
                        x_38905 = ((__local
                                    int64_t *) scan_arr_mem_38894)[sext_i32_i64(squot32(local_tid_38890,
                                                                                        32)) -
                                                                   1];
                        x_38906 = ((__local
                                    int64_t *) scan_arr_mem_38896)[sext_i32_i64(squot32(local_tid_38890,
                                                                                        32)) -
                                                                   1];
                        x_38907 = ((__local
                                    int64_t *) scan_arr_mem_38898)[sext_i32_i64(squot32(local_tid_38890,
                                                                                        32)) -
                                                                   1];
                        x_38908 = ((__local
                                    int64_t *) scan_arr_mem_38900)[sext_i32_i64(squot32(local_tid_38890,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_38934 =
                             slt64(srem64(sext_i32_i64(local_tid_38890) +
                                          chunk_offset_38903, iota32_arg_24397),
                                   sext_i32_i64(local_tid_38890) +
                                   chunk_offset_38903 -
                                   (sext_i32_i64(squot32(local_tid_38890, 32) *
                                    32 - 1) + chunk_offset_38903));
                        
                        if (inactive_38934) {
                            x_38905 = x_38909;
                            x_38906 = x_38910;
                            x_38907 = x_38911;
                            x_38908 = x_38912;
                        }
                        if (!inactive_38934) {
                            int64_t res_38913 = add64(x_38905, x_38909);
                            int64_t res_38914 = add64(x_38906, x_38910);
                            int64_t res_38915 = add64(x_38907, x_38911);
                            int64_t res_38916 = add64(x_38908, x_38912);
                            
                            x_38905 = res_38913;
                            x_38906 = res_38914;
                            x_38907 = res_38915;
                            x_38908 = res_38916;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)] =
                            x_38905;
                        ((__local
                          int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)] =
                            x_38906;
                        ((__local
                          int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)] =
                            x_38907;
                        ((__local
                          int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)] =
                            x_38908;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38890, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)] =
                        x_38909;
                    ((__local
                      int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)] =
                        x_38910;
                    ((__local
                      int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)] =
                        x_38911;
                    ((__local
                      int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)] =
                        x_38912;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_29627, m_24014) && slt64(gtid_29635,
                                                        iota32_arg_24397)) {
                    ((__global int64_t *) mem_37517)[gtid_29627 *
                                                     iota32_arg_24397 +
                                                     gtid_29635] = ((__local
                                                                     int64_t *) scan_arr_mem_38894)[sext_i32_i64(local_tid_38890)];
                    ((__global int64_t *) mem_37520)[gtid_29627 *
                                                     iota32_arg_24397 +
                                                     gtid_29635] = ((__local
                                                                     int64_t *) scan_arr_mem_38896)[sext_i32_i64(local_tid_38890)];
                    ((__global int64_t *) mem_37523)[gtid_29627 *
                                                     iota32_arg_24397 +
                                                     gtid_29635] = ((__local
                                                                     int64_t *) scan_arr_mem_38898)[sext_i32_i64(local_tid_38890)];
                    ((__global int64_t *) mem_37526)[gtid_29627 *
                                                     iota32_arg_24397 +
                                                     gtid_29635] = ((__local
                                                                     int64_t *) scan_arr_mem_38900)[sext_i32_i64(local_tid_38890)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38935 = slt64(srem64(chunk_offset_38903 +
                                                          segscan_group_sizze_30311,
                                                          iota32_arg_24397),
                                                   chunk_offset_38903 +
                                                   segscan_group_sizze_30311 -
                                                   (chunk_offset_38903 +
                                                    segscan_group_sizze_30311 -
                                                    1));
                bool should_load_carry_38936 = local_tid_38890 == 0 &&
                     !crosses_segment_38935;
                
                if (should_load_carry_38936) {
                    x_30319 = ((__local
                                int64_t *) scan_arr_mem_38894)[segscan_group_sizze_30311 -
                                                               1];
                    x_30320 = ((__local
                                int64_t *) scan_arr_mem_38896)[segscan_group_sizze_30311 -
                                                               1];
                    x_30321 = ((__local
                                int64_t *) scan_arr_mem_38898)[segscan_group_sizze_30311 -
                                                               1];
                    x_30322 = ((__local
                                int64_t *) scan_arr_mem_38900)[segscan_group_sizze_30311 -
                                                               1];
                }
                if (!should_load_carry_38936) {
                    x_30319 = 0;
                    x_30320 = 0;
                    x_30321 = 0;
                    x_30322 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_30311
}
__kernel void mainDetailedziscan_stage1_29989(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38694_backing_aligned_0,
                                              int64_t N_24013, int64_t m_24014,
                                              int64_t iota32_arg_24397, __global
                                              unsigned char *res_mem_37111,
                                              __global
                                              unsigned char *res_mem_37190,
                                              __global
                                              unsigned char *res_mem_37191,
                                              __global
                                              unsigned char *res_mem_37241,
                                              __global unsigned char *mem_37456,
                                              __global unsigned char *mem_37460,
                                              int32_t num_threads_38688)
{
    #define segscan_group_sizze_30068 (mainDetailedzisegscan_group_sizze_29983)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38694_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38694_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38689;
    int32_t local_tid_38690;
    int64_t group_sizze_38693;
    int32_t wave_sizze_38692;
    int32_t group_tid_38691;
    
    global_tid_38689 = get_global_id(0);
    local_tid_38690 = get_local_id(0);
    group_sizze_38693 = get_local_size(0);
    wave_sizze_38692 = LOCKSTEP_WIDTH;
    group_tid_38691 = get_group_id(0);
    
    int32_t phys_tid_29989;
    
    phys_tid_29989 = global_tid_38689;
    
    __local char *scan_arr_mem_38694;
    
    scan_arr_mem_38694 = (__local char *) scan_arr_mem_38694_backing_0;
    
    float x_30072;
    float x_30073;
    
    x_30072 = 0.0F;
    for (int64_t j_38696 = 0; j_38696 < sdiv_up64(m_24014 * iota32_arg_24397,
                                                  sext_i32_i64(num_threads_38688));
         j_38696++) {
        int64_t chunk_offset_38697 = segscan_group_sizze_30068 * j_38696 +
                sext_i32_i64(group_tid_38691) * (segscan_group_sizze_30068 *
                                                 sdiv_up64(m_24014 *
                                                           iota32_arg_24397,
                                                           sext_i32_i64(num_threads_38688)));
        int64_t flat_idx_38698 = chunk_offset_38697 +
                sext_i32_i64(local_tid_38690);
        int64_t gtid_29980 = squot64(flat_idx_38698, iota32_arg_24397);
        int64_t gtid_29988 = flat_idx_38698 - squot64(flat_idx_38698,
                                                      iota32_arg_24397) *
                iota32_arg_24397;
        
        // threads in bounds read input
        {
            if (slt64(gtid_29980, m_24014) && slt64(gtid_29988,
                                                    iota32_arg_24397)) {
                int32_t y_30079 = ((__global int32_t *) mem_37456)[gtid_29980];
                int32_t index_primexp_35380 = sext_i64_i32(gtid_29988);
                bool cond_30082 = sle32(y_30079, index_primexp_35380);
                float res_30083;
                
                if (cond_30082) {
                    res_30083 = 0.0F;
                } else {
                    int32_t x_30075 = ((__global
                                        int32_t *) res_mem_37191)[gtid_29980];
                    int32_t x_30076 = ((__global
                                        int32_t *) res_mem_37190)[gtid_29980];
                    float x_30077 = ((__global
                                      float *) res_mem_37241)[gtid_29980];
                    bool cond_30084 = index_primexp_35380 == 0;
                    float res_30085;
                    
                    if (cond_30084) {
                        res_30085 = x_30077;
                    } else {
                        int32_t x_30086 = sub32(x_30075, x_30076);
                        int32_t i_30087 = add32(x_30086, index_primexp_35380);
                        int64_t i_30088 = sext_i32_i64(i_30087);
                        float negate_arg_30089 = ((__global
                                                   float *) res_mem_37111)[gtid_29980 *
                                                                           N_24013 +
                                                                           i_30088];
                        float x_30090 = 0.0F - negate_arg_30089;
                        int32_t i_30091 = add32(x_30075, index_primexp_35380);
                        int64_t i_30092 = sext_i32_i64(i_30091);
                        float y_30093 = ((__global
                                          float *) res_mem_37111)[gtid_29980 *
                                                                  N_24013 +
                                                                  i_30092];
                        float res_30094 = x_30090 + y_30093;
                        
                        res_30085 = res_30094;
                    }
                    res_30083 = res_30085;
                }
                // write to-scan values to parameters
                {
                    x_30073 = res_30083;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_29980, m_24014) && slt64(gtid_29988,
                                                          iota32_arg_24397))) {
                    x_30073 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float res_30074 = x_30072 + x_30073;
                
                ((__local
                  float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)] =
                    res_30074;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_38699;
            float x_38700;
            float x_38702;
            float x_38703;
            bool ltid_in_bounds_38705;
            
            ltid_in_bounds_38705 = slt64(sext_i32_i64(local_tid_38690),
                                         segscan_group_sizze_30068);
            
            int32_t skip_threads_38706;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_38705) {
                    x_38700 = ((volatile __local
                                float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)];
                    if ((local_tid_38690 - squot32(local_tid_38690, 32) * 32) ==
                        0) {
                        x_38699 = x_38700;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38706 = 1;
                while (slt32(skip_threads_38706, 32)) {
                    if (sle32(skip_threads_38706, local_tid_38690 -
                              squot32(local_tid_38690, 32) * 32) &&
                        ltid_in_bounds_38705) {
                        // read operands
                        {
                            x_38699 = ((volatile __local
                                        float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690) -
                                                                     sext_i32_i64(skip_threads_38706)];
                        }
                        // perform operation
                        {
                            bool inactive_38707 =
                                 slt64(srem64(sext_i32_i64(local_tid_38690) +
                                              chunk_offset_38697,
                                              iota32_arg_24397),
                                       sext_i32_i64(local_tid_38690) +
                                       chunk_offset_38697 -
                                       (sext_i32_i64(local_tid_38690 -
                                        skip_threads_38706) +
                                        chunk_offset_38697));
                            
                            if (inactive_38707) {
                                x_38699 = x_38700;
                            }
                            if (!inactive_38707) {
                                float res_38701 = x_38699 + x_38700;
                                
                                x_38699 = res_38701;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38692, skip_threads_38706)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38706, local_tid_38690 -
                              squot32(local_tid_38690, 32) * 32) &&
                        ltid_in_bounds_38705) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)] =
                                x_38699;
                            x_38700 = x_38699;
                        }
                    }
                    if (sle32(wave_sizze_38692, skip_threads_38706)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38706 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_38690 - squot32(local_tid_38690, 32) * 32) ==
                    31 && ltid_in_bounds_38705) {
                    ((volatile __local
                      float *) scan_arr_mem_38694)[sext_i32_i64(squot32(local_tid_38690,
                                                                        32))] =
                        x_38699;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_38708;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_38690, 32) == 0 &&
                        ltid_in_bounds_38705) {
                        x_38703 = ((volatile __local
                                    float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)];
                        if ((local_tid_38690 - squot32(local_tid_38690, 32) *
                             32) == 0) {
                            x_38702 = x_38703;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38708 = 1;
                    while (slt32(skip_threads_38708, 32)) {
                        if (sle32(skip_threads_38708, local_tid_38690 -
                                  squot32(local_tid_38690, 32) * 32) &&
                            (squot32(local_tid_38690, 32) == 0 &&
                             ltid_in_bounds_38705)) {
                            // read operands
                            {
                                x_38702 = ((volatile __local
                                            float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690) -
                                                                         sext_i32_i64(skip_threads_38708)];
                            }
                            // perform operation
                            {
                                bool inactive_38709 =
                                     slt64(srem64(sext_i32_i64(local_tid_38690 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_38697,
                                                  iota32_arg_24397),
                                           sext_i32_i64(local_tid_38690 * 32 +
                                           32 - 1) + chunk_offset_38697 -
                                           (sext_i32_i64((local_tid_38690 -
                                                          skip_threads_38708) *
                                            32 + 32 - 1) + chunk_offset_38697));
                                
                                if (inactive_38709) {
                                    x_38702 = x_38703;
                                }
                                if (!inactive_38709) {
                                    float res_38704 = x_38702 + x_38703;
                                    
                                    x_38702 = res_38704;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38692, skip_threads_38708)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38708, local_tid_38690 -
                                  squot32(local_tid_38690, 32) * 32) &&
                            (squot32(local_tid_38690, 32) == 0 &&
                             ltid_in_bounds_38705)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)] =
                                    x_38702;
                                x_38703 = x_38702;
                            }
                        }
                        if (sle32(wave_sizze_38692, skip_threads_38708)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38708 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_38690, 32) == 0 ||
                      !ltid_in_bounds_38705)) {
                    // read operands
                    {
                        x_38700 = x_38699;
                        x_38699 = ((__local
                                    float *) scan_arr_mem_38694)[sext_i32_i64(squot32(local_tid_38690,
                                                                                      32)) -
                                                                 1];
                    }
                    // perform operation
                    {
                        bool inactive_38710 =
                             slt64(srem64(sext_i32_i64(local_tid_38690) +
                                          chunk_offset_38697, iota32_arg_24397),
                                   sext_i32_i64(local_tid_38690) +
                                   chunk_offset_38697 -
                                   (sext_i32_i64(squot32(local_tid_38690, 32) *
                                    32 - 1) + chunk_offset_38697));
                        
                        if (inactive_38710) {
                            x_38699 = x_38700;
                        }
                        if (!inactive_38710) {
                            float res_38701 = x_38699 + x_38700;
                            
                            x_38699 = res_38701;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)] =
                            x_38699;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_38690, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)] =
                        x_38700;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_29980, m_24014) && slt64(gtid_29988,
                                                        iota32_arg_24397)) {
                    ((__global float *) mem_37460)[gtid_29980 *
                                                   iota32_arg_24397 +
                                                   gtid_29988] = ((__local
                                                                   float *) scan_arr_mem_38694)[sext_i32_i64(local_tid_38690)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_38711 = slt64(srem64(chunk_offset_38697 +
                                                          segscan_group_sizze_30068,
                                                          iota32_arg_24397),
                                                   chunk_offset_38697 +
                                                   segscan_group_sizze_30068 -
                                                   (chunk_offset_38697 +
                                                    segscan_group_sizze_30068 -
                                                    1));
                bool should_load_carry_38712 = local_tid_38690 == 0 &&
                     !crosses_segment_38711;
                
                if (should_load_carry_38712) {
                    x_30072 = ((__local
                                float *) scan_arr_mem_38694)[segscan_group_sizze_30068 -
                                                             1];
                }
                if (!should_load_carry_38712) {
                    x_30072 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_30068
}
__kernel void mainDetailedziscan_stage2_27862(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38291_backing_aligned_0,
                                              int64_t N_24013, int64_t m_24014,
                                              __global unsigned char *mem_37102,
                                              int64_t stage1_num_groups_38260,
                                              int32_t num_threads_38261)
{
    #define segscan_group_sizze_27879 (mainDetailedzisegscan_group_sizze_27856)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38291_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38291_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38286;
    int32_t local_tid_38287;
    int64_t group_sizze_38290;
    int32_t wave_sizze_38289;
    int32_t group_tid_38288;
    
    global_tid_38286 = get_global_id(0);
    local_tid_38287 = get_local_id(0);
    group_sizze_38290 = get_local_size(0);
    wave_sizze_38289 = LOCKSTEP_WIDTH;
    group_tid_38288 = get_group_id(0);
    
    int32_t phys_tid_27862;
    
    phys_tid_27862 = global_tid_38286;
    
    __local char *scan_arr_mem_38291;
    
    scan_arr_mem_38291 = (__local char *) scan_arr_mem_38291_backing_0;
    
    int64_t flat_idx_38293;
    
    flat_idx_38293 = (sext_i32_i64(local_tid_38287) + 1) *
        (segscan_group_sizze_27879 * sdiv_up64(m_24014 * N_24013,
                                               sext_i32_i64(num_threads_38261))) -
        1;
    
    int64_t gtid_27853;
    
    gtid_27853 = squot64(flat_idx_38293, N_24013);
    
    int64_t gtid_27861;
    
    gtid_27861 = flat_idx_38293 - squot64(flat_idx_38293, N_24013) * N_24013;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_27853, m_24014) && slt64(gtid_27861, N_24013)) {
            ((__local
              int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)] =
                ((__global int64_t *) mem_37102)[gtid_27853 * N_24013 +
                                                 gtid_27861];
        } else {
            ((__local
              int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_27884;
    int64_t x_27885;
    int64_t x_38294;
    int64_t x_38295;
    bool ltid_in_bounds_38297;
    
    ltid_in_bounds_38297 = slt64(sext_i32_i64(local_tid_38287),
                                 stage1_num_groups_38260);
    
    int32_t skip_threads_38298;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38297) {
            x_27885 = ((volatile __local
                        int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)];
            if ((local_tid_38287 - squot32(local_tid_38287, 32) * 32) == 0) {
                x_27884 = x_27885;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38298 = 1;
        while (slt32(skip_threads_38298, 32)) {
            if (sle32(skip_threads_38298, local_tid_38287 -
                      squot32(local_tid_38287, 32) * 32) &&
                ltid_in_bounds_38297) {
                // read operands
                {
                    x_27884 = ((volatile __local
                                int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287) -
                                                               sext_i32_i64(skip_threads_38298)];
                }
                // perform operation
                {
                    bool inactive_38299 =
                         slt64(srem64((sext_i32_i64(local_tid_38287) + 1) *
                                      (segscan_group_sizze_27879 *
                                       sdiv_up64(m_24014 * N_24013,
                                                 sext_i32_i64(num_threads_38261))) -
                                      1, N_24013),
                               (sext_i32_i64(local_tid_38287) + 1) *
                               (segscan_group_sizze_27879 * sdiv_up64(m_24014 *
                                                                      N_24013,
                                                                      sext_i32_i64(num_threads_38261))) -
                               1 - ((sext_i32_i64(local_tid_38287 -
                                     skip_threads_38298) + 1) *
                                    (segscan_group_sizze_27879 *
                                     sdiv_up64(m_24014 * N_24013,
                                               sext_i32_i64(num_threads_38261))) -
                                    1));
                    
                    if (inactive_38299) {
                        x_27884 = x_27885;
                    }
                    if (!inactive_38299) {
                        int64_t res_27886 = add64(x_27884, x_27885);
                        
                        x_27884 = res_27886;
                    }
                }
            }
            if (sle32(wave_sizze_38289, skip_threads_38298)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38298, local_tid_38287 -
                      squot32(local_tid_38287, 32) * 32) &&
                ltid_in_bounds_38297) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)] =
                        x_27884;
                    x_27885 = x_27884;
                }
            }
            if (sle32(wave_sizze_38289, skip_threads_38298)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38298 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38287 - squot32(local_tid_38287, 32) * 32) == 31 &&
            ltid_in_bounds_38297) {
            ((volatile __local
              int64_t *) scan_arr_mem_38291)[sext_i32_i64(squot32(local_tid_38287,
                                                                  32))] =
                x_27884;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38300;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38287, 32) == 0 && ltid_in_bounds_38297) {
                x_38295 = ((volatile __local
                            int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)];
                if ((local_tid_38287 - squot32(local_tid_38287, 32) * 32) ==
                    0) {
                    x_38294 = x_38295;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38300 = 1;
            while (slt32(skip_threads_38300, 32)) {
                if (sle32(skip_threads_38300, local_tid_38287 -
                          squot32(local_tid_38287, 32) * 32) &&
                    (squot32(local_tid_38287, 32) == 0 &&
                     ltid_in_bounds_38297)) {
                    // read operands
                    {
                        x_38294 = ((volatile __local
                                    int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287) -
                                                                   sext_i32_i64(skip_threads_38300)];
                    }
                    // perform operation
                    {
                        bool inactive_38301 =
                             slt64(srem64((sext_i32_i64(local_tid_38287 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_27879 *
                                           sdiv_up64(m_24014 * N_24013,
                                                     sext_i32_i64(num_threads_38261))) -
                                          1, N_24013),
                                   (sext_i32_i64(local_tid_38287 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_27879 *
                                               sdiv_up64(m_24014 * N_24013,
                                                         sext_i32_i64(num_threads_38261))) -
                                   1 - ((sext_i32_i64((local_tid_38287 -
                                                       skip_threads_38300) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_27879 *
                                         sdiv_up64(m_24014 * N_24013,
                                                   sext_i32_i64(num_threads_38261))) -
                                        1));
                        
                        if (inactive_38301) {
                            x_38294 = x_38295;
                        }
                        if (!inactive_38301) {
                            int64_t res_38296 = add64(x_38294, x_38295);
                            
                            x_38294 = res_38296;
                        }
                    }
                }
                if (sle32(wave_sizze_38289, skip_threads_38300)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38300, local_tid_38287 -
                          squot32(local_tid_38287, 32) * 32) &&
                    (squot32(local_tid_38287, 32) == 0 &&
                     ltid_in_bounds_38297)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)] =
                            x_38294;
                        x_38295 = x_38294;
                    }
                }
                if (sle32(wave_sizze_38289, skip_threads_38300)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38300 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38287, 32) == 0 || !ltid_in_bounds_38297)) {
            // read operands
            {
                x_27885 = x_27884;
                x_27884 = ((__local
                            int64_t *) scan_arr_mem_38291)[sext_i32_i64(squot32(local_tid_38287,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_38302 =
                     slt64(srem64((sext_i32_i64(local_tid_38287) + 1) *
                                  (segscan_group_sizze_27879 *
                                   sdiv_up64(m_24014 * N_24013,
                                             sext_i32_i64(num_threads_38261))) -
                                  1, N_24013), (sext_i32_i64(local_tid_38287) +
                                                1) *
                           (segscan_group_sizze_27879 * sdiv_up64(m_24014 *
                                                                  N_24013,
                                                                  sext_i32_i64(num_threads_38261))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38287, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_27879 *
                                                 sdiv_up64(m_24014 * N_24013,
                                                           sext_i32_i64(num_threads_38261))) -
                                1));
                
                if (inactive_38302) {
                    x_27884 = x_27885;
                }
                if (!inactive_38302) {
                    int64_t res_27886 = add64(x_27884, x_27885);
                    
                    x_27884 = res_27886;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)] =
                    x_27884;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38287, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)] =
                x_27885;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_27853, m_24014) && slt64(gtid_27861, N_24013)) {
            ((__global int64_t *) mem_37102)[gtid_27853 * N_24013 +
                                             gtid_27861] = ((__local
                                                             int64_t *) scan_arr_mem_38291)[sext_i32_i64(local_tid_38287)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_27879
}
__kernel void mainDetailedziscan_stage2_29636(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38948_backing_aligned_0,
                                              __local volatile
                                              int64_t *scan_arr_mem_38946_backing_aligned_1,
                                              __local volatile
                                              int64_t *scan_arr_mem_38944_backing_aligned_2,
                                              __local volatile
                                              int64_t *scan_arr_mem_38942_backing_aligned_3,
                                              int64_t m_24014,
                                              int64_t iota32_arg_24397, __global
                                              unsigned char *mem_37517, __global
                                              unsigned char *mem_37520, __global
                                              unsigned char *mem_37523, __global
                                              unsigned char *mem_37526,
                                              int64_t stage1_num_groups_38887,
                                              int32_t num_threads_38888)
{
    #define segscan_group_sizze_30311 (mainDetailedzisegscan_group_sizze_29630)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38948_backing_3 =
                          (__local volatile
                           char *) scan_arr_mem_38948_backing_aligned_0;
    __local volatile char *restrict scan_arr_mem_38946_backing_2 =
                          (__local volatile
                           char *) scan_arr_mem_38946_backing_aligned_1;
    __local volatile char *restrict scan_arr_mem_38944_backing_1 =
                          (__local volatile
                           char *) scan_arr_mem_38944_backing_aligned_2;
    __local volatile char *restrict scan_arr_mem_38942_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38942_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38937;
    int32_t local_tid_38938;
    int64_t group_sizze_38941;
    int32_t wave_sizze_38940;
    int32_t group_tid_38939;
    
    global_tid_38937 = get_global_id(0);
    local_tid_38938 = get_local_id(0);
    group_sizze_38941 = get_local_size(0);
    wave_sizze_38940 = LOCKSTEP_WIDTH;
    group_tid_38939 = get_group_id(0);
    
    int32_t phys_tid_29636;
    
    phys_tid_29636 = global_tid_38937;
    
    __local char *scan_arr_mem_38942;
    __local char *scan_arr_mem_38944;
    __local char *scan_arr_mem_38946;
    __local char *scan_arr_mem_38948;
    
    scan_arr_mem_38942 = (__local char *) scan_arr_mem_38942_backing_0;
    scan_arr_mem_38944 = (__local char *) scan_arr_mem_38944_backing_1;
    scan_arr_mem_38946 = (__local char *) scan_arr_mem_38946_backing_2;
    scan_arr_mem_38948 = (__local char *) scan_arr_mem_38948_backing_3;
    
    int64_t flat_idx_38950;
    
    flat_idx_38950 = (sext_i32_i64(local_tid_38938) + 1) *
        (segscan_group_sizze_30311 * sdiv_up64(m_24014 * iota32_arg_24397,
                                               sext_i32_i64(num_threads_38888))) -
        1;
    
    int64_t gtid_29627;
    
    gtid_29627 = squot64(flat_idx_38950, iota32_arg_24397);
    
    int64_t gtid_29635;
    
    gtid_29635 = flat_idx_38950 - squot64(flat_idx_38950, iota32_arg_24397) *
        iota32_arg_24397;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_29627, m_24014) && slt64(gtid_29635, iota32_arg_24397)) {
            ((__local
              int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)] =
                ((__global int64_t *) mem_37517)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635];
            ((__local
              int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)] =
                ((__global int64_t *) mem_37520)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635];
            ((__local
              int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)] =
                ((__global int64_t *) mem_37523)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635];
            ((__local
              int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)] =
                ((__global int64_t *) mem_37526)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635];
        } else {
            ((__local
              int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)] = 0;
            ((__local
              int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_30319;
    int64_t x_30320;
    int64_t x_30321;
    int64_t x_30322;
    int64_t x_30323;
    int64_t x_30324;
    int64_t x_30325;
    int64_t x_30326;
    int64_t x_38951;
    int64_t x_38952;
    int64_t x_38953;
    int64_t x_38954;
    int64_t x_38955;
    int64_t x_38956;
    int64_t x_38957;
    int64_t x_38958;
    bool ltid_in_bounds_38963;
    
    ltid_in_bounds_38963 = slt64(sext_i32_i64(local_tid_38938),
                                 stage1_num_groups_38887);
    
    int32_t skip_threads_38964;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38963) {
            x_30323 = ((volatile __local
                        int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)];
            x_30324 = ((volatile __local
                        int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)];
            x_30325 = ((volatile __local
                        int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)];
            x_30326 = ((volatile __local
                        int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)];
            if ((local_tid_38938 - squot32(local_tid_38938, 32) * 32) == 0) {
                x_30319 = x_30323;
                x_30320 = x_30324;
                x_30321 = x_30325;
                x_30322 = x_30326;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38964 = 1;
        while (slt32(skip_threads_38964, 32)) {
            if (sle32(skip_threads_38964, local_tid_38938 -
                      squot32(local_tid_38938, 32) * 32) &&
                ltid_in_bounds_38963) {
                // read operands
                {
                    x_30319 = ((volatile __local
                                int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938) -
                                                               sext_i32_i64(skip_threads_38964)];
                    x_30320 = ((volatile __local
                                int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938) -
                                                               sext_i32_i64(skip_threads_38964)];
                    x_30321 = ((volatile __local
                                int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938) -
                                                               sext_i32_i64(skip_threads_38964)];
                    x_30322 = ((volatile __local
                                int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938) -
                                                               sext_i32_i64(skip_threads_38964)];
                }
                // perform operation
                {
                    bool inactive_38965 =
                         slt64(srem64((sext_i32_i64(local_tid_38938) + 1) *
                                      (segscan_group_sizze_30311 *
                                       sdiv_up64(m_24014 * iota32_arg_24397,
                                                 sext_i32_i64(num_threads_38888))) -
                                      1, iota32_arg_24397),
                               (sext_i32_i64(local_tid_38938) + 1) *
                               (segscan_group_sizze_30311 * sdiv_up64(m_24014 *
                                                                      iota32_arg_24397,
                                                                      sext_i32_i64(num_threads_38888))) -
                               1 - ((sext_i32_i64(local_tid_38938 -
                                     skip_threads_38964) + 1) *
                                    (segscan_group_sizze_30311 *
                                     sdiv_up64(m_24014 * iota32_arg_24397,
                                               sext_i32_i64(num_threads_38888))) -
                                    1));
                    
                    if (inactive_38965) {
                        x_30319 = x_30323;
                        x_30320 = x_30324;
                        x_30321 = x_30325;
                        x_30322 = x_30326;
                    }
                    if (!inactive_38965) {
                        int64_t res_30327 = add64(x_30319, x_30323);
                        int64_t res_30328 = add64(x_30320, x_30324);
                        int64_t res_30329 = add64(x_30321, x_30325);
                        int64_t res_30330 = add64(x_30322, x_30326);
                        
                        x_30319 = res_30327;
                        x_30320 = res_30328;
                        x_30321 = res_30329;
                        x_30322 = res_30330;
                    }
                }
            }
            if (sle32(wave_sizze_38940, skip_threads_38964)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38964, local_tid_38938 -
                      squot32(local_tid_38938, 32) * 32) &&
                ltid_in_bounds_38963) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)] =
                        x_30319;
                    x_30323 = x_30319;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)] =
                        x_30320;
                    x_30324 = x_30320;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)] =
                        x_30321;
                    x_30325 = x_30321;
                    ((volatile __local
                      int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)] =
                        x_30322;
                    x_30326 = x_30322;
                }
            }
            if (sle32(wave_sizze_38940, skip_threads_38964)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38964 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38938 - squot32(local_tid_38938, 32) * 32) == 31 &&
            ltid_in_bounds_38963) {
            ((volatile __local
              int64_t *) scan_arr_mem_38942)[sext_i32_i64(squot32(local_tid_38938,
                                                                  32))] =
                x_30319;
            ((volatile __local
              int64_t *) scan_arr_mem_38944)[sext_i32_i64(squot32(local_tid_38938,
                                                                  32))] =
                x_30320;
            ((volatile __local
              int64_t *) scan_arr_mem_38946)[sext_i32_i64(squot32(local_tid_38938,
                                                                  32))] =
                x_30321;
            ((volatile __local
              int64_t *) scan_arr_mem_38948)[sext_i32_i64(squot32(local_tid_38938,
                                                                  32))] =
                x_30322;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38966;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38938, 32) == 0 && ltid_in_bounds_38963) {
                x_38955 = ((volatile __local
                            int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)];
                x_38956 = ((volatile __local
                            int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)];
                x_38957 = ((volatile __local
                            int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)];
                x_38958 = ((volatile __local
                            int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)];
                if ((local_tid_38938 - squot32(local_tid_38938, 32) * 32) ==
                    0) {
                    x_38951 = x_38955;
                    x_38952 = x_38956;
                    x_38953 = x_38957;
                    x_38954 = x_38958;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38966 = 1;
            while (slt32(skip_threads_38966, 32)) {
                if (sle32(skip_threads_38966, local_tid_38938 -
                          squot32(local_tid_38938, 32) * 32) &&
                    (squot32(local_tid_38938, 32) == 0 &&
                     ltid_in_bounds_38963)) {
                    // read operands
                    {
                        x_38951 = ((volatile __local
                                    int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938) -
                                                                   sext_i32_i64(skip_threads_38966)];
                        x_38952 = ((volatile __local
                                    int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938) -
                                                                   sext_i32_i64(skip_threads_38966)];
                        x_38953 = ((volatile __local
                                    int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938) -
                                                                   sext_i32_i64(skip_threads_38966)];
                        x_38954 = ((volatile __local
                                    int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938) -
                                                                   sext_i32_i64(skip_threads_38966)];
                    }
                    // perform operation
                    {
                        bool inactive_38967 =
                             slt64(srem64((sext_i32_i64(local_tid_38938 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_30311 *
                                           sdiv_up64(m_24014 * iota32_arg_24397,
                                                     sext_i32_i64(num_threads_38888))) -
                                          1, iota32_arg_24397),
                                   (sext_i32_i64(local_tid_38938 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_30311 *
                                               sdiv_up64(m_24014 *
                                                         iota32_arg_24397,
                                                         sext_i32_i64(num_threads_38888))) -
                                   1 - ((sext_i32_i64((local_tid_38938 -
                                                       skip_threads_38966) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_30311 *
                                         sdiv_up64(m_24014 * iota32_arg_24397,
                                                   sext_i32_i64(num_threads_38888))) -
                                        1));
                        
                        if (inactive_38967) {
                            x_38951 = x_38955;
                            x_38952 = x_38956;
                            x_38953 = x_38957;
                            x_38954 = x_38958;
                        }
                        if (!inactive_38967) {
                            int64_t res_38959 = add64(x_38951, x_38955);
                            int64_t res_38960 = add64(x_38952, x_38956);
                            int64_t res_38961 = add64(x_38953, x_38957);
                            int64_t res_38962 = add64(x_38954, x_38958);
                            
                            x_38951 = res_38959;
                            x_38952 = res_38960;
                            x_38953 = res_38961;
                            x_38954 = res_38962;
                        }
                    }
                }
                if (sle32(wave_sizze_38940, skip_threads_38966)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38966, local_tid_38938 -
                          squot32(local_tid_38938, 32) * 32) &&
                    (squot32(local_tid_38938, 32) == 0 &&
                     ltid_in_bounds_38963)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)] =
                            x_38951;
                        x_38955 = x_38951;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)] =
                            x_38952;
                        x_38956 = x_38952;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)] =
                            x_38953;
                        x_38957 = x_38953;
                        ((volatile __local
                          int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)] =
                            x_38954;
                        x_38958 = x_38954;
                    }
                }
                if (sle32(wave_sizze_38940, skip_threads_38966)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38966 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38938, 32) == 0 || !ltid_in_bounds_38963)) {
            // read operands
            {
                x_30323 = x_30319;
                x_30324 = x_30320;
                x_30325 = x_30321;
                x_30326 = x_30322;
                x_30319 = ((__local
                            int64_t *) scan_arr_mem_38942)[sext_i32_i64(squot32(local_tid_38938,
                                                                                32)) -
                                                           1];
                x_30320 = ((__local
                            int64_t *) scan_arr_mem_38944)[sext_i32_i64(squot32(local_tid_38938,
                                                                                32)) -
                                                           1];
                x_30321 = ((__local
                            int64_t *) scan_arr_mem_38946)[sext_i32_i64(squot32(local_tid_38938,
                                                                                32)) -
                                                           1];
                x_30322 = ((__local
                            int64_t *) scan_arr_mem_38948)[sext_i32_i64(squot32(local_tid_38938,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_38968 =
                     slt64(srem64((sext_i32_i64(local_tid_38938) + 1) *
                                  (segscan_group_sizze_30311 *
                                   sdiv_up64(m_24014 * iota32_arg_24397,
                                             sext_i32_i64(num_threads_38888))) -
                                  1, iota32_arg_24397),
                           (sext_i32_i64(local_tid_38938) + 1) *
                           (segscan_group_sizze_30311 * sdiv_up64(m_24014 *
                                                                  iota32_arg_24397,
                                                                  sext_i32_i64(num_threads_38888))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38938, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_30311 *
                                                 sdiv_up64(m_24014 *
                                                           iota32_arg_24397,
                                                           sext_i32_i64(num_threads_38888))) -
                                1));
                
                if (inactive_38968) {
                    x_30319 = x_30323;
                    x_30320 = x_30324;
                    x_30321 = x_30325;
                    x_30322 = x_30326;
                }
                if (!inactive_38968) {
                    int64_t res_30327 = add64(x_30319, x_30323);
                    int64_t res_30328 = add64(x_30320, x_30324);
                    int64_t res_30329 = add64(x_30321, x_30325);
                    int64_t res_30330 = add64(x_30322, x_30326);
                    
                    x_30319 = res_30327;
                    x_30320 = res_30328;
                    x_30321 = res_30329;
                    x_30322 = res_30330;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)] =
                    x_30319;
                ((__local
                  int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)] =
                    x_30320;
                ((__local
                  int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)] =
                    x_30321;
                ((__local
                  int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)] =
                    x_30322;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38938, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)] =
                x_30323;
            ((__local
              int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)] =
                x_30324;
            ((__local
              int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)] =
                x_30325;
            ((__local
              int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)] =
                x_30326;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_29627, m_24014) && slt64(gtid_29635, iota32_arg_24397)) {
            ((__global int64_t *) mem_37517)[gtid_29627 * iota32_arg_24397 +
                                             gtid_29635] = ((__local
                                                             int64_t *) scan_arr_mem_38942)[sext_i32_i64(local_tid_38938)];
            ((__global int64_t *) mem_37520)[gtid_29627 * iota32_arg_24397 +
                                             gtid_29635] = ((__local
                                                             int64_t *) scan_arr_mem_38944)[sext_i32_i64(local_tid_38938)];
            ((__global int64_t *) mem_37523)[gtid_29627 * iota32_arg_24397 +
                                             gtid_29635] = ((__local
                                                             int64_t *) scan_arr_mem_38946)[sext_i32_i64(local_tid_38938)];
            ((__global int64_t *) mem_37526)[gtid_29627 * iota32_arg_24397 +
                                             gtid_29635] = ((__local
                                                             int64_t *) scan_arr_mem_38948)[sext_i32_i64(local_tid_38938)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30311
}
__kernel void mainDetailedziscan_stage2_29989(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_38718_backing_aligned_0,
                                              int64_t m_24014,
                                              int64_t iota32_arg_24397, __global
                                              unsigned char *mem_37460,
                                              int64_t stage1_num_groups_38687,
                                              int32_t num_threads_38688)
{
    #define segscan_group_sizze_30068 (mainDetailedzisegscan_group_sizze_29983)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_38718_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_38718_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38713;
    int32_t local_tid_38714;
    int64_t group_sizze_38717;
    int32_t wave_sizze_38716;
    int32_t group_tid_38715;
    
    global_tid_38713 = get_global_id(0);
    local_tid_38714 = get_local_id(0);
    group_sizze_38717 = get_local_size(0);
    wave_sizze_38716 = LOCKSTEP_WIDTH;
    group_tid_38715 = get_group_id(0);
    
    int32_t phys_tid_29989;
    
    phys_tid_29989 = global_tid_38713;
    
    __local char *scan_arr_mem_38718;
    
    scan_arr_mem_38718 = (__local char *) scan_arr_mem_38718_backing_0;
    
    int64_t flat_idx_38720;
    
    flat_idx_38720 = (sext_i32_i64(local_tid_38714) + 1) *
        (segscan_group_sizze_30068 * sdiv_up64(m_24014 * iota32_arg_24397,
                                               sext_i32_i64(num_threads_38688))) -
        1;
    
    int64_t gtid_29980;
    
    gtid_29980 = squot64(flat_idx_38720, iota32_arg_24397);
    
    int64_t gtid_29988;
    
    gtid_29988 = flat_idx_38720 - squot64(flat_idx_38720, iota32_arg_24397) *
        iota32_arg_24397;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_29980, m_24014) && slt64(gtid_29988, iota32_arg_24397)) {
            ((__local
              float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)] =
                ((__global float *) mem_37460)[gtid_29980 * iota32_arg_24397 +
                                               gtid_29988];
        } else {
            ((__local
              float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_30072;
    float x_30073;
    float x_38721;
    float x_38722;
    bool ltid_in_bounds_38724;
    
    ltid_in_bounds_38724 = slt64(sext_i32_i64(local_tid_38714),
                                 stage1_num_groups_38687);
    
    int32_t skip_threads_38725;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38724) {
            x_30073 = ((volatile __local
                        float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)];
            if ((local_tid_38714 - squot32(local_tid_38714, 32) * 32) == 0) {
                x_30072 = x_30073;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38725 = 1;
        while (slt32(skip_threads_38725, 32)) {
            if (sle32(skip_threads_38725, local_tid_38714 -
                      squot32(local_tid_38714, 32) * 32) &&
                ltid_in_bounds_38724) {
                // read operands
                {
                    x_30072 = ((volatile __local
                                float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714) -
                                                             sext_i32_i64(skip_threads_38725)];
                }
                // perform operation
                {
                    bool inactive_38726 =
                         slt64(srem64((sext_i32_i64(local_tid_38714) + 1) *
                                      (segscan_group_sizze_30068 *
                                       sdiv_up64(m_24014 * iota32_arg_24397,
                                                 sext_i32_i64(num_threads_38688))) -
                                      1, iota32_arg_24397),
                               (sext_i32_i64(local_tid_38714) + 1) *
                               (segscan_group_sizze_30068 * sdiv_up64(m_24014 *
                                                                      iota32_arg_24397,
                                                                      sext_i32_i64(num_threads_38688))) -
                               1 - ((sext_i32_i64(local_tid_38714 -
                                     skip_threads_38725) + 1) *
                                    (segscan_group_sizze_30068 *
                                     sdiv_up64(m_24014 * iota32_arg_24397,
                                               sext_i32_i64(num_threads_38688))) -
                                    1));
                    
                    if (inactive_38726) {
                        x_30072 = x_30073;
                    }
                    if (!inactive_38726) {
                        float res_30074 = x_30072 + x_30073;
                        
                        x_30072 = res_30074;
                    }
                }
            }
            if (sle32(wave_sizze_38716, skip_threads_38725)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38725, local_tid_38714 -
                      squot32(local_tid_38714, 32) * 32) &&
                ltid_in_bounds_38724) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)] =
                        x_30072;
                    x_30073 = x_30072;
                }
            }
            if (sle32(wave_sizze_38716, skip_threads_38725)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38725 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38714 - squot32(local_tid_38714, 32) * 32) == 31 &&
            ltid_in_bounds_38724) {
            ((volatile __local
              float *) scan_arr_mem_38718)[sext_i32_i64(squot32(local_tid_38714,
                                                                32))] = x_30072;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38727;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38714, 32) == 0 && ltid_in_bounds_38724) {
                x_38722 = ((volatile __local
                            float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)];
                if ((local_tid_38714 - squot32(local_tid_38714, 32) * 32) ==
                    0) {
                    x_38721 = x_38722;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38727 = 1;
            while (slt32(skip_threads_38727, 32)) {
                if (sle32(skip_threads_38727, local_tid_38714 -
                          squot32(local_tid_38714, 32) * 32) &&
                    (squot32(local_tid_38714, 32) == 0 &&
                     ltid_in_bounds_38724)) {
                    // read operands
                    {
                        x_38721 = ((volatile __local
                                    float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714) -
                                                                 sext_i32_i64(skip_threads_38727)];
                    }
                    // perform operation
                    {
                        bool inactive_38728 =
                             slt64(srem64((sext_i32_i64(local_tid_38714 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_30068 *
                                           sdiv_up64(m_24014 * iota32_arg_24397,
                                                     sext_i32_i64(num_threads_38688))) -
                                          1, iota32_arg_24397),
                                   (sext_i32_i64(local_tid_38714 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_30068 *
                                               sdiv_up64(m_24014 *
                                                         iota32_arg_24397,
                                                         sext_i32_i64(num_threads_38688))) -
                                   1 - ((sext_i32_i64((local_tid_38714 -
                                                       skip_threads_38727) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_30068 *
                                         sdiv_up64(m_24014 * iota32_arg_24397,
                                                   sext_i32_i64(num_threads_38688))) -
                                        1));
                        
                        if (inactive_38728) {
                            x_38721 = x_38722;
                        }
                        if (!inactive_38728) {
                            float res_38723 = x_38721 + x_38722;
                            
                            x_38721 = res_38723;
                        }
                    }
                }
                if (sle32(wave_sizze_38716, skip_threads_38727)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38727, local_tid_38714 -
                          squot32(local_tid_38714, 32) * 32) &&
                    (squot32(local_tid_38714, 32) == 0 &&
                     ltid_in_bounds_38724)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)] =
                            x_38721;
                        x_38722 = x_38721;
                    }
                }
                if (sle32(wave_sizze_38716, skip_threads_38727)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38727 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38714, 32) == 0 || !ltid_in_bounds_38724)) {
            // read operands
            {
                x_30073 = x_30072;
                x_30072 = ((__local
                            float *) scan_arr_mem_38718)[sext_i32_i64(squot32(local_tid_38714,
                                                                              32)) -
                                                         1];
            }
            // perform operation
            {
                bool inactive_38729 =
                     slt64(srem64((sext_i32_i64(local_tid_38714) + 1) *
                                  (segscan_group_sizze_30068 *
                                   sdiv_up64(m_24014 * iota32_arg_24397,
                                             sext_i32_i64(num_threads_38688))) -
                                  1, iota32_arg_24397),
                           (sext_i32_i64(local_tid_38714) + 1) *
                           (segscan_group_sizze_30068 * sdiv_up64(m_24014 *
                                                                  iota32_arg_24397,
                                                                  sext_i32_i64(num_threads_38688))) -
                           1 - ((sext_i32_i64(squot32(local_tid_38714, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_30068 *
                                                 sdiv_up64(m_24014 *
                                                           iota32_arg_24397,
                                                           sext_i32_i64(num_threads_38688))) -
                                1));
                
                if (inactive_38729) {
                    x_30072 = x_30073;
                }
                if (!inactive_38729) {
                    float res_30074 = x_30072 + x_30073;
                    
                    x_30072 = res_30074;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)] =
                    x_30072;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38714, 32) == 0) {
            ((__local
              float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)] =
                x_30073;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_29980, m_24014) && slt64(gtid_29988, iota32_arg_24397)) {
            ((__global float *) mem_37460)[gtid_29980 * iota32_arg_24397 +
                                           gtid_29988] = ((__local
                                                           float *) scan_arr_mem_38718)[sext_i32_i64(local_tid_38714)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30068
}
__kernel void mainDetailedziscan_stage3_27862(__global int *global_failure,
                                              int64_t N_24013, int64_t m_24014,
                                              int64_t num_groups_27880, __global
                                              unsigned char *mem_37102,
                                              int32_t num_threads_38261,
                                              int32_t required_groups_38303)
{
    #define segscan_group_sizze_27879 (mainDetailedzisegscan_group_sizze_27856)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38304;
    int32_t local_tid_38305;
    int64_t group_sizze_38308;
    int32_t wave_sizze_38307;
    int32_t group_tid_38306;
    
    global_tid_38304 = get_global_id(0);
    local_tid_38305 = get_local_id(0);
    group_sizze_38308 = get_local_size(0);
    wave_sizze_38307 = LOCKSTEP_WIDTH;
    group_tid_38306 = get_group_id(0);
    
    int32_t phys_tid_27862;
    
    phys_tid_27862 = global_tid_38304;
    
    int32_t phys_group_id_38309;
    
    phys_group_id_38309 = get_group_id(0);
    for (int32_t i_38310 = 0; i_38310 < sdiv_up32(required_groups_38303 -
                                                  phys_group_id_38309,
                                                  sext_i64_i32(num_groups_27880));
         i_38310++) {
        int32_t virt_group_id_38311 = phys_group_id_38309 + i_38310 *
                sext_i64_i32(num_groups_27880);
        int64_t flat_idx_38312 = sext_i32_i64(virt_group_id_38311) *
                segscan_group_sizze_27879 + sext_i32_i64(local_tid_38305);
        int64_t gtid_27853 = squot64(flat_idx_38312, N_24013);
        int64_t gtid_27861 = flat_idx_38312 - squot64(flat_idx_38312, N_24013) *
                N_24013;
        int64_t orig_group_38313 = squot64(flat_idx_38312,
                                           segscan_group_sizze_27879 *
                                           sdiv_up64(m_24014 * N_24013,
                                                     sext_i32_i64(num_threads_38261)));
        int64_t carry_in_flat_idx_38314 = orig_group_38313 *
                (segscan_group_sizze_27879 * sdiv_up64(m_24014 * N_24013,
                                                       sext_i32_i64(num_threads_38261))) -
                1;
        
        if (slt64(gtid_27853, m_24014) && slt64(gtid_27861, N_24013)) {
            if (!(orig_group_38313 == 0 || (flat_idx_38312 ==
                                            (orig_group_38313 + 1) *
                                            (segscan_group_sizze_27879 *
                                             sdiv_up64(m_24014 * N_24013,
                                                       sext_i32_i64(num_threads_38261))) -
                                            1 || slt64(srem64(flat_idx_38312,
                                                              N_24013),
                                                       flat_idx_38312 -
                                                       carry_in_flat_idx_38314)))) {
                int64_t x_27884;
                int64_t x_27885;
                
                x_27884 = ((__global
                            int64_t *) mem_37102)[squot64(carry_in_flat_idx_38314,
                                                          N_24013) * N_24013 +
                                                  (carry_in_flat_idx_38314 -
                                                   squot64(carry_in_flat_idx_38314,
                                                           N_24013) * N_24013)];
                x_27885 = ((__global int64_t *) mem_37102)[gtid_27853 *
                                                           N_24013 +
                                                           gtid_27861];
                
                int64_t res_27886;
                
                res_27886 = add64(x_27884, x_27885);
                x_27884 = res_27886;
                ((__global int64_t *) mem_37102)[gtid_27853 * N_24013 +
                                                 gtid_27861] = x_27884;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_27879
}
__kernel void mainDetailedziscan_stage3_29636(__global int *global_failure,
                                              int64_t m_24014,
                                              int64_t iota32_arg_24397,
                                              int64_t num_groups_30312, __global
                                              unsigned char *mem_37517, __global
                                              unsigned char *mem_37520, __global
                                              unsigned char *mem_37523, __global
                                              unsigned char *mem_37526,
                                              int32_t num_threads_38888,
                                              int32_t required_groups_38969)
{
    #define segscan_group_sizze_30311 (mainDetailedzisegscan_group_sizze_29630)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38970;
    int32_t local_tid_38971;
    int64_t group_sizze_38974;
    int32_t wave_sizze_38973;
    int32_t group_tid_38972;
    
    global_tid_38970 = get_global_id(0);
    local_tid_38971 = get_local_id(0);
    group_sizze_38974 = get_local_size(0);
    wave_sizze_38973 = LOCKSTEP_WIDTH;
    group_tid_38972 = get_group_id(0);
    
    int32_t phys_tid_29636;
    
    phys_tid_29636 = global_tid_38970;
    
    int32_t phys_group_id_38975;
    
    phys_group_id_38975 = get_group_id(0);
    for (int32_t i_38976 = 0; i_38976 < sdiv_up32(required_groups_38969 -
                                                  phys_group_id_38975,
                                                  sext_i64_i32(num_groups_30312));
         i_38976++) {
        int32_t virt_group_id_38977 = phys_group_id_38975 + i_38976 *
                sext_i64_i32(num_groups_30312);
        int64_t flat_idx_38978 = sext_i32_i64(virt_group_id_38977) *
                segscan_group_sizze_30311 + sext_i32_i64(local_tid_38971);
        int64_t gtid_29627 = squot64(flat_idx_38978, iota32_arg_24397);
        int64_t gtid_29635 = flat_idx_38978 - squot64(flat_idx_38978,
                                                      iota32_arg_24397) *
                iota32_arg_24397;
        int64_t orig_group_38979 = squot64(flat_idx_38978,
                                           segscan_group_sizze_30311 *
                                           sdiv_up64(m_24014 * iota32_arg_24397,
                                                     sext_i32_i64(num_threads_38888)));
        int64_t carry_in_flat_idx_38980 = orig_group_38979 *
                (segscan_group_sizze_30311 * sdiv_up64(m_24014 *
                                                       iota32_arg_24397,
                                                       sext_i32_i64(num_threads_38888))) -
                1;
        
        if (slt64(gtid_29627, m_24014) && slt64(gtid_29635, iota32_arg_24397)) {
            if (!(orig_group_38979 == 0 || (flat_idx_38978 ==
                                            (orig_group_38979 + 1) *
                                            (segscan_group_sizze_30311 *
                                             sdiv_up64(m_24014 *
                                                       iota32_arg_24397,
                                                       sext_i32_i64(num_threads_38888))) -
                                            1 || slt64(srem64(flat_idx_38978,
                                                              iota32_arg_24397),
                                                       flat_idx_38978 -
                                                       carry_in_flat_idx_38980)))) {
                int64_t x_30319;
                int64_t x_30320;
                int64_t x_30321;
                int64_t x_30322;
                int64_t x_30323;
                int64_t x_30324;
                int64_t x_30325;
                int64_t x_30326;
                
                x_30319 = ((__global
                            int64_t *) mem_37517)[squot64(carry_in_flat_idx_38980,
                                                          iota32_arg_24397) *
                                                  iota32_arg_24397 +
                                                  (carry_in_flat_idx_38980 -
                                                   squot64(carry_in_flat_idx_38980,
                                                           iota32_arg_24397) *
                                                   iota32_arg_24397)];
                x_30320 = ((__global
                            int64_t *) mem_37520)[squot64(carry_in_flat_idx_38980,
                                                          iota32_arg_24397) *
                                                  iota32_arg_24397 +
                                                  (carry_in_flat_idx_38980 -
                                                   squot64(carry_in_flat_idx_38980,
                                                           iota32_arg_24397) *
                                                   iota32_arg_24397)];
                x_30321 = ((__global
                            int64_t *) mem_37523)[squot64(carry_in_flat_idx_38980,
                                                          iota32_arg_24397) *
                                                  iota32_arg_24397 +
                                                  (carry_in_flat_idx_38980 -
                                                   squot64(carry_in_flat_idx_38980,
                                                           iota32_arg_24397) *
                                                   iota32_arg_24397)];
                x_30322 = ((__global
                            int64_t *) mem_37526)[squot64(carry_in_flat_idx_38980,
                                                          iota32_arg_24397) *
                                                  iota32_arg_24397 +
                                                  (carry_in_flat_idx_38980 -
                                                   squot64(carry_in_flat_idx_38980,
                                                           iota32_arg_24397) *
                                                   iota32_arg_24397)];
                x_30323 = ((__global int64_t *) mem_37517)[gtid_29627 *
                                                           iota32_arg_24397 +
                                                           gtid_29635];
                x_30324 = ((__global int64_t *) mem_37520)[gtid_29627 *
                                                           iota32_arg_24397 +
                                                           gtid_29635];
                x_30325 = ((__global int64_t *) mem_37523)[gtid_29627 *
                                                           iota32_arg_24397 +
                                                           gtid_29635];
                x_30326 = ((__global int64_t *) mem_37526)[gtid_29627 *
                                                           iota32_arg_24397 +
                                                           gtid_29635];
                
                int64_t res_30327;
                
                res_30327 = add64(x_30319, x_30323);
                
                int64_t res_30328 = add64(x_30320, x_30324);
                int64_t res_30329 = add64(x_30321, x_30325);
                int64_t res_30330 = add64(x_30322, x_30326);
                
                x_30319 = res_30327;
                x_30320 = res_30328;
                x_30321 = res_30329;
                x_30322 = res_30330;
                ((__global int64_t *) mem_37517)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635] = x_30319;
                ((__global int64_t *) mem_37520)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635] = x_30320;
                ((__global int64_t *) mem_37523)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635] = x_30321;
                ((__global int64_t *) mem_37526)[gtid_29627 * iota32_arg_24397 +
                                                 gtid_29635] = x_30322;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30311
}
__kernel void mainDetailedziscan_stage3_29989(__global int *global_failure,
                                              int64_t m_24014,
                                              int64_t iota32_arg_24397,
                                              int64_t num_groups_30069, __global
                                              unsigned char *mem_37460,
                                              int32_t num_threads_38688,
                                              int32_t required_groups_38730)
{
    #define segscan_group_sizze_30068 (mainDetailedzisegscan_group_sizze_29983)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38731;
    int32_t local_tid_38732;
    int64_t group_sizze_38735;
    int32_t wave_sizze_38734;
    int32_t group_tid_38733;
    
    global_tid_38731 = get_global_id(0);
    local_tid_38732 = get_local_id(0);
    group_sizze_38735 = get_local_size(0);
    wave_sizze_38734 = LOCKSTEP_WIDTH;
    group_tid_38733 = get_group_id(0);
    
    int32_t phys_tid_29989;
    
    phys_tid_29989 = global_tid_38731;
    
    int32_t phys_group_id_38736;
    
    phys_group_id_38736 = get_group_id(0);
    for (int32_t i_38737 = 0; i_38737 < sdiv_up32(required_groups_38730 -
                                                  phys_group_id_38736,
                                                  sext_i64_i32(num_groups_30069));
         i_38737++) {
        int32_t virt_group_id_38738 = phys_group_id_38736 + i_38737 *
                sext_i64_i32(num_groups_30069);
        int64_t flat_idx_38739 = sext_i32_i64(virt_group_id_38738) *
                segscan_group_sizze_30068 + sext_i32_i64(local_tid_38732);
        int64_t gtid_29980 = squot64(flat_idx_38739, iota32_arg_24397);
        int64_t gtid_29988 = flat_idx_38739 - squot64(flat_idx_38739,
                                                      iota32_arg_24397) *
                iota32_arg_24397;
        int64_t orig_group_38740 = squot64(flat_idx_38739,
                                           segscan_group_sizze_30068 *
                                           sdiv_up64(m_24014 * iota32_arg_24397,
                                                     sext_i32_i64(num_threads_38688)));
        int64_t carry_in_flat_idx_38741 = orig_group_38740 *
                (segscan_group_sizze_30068 * sdiv_up64(m_24014 *
                                                       iota32_arg_24397,
                                                       sext_i32_i64(num_threads_38688))) -
                1;
        
        if (slt64(gtid_29980, m_24014) && slt64(gtid_29988, iota32_arg_24397)) {
            if (!(orig_group_38740 == 0 || (flat_idx_38739 ==
                                            (orig_group_38740 + 1) *
                                            (segscan_group_sizze_30068 *
                                             sdiv_up64(m_24014 *
                                                       iota32_arg_24397,
                                                       sext_i32_i64(num_threads_38688))) -
                                            1 || slt64(srem64(flat_idx_38739,
                                                              iota32_arg_24397),
                                                       flat_idx_38739 -
                                                       carry_in_flat_idx_38741)))) {
                float x_30072;
                float x_30073;
                
                x_30072 = ((__global
                            float *) mem_37460)[squot64(carry_in_flat_idx_38741,
                                                        iota32_arg_24397) *
                                                iota32_arg_24397 +
                                                (carry_in_flat_idx_38741 -
                                                 squot64(carry_in_flat_idx_38741,
                                                         iota32_arg_24397) *
                                                 iota32_arg_24397)];
                x_30073 = ((__global float *) mem_37460)[gtid_29980 *
                                                         iota32_arg_24397 +
                                                         gtid_29988];
                
                float res_30074;
                
                res_30074 = x_30072 + x_30073;
                x_30072 = res_30074;
                ((__global float *) mem_37460)[gtid_29980 * iota32_arg_24397 +
                                               gtid_29988] = x_30072;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_30068
}
__kernel void mainDetailedzisegmap_25659(__global int *global_failure,
                                         int64_t N_24013, float freq_24019,
                                         int64_t res_24033, __global
                                         unsigned char *mappingindices_mem_36651,
                                         __global unsigned char *mem_36656)
{
    #define segmap_group_sizze_25732 (mainDetailedzisegmap_group_sizze_25662)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37790;
    int32_t local_tid_37791;
    int64_t group_sizze_37794;
    int32_t wave_sizze_37793;
    int32_t group_tid_37792;
    
    global_tid_37790 = get_global_id(0);
    local_tid_37791 = get_local_id(0);
    group_sizze_37794 = get_local_size(0);
    wave_sizze_37793 = LOCKSTEP_WIDTH;
    group_tid_37792 = get_group_id(0);
    
    int32_t phys_tid_25659;
    
    phys_tid_25659 = global_tid_37790;
    
    int64_t gtid_25657;
    
    gtid_25657 = squot64(sext_i32_i64(group_tid_37792) *
                         segmap_group_sizze_25732 +
                         sext_i32_i64(local_tid_37791), N_24013);
    
    int64_t gtid_25658;
    
    gtid_25658 = sext_i32_i64(group_tid_37792) * segmap_group_sizze_25732 +
        sext_i32_i64(local_tid_37791) - squot64(sext_i32_i64(group_tid_37792) *
                                                segmap_group_sizze_25732 +
                                                sext_i32_i64(local_tid_37791),
                                                N_24013) * N_24013;
    if (slt64(gtid_25657, res_24033) && slt64(gtid_25658, N_24013)) {
        int32_t index_primexp_35303 = sext_i64_i32(gtid_25657);
        bool index_primexp_35300 = index_primexp_35303 == 0;
        float res_25738;
        
        if (index_primexp_35300) {
            res_25738 = 1.0F;
        } else {
            int32_t x_25737 = ((__global
                                int32_t *) mappingindices_mem_36651)[gtid_25658];
            bool cond_25739 = index_primexp_35303 == 1;
            float res_25740;
            
            if (cond_25739) {
                float res_25741 = sitofp_i32_f32(x_25737);
                
                res_25740 = res_25741;
            } else {
                int32_t r32_arg_25742 = sdiv32(index_primexp_35303, 2);
                float res_25743 = sitofp_i32_f32(r32_arg_25742);
                float res_25744 = sitofp_i32_f32(x_25737);
                float x_25745 = 6.2831855F * res_25743;
                float x_25746 = res_25744 * x_25745;
                float angle_25747 = x_25746 / freq_24019;
                int32_t x_25748 = smod32(index_primexp_35303, 2);
                bool cond_25749 = x_25748 == 0;
                float res_25750;
                
                if (cond_25749) {
                    float res_25751;
                    
                    res_25751 = futrts_sin32(angle_25747);
                    res_25750 = res_25751;
                } else {
                    float res_25752;
                    
                    res_25752 = futrts_cos32(angle_25747);
                    res_25750 = res_25752;
                }
                res_25740 = res_25750;
            }
            res_25738 = res_25740;
        }
        ((__global float *) mem_36656)[gtid_25657 * N_24013 + gtid_25658] =
            res_25738;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25732
}
__kernel void mainDetailedzisegmap_25837(__global int *global_failure,
                                         int64_t N_24013, float freq_24019,
                                         int64_t res_24033, __global
                                         unsigned char *mappingindices_mem_36651,
                                         __global unsigned char *mem_36660)
{
    #define segmap_group_sizze_25906 (mainDetailedzisegmap_group_sizze_25840)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37795;
    int32_t local_tid_37796;
    int64_t group_sizze_37799;
    int32_t wave_sizze_37798;
    int32_t group_tid_37797;
    
    global_tid_37795 = get_global_id(0);
    local_tid_37796 = get_local_id(0);
    group_sizze_37799 = get_local_size(0);
    wave_sizze_37798 = LOCKSTEP_WIDTH;
    group_tid_37797 = get_group_id(0);
    
    int32_t phys_tid_25837;
    
    phys_tid_25837 = global_tid_37795;
    
    int64_t gtid_25835;
    
    gtid_25835 = squot64(sext_i32_i64(group_tid_37797) *
                         segmap_group_sizze_25906 +
                         sext_i32_i64(local_tid_37796), N_24013);
    
    int64_t gtid_25836;
    
    gtid_25836 = sext_i32_i64(group_tid_37797) * segmap_group_sizze_25906 +
        sext_i32_i64(local_tid_37796) - squot64(sext_i32_i64(group_tid_37797) *
                                                segmap_group_sizze_25906 +
                                                sext_i32_i64(local_tid_37796),
                                                N_24013) * N_24013;
    if (slt64(gtid_25835, res_24033) && slt64(gtid_25836, N_24013)) {
        int32_t index_primexp_35312 = sext_i64_i32(gtid_25835);
        bool index_primexp_35309 = index_primexp_35312 == 0;
        float res_25912;
        
        if (index_primexp_35309) {
            res_25912 = 1.0F;
        } else {
            int32_t x_25911 = ((__global
                                int32_t *) mappingindices_mem_36651)[gtid_25836];
            int32_t i_25913 = add32(1, index_primexp_35312);
            int32_t r32_arg_25914 = sdiv32(i_25913, 2);
            float res_25915 = sitofp_i32_f32(r32_arg_25914);
            float res_25916 = sitofp_i32_f32(x_25911);
            float x_25917 = 6.2831855F * res_25915;
            float x_25918 = res_25916 * x_25917;
            float angle_25919 = x_25918 / freq_24019;
            int32_t x_25920 = smod32(i_25913, 2);
            bool cond_25921 = x_25920 == 0;
            float res_25922;
            
            if (cond_25921) {
                float res_25923;
                
                res_25923 = futrts_sin32(angle_25919);
                res_25922 = res_25923;
            } else {
                float res_25924;
                
                res_25924 = futrts_cos32(angle_25919);
                res_25922 = res_25924;
            }
            res_25912 = res_25922;
        }
        ((__global float *) mem_36660)[gtid_25835 * N_24013 + gtid_25836] =
            res_25912;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25906
}
__kernel void mainDetailedzisegmap_25965(__global int *global_failure,
                                         int64_t N_24013, int64_t res_24033,
                                         float res_24098, __global
                                         unsigned char *mem_36664, __global
                                         unsigned char *mem_36668)
{
    #define segmap_group_sizze_25989 (mainDetailedzisegmap_group_sizze_25968)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37800;
    int32_t local_tid_37801;
    int64_t group_sizze_37804;
    int32_t wave_sizze_37803;
    int32_t group_tid_37802;
    
    global_tid_37800 = get_global_id(0);
    local_tid_37801 = get_local_id(0);
    group_sizze_37804 = get_local_size(0);
    wave_sizze_37803 = LOCKSTEP_WIDTH;
    group_tid_37802 = get_group_id(0);
    
    int32_t phys_tid_25965;
    
    phys_tid_25965 = global_tid_37800;
    
    int64_t gtid_25963;
    
    gtid_25963 = squot64(sext_i32_i64(group_tid_37802) *
                         segmap_group_sizze_25989 +
                         sext_i32_i64(local_tid_37801), res_24033);
    
    int64_t gtid_25964;
    
    gtid_25964 = sext_i32_i64(group_tid_37802) * segmap_group_sizze_25989 +
        sext_i32_i64(local_tid_37801) - squot64(sext_i32_i64(group_tid_37802) *
                                                segmap_group_sizze_25989 +
                                                sext_i32_i64(local_tid_37801),
                                                res_24033) * res_24033;
    if (slt64(gtid_25963, N_24013) && slt64(gtid_25964, res_24033)) {
        float x_25992 = ((__global float *) mem_36664)[gtid_25963 * res_24033 +
                                                       gtid_25964];
        float res_25993 = res_24098 + x_25992;
        
        ((__global float *) mem_36668)[gtid_25963 * res_24033 + gtid_25964] =
            res_25993;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25989
}
__kernel void mainDetailedzisegmap_25998(__global int *global_failure,
                                         int64_t N_24013, int64_t m_24014,
                                         int32_t n_24018, int32_t k2p2zq_24031,
                                         int64_t res_24033,
                                         int64_t num_groups_26023, __global
                                         unsigned char *binop_p_mem_36661,
                                         __global unsigned char *mem_36668,
                                         __global unsigned char *mem_36671,
                                         __global unsigned char *mem_36675,
                                         __global unsigned char *mem_36717)
{
    #define segmap_group_sizze_26022 (mainDetailedzisegmap_group_sizze_26000)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37808;
    int32_t local_tid_37809;
    int64_t group_sizze_37812;
    int32_t wave_sizze_37811;
    int32_t group_tid_37810;
    
    global_tid_37808 = get_global_id(0);
    local_tid_37809 = get_local_id(0);
    group_sizze_37812 = get_local_size(0);
    wave_sizze_37811 = LOCKSTEP_WIDTH;
    group_tid_37810 = get_group_id(0);
    
    int32_t phys_tid_25998;
    
    phys_tid_25998 = global_tid_37808;
    
    int32_t phys_group_id_37813;
    
    phys_group_id_37813 = get_group_id(0);
    for (int32_t i_37814 = 0; i_37814 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014, segmap_group_sizze_26022)) -
                   phys_group_id_37813, sext_i64_i32(num_groups_26023));
         i_37814++) {
        int32_t virt_group_id_37815 = phys_group_id_37813 + i_37814 *
                sext_i64_i32(num_groups_26023);
        int64_t gtid_25997 = sext_i32_i64(virt_group_id_37815) *
                segmap_group_sizze_26022 + sext_i32_i64(local_tid_37809);
        
        if (slt64(gtid_25997, m_24014)) {
            for (int32_t i_36629 = 0; i_36629 < k2p2zq_24031; i_36629++) {
                int64_t i_36517 = sext_i32_i64(i_36629);
                
                for (int32_t i_36628 = 0; i_36628 < k2p2zq_24031; i_36628++) {
                    int64_t i_36521 = sext_i32_i64(i_36628);
                    float res_26031;
                    float redout_36523 = 0.0F;
                    
                    for (int32_t i_36627 = 0; i_36627 < n_24018; i_36627++) {
                        int64_t i_36524 = sext_i32_i64(i_36627);
                        float x_26035 = ((__global float *) mem_36671)[i_36524 *
                                                                       m_24014 +
                                                                       gtid_25997];
                        float x_26036 = ((__global
                                          float *) binop_p_mem_36661)[i_36517 *
                                                                      N_24013 +
                                                                      i_36524];
                        float x_26037 = ((__global float *) mem_36668)[i_36524 *
                                                                       res_24033 +
                                                                       i_36521];
                        float x_26038 = x_26036 * x_26037;
                        bool res_26039;
                        
                        res_26039 = futrts_isnan32(x_26035);
                        
                        float y_26040;
                        
                        if (res_26039) {
                            y_26040 = 0.0F;
                        } else {
                            y_26040 = 1.0F;
                        }
                        
                        float res_26041 = x_26038 * y_26040;
                        float res_26034 = res_26041 + redout_36523;
                        float redout_tmp_37818 = res_26034;
                        
                        redout_36523 = redout_tmp_37818;
                    }
                    res_26031 = redout_36523;
                    ((__global float *) mem_36675)[phys_tid_25998 + (i_36517 *
                                                                     (num_groups_26023 *
                                                                      segmap_group_sizze_26022 *
                                                                      res_24033) +
                                                                     i_36521 *
                                                                     (num_groups_26023 *
                                                                      segmap_group_sizze_26022))] =
                        res_26031;
                }
            }
            for (int64_t i_37819 = 0; i_37819 < res_24033; i_37819++) {
                for (int64_t i_37820 = 0; i_37820 < res_24033; i_37820++) {
                    ((__global float *) mem_36717)[i_37819 * (m_24014 *
                                                              res_24033) +
                                                   i_37820 * m_24014 +
                                                   gtid_25997] = ((__global
                                                                   float *) mem_36675)[phys_tid_25998 +
                                                                                       (i_37819 *
                                                                                        (num_groups_26023 *
                                                                                         segmap_group_sizze_26022 *
                                                                                         res_24033) +
                                                                                        i_37820 *
                                                                                        (num_groups_26023 *
                                                                                         segmap_group_sizze_26022))];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26022
}
__kernel void mainDetailedzisegmap_26044(__global int *global_failure,
                                         int64_t m_24014, int64_t N_24015,
                                         int32_t n_24018, int32_t k2p2zq_24031,
                                         int64_t res_24033,
                                         int64_t num_groups_26200, __global
                                         unsigned char *images_mem_36652,
                                         __global unsigned char *mem_36664,
                                         __global unsigned char *mem_36668,
                                         __global unsigned char *mem_36720,
                                         __global unsigned char *mem_36736)
{
    #define segmap_group_sizze_26199 (mainDetailedzisegmap_group_sizze_26047)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37821;
    int32_t local_tid_37822;
    int64_t group_sizze_37825;
    int32_t wave_sizze_37824;
    int32_t group_tid_37823;
    
    global_tid_37821 = get_global_id(0);
    local_tid_37822 = get_local_id(0);
    group_sizze_37825 = get_local_size(0);
    wave_sizze_37824 = LOCKSTEP_WIDTH;
    group_tid_37823 = get_group_id(0);
    
    int32_t phys_tid_26044;
    
    phys_tid_26044 = global_tid_37821;
    
    int32_t phys_group_id_37826;
    
    phys_group_id_37826 = get_group_id(0);
    for (int32_t i_37827 = 0; i_37827 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014 * res_24033,
                                          segmap_group_sizze_26199)) -
                   phys_group_id_37826, sext_i64_i32(num_groups_26200));
         i_37827++) {
        int32_t virt_group_id_37828 = phys_group_id_37826 + i_37827 *
                sext_i64_i32(num_groups_26200);
        int64_t gtid_26042 = squot64(sext_i32_i64(virt_group_id_37828) *
                                     segmap_group_sizze_26199 +
                                     sext_i32_i64(local_tid_37822), res_24033);
        int64_t gtid_26043 = sext_i32_i64(virt_group_id_37828) *
                segmap_group_sizze_26199 + sext_i32_i64(local_tid_37822) -
                squot64(sext_i32_i64(virt_group_id_37828) *
                        segmap_group_sizze_26199 +
                        sext_i32_i64(local_tid_37822), res_24033) * res_24033;
        
        if (slt64(gtid_26042, m_24014) && slt64(gtid_26043, res_24033)) {
            for (int32_t i_36631 = 0; i_36631 < k2p2zq_24031; i_36631++) {
                int64_t i_36527 = sext_i32_i64(i_36631);
                float res_26211;
                float redout_36529 = 0.0F;
                
                for (int32_t i_36630 = 0; i_36630 < n_24018; i_36630++) {
                    int64_t i_36530 = sext_i32_i64(i_36630);
                    float x_26215 = ((__global
                                      float *) images_mem_36652)[gtid_26042 *
                                                                 N_24015 +
                                                                 i_36530];
                    float x_26216 = ((__global float *) mem_36664)[i_36530 *
                                                                   res_24033 +
                                                                   gtid_26043];
                    float x_26217 = ((__global float *) mem_36668)[i_36530 *
                                                                   res_24033 +
                                                                   i_36527];
                    float x_26218 = x_26216 * x_26217;
                    bool res_26219;
                    
                    res_26219 = futrts_isnan32(x_26215);
                    
                    float y_26220;
                    
                    if (res_26219) {
                        y_26220 = 0.0F;
                    } else {
                        y_26220 = 1.0F;
                    }
                    
                    float res_26221 = x_26218 * y_26220;
                    float res_26214 = res_26221 + redout_36529;
                    float redout_tmp_37830 = res_26214;
                    
                    redout_36529 = redout_tmp_37830;
                }
                res_26211 = redout_36529;
                ((__global float *) mem_36720)[phys_tid_26044 + i_36527 *
                                               (num_groups_26200 *
                                                segmap_group_sizze_26199)] =
                    res_26211;
            }
            for (int64_t i_37831 = 0; i_37831 < res_24033; i_37831++) {
                ((__global float *) mem_36736)[i_37831 * (res_24033 * m_24014) +
                                               gtid_26042 * res_24033 +
                                               gtid_26043] = ((__global
                                                               float *) mem_36720)[phys_tid_26044 +
                                                                                   i_37831 *
                                                                                   (num_groups_26200 *
                                                                                    segmap_group_sizze_26199)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26199
}
__kernel void mainDetailedzisegmap_26074(__global int *global_failure,
                                         int64_t m_24014, int64_t N_24015,
                                         int32_t n_24018, int64_t res_24033,
                                         __global
                                         unsigned char *images_mem_36652,
                                         __global unsigned char *mem_36664,
                                         __global unsigned char *mem_36668,
                                         __global unsigned char *mem_36741)
{
    #define segmap_group_sizze_26225 (mainDetailedzisegmap_group_sizze_26078)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37832;
    int32_t local_tid_37833;
    int64_t group_sizze_37836;
    int32_t wave_sizze_37835;
    int32_t group_tid_37834;
    
    global_tid_37832 = get_global_id(0);
    local_tid_37833 = get_local_id(0);
    group_sizze_37836 = get_local_size(0);
    wave_sizze_37835 = LOCKSTEP_WIDTH;
    group_tid_37834 = get_group_id(0);
    
    int32_t phys_tid_26074;
    
    phys_tid_26074 = global_tid_37832;
    
    int64_t gtid_26071;
    
    gtid_26071 = squot64(sext_i32_i64(group_tid_37834) *
                         segmap_group_sizze_26225 +
                         sext_i32_i64(local_tid_37833), res_24033 * res_24033);
    
    int64_t gtid_26072;
    
    gtid_26072 = squot64(sext_i32_i64(group_tid_37834) *
                         segmap_group_sizze_26225 +
                         sext_i32_i64(local_tid_37833) -
                         squot64(sext_i32_i64(group_tid_37834) *
                                 segmap_group_sizze_26225 +
                                 sext_i32_i64(local_tid_37833), res_24033 *
                                 res_24033) * (res_24033 * res_24033),
                         res_24033);
    
    int64_t gtid_26073;
    
    gtid_26073 = sext_i32_i64(group_tid_37834) * segmap_group_sizze_26225 +
        sext_i32_i64(local_tid_37833) - squot64(sext_i32_i64(group_tid_37834) *
                                                segmap_group_sizze_26225 +
                                                sext_i32_i64(local_tid_37833),
                                                res_24033 * res_24033) *
        (res_24033 * res_24033) - squot64(sext_i32_i64(group_tid_37834) *
                                          segmap_group_sizze_26225 +
                                          sext_i32_i64(local_tid_37833) -
                                          squot64(sext_i32_i64(group_tid_37834) *
                                                  segmap_group_sizze_26225 +
                                                  sext_i32_i64(local_tid_37833),
                                                  res_24033 * res_24033) *
                                          (res_24033 * res_24033), res_24033) *
        res_24033;
    if ((slt64(gtid_26071, m_24014) && slt64(gtid_26072, res_24033)) &&
        slt64(gtid_26073, res_24033)) {
        float res_26236;
        float redout_36531 = 0.0F;
        
        for (int32_t i_36632 = 0; i_36632 < n_24018; i_36632++) {
            int64_t i_36532 = sext_i32_i64(i_36632);
            float x_26240 = ((__global float *) images_mem_36652)[gtid_26071 *
                                                                  N_24015 +
                                                                  i_36532];
            float x_26241 = ((__global float *) mem_36664)[i_36532 * res_24033 +
                                                           gtid_26072];
            float x_26242 = ((__global float *) mem_36668)[i_36532 * res_24033 +
                                                           gtid_26073];
            float x_26243 = x_26241 * x_26242;
            bool res_26244;
            
            res_26244 = futrts_isnan32(x_26240);
            
            float y_26245;
            
            if (res_26244) {
                y_26245 = 0.0F;
            } else {
                y_26245 = 1.0F;
            }
            
            float res_26246 = x_26243 * y_26245;
            float res_26239 = res_26246 + redout_36531;
            float redout_tmp_37837 = res_26239;
            
            redout_36531 = redout_tmp_37837;
        }
        res_26236 = redout_36531;
        ((__global float *) mem_36741)[gtid_26071 * (res_24033 * res_24033) +
                                       gtid_26072 * res_24033 + gtid_26073] =
            res_26236;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26225
}
__kernel void mainDetailedzisegmap_26578(__global int *global_failure,
                                         int64_t m_24014, int64_t res_24033,
                                         int64_t m_24164,
                                         int64_t res_r_ixfn_36834,
                                         int64_t res_r_ixfn_36835,
                                         int64_t res_r_ixfn_36837, __global
                                         unsigned char *res_r_mem_36839,
                                         __global unsigned char *mem_36844)
{
    #define segmap_group_sizze_27201 (mainDetailedzisegmap_group_sizze_26582)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37960;
    int32_t local_tid_37961;
    int64_t group_sizze_37964;
    int32_t wave_sizze_37963;
    int32_t group_tid_37962;
    
    global_tid_37960 = get_global_id(0);
    local_tid_37961 = get_local_id(0);
    group_sizze_37964 = get_local_size(0);
    wave_sizze_37963 = LOCKSTEP_WIDTH;
    group_tid_37962 = get_group_id(0);
    
    int32_t phys_tid_26578;
    
    phys_tid_26578 = global_tid_37960;
    
    int64_t gtid_26575;
    
    gtid_26575 = squot64(sext_i32_i64(group_tid_37962) *
                         segmap_group_sizze_27201 +
                         sext_i32_i64(local_tid_37961), res_24033 * res_24033);
    
    int64_t gtid_26576;
    
    gtid_26576 = squot64(sext_i32_i64(group_tid_37962) *
                         segmap_group_sizze_27201 +
                         sext_i32_i64(local_tid_37961) -
                         squot64(sext_i32_i64(group_tid_37962) *
                                 segmap_group_sizze_27201 +
                                 sext_i32_i64(local_tid_37961), res_24033 *
                                 res_24033) * (res_24033 * res_24033),
                         res_24033);
    
    int64_t gtid_26577;
    
    gtid_26577 = sext_i32_i64(group_tid_37962) * segmap_group_sizze_27201 +
        sext_i32_i64(local_tid_37961) - squot64(sext_i32_i64(group_tid_37962) *
                                                segmap_group_sizze_27201 +
                                                sext_i32_i64(local_tid_37961),
                                                res_24033 * res_24033) *
        (res_24033 * res_24033) - squot64(sext_i32_i64(group_tid_37962) *
                                          segmap_group_sizze_27201 +
                                          sext_i32_i64(local_tid_37961) -
                                          squot64(sext_i32_i64(group_tid_37962) *
                                                  segmap_group_sizze_27201 +
                                                  sext_i32_i64(local_tid_37961),
                                                  res_24033 * res_24033) *
                                          (res_24033 * res_24033), res_24033) *
        res_24033;
    if ((slt64(gtid_26575, m_24014) && slt64(gtid_26576, res_24033)) &&
        slt64(gtid_26577, res_24033)) {
        int64_t index_primexp_35342 = m_24164 * gtid_26576;
        int64_t i_27207 = add64(res_24033, gtid_26577);
        int64_t new_index_27208 = i_27207 + index_primexp_35342;
        float res_27209 = ((__global
                            float *) res_r_mem_36839)[res_r_ixfn_36834 +
                                                      (gtid_26575 *
                                                       res_r_ixfn_36835 +
                                                       new_index_27208 *
                                                       res_r_ixfn_36837)];
        
        ((__global float *) mem_36844)[gtid_26575 * (res_24033 * res_24033) +
                                       gtid_26576 * res_24033 + gtid_26577] =
            res_27209;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27201
}
__kernel void mainDetailedzisegmap_26797(__global int *global_failure,
                                         int64_t m_24014, int64_t nm_24165,
                                         int64_t ctx_param_ext_36797,
                                         int64_t ctx_param_ext_36798,
                                         int64_t ctx_param_ext_36800, __global
                                         unsigned char *mem_param_36802,
                                         __global unsigned char *mem_36822)
{
    #define segmap_group_sizze_27166 (mainDetailedzisegmap_group_sizze_26800)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37954;
    int32_t local_tid_37955;
    int64_t group_sizze_37958;
    int32_t wave_sizze_37957;
    int32_t group_tid_37956;
    
    global_tid_37954 = get_global_id(0);
    local_tid_37955 = get_local_id(0);
    group_sizze_37958 = get_local_size(0);
    wave_sizze_37957 = LOCKSTEP_WIDTH;
    group_tid_37956 = get_group_id(0);
    
    int32_t phys_tid_26797;
    
    phys_tid_26797 = global_tid_37954;
    
    int64_t gtid_26795;
    
    gtid_26795 = squot64(sext_i32_i64(group_tid_37956) *
                         segmap_group_sizze_27166 +
                         sext_i32_i64(local_tid_37955), nm_24165);
    
    int64_t gtid_26796;
    
    gtid_26796 = sext_i32_i64(group_tid_37956) * segmap_group_sizze_27166 +
        sext_i32_i64(local_tid_37955) - squot64(sext_i32_i64(group_tid_37956) *
                                                segmap_group_sizze_27166 +
                                                sext_i32_i64(local_tid_37955),
                                                nm_24165) * nm_24165;
    if (slt64(gtid_26795, m_24014) && slt64(gtid_26796, nm_24165)) {
        float write_value_27172 = ((__global float *) mem_36822)[gtid_26795 *
                                                                 nm_24165 +
                                                                 gtid_26796];
        
        if ((sle64(0, gtid_26795) && slt64(gtid_26795, m_24014)) && (sle64(0,
                                                                           gtid_26796) &&
                                                                     slt64(gtid_26796,
                                                                           nm_24165))) {
            ((__global float *) mem_param_36802)[ctx_param_ext_36797 +
                                                 (gtid_26795 *
                                                  ctx_param_ext_36798 +
                                                  gtid_26796 *
                                                  ctx_param_ext_36800)] =
                write_value_27172;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27166
}
__kernel void mainDetailedzisegmap_26851(__global int *global_failure,
                                         int64_t m_24014, int32_t k2p2zq_24031,
                                         int64_t nm_24165, int32_t res_24173,
                                         int32_t i_27065, int64_t i_27067,
                                         int64_t ctx_param_ext_36797,
                                         int64_t ctx_param_ext_36798,
                                         int64_t ctx_param_ext_36800, __global
                                         unsigned char *mem_param_36802,
                                         __global unsigned char *mem_36818,
                                         __global unsigned char *mem_36822)
{
    #define segmap_group_sizze_27132 (mainDetailedzisegmap_group_sizze_26854)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37949;
    int32_t local_tid_37950;
    int64_t group_sizze_37953;
    int32_t wave_sizze_37952;
    int32_t group_tid_37951;
    
    global_tid_37949 = get_global_id(0);
    local_tid_37950 = get_local_id(0);
    group_sizze_37953 = get_local_size(0);
    wave_sizze_37952 = LOCKSTEP_WIDTH;
    group_tid_37951 = get_group_id(0);
    
    int32_t phys_tid_26851;
    
    phys_tid_26851 = global_tid_37949;
    
    int64_t gtid_26849;
    
    gtid_26849 = squot64(sext_i32_i64(group_tid_37951) *
                         segmap_group_sizze_27132 +
                         sext_i32_i64(local_tid_37950), nm_24165);
    
    int64_t gtid_26850;
    
    gtid_26850 = sext_i32_i64(group_tid_37951) * segmap_group_sizze_27132 +
        sext_i32_i64(local_tid_37950) - squot64(sext_i32_i64(group_tid_37951) *
                                                segmap_group_sizze_27132 +
                                                sext_i32_i64(local_tid_37950),
                                                nm_24165) * nm_24165;
    if (slt64(gtid_26849, m_24014) && slt64(gtid_26850, nm_24165)) {
        bool cond_27137 = ((__global bool *) mem_36818)[gtid_26849];
        int32_t res_27139 = sext_i64_i32(gtid_26850);
        int32_t res_27140 = sdiv32(res_27139, res_24173);
        int32_t res_27141 = smod32(res_27139, res_24173);
        float res_27142;
        
        if (cond_27137) {
            int32_t x_27143 = mul32(res_24173, res_27140);
            int32_t i_27144 = add32(res_27141, x_27143);
            int64_t i_27145 = sext_i32_i64(i_27144);
            float res_27146 = ((__global
                                float *) mem_param_36802)[ctx_param_ext_36797 +
                                                          (gtid_26849 *
                                                           ctx_param_ext_36798 +
                                                           i_27145 *
                                                           ctx_param_ext_36800)];
            
            res_27142 = res_27146;
        } else {
            float v1_27136 = ((__global
                               float *) mem_param_36802)[ctx_param_ext_36797 +
                                                         (gtid_26849 *
                                                          ctx_param_ext_36798 +
                                                          i_27067 *
                                                          ctx_param_ext_36800)];
            int64_t j_27147 = sext_i32_i64(res_27141);
            float x_27148 = ((__global
                              float *) mem_param_36802)[ctx_param_ext_36797 +
                                                        (gtid_26849 *
                                                         ctx_param_ext_36798 +
                                                         j_27147 *
                                                         ctx_param_ext_36800)];
            float x_27149 = x_27148 / v1_27136;
            int32_t y_27150 = sub32(k2p2zq_24031, 1);
            bool cond_27151 = slt32(res_27140, y_27150);
            float res_27152;
            
            if (cond_27151) {
                int32_t x_27153 = add32(1, res_27140);
                int32_t x_27154 = mul32(res_24173, x_27153);
                int32_t i_27155 = add32(res_27141, x_27154);
                int64_t i_27156 = sext_i32_i64(i_27155);
                float x_27157 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_26849 *
                                                             ctx_param_ext_36798 +
                                                             i_27156 *
                                                             ctx_param_ext_36800)];
                int32_t i_27158 = add32(i_27065, x_27154);
                int64_t i_27159 = sext_i32_i64(i_27158);
                float x_27160 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_26849 *
                                                             ctx_param_ext_36798 +
                                                             i_27159 *
                                                             ctx_param_ext_36800)];
                float y_27161 = x_27149 * x_27160;
                float res_27162 = x_27157 - y_27161;
                
                res_27152 = res_27162;
            } else {
                res_27152 = x_27149;
            }
            res_27142 = res_27152;
        }
        ((__global float *) mem_36822)[gtid_26849 * nm_24165 + gtid_26850] =
            res_27142;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27132
}
__kernel void mainDetailedzisegmap_26919(__global int *global_failure,
                                         int64_t m_24014, int64_t i_27067,
                                         int64_t ctx_param_ext_36797,
                                         int64_t ctx_param_ext_36798,
                                         int64_t ctx_param_ext_36800, __global
                                         unsigned char *mem_param_36802,
                                         __global unsigned char *mem_36818)
{
    #define segmap_group_sizze_27116 (mainDetailedzisegmap_group_sizze_26921)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37944;
    int32_t local_tid_37945;
    int64_t group_sizze_37948;
    int32_t wave_sizze_37947;
    int32_t group_tid_37946;
    
    global_tid_37944 = get_global_id(0);
    local_tid_37945 = get_local_id(0);
    group_sizze_37948 = get_local_size(0);
    wave_sizze_37947 = LOCKSTEP_WIDTH;
    group_tid_37946 = get_group_id(0);
    
    int32_t phys_tid_26919;
    
    phys_tid_26919 = global_tid_37944;
    
    int64_t gtid_26918;
    
    gtid_26918 = sext_i32_i64(group_tid_37946) * segmap_group_sizze_27116 +
        sext_i32_i64(local_tid_37945);
    if (slt64(gtid_26918, m_24014)) {
        float v1_27121 = ((__global
                           float *) mem_param_36802)[ctx_param_ext_36797 +
                                                     (gtid_26918 *
                                                      ctx_param_ext_36798 +
                                                      i_27067 *
                                                      ctx_param_ext_36800)];
        bool cond_27122 = v1_27121 == 0.0F;
        
        ((__global bool *) mem_36818)[gtid_26918] = cond_27122;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27116
}
__kernel void mainDetailedzisegmap_27010(__global int *global_failure,
                                         int64_t m_24014, int64_t res_24033,
                                         int64_t m_24164, int64_t nm_24165,
                                         __global unsigned char *res_mem_36762,
                                         __global unsigned char *mem_36794)
{
    #define segmap_group_sizze_27050 (mainDetailedzisegmap_group_sizze_27013)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37911;
    int32_t local_tid_37912;
    int64_t group_sizze_37915;
    int32_t wave_sizze_37914;
    int32_t group_tid_37913;
    
    global_tid_37911 = get_global_id(0);
    local_tid_37912 = get_local_id(0);
    group_sizze_37915 = get_local_size(0);
    wave_sizze_37914 = LOCKSTEP_WIDTH;
    group_tid_37913 = get_group_id(0);
    
    int32_t phys_tid_27010;
    
    phys_tid_27010 = global_tid_37911;
    
    int64_t gtid_27008;
    
    gtid_27008 = squot64(sext_i32_i64(group_tid_37913) *
                         segmap_group_sizze_27050 +
                         sext_i32_i64(local_tid_37912), nm_24165);
    
    int64_t gtid_27009;
    
    gtid_27009 = sext_i32_i64(group_tid_37913) * segmap_group_sizze_27050 +
        sext_i32_i64(local_tid_37912) - squot64(sext_i32_i64(group_tid_37913) *
                                                segmap_group_sizze_27050 +
                                                sext_i32_i64(local_tid_37912),
                                                nm_24165) * nm_24165;
    if (slt64(gtid_27008, m_24014) && slt64(gtid_27009, nm_24165)) {
        int64_t res_27055 = sdiv64(gtid_27009, m_24164);
        int64_t res_27056 = smod64(gtid_27009, m_24164);
        bool cond_27057 = slt64(res_27056, res_24033);
        float res_27058;
        
        if (cond_27057) {
            float res_27059 = ((__global float *) res_mem_36762)[gtid_27008 *
                                                                 (res_24033 *
                                                                  res_24033) +
                                                                 res_27055 *
                                                                 res_24033 +
                                                                 res_27056];
            
            res_27058 = res_27059;
        } else {
            int64_t y_27060 = add64(res_24033, res_27055);
            bool cond_27061 = res_27056 == y_27060;
            float res_27062;
            
            if (cond_27061) {
                res_27062 = 1.0F;
            } else {
                res_27062 = 0.0F;
            }
            res_27058 = res_27062;
        }
        ((__global float *) mem_36794)[gtid_27008 * nm_24165 + gtid_27009] =
            res_27058;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27050
}
__kernel void mainDetailedzisegmap_27216(__global int *global_failure,
                                         int64_t N_24013, int64_t m_24014,
                                         int32_t n_24018, int32_t k2p2zq_24031,
                                         int64_t res_24033,
                                         int64_t num_groups_27237, __global
                                         unsigned char *binop_p_mem_36661,
                                         __global unsigned char *mem_36848,
                                         __global unsigned char *mem_36851,
                                         __global unsigned char *mem_36866)
{
    #define segmap_group_sizze_27236 (mainDetailedzisegmap_group_sizze_27218)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37968;
    int32_t local_tid_37969;
    int64_t group_sizze_37972;
    int32_t wave_sizze_37971;
    int32_t group_tid_37970;
    
    global_tid_37968 = get_global_id(0);
    local_tid_37969 = get_local_id(0);
    group_sizze_37972 = get_local_size(0);
    wave_sizze_37971 = LOCKSTEP_WIDTH;
    group_tid_37970 = get_group_id(0);
    
    int32_t phys_tid_27216;
    
    phys_tid_27216 = global_tid_37968;
    
    int32_t phys_group_id_37973;
    
    phys_group_id_37973 = get_group_id(0);
    for (int32_t i_37974 = 0; i_37974 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014, segmap_group_sizze_27236)) -
                   phys_group_id_37973, sext_i64_i32(num_groups_27237));
         i_37974++) {
        int32_t virt_group_id_37975 = phys_group_id_37973 + i_37974 *
                sext_i64_i32(num_groups_27237);
        int64_t gtid_27215 = sext_i32_i64(virt_group_id_37975) *
                segmap_group_sizze_27236 + sext_i32_i64(local_tid_37969);
        
        if (slt64(gtid_27215, m_24014)) {
            for (int32_t i_36634 = 0; i_36634 < k2p2zq_24031; i_36634++) {
                int64_t i_36535 = sext_i32_i64(i_36634);
                float res_27243;
                float redout_36537 = 0.0F;
                
                for (int32_t i_36633 = 0; i_36633 < n_24018; i_36633++) {
                    int64_t i_36538 = sext_i32_i64(i_36633);
                    float x_27248 = ((__global float *) mem_36848)[i_36538 *
                                                                   m_24014 +
                                                                   gtid_27215];
                    bool res_27249;
                    
                    res_27249 = futrts_isnan32(x_27248);
                    
                    float res_27250;
                    
                    if (res_27249) {
                        res_27250 = 0.0F;
                    } else {
                        float x_27247 = ((__global
                                          float *) binop_p_mem_36661)[i_36535 *
                                                                      N_24013 +
                                                                      i_36538];
                        float res_27251 = x_27247 * x_27248;
                        
                        res_27250 = res_27251;
                    }
                    
                    float res_27246 = res_27250 + redout_36537;
                    float redout_tmp_37977 = res_27246;
                    
                    redout_36537 = redout_tmp_37977;
                }
                res_27243 = redout_36537;
                ((__global float *) mem_36851)[phys_tid_27216 + i_36535 *
                                               (num_groups_27237 *
                                                segmap_group_sizze_27236)] =
                    res_27243;
            }
            for (int64_t i_37978 = 0; i_37978 < res_24033; i_37978++) {
                ((__global float *) mem_36866)[i_37978 * m_24014 + gtid_27215] =
                    ((__global float *) mem_36851)[phys_tid_27216 + i_37978 *
                                                   (num_groups_27237 *
                                                    segmap_group_sizze_27236)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27236
}
__kernel void mainDetailedzisegmap_27357(__global int *global_failure,
                                         int64_t m_24014, int32_t k2p2zq_24031,
                                         int64_t res_24033,
                                         int64_t num_groups_27377, __global
                                         unsigned char *mem_36940, __global
                                         unsigned char *mem_36943, __global
                                         unsigned char *mem_36946, __global
                                         unsigned char *mem_36961)
{
    #define segmap_group_sizze_27376 (mainDetailedzisegmap_group_sizze_27359)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38056;
    int32_t local_tid_38057;
    int64_t group_sizze_38060;
    int32_t wave_sizze_38059;
    int32_t group_tid_38058;
    
    global_tid_38056 = get_global_id(0);
    local_tid_38057 = get_local_id(0);
    group_sizze_38060 = get_local_size(0);
    wave_sizze_38059 = LOCKSTEP_WIDTH;
    group_tid_38058 = get_group_id(0);
    
    int32_t phys_tid_27357;
    
    phys_tid_27357 = global_tid_38056;
    
    int32_t phys_group_id_38061;
    
    phys_group_id_38061 = get_group_id(0);
    for (int32_t i_38062 = 0; i_38062 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014, segmap_group_sizze_27376)) -
                   phys_group_id_38061, sext_i64_i32(num_groups_27377));
         i_38062++) {
        int32_t virt_group_id_38063 = phys_group_id_38061 + i_38062 *
                sext_i64_i32(num_groups_27377);
        int64_t gtid_27356 = sext_i32_i64(virt_group_id_38063) *
                segmap_group_sizze_27376 + sext_i32_i64(local_tid_38057);
        
        if (slt64(gtid_27356, m_24014)) {
            for (int32_t i_36636 = 0; i_36636 < k2p2zq_24031; i_36636++) {
                int64_t i_36545 = sext_i32_i64(i_36636);
                float res_27384;
                float redout_36547 = 0.0F;
                
                for (int32_t i_36635 = 0; i_36635 < k2p2zq_24031; i_36635++) {
                    int64_t i_36548 = sext_i32_i64(i_36635);
                    float x_27388 = ((__global float *) mem_36943)[i_36548 *
                                                                   m_24014 +
                                                                   gtid_27356];
                    float x_27389 = ((__global float *) mem_36940)[i_36545 *
                                                                   (m_24014 *
                                                                    res_24033) +
                                                                   i_36548 *
                                                                   m_24014 +
                                                                   gtid_27356];
                    float res_27390 = x_27388 * x_27389;
                    float res_27387 = res_27390 + redout_36547;
                    float redout_tmp_38065 = res_27387;
                    
                    redout_36547 = redout_tmp_38065;
                }
                res_27384 = redout_36547;
                ((__global float *) mem_36946)[phys_tid_27357 + i_36545 *
                                               (num_groups_27377 *
                                                segmap_group_sizze_27376)] =
                    res_27384;
            }
            for (int64_t i_38066 = 0; i_38066 < res_24033; i_38066++) {
                ((__global float *) mem_36961)[i_38066 * m_24014 + gtid_27356] =
                    ((__global float *) mem_36946)[phys_tid_27357 + i_38066 *
                                                   (num_groups_27377 *
                                                    segmap_group_sizze_27376)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27376
}
__kernel void mainDetailedzisegmap_27393(__global int *global_failure,
                                         int64_t m_24014, int32_t k2p2zq_24031,
                                         int64_t res_24033, __global
                                         unsigned char *res_mem_36936, __global
                                         unsigned char *mem_36965, __global
                                         unsigned char *mem_36969)
{
    #define segmap_group_sizze_27452 (mainDetailedzisegmap_group_sizze_27396)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38067;
    int32_t local_tid_38068;
    int64_t group_sizze_38071;
    int32_t wave_sizze_38070;
    int32_t group_tid_38069;
    
    global_tid_38067 = get_global_id(0);
    local_tid_38068 = get_local_id(0);
    group_sizze_38071 = get_local_size(0);
    wave_sizze_38070 = LOCKSTEP_WIDTH;
    group_tid_38069 = get_group_id(0);
    
    int32_t phys_tid_27393;
    
    phys_tid_27393 = global_tid_38067;
    
    int64_t gtid_27391;
    
    gtid_27391 = squot64(sext_i32_i64(group_tid_38069) *
                         segmap_group_sizze_27452 +
                         sext_i32_i64(local_tid_38068), res_24033);
    
    int64_t gtid_27392;
    
    gtid_27392 = sext_i32_i64(group_tid_38069) * segmap_group_sizze_27452 +
        sext_i32_i64(local_tid_38068) - squot64(sext_i32_i64(group_tid_38069) *
                                                segmap_group_sizze_27452 +
                                                sext_i32_i64(local_tid_38068),
                                                res_24033) * res_24033;
    if (slt64(gtid_27391, m_24014) && slt64(gtid_27392, res_24033)) {
        float res_27461;
        float redout_36549 = 0.0F;
        
        for (int32_t i_36637 = 0; i_36637 < k2p2zq_24031; i_36637++) {
            int64_t i_36550 = sext_i32_i64(i_36637);
            float x_27465 = ((__global float *) res_mem_36936)[gtid_27391 *
                                                               res_24033 +
                                                               i_36550];
            float x_27466 = ((__global float *) mem_36965)[i_36550 *
                                                           (res_24033 *
                                                            m_24014) +
                                                           gtid_27391 *
                                                           res_24033 +
                                                           gtid_27392];
            float res_27467 = x_27465 * x_27466;
            float res_27464 = res_27467 + redout_36549;
            float redout_tmp_38072 = res_27464;
            
            redout_36549 = redout_tmp_38072;
        }
        res_27461 = redout_36549;
        ((__global float *) mem_36969)[gtid_27391 * res_24033 + gtid_27392] =
            res_27461;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27452
}
__kernel void mainDetailedzisegmap_27489(__global int *global_failure,
                                         int64_t N_24013, int64_t m_24014,
                                         int32_t k2p2zq_24031,
                                         int64_t res_24033,
                                         int64_t num_groups_27508, __global
                                         unsigned char *mem_36668, __global
                                         unsigned char *mem_36982, __global
                                         unsigned char *mem_36985, __global
                                         unsigned char *mem_37000)
{
    #define segmap_group_sizze_27507 (mainDetailedzisegmap_group_sizze_27491)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38137;
    int32_t local_tid_38138;
    int64_t group_sizze_38141;
    int32_t wave_sizze_38140;
    int32_t group_tid_38139;
    
    global_tid_38137 = get_global_id(0);
    local_tid_38138 = get_local_id(0);
    group_sizze_38141 = get_local_size(0);
    wave_sizze_38140 = LOCKSTEP_WIDTH;
    group_tid_38139 = get_group_id(0);
    
    int32_t phys_tid_27489;
    
    phys_tid_27489 = global_tid_38137;
    
    int32_t phys_group_id_38142;
    
    phys_group_id_38142 = get_group_id(0);
    for (int32_t i_38143 = 0; i_38143 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014, segmap_group_sizze_27507)) -
                   phys_group_id_38142, sext_i64_i32(num_groups_27508));
         i_38143++) {
        int32_t virt_group_id_38144 = phys_group_id_38142 + i_38143 *
                sext_i64_i32(num_groups_27508);
        int64_t gtid_27488 = sext_i32_i64(virt_group_id_38144) *
                segmap_group_sizze_27507 + sext_i32_i64(local_tid_38138);
        
        if (slt64(gtid_27488, m_24014)) {
            for (int64_t i_36553 = 0; i_36553 < N_24013; i_36553++) {
                float res_27514;
                float redout_36555 = 0.0F;
                
                for (int32_t i_36638 = 0; i_36638 < k2p2zq_24031; i_36638++) {
                    int64_t i_36556 = sext_i32_i64(i_36638);
                    float x_27518 = ((__global float *) mem_36982)[i_36556 *
                                                                   m_24014 +
                                                                   gtid_27488];
                    float x_27519 = ((__global float *) mem_36668)[i_36553 *
                                                                   res_24033 +
                                                                   i_36556];
                    float res_27520 = x_27518 * x_27519;
                    float res_27517 = res_27520 + redout_36555;
                    float redout_tmp_38146 = res_27517;
                    
                    redout_36555 = redout_tmp_38146;
                }
                res_27514 = redout_36555;
                ((__global float *) mem_36985)[phys_tid_27489 + i_36553 *
                                               (num_groups_27508 *
                                                segmap_group_sizze_27507)] =
                    res_27514;
            }
            for (int64_t i_38147 = 0; i_38147 < N_24013; i_38147++) {
                ((__global float *) mem_37000)[i_38147 * m_24014 + gtid_27488] =
                    ((__global float *) mem_36985)[phys_tid_27489 + i_38147 *
                                                   (num_groups_27508 *
                                                    segmap_group_sizze_27507)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27507
}
__kernel void mainDetailedzisegmap_27769(__global int *global_failure,
                                         int64_t N_24013, int64_t m_24014,
                                         __global unsigned char *mem_37076,
                                         __global unsigned char *mem_37079,
                                         __global unsigned char *mem_37102,
                                         __global unsigned char *mem_37105)
{
    #define segmap_group_sizze_27935 (mainDetailedzisegmap_group_sizze_27772)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38320;
    int32_t local_tid_38321;
    int64_t group_sizze_38324;
    int32_t wave_sizze_38323;
    int32_t group_tid_38322;
    
    global_tid_38320 = get_global_id(0);
    local_tid_38321 = get_local_id(0);
    group_sizze_38324 = get_local_size(0);
    wave_sizze_38323 = LOCKSTEP_WIDTH;
    group_tid_38322 = get_group_id(0);
    
    int32_t phys_tid_27769;
    
    phys_tid_27769 = global_tid_38320;
    
    int64_t gtid_27767;
    
    gtid_27767 = squot64(sext_i32_i64(group_tid_38322) *
                         segmap_group_sizze_27935 +
                         sext_i32_i64(local_tid_38321), N_24013);
    
    int64_t gtid_27768;
    
    gtid_27768 = sext_i32_i64(group_tid_38322) * segmap_group_sizze_27935 +
        sext_i32_i64(local_tid_38321) - squot64(sext_i32_i64(group_tid_38322) *
                                                segmap_group_sizze_27935 +
                                                sext_i32_i64(local_tid_38321),
                                                N_24013) * N_24013;
    if (slt64(gtid_27767, m_24014) && slt64(gtid_27768, N_24013)) {
        float x_27943 = ((__global float *) mem_37105)[gtid_27767 * N_24013 +
                                                       gtid_27768];
        int32_t index_primexp_35350 = sext_i64_i32(gtid_27768);
        bool res_27946;
        
        res_27946 = futrts_isnan32(x_27943);
        
        bool res_27947 = !res_27946;
        int64_t res_27948;
        
        if (res_27947) {
            int64_t x_27944 = ((__global int64_t *) mem_37102)[gtid_27767 *
                                                               N_24013 +
                                                               gtid_27768];
            int64_t res_27949 = sub64(x_27944, 1);
            
            res_27948 = res_27949;
        } else {
            res_27948 = -1;
        }
        if ((sle64(0, gtid_27767) && slt64(gtid_27767, m_24014)) && (sle64(0,
                                                                           res_27948) &&
                                                                     slt64(res_27948,
                                                                           N_24013))) {
            ((__global int32_t *) mem_37079)[gtid_27767 * N_24013 + res_27948] =
                index_primexp_35350;
        }
        if ((sle64(0, gtid_27767) && slt64(gtid_27767, m_24014)) && (sle64(0,
                                                                           res_27948) &&
                                                                     slt64(res_27948,
                                                                           N_24013))) {
            ((__global float *) mem_37076)[gtid_27767 * N_24013 + res_27948] =
                x_27943;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27935
}
__kernel void mainDetailedzisegmap_27845(__global int *global_failure,
                                         int64_t N_24013, int64_t m_24014,
                                         int64_t i_24280, __global
                                         unsigned char *mem_37102, __global
                                         unsigned char *mem_37108)
{
    #define segmap_group_sizze_27899 (mainDetailedzisegmap_group_sizze_27847)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38315;
    int32_t local_tid_38316;
    int64_t group_sizze_38319;
    int32_t wave_sizze_38318;
    int32_t group_tid_38317;
    
    global_tid_38315 = get_global_id(0);
    local_tid_38316 = get_local_id(0);
    group_sizze_38319 = get_local_size(0);
    wave_sizze_38318 = LOCKSTEP_WIDTH;
    group_tid_38317 = get_group_id(0);
    
    int32_t phys_tid_27845;
    
    phys_tid_27845 = global_tid_38315;
    
    int64_t gtid_27844;
    
    gtid_27844 = sext_i32_i64(group_tid_38317) * segmap_group_sizze_27899 +
        sext_i32_i64(local_tid_38316);
    if (slt64(gtid_27844, m_24014)) {
        int64_t res_27903 = ((__global int64_t *) mem_37102)[gtid_27844 *
                                                             N_24013 + i_24280];
        int32_t res_27904 = sext_i64_i32(res_27903);
        
        ((__global int32_t *) mem_37108)[gtid_27844] = res_27904;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27899
}
__kernel void mainDetailedzisegmap_28096(__global int *global_failure,
                                         int64_t m_24014, float hfrac_24020,
                                         int32_t k2p2_24029, __global
                                         unsigned char *mem_37178, __global
                                         unsigned char *mem_37181, __global
                                         unsigned char *mem_37184, __global
                                         unsigned char *mem_37186)
{
    #define segmap_group_sizze_28181 (mainDetailedzisegmap_group_sizze_28098)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38475;
    int32_t local_tid_38476;
    int64_t group_sizze_38479;
    int32_t wave_sizze_38478;
    int32_t group_tid_38477;
    
    global_tid_38475 = get_global_id(0);
    local_tid_38476 = get_local_id(0);
    group_sizze_38479 = get_local_size(0);
    wave_sizze_38478 = LOCKSTEP_WIDTH;
    group_tid_38477 = get_group_id(0);
    
    int32_t phys_tid_28096;
    
    phys_tid_28096 = global_tid_38475;
    
    int64_t gtid_28095;
    
    gtid_28095 = sext_i32_i64(group_tid_38477) * segmap_group_sizze_28181 +
        sext_i32_i64(local_tid_38476);
    if (slt64(gtid_28095, m_24014)) {
        int32_t res_28185 = ((__global int32_t *) mem_37178)[gtid_28095];
        float res_28186 = ((__global float *) mem_37181)[gtid_28095];
        int32_t r32_arg_28187 = sub32(res_28185, k2p2_24029);
        float res_28188 = sitofp_i32_f32(r32_arg_28187);
        float sqrt_arg_28189 = res_28186 / res_28188;
        float res_28190;
        
        res_28190 = futrts_sqrt32(sqrt_arg_28189);
        
        float res_28191 = sitofp_i32_f32(res_28185);
        float t32_arg_28192 = hfrac_24020 * res_28191;
        int32_t res_28193 = fptosi_f32_i32(t32_arg_28192);
        
        ((__global int32_t *) mem_37184)[gtid_28095] = res_28193;
        ((__global float *) mem_37186)[gtid_28095] = res_28190;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28181
}
__kernel void mainDetailedzisegmap_28367(__global int *global_failure,
                                         float lam_24021,
                                         int64_t iota32_arg_24397,
                                         int32_t x_24402, float res_24405,
                                         __global
                                         unsigned char *mappingindices_mem_36651,
                                         __global unsigned char *mem_37244,
                                         __global unsigned char *mem_37246)
{
    #define segmap_group_sizze_28386 (mainDetailedzisegmap_group_sizze_28369)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38585;
    int32_t local_tid_38586;
    int64_t group_sizze_38589;
    int32_t wave_sizze_38588;
    int32_t group_tid_38587;
    
    global_tid_38585 = get_global_id(0);
    local_tid_38586 = get_local_id(0);
    group_sizze_38589 = get_local_size(0);
    wave_sizze_38588 = LOCKSTEP_WIDTH;
    group_tid_38587 = get_group_id(0);
    
    int32_t phys_tid_28367;
    
    phys_tid_28367 = global_tid_38585;
    
    int64_t gtid_28366;
    
    gtid_28366 = sext_i32_i64(group_tid_38587) * segmap_group_sizze_28386 +
        sext_i32_i64(local_tid_38586);
    if (slt64(gtid_28366, iota32_arg_24397)) {
        int32_t res_28391 = sext_i64_i32(gtid_28366);
        int32_t t_28392 = add32(x_24402, res_28391);
        int32_t i_28393 = sub32(t_28392, 1);
        int64_t i_28394 = sext_i32_i64(i_28393);
        int32_t time_28395 = ((__global
                               int32_t *) mappingindices_mem_36651)[i_28394];
        float res_28396 = sitofp_i32_f32(time_28395);
        float logplus_arg_28397 = res_28396 / res_24405;
        bool cond_28398 = 2.7182817F < logplus_arg_28397;
        float res_28399;
        
        if (cond_28398) {
            float res_28400;
            
            res_28400 = futrts_log32(logplus_arg_28397);
            res_28399 = res_28400;
        } else {
            res_28399 = 1.0F;
        }
        
        float res_28401;
        
        res_28401 = futrts_sqrt32(res_28399);
        
        float res_28402 = lam_24021 * res_28401;
        
        ((__global int32_t *) mem_37244)[gtid_28366] = res_28391;
        ((__global float *) mem_37246)[gtid_28366] = res_28402;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28386
}
__kernel void mainDetailedzisegmap_28442(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_24013, int64_t m_24014,
                                         int32_t n_24018,
                                         int64_t iota32_arg_24397,
                                         int32_t iters_24423, int64_t i_24425,
                                         int64_t num_groups_28693, __global
                                         unsigned char *res_mem_37110, __global
                                         unsigned char *res_mem_37111, __global
                                         unsigned char *res_mem_37112, __global
                                         unsigned char *res_mem_37190, __global
                                         unsigned char *res_mem_37191, __global
                                         unsigned char *res_mem_37192, __global
                                         unsigned char *res_mem_37241, __global
                                         unsigned char *mem_37246, __global
                                         unsigned char *mem_37252, __global
                                         unsigned char *mem_37266, __global
                                         unsigned char *mem_37285, __global
                                         unsigned char *mem_37287, __global
                                         unsigned char *mem_37289, __global
                                         unsigned char *mem_37291, __global
                                         unsigned char *mem_37293, __global
                                         unsigned char *mem_37355, __global
                                         unsigned char *mem_37374, __global
                                         unsigned char *mem_37389, __global
                                         unsigned char *mem_37392, __global
                                         unsigned char *mem_37394, __global
                                         unsigned char *mem_37396, __global
                                         unsigned char *mem_37398, __global
                                         unsigned char *double_buffer_mem_37625)
{
    #define segmap_group_sizze_28692 (mainDetailedzisegmap_group_sizze_28444)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_38595;
    int32_t local_tid_38596;
    int64_t group_sizze_38599;
    int32_t wave_sizze_38598;
    int32_t group_tid_38597;
    
    global_tid_38595 = get_global_id(0);
    local_tid_38596 = get_local_id(0);
    group_sizze_38599 = get_local_size(0);
    wave_sizze_38598 = LOCKSTEP_WIDTH;
    group_tid_38597 = get_group_id(0);
    
    int32_t phys_tid_28442;
    
    phys_tid_28442 = global_tid_38595;
    
    int32_t phys_group_id_38600;
    
    phys_group_id_38600 = get_group_id(0);
    for (int32_t i_38601 = 0; i_38601 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014, segmap_group_sizze_28692)) -
                   phys_group_id_38600, sext_i64_i32(num_groups_28693));
         i_38601++) {
        int32_t virt_group_id_38602 = phys_group_id_38600 + i_38601 *
                sext_i64_i32(num_groups_28693);
        int64_t gtid_28441 = sext_i32_i64(virt_group_id_38602) *
                segmap_group_sizze_28692 + sext_i32_i64(local_tid_38596);
        
        if (slt64(gtid_28441, m_24014)) {
            int32_t x_28700 = ((__global int32_t *) res_mem_37110)[gtid_28441];
            int32_t x_28701 = ((__global int32_t *) res_mem_37191)[gtid_28441];
            float x_28702 = ((__global float *) res_mem_37192)[gtid_28441];
            int32_t x_28703 = ((__global int32_t *) res_mem_37190)[gtid_28441];
            float x_28704 = ((__global float *) res_mem_37241)[gtid_28441];
            int32_t y_28707 = sub32(x_28700, x_28701);
            float res_28708 = sitofp_i32_f32(x_28701);
            float res_28709;
            
            res_28709 = futrts_sqrt32(res_28708);
            
            float y_28710 = x_28702 * res_28709;
            float inpacc_28711;
            bool res_28712;
            int32_t res_28713;
            float res_28714;
            float inpacc_28717;
            bool inpacc_28718;
            int32_t inpacc_28719;
            float inpacc_28720;
            
            inpacc_28717 = 0.0F;
            inpacc_28718 = 0;
            inpacc_28719 = -1;
            inpacc_28720 = 0.0F;
            for (int64_t i_36507 = 0; i_36507 < iota32_arg_24397; i_36507++) {
                int32_t index_primexp_36514 = sext_i64_i32(i_36507);
                bool cond_28728 = sle32(y_28707, index_primexp_36514);
                float res_28729;
                
                if (cond_28728) {
                    res_28729 = 0.0F;
                } else {
                    bool cond_28730 = index_primexp_36514 == 0;
                    float res_28731;
                    
                    if (cond_28730) {
                        res_28731 = x_28704;
                    } else {
                        int32_t x_28732 = sub32(x_28701, x_28703);
                        int32_t i_28733 = add32(x_28732, index_primexp_36514);
                        int64_t i_28734 = sext_i32_i64(i_28733);
                        float negate_arg_28735 = ((__global
                                                   float *) res_mem_37111)[gtid_28441 *
                                                                           N_24013 +
                                                                           i_28734];
                        float x_28736 = 0.0F - negate_arg_28735;
                        int32_t i_28737 = add32(x_28701, index_primexp_36514);
                        int64_t i_28738 = sext_i32_i64(i_28737);
                        float y_28739 = ((__global
                                          float *) res_mem_37111)[gtid_28441 *
                                                                  N_24013 +
                                                                  i_28738];
                        float res_28740 = x_28736 + y_28739;
                        
                        res_28731 = res_28740;
                    }
                    res_28729 = res_28731;
                }
                
                float res_28745 = inpacc_28717 + res_28729;
                float x_28765 = ((__global float *) mem_37246)[i_36507];
                float res_28768 = res_28745 / y_28710;
                bool cond_28769 = slt32(index_primexp_36514, y_28707);
                bool res_28770;
                
                res_28770 = futrts_isnan32(res_28768);
                
                bool res_28771 = !res_28770;
                bool x_28772 = cond_28769 && res_28771;
                float res_28773 = (float) fabs(res_28768);
                bool res_28774 = x_28765 < res_28773;
                bool x_28775 = x_28772 && res_28774;
                float res_28776;
                
                if (cond_28769) {
                    res_28776 = res_28768;
                } else {
                    res_28776 = 0.0F;
                }
                
                int32_t x_28754 = index_primexp_36514;
                bool x_28758 = x_28775 && x_28775;
                int32_t res_28762;
                
                if (x_28775) {
                    res_28762 = x_28754;
                } else {
                    res_28762 = -1;
                }
                
                bool res_28777;
                int32_t res_28778;
                
                if (inpacc_28718) {
                    res_28777 = inpacc_28718;
                    res_28778 = inpacc_28719;
                } else {
                    bool x_28779 = x_28758 && x_28758;
                    bool x_28780 = !x_28758;
                    bool y_28781 = inpacc_28718 && x_28780;
                    bool res_28782 = x_28779 || y_28781;
                    int32_t res_28783;
                    
                    if (x_28758) {
                        res_28783 = res_28762;
                    } else {
                        res_28783 = inpacc_28719;
                    }
                    res_28777 = res_28782;
                    res_28778 = res_28783;
                }
                
                float res_28784 = inpacc_28720 + res_28776;
                
                ((__global float *) mem_37252)[phys_tid_28442 + i_36507 *
                                               (num_groups_28693 *
                                                segmap_group_sizze_28692)] =
                    res_28768;
                
                float inpacc_tmp_38603 = res_28745;
                bool inpacc_tmp_38604 = res_28777;
                int32_t inpacc_tmp_38605 = res_28778;
                float inpacc_tmp_38606 = res_28784;
                
                inpacc_28717 = inpacc_tmp_38603;
                inpacc_28718 = inpacc_tmp_38604;
                inpacc_28719 = inpacc_tmp_38605;
                inpacc_28720 = inpacc_tmp_38606;
            }
            inpacc_28711 = inpacc_28717;
            res_28712 = inpacc_28718;
            res_28713 = inpacc_28719;
            res_28714 = inpacc_28720;
            
            float res_28785 = sitofp_i32_f32(y_28707);
            float res_28786 = res_28714 / res_28785;
            
            for (int64_t i_36577 = 0; i_36577 < iota32_arg_24397; i_36577++) {
                int32_t index_primexp_36642 = sext_i64_i32(i_36577);
                bool cond_28789 = slt32(index_primexp_36642, y_28707);
                bool cond_28790;
                
                if (cond_28789) {
                    int32_t i_28791 = add32(x_28701, index_primexp_36642);
                    int64_t i_28792 = sext_i32_i64(i_28791);
                    bool x_28793 = sle64(0, i_28792);
                    bool y_28794 = slt64(i_28792, N_24013);
                    bool bounds_check_28795 = x_28793 && y_28794;
                    bool index_certs_28796;
                    
                    if (!bounds_check_28795) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          17) == -1) {
                                global_failure_args[0] = i_28792;
                                global_failure_args[1] = N_24013;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float isnan_arg_28797 = ((__global
                                              float *) res_mem_37111)[gtid_28441 *
                                                                      N_24013 +
                                                                      i_28792];
                    bool res_28798;
                    
                    res_28798 = futrts_isnan32(isnan_arg_28797);
                    
                    bool res_28799 = !res_28798;
                    
                    cond_28790 = res_28799;
                } else {
                    cond_28790 = 0;
                }
                
                float res_28800;
                
                if (cond_28790) {
                    int32_t i_28801 = add32(x_28701, index_primexp_36642);
                    int64_t i_28802 = sext_i32_i64(i_28801);
                    bool x_28803 = sle64(0, i_28802);
                    bool y_28804 = slt64(i_28802, N_24013);
                    bool bounds_check_28805 = x_28803 && y_28804;
                    bool index_certs_28806;
                    
                    if (!bounds_check_28805) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          18) == -1) {
                                global_failure_args[0] = i_28802;
                                global_failure_args[1] = N_24013;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float res_28807 = ((__global
                                        float *) res_mem_37111)[gtid_28441 *
                                                                N_24013 +
                                                                i_28802];
                    
                    res_28800 = res_28807;
                } else {
                    res_28800 = INFINITY;
                }
                ((__global float *) mem_37266)[phys_tid_28442 + i_36577 *
                                               (num_groups_28693 *
                                                segmap_group_sizze_28692)] =
                    res_28800;
            }
            for (int64_t i_38609 = 0; i_38609 < iota32_arg_24397; i_38609++) {
                ((__global float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                             i_38609 *
                                                             (num_groups_28693 *
                                                              segmap_group_sizze_28692)] =
                    ((__global float *) mem_37266)[phys_tid_28442 + i_38609 *
                                                   (num_groups_28693 *
                                                    segmap_group_sizze_28692)];
            }
            for (int32_t i_28809 = 0; i_28809 < iters_24423; i_28809++) {
                int32_t lifted_2_radix_sort_step_arg_28811 = mul32(2, i_28809);
                int32_t lifted_0_get_bit_arg_28812 = add32(1,
                                                           lifted_2_radix_sort_step_arg_28811);
                bool res_28813 = lifted_0_get_bit_arg_28812 == 31;
                bool res_28814 = lifted_2_radix_sort_step_arg_28811 == 31;
                int64_t discard_36599;
                int64_t discard_36600;
                int64_t discard_36601;
                int64_t discard_36602;
                int64_t scanacc_36584;
                int64_t scanacc_36585;
                int64_t scanacc_36586;
                int64_t scanacc_36587;
                
                scanacc_36584 = 0;
                scanacc_36585 = 0;
                scanacc_36586 = 0;
                scanacc_36587 = 0;
                for (int64_t i_36593 = 0; i_36593 < iota32_arg_24397;
                     i_36593++) {
                    float x_28832 = ((__global
                                      float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                                        i_36593 *
                                                                        (num_groups_28693 *
                                                                         segmap_group_sizze_28692)];
                    int32_t i32_arg_28833;
                    
                    i32_arg_28833 = futrts_to_bits32(x_28832);
                    
                    int32_t unsign_arg_28834 = ashr32(i32_arg_28833,
                                                      lifted_0_get_bit_arg_28812);
                    int32_t unsign_arg_28835 = 1 & unsign_arg_28834;
                    int32_t unsign_arg_28836 = ashr32(i32_arg_28833, 31);
                    int32_t unsign_arg_28837 = 1 & unsign_arg_28836;
                    bool cond_28838 = unsign_arg_28837 == 1;
                    bool x_28839 = !cond_28838;
                    bool y_28840 = res_28813 && x_28839;
                    bool cond_28841 = cond_28838 || y_28840;
                    int32_t res_28842;
                    
                    if (cond_28841) {
                        int32_t res_28843 = 1 ^ unsign_arg_28835;
                        
                        res_28842 = res_28843;
                    } else {
                        res_28842 = unsign_arg_28835;
                    }
                    
                    int32_t x_28844 = mul32(2, res_28842);
                    int32_t unsign_arg_28845 = ashr32(i32_arg_28833,
                                                      lifted_2_radix_sort_step_arg_28811);
                    int32_t unsign_arg_28846 = 1 & unsign_arg_28845;
                    bool y_28847 = res_28814 && x_28839;
                    bool cond_28848 = cond_28838 || y_28847;
                    int32_t res_28849;
                    
                    if (cond_28848) {
                        int32_t res_28850 = 1 ^ unsign_arg_28846;
                        
                        res_28849 = res_28850;
                    } else {
                        res_28849 = unsign_arg_28846;
                    }
                    
                    int32_t res_28851 = add32(x_28844, res_28849);
                    bool cond_28852 = res_28851 == 0;
                    int64_t res_28853 = btoi_bool_i64(cond_28852);
                    int64_t res_28854;
                    int64_t res_28855;
                    int64_t res_28856;
                    
                    if (cond_28852) {
                        res_28854 = 0;
                        res_28855 = 0;
                        res_28856 = 0;
                    } else {
                        bool cond_28857 = res_28851 == 1;
                        int64_t res_28858 = btoi_bool_i64(cond_28857);
                        int64_t res_28859;
                        int64_t res_28860;
                        
                        if (cond_28857) {
                            res_28859 = 0;
                            res_28860 = 0;
                        } else {
                            bool cond_28861 = res_28851 == 2;
                            int64_t res_28862 = btoi_bool_i64(cond_28861);
                            bool cond_neg_28863 = !cond_28861;
                            int64_t res_28864 = btoi_bool_i64(cond_neg_28863);
                            
                            res_28859 = res_28862;
                            res_28860 = res_28864;
                        }
                        res_28854 = res_28858;
                        res_28855 = res_28859;
                        res_28856 = res_28860;
                    }
                    
                    int64_t res_28828 = add64(res_28853, scanacc_36584);
                    int64_t res_28829 = add64(res_28854, scanacc_36585);
                    int64_t res_28830 = add64(res_28855, scanacc_36586);
                    int64_t res_28831 = add64(res_28856, scanacc_36587);
                    
                    ((__global int64_t *) mem_37285)[phys_tid_28442 + i_36593 *
                                                     (num_groups_28693 *
                                                      segmap_group_sizze_28692)] =
                        res_28828;
                    ((__global int64_t *) mem_37287)[phys_tid_28442 + i_36593 *
                                                     (num_groups_28693 *
                                                      segmap_group_sizze_28692)] =
                        res_28829;
                    ((__global int64_t *) mem_37289)[phys_tid_28442 + i_36593 *
                                                     (num_groups_28693 *
                                                      segmap_group_sizze_28692)] =
                        res_28830;
                    ((__global int64_t *) mem_37291)[phys_tid_28442 + i_36593 *
                                                     (num_groups_28693 *
                                                      segmap_group_sizze_28692)] =
                        res_28831;
                    ((__global int32_t *) mem_37293)[phys_tid_28442 + i_36593 *
                                                     (num_groups_28693 *
                                                      segmap_group_sizze_28692)] =
                        res_28851;
                    
                    int64_t scanacc_tmp_38611 = res_28828;
                    int64_t scanacc_tmp_38612 = res_28829;
                    int64_t scanacc_tmp_38613 = res_28830;
                    int64_t scanacc_tmp_38614 = res_28831;
                    
                    scanacc_36584 = scanacc_tmp_38611;
                    scanacc_36585 = scanacc_tmp_38612;
                    scanacc_36586 = scanacc_tmp_38613;
                    scanacc_36587 = scanacc_tmp_38614;
                }
                discard_36599 = scanacc_36584;
                discard_36600 = scanacc_36585;
                discard_36601 = scanacc_36586;
                discard_36602 = scanacc_36587;
                
                int64_t res_28865 = ((__global
                                      int64_t *) mem_37285)[phys_tid_28442 +
                                                            i_24425 *
                                                            (num_groups_28693 *
                                                             segmap_group_sizze_28692)];
                int64_t res_28866 = ((__global
                                      int64_t *) mem_37287)[phys_tid_28442 +
                                                            i_24425 *
                                                            (num_groups_28693 *
                                                             segmap_group_sizze_28692)];
                int64_t res_28867 = ((__global
                                      int64_t *) mem_37289)[phys_tid_28442 +
                                                            i_24425 *
                                                            (num_groups_28693 *
                                                             segmap_group_sizze_28692)];
                
                for (int64_t i_38620 = 0; i_38620 < iota32_arg_24397;
                     i_38620++) {
                    ((__global float *) mem_37355)[phys_tid_28442 + i_38620 *
                                                   (num_groups_28693 *
                                                    segmap_group_sizze_28692)] =
                        ((__global
                          float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                            i_38620 *
                                                            (num_groups_28693 *
                                                             segmap_group_sizze_28692)];
                }
                for (int64_t write_iter_36603 = 0; write_iter_36603 <
                     iota32_arg_24397; write_iter_36603++) {
                    int32_t write_iv_36605 = ((__global
                                               int32_t *) mem_37293)[phys_tid_28442 +
                                                                     write_iter_36603 *
                                                                     (num_groups_28693 *
                                                                      segmap_group_sizze_28692)];
                    bool match_lit_28876 = 0 == write_iv_36605;
                    int64_t res_28877;
                    
                    if (match_lit_28876) {
                        int64_t write_iv_36606 = ((__global
                                                   int64_t *) mem_37285)[phys_tid_28442 +
                                                                         write_iter_36603 *
                                                                         (num_groups_28693 *
                                                                          segmap_group_sizze_28692)];
                        int64_t res_28878 = sub64(write_iv_36606, 1);
                        
                        res_28877 = res_28878;
                    } else {
                        int64_t write_iv_36607 = ((__global
                                                   int64_t *) mem_37287)[phys_tid_28442 +
                                                                         write_iter_36603 *
                                                                         (num_groups_28693 *
                                                                          segmap_group_sizze_28692)];
                        int64_t write_iv_36608 = ((__global
                                                   int64_t *) mem_37289)[phys_tid_28442 +
                                                                         write_iter_36603 *
                                                                         (num_groups_28693 *
                                                                          segmap_group_sizze_28692)];
                        int64_t write_iv_36609 = ((__global
                                                   int64_t *) mem_37291)[phys_tid_28442 +
                                                                         write_iter_36603 *
                                                                         (num_groups_28693 *
                                                                          segmap_group_sizze_28692)];
                        bool match_lit_28879 = 1 == write_iv_36605;
                        int64_t x_28880;
                        
                        if (match_lit_28879) {
                            int64_t x_28881 = add64(res_28865, write_iv_36607);
                            int64_t res_28882 = sub64(x_28881, 1);
                            
                            x_28880 = res_28882;
                        } else {
                            bool match_lit_28883 = 2 == write_iv_36605;
                            int64_t x_28884;
                            
                            if (match_lit_28883) {
                                int64_t x_28885 = add64(res_28865, res_28866);
                                int64_t x_28886 = add64(x_28885,
                                                        write_iv_36608);
                                int64_t res_28887 = sub64(x_28886, 1);
                                
                                x_28884 = res_28887;
                            } else {
                                int64_t x_28888 = add64(res_28865, res_28866);
                                int64_t x_28889 = add64(res_28867, x_28888);
                                int64_t x_28890 = add64(x_28889,
                                                        write_iv_36609);
                                int64_t res_28891 = sub64(x_28890, 1);
                                
                                x_28884 = res_28891;
                            }
                            x_28880 = x_28884;
                        }
                        res_28877 = x_28880;
                    }
                    
                    bool less_than_zzero_36611 = slt64(res_28877, 0);
                    bool greater_than_sizze_36612 = sle64(iota32_arg_24397,
                                                          res_28877);
                    bool outside_bounds_dim_36613 = less_than_zzero_36611 ||
                         greater_than_sizze_36612;
                    
                    if (!outside_bounds_dim_36613) {
                        for (int64_t i_38622 = 0; i_38622 < 1; i_38622++) {
                            ((__global float *) mem_37355)[phys_tid_28442 +
                                                           (res_28877 +
                                                            i_38622) *
                                                           (num_groups_28693 *
                                                            segmap_group_sizze_28692)] =
                                ((__global
                                  float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                                    num_groups_28693 *
                                                                    segmap_group_sizze_28692 *
                                                                    write_iter_36603 +
                                                                    i_38622 *
                                                                    (num_groups_28693 *
                                                                     segmap_group_sizze_28692)];
                        }
                    }
                }
                for (int64_t i_38623 = 0; i_38623 < iota32_arg_24397;
                     i_38623++) {
                    ((__global
                      float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                        i_38623 *
                                                        (num_groups_28693 *
                                                         segmap_group_sizze_28692)] =
                        ((__global float *) mem_37355)[phys_tid_28442 +
                                                       i_38623 *
                                                       (num_groups_28693 *
                                                        segmap_group_sizze_28692)];
                }
            }
            
            int32_t i_28892 = sdiv32(y_28707, 2);
            int32_t j_28893 = sub32(i_28892, 1);
            int32_t x_28894 = smod32(y_28707, 2);
            bool cond_28895 = x_28894 == 0;
            float res_28896;
            
            if (cond_28895) {
                int64_t j_28897 = sext_i32_i64(j_28893);
                bool x_28898 = sle64(0, j_28897);
                bool y_28899 = slt64(j_28897, iota32_arg_24397);
                bool bounds_check_28900 = x_28898 && y_28899;
                bool index_certs_28901;
                
                if (!bounds_check_28900) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 19) ==
                            -1) {
                            global_failure_args[0] = j_28897;
                            global_failure_args[1] = iota32_arg_24397;
                            ;
                        }
                        local_failure = true;
                        goto error_0;
                    }
                }
                
                float x_28902 = ((__global
                                  float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                                    j_28897 *
                                                                    (num_groups_28693 *
                                                                     segmap_group_sizze_28692)];
                int64_t i_28903 = sext_i32_i64(i_28892);
                bool x_28904 = sle64(0, i_28903);
                bool y_28905 = slt64(i_28903, iota32_arg_24397);
                bool bounds_check_28906 = x_28904 && y_28905;
                bool index_certs_28907;
                
                if (!bounds_check_28906) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 20) ==
                            -1) {
                            global_failure_args[0] = i_28903;
                            global_failure_args[1] = iota32_arg_24397;
                            ;
                        }
                        local_failure = true;
                        goto error_0;
                    }
                }
                
                float y_28908 = ((__global
                                  float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                                    i_28903 *
                                                                    (num_groups_28693 *
                                                                     segmap_group_sizze_28692)];
                float x_28909 = x_28902 + y_28908;
                float res_28910 = x_28909 / 2.0F;
                
                res_28896 = res_28910;
            } else {
                int64_t i_28911 = sext_i32_i64(i_28892);
                bool x_28912 = sle64(0, i_28911);
                bool y_28913 = slt64(i_28911, iota32_arg_24397);
                bool bounds_check_28914 = x_28912 && y_28913;
                bool index_certs_28915;
                
                if (!bounds_check_28914) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 21) ==
                            -1) {
                            global_failure_args[0] = i_28911;
                            global_failure_args[1] = iota32_arg_24397;
                            ;
                        }
                        local_failure = true;
                        goto error_0;
                    }
                }
                
                float res_28916 = ((__global
                                    float *) double_buffer_mem_37625)[phys_tid_28442 +
                                                                      i_28911 *
                                                                      (num_groups_28693 *
                                                                       segmap_group_sizze_28692)];
                
                res_28896 = res_28916;
            }
            
            bool cond_28917 = !res_28712;
            int32_t fst_breakzq_28918;
            
            if (cond_28917) {
                fst_breakzq_28918 = -1;
            } else {
                bool cond_28919 = slt32(res_28713, y_28707);
                int32_t res_28920;
                
                if (cond_28919) {
                    int32_t i_28921 = add32(x_28701, res_28713);
                    int64_t i_28922 = sext_i32_i64(i_28921);
                    int32_t x_28923 = ((__global
                                        int32_t *) res_mem_37112)[gtid_28441 *
                                                                  N_24013 +
                                                                  i_28922];
                    int32_t res_28924 = sub32(x_28923, n_24018);
                    
                    res_28920 = res_28924;
                } else {
                    res_28920 = -1;
                }
                fst_breakzq_28918 = res_28920;
            }
            
            bool cond_28925 = sle32(x_28701, 5);
            bool res_28926 = sle32(y_28707, 5);
            bool x_28927 = !cond_28925;
            bool y_28928 = res_28926 && x_28927;
            bool cond_28929 = cond_28925 || y_28928;
            int32_t fst_breakzq_28930;
            
            if (cond_28929) {
                fst_breakzq_28930 = -2;
            } else {
                fst_breakzq_28930 = fst_breakzq_28918;
            }
            for (int64_t i_38624 = 0; i_38624 < iota32_arg_24397; i_38624++) {
                ((__global float *) mem_37374)[phys_tid_28442 + i_38624 *
                                               (num_groups_28693 *
                                                segmap_group_sizze_28692)] =
                    NAN;
            }
            for (int64_t write_iter_36617 = 0; write_iter_36617 <
                 iota32_arg_24397; write_iter_36617++) {
                int32_t index_primexp_36645 = sext_i64_i32(write_iter_36617);
                bool cond_28935 = slt32(index_primexp_36645, y_28707);
                int32_t res_28936;
                
                if (cond_28935) {
                    int32_t i_28937 = add32(x_28701, index_primexp_36645);
                    int64_t i_28938 = sext_i32_i64(i_28937);
                    int32_t x_28939 = ((__global
                                        int32_t *) res_mem_37112)[gtid_28441 *
                                                                  N_24013 +
                                                                  i_28938];
                    int32_t res_28940 = sub32(x_28939, n_24018);
                    
                    res_28936 = res_28940;
                } else {
                    res_28936 = -1;
                }
                
                int64_t res_28941 = sext_i32_i64(res_28936);
                bool less_than_zzero_36621 = slt64(res_28941, 0);
                bool greater_than_sizze_36622 = sle64(iota32_arg_24397,
                                                      res_28941);
                bool outside_bounds_dim_36623 = less_than_zzero_36621 ||
                     greater_than_sizze_36622;
                
                if (!outside_bounds_dim_36623) {
                    for (int64_t i_38626 = 0; i_38626 < 1; i_38626++) {
                        ((__global float *) mem_37374)[phys_tid_28442 +
                                                       (res_28941 + i_38626) *
                                                       (num_groups_28693 *
                                                        segmap_group_sizze_28692)] =
                            ((__global float *) mem_37252)[phys_tid_28442 +
                                                           num_groups_28693 *
                                                           segmap_group_sizze_28692 *
                                                           write_iter_36617 +
                                                           i_38626 *
                                                           (num_groups_28693 *
                                                            segmap_group_sizze_28692)];
                    }
                }
            }
            for (int64_t i_38627 = 0; i_38627 < iota32_arg_24397; i_38627++) {
                ((__global float *) mem_37389)[i_38627 * m_24014 + gtid_28441] =
                    ((__global float *) mem_37374)[phys_tid_28442 + i_38627 *
                                                   (num_groups_28693 *
                                                    segmap_group_sizze_28692)];
            }
            for (int64_t i_38628 = 0; i_38628 < iota32_arg_24397; i_38628++) {
                ((__global float *) mem_37392)[i_38628 * m_24014 + gtid_28441] =
                    ((__global float *) mem_37252)[phys_tid_28442 + i_38628 *
                                                   (num_groups_28693 *
                                                    segmap_group_sizze_28692)];
            }
            ((__global int32_t *) mem_37394)[gtid_28441] = fst_breakzq_28930;
            ((__global float *) mem_37396)[gtid_28441] = res_28786;
            ((__global float *) mem_37398)[gtid_28441] = res_28896;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28692
}
__kernel void mainDetailedzisegmap_29198(__global int *global_failure,
                                         int64_t N_24013, int64_t m_24014,
                                         int32_t n_24018,
                                         int64_t iota32_arg_24397, __global
                                         unsigned char *res_mem_37112, __global
                                         unsigned char *res_mem_37191, __global
                                         unsigned char *mem_37249, __global
                                         unsigned char *mem_37456, __global
                                         unsigned char *mem_37470)
{
    #define segmap_group_sizze_30482 (mainDetailedzisegmap_group_sizze_29201)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38992;
    int32_t local_tid_38993;
    int64_t group_sizze_38996;
    int32_t wave_sizze_38995;
    int32_t group_tid_38994;
    
    global_tid_38992 = get_global_id(0);
    local_tid_38993 = get_local_id(0);
    group_sizze_38996 = get_local_size(0);
    wave_sizze_38995 = LOCKSTEP_WIDTH;
    group_tid_38994 = get_group_id(0);
    
    int32_t phys_tid_29198;
    
    phys_tid_29198 = global_tid_38992;
    
    int64_t gtid_29196;
    
    gtid_29196 = squot64(sext_i32_i64(group_tid_38994) *
                         segmap_group_sizze_30482 +
                         sext_i32_i64(local_tid_38993), iota32_arg_24397);
    
    int64_t gtid_29197;
    
    gtid_29197 = sext_i32_i64(group_tid_38994) * segmap_group_sizze_30482 +
        sext_i32_i64(local_tid_38993) - squot64(sext_i32_i64(group_tid_38994) *
                                                segmap_group_sizze_30482 +
                                                sext_i32_i64(local_tid_38993),
                                                iota32_arg_24397) *
        iota32_arg_24397;
    if (slt64(gtid_29196, m_24014) && slt64(gtid_29197, iota32_arg_24397)) {
        int32_t y_30487 = ((__global int32_t *) mem_37456)[gtid_29196];
        int32_t index_primexp_35389 = sext_i64_i32(gtid_29197);
        float write_value_30491 = ((__global float *) mem_37470)[gtid_29196 *
                                                                 iota32_arg_24397 +
                                                                 gtid_29197];
        bool cond_30492 = slt32(index_primexp_35389, y_30487);
        int32_t res_30493;
        
        if (cond_30492) {
            int32_t x_30485 = ((__global int32_t *) res_mem_37191)[gtid_29196];
            int32_t i_30494 = add32(x_30485, index_primexp_35389);
            int64_t i_30495 = sext_i32_i64(i_30494);
            int32_t x_30496 = ((__global int32_t *) res_mem_37112)[gtid_29196 *
                                                                   N_24013 +
                                                                   i_30495];
            int32_t res_30497 = sub32(x_30496, n_24018);
            
            res_30493 = res_30497;
        } else {
            res_30493 = -1;
        }
        
        int64_t res_30498 = sext_i32_i64(res_30493);
        
        if ((sle64(0, gtid_29196) && slt64(gtid_29196, m_24014)) && (sle64(0,
                                                                           res_30498) &&
                                                                     slt64(res_30498,
                                                                           iota32_arg_24397))) {
            ((__global float *) mem_37249)[gtid_29196 * iota32_arg_24397 +
                                           res_30498] = write_value_30491;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30482
}
__kernel void mainDetailedzisegmap_29251(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_24013, int64_t m_24014,
                                         int32_t n_24018,
                                         int64_t iota32_arg_24397, __global
                                         unsigned char *res_mem_37112, __global
                                         unsigned char *res_mem_37191, __global
                                         unsigned char *mem_37456, __global
                                         unsigned char *mem_37473, __global
                                         unsigned char *mem_37475, __global
                                         unsigned char *res_r_mem_37544,
                                         __global unsigned char *mem_37547,
                                         __global unsigned char *mem_37549)
{
    #define segmap_group_sizze_30417 (mainDetailedzisegmap_group_sizze_29253)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38987;
    int32_t local_tid_38988;
    int64_t group_sizze_38991;
    int32_t wave_sizze_38990;
    int32_t group_tid_38989;
    
    global_tid_38987 = get_global_id(0);
    local_tid_38988 = get_local_id(0);
    group_sizze_38991 = get_local_size(0);
    wave_sizze_38990 = LOCKSTEP_WIDTH;
    group_tid_38989 = get_group_id(0);
    
    int32_t phys_tid_29251;
    
    phys_tid_29251 = global_tid_38987;
    
    int64_t gtid_29250;
    
    gtid_29250 = sext_i32_i64(group_tid_38989) * segmap_group_sizze_30417 +
        sext_i32_i64(local_tid_38988);
    if (slt64(gtid_29250, m_24014)) {
        int32_t x_30421 = ((__global int32_t *) res_mem_37191)[gtid_29250];
        int32_t y_30423 = ((__global int32_t *) mem_37456)[gtid_29250];
        bool res_30424 = ((__global bool *) mem_37473)[gtid_29250];
        int32_t i_30427 = sdiv32(y_30423, 2);
        int32_t j_30428 = sub32(i_30427, 1);
        int32_t x_30429 = smod32(y_30423, 2);
        bool cond_30430 = x_30429 == 0;
        float res_30431;
        
        if (cond_30430) {
            int64_t j_30432 = sext_i32_i64(j_30428);
            bool x_30433 = sle64(0, j_30432);
            bool y_30434 = slt64(j_30432, iota32_arg_24397);
            bool bounds_check_30435 = x_30433 && y_30434;
            bool index_certs_30436;
            
            if (!bounds_check_30435) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 29) ==
                        -1) {
                        global_failure_args[0] = j_30432;
                        global_failure_args[1] = iota32_arg_24397;
                        ;
                    }
                    return;
                }
            }
            
            float x_30437 = ((__global float *) res_r_mem_37544)[gtid_29250 *
                                                                 iota32_arg_24397 +
                                                                 j_30432];
            int64_t i_30438 = sext_i32_i64(i_30427);
            bool x_30439 = sle64(0, i_30438);
            bool y_30440 = slt64(i_30438, iota32_arg_24397);
            bool bounds_check_30441 = x_30439 && y_30440;
            bool index_certs_30442;
            
            if (!bounds_check_30441) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 30) ==
                        -1) {
                        global_failure_args[0] = i_30438;
                        global_failure_args[1] = iota32_arg_24397;
                        ;
                    }
                    return;
                }
            }
            
            float y_30443 = ((__global float *) res_r_mem_37544)[gtid_29250 *
                                                                 iota32_arg_24397 +
                                                                 i_30438];
            float x_30444 = x_30437 + y_30443;
            float res_30445 = x_30444 / 2.0F;
            
            res_30431 = res_30445;
        } else {
            int64_t i_30446 = sext_i32_i64(i_30427);
            bool x_30447 = sle64(0, i_30446);
            bool y_30448 = slt64(i_30446, iota32_arg_24397);
            bool bounds_check_30449 = x_30447 && y_30448;
            bool index_certs_30450;
            
            if (!bounds_check_30449) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 31) ==
                        -1) {
                        global_failure_args[0] = i_30446;
                        global_failure_args[1] = iota32_arg_24397;
                        ;
                    }
                    return;
                }
            }
            
            float res_30451 = ((__global float *) res_r_mem_37544)[gtid_29250 *
                                                                   iota32_arg_24397 +
                                                                   i_30446];
            
            res_30431 = res_30451;
        }
        
        bool cond_30452 = !res_30424;
        int32_t fst_breakzq_30453;
        
        if (cond_30452) {
            fst_breakzq_30453 = -1;
        } else {
            int32_t res_30425 = ((__global int32_t *) mem_37475)[gtid_29250];
            bool cond_30454 = slt32(res_30425, y_30423);
            int32_t res_30455;
            
            if (cond_30454) {
                int32_t i_30456 = add32(x_30421, res_30425);
                int64_t i_30457 = sext_i32_i64(i_30456);
                int32_t x_30458 = ((__global
                                    int32_t *) res_mem_37112)[gtid_29250 *
                                                              N_24013 +
                                                              i_30457];
                int32_t res_30459 = sub32(x_30458, n_24018);
                
                res_30455 = res_30459;
            } else {
                res_30455 = -1;
            }
            fst_breakzq_30453 = res_30455;
        }
        
        bool cond_30460 = sle32(x_30421, 5);
        bool res_30461 = sle32(y_30423, 5);
        bool x_30462 = !cond_30460;
        bool y_30463 = res_30461 && x_30462;
        bool cond_30464 = cond_30460 || y_30463;
        int32_t fst_breakzq_30465;
        
        if (cond_30464) {
            fst_breakzq_30465 = -2;
        } else {
            fst_breakzq_30465 = fst_breakzq_30453;
        }
        ((__global int32_t *) mem_37547)[gtid_29250] = fst_breakzq_30465;
        ((__global float *) mem_37549)[gtid_29250] = res_30431;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30417
}
__kernel void mainDetailedzisegmap_29577(__global int *global_failure,
                                         int64_t m_24014,
                                         int64_t iota32_arg_24397,
                                         int64_t i_24425, __global
                                         unsigned char *mem_param_37490,
                                         __global unsigned char *mem_37517,
                                         __global unsigned char *mem_37520,
                                         __global unsigned char *mem_37523,
                                         __global unsigned char *mem_37526,
                                         __global unsigned char *mem_37529,
                                         __global unsigned char *mem_37532)
{
    #define segmap_group_sizze_30380 (mainDetailedzisegmap_group_sizze_29580)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38981;
    int32_t local_tid_38982;
    int64_t group_sizze_38985;
    int32_t wave_sizze_38984;
    int32_t group_tid_38983;
    
    global_tid_38981 = get_global_id(0);
    local_tid_38982 = get_local_id(0);
    group_sizze_38985 = get_local_size(0);
    wave_sizze_38984 = LOCKSTEP_WIDTH;
    group_tid_38983 = get_group_id(0);
    
    int32_t phys_tid_29577;
    
    phys_tid_29577 = global_tid_38981;
    
    int64_t gtid_29575;
    
    gtid_29575 = squot64(sext_i32_i64(group_tid_38983) *
                         segmap_group_sizze_30380 +
                         sext_i32_i64(local_tid_38982), iota32_arg_24397);
    
    int64_t gtid_29576;
    
    gtid_29576 = sext_i32_i64(group_tid_38983) * segmap_group_sizze_30380 +
        sext_i32_i64(local_tid_38982) - squot64(sext_i32_i64(group_tid_38983) *
                                                segmap_group_sizze_30380 +
                                                sext_i32_i64(local_tid_38982),
                                                iota32_arg_24397) *
        iota32_arg_24397;
    if (slt64(gtid_29575, m_24014) && slt64(gtid_29576, iota32_arg_24397)) {
        int32_t x_30393 = ((__global int32_t *) mem_37529)[gtid_29575 *
                                                           iota32_arg_24397 +
                                                           gtid_29576];
        float write_value_30398 = ((__global
                                    float *) mem_param_37490)[gtid_29575 *
                                                              iota32_arg_24397 +
                                                              gtid_29576];
        bool match_lit_30399 = 0 == x_30393;
        int64_t res_30400;
        
        if (match_lit_30399) {
            int64_t x_30394 = ((__global int64_t *) mem_37517)[gtid_29575 *
                                                               iota32_arg_24397 +
                                                               gtid_29576];
            int64_t res_30401 = sub64(x_30394, 1);
            
            res_30400 = res_30401;
        } else {
            int64_t res_30389 = ((__global int64_t *) mem_37517)[gtid_29575 *
                                                                 iota32_arg_24397 +
                                                                 i_24425];
            int64_t res_30390 = ((__global int64_t *) mem_37520)[gtid_29575 *
                                                                 iota32_arg_24397 +
                                                                 i_24425];
            int64_t res_30391 = ((__global int64_t *) mem_37523)[gtid_29575 *
                                                                 iota32_arg_24397 +
                                                                 i_24425];
            int64_t x_30395 = ((__global int64_t *) mem_37520)[gtid_29575 *
                                                               iota32_arg_24397 +
                                                               gtid_29576];
            int64_t x_30396 = ((__global int64_t *) mem_37523)[gtid_29575 *
                                                               iota32_arg_24397 +
                                                               gtid_29576];
            int64_t x_30397 = ((__global int64_t *) mem_37526)[gtid_29575 *
                                                               iota32_arg_24397 +
                                                               gtid_29576];
            bool match_lit_30402 = 1 == x_30393;
            int64_t x_30403;
            
            if (match_lit_30402) {
                int64_t x_30404 = add64(res_30389, x_30395);
                int64_t res_30405 = sub64(x_30404, 1);
                
                x_30403 = res_30405;
            } else {
                bool match_lit_30406 = 2 == x_30393;
                int64_t x_30407;
                
                if (match_lit_30406) {
                    int64_t x_30408 = add64(res_30389, res_30390);
                    int64_t x_30409 = add64(x_30396, x_30408);
                    int64_t res_30410 = sub64(x_30409, 1);
                    
                    x_30407 = res_30410;
                } else {
                    int64_t x_30411 = add64(res_30389, res_30390);
                    int64_t x_30412 = add64(res_30391, x_30411);
                    int64_t x_30413 = add64(x_30397, x_30412);
                    int64_t res_30414 = sub64(x_30413, 1);
                    
                    x_30407 = res_30414;
                }
                x_30403 = x_30407;
            }
            res_30400 = x_30403;
        }
        if ((sle64(0, gtid_29575) && slt64(gtid_29575, m_24014)) && (sle64(0,
                                                                           res_30400) &&
                                                                     slt64(res_30400,
                                                                           iota32_arg_24397))) {
            ((__global float *) mem_37532)[gtid_29575 * iota32_arg_24397 +
                                           res_30400] = write_value_30398;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30380
}
__kernel void mainDetailedzisegmap_29827(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_24013, int64_t m_24014,
                                         int64_t iota32_arg_24397, __global
                                         unsigned char *res_mem_37111, __global
                                         unsigned char *res_mem_37191, __global
                                         unsigned char *mem_37456, __global
                                         unsigned char *mem_37482)
{
    #define segmap_group_sizze_30186 (mainDetailedzisegmap_group_sizze_29830)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38850;
    int32_t local_tid_38851;
    int64_t group_sizze_38854;
    int32_t wave_sizze_38853;
    int32_t group_tid_38852;
    
    global_tid_38850 = get_global_id(0);
    local_tid_38851 = get_local_id(0);
    group_sizze_38854 = get_local_size(0);
    wave_sizze_38853 = LOCKSTEP_WIDTH;
    group_tid_38852 = get_group_id(0);
    
    int32_t phys_tid_29827;
    
    phys_tid_29827 = global_tid_38850;
    
    int64_t gtid_29825;
    
    gtid_29825 = squot64(sext_i32_i64(group_tid_38852) *
                         segmap_group_sizze_30186 +
                         sext_i32_i64(local_tid_38851), iota32_arg_24397);
    
    int64_t gtid_29826;
    
    gtid_29826 = sext_i32_i64(group_tid_38852) * segmap_group_sizze_30186 +
        sext_i32_i64(local_tid_38851) - squot64(sext_i32_i64(group_tid_38852) *
                                                segmap_group_sizze_30186 +
                                                sext_i32_i64(local_tid_38851),
                                                iota32_arg_24397) *
        iota32_arg_24397;
    if (slt64(gtid_29825, m_24014) && slt64(gtid_29826, iota32_arg_24397)) {
        int32_t x_30189 = ((__global int32_t *) res_mem_37191)[gtid_29825];
        int32_t y_30191 = ((__global int32_t *) mem_37456)[gtid_29825];
        int32_t index_primexp_35386 = sext_i64_i32(gtid_29826);
        bool cond_30193 = slt32(index_primexp_35386, y_30191);
        bool cond_30194;
        
        if (cond_30193) {
            int32_t i_30195 = add32(x_30189, index_primexp_35386);
            int64_t i_30196 = sext_i32_i64(i_30195);
            bool x_30197 = sle64(0, i_30196);
            bool y_30198 = slt64(i_30196, N_24013);
            bool bounds_check_30199 = x_30197 && y_30198;
            bool index_certs_30200;
            
            if (!bounds_check_30199) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 27) ==
                        -1) {
                        global_failure_args[0] = i_30196;
                        global_failure_args[1] = N_24013;
                        ;
                    }
                    return;
                }
            }
            
            float isnan_arg_30201 = ((__global
                                      float *) res_mem_37111)[gtid_29825 *
                                                              N_24013 +
                                                              i_30196];
            bool res_30202;
            
            res_30202 = futrts_isnan32(isnan_arg_30201);
            
            bool res_30203 = !res_30202;
            
            cond_30194 = res_30203;
        } else {
            cond_30194 = 0;
        }
        
        float res_30204;
        
        if (cond_30194) {
            int32_t i_30205 = add32(x_30189, index_primexp_35386);
            int64_t i_30206 = sext_i32_i64(i_30205);
            bool x_30207 = sle64(0, i_30206);
            bool y_30208 = slt64(i_30206, N_24013);
            bool bounds_check_30209 = x_30207 && y_30208;
            bool index_certs_30210;
            
            if (!bounds_check_30209) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 28) ==
                        -1) {
                        global_failure_args[0] = i_30206;
                        global_failure_args[1] = N_24013;
                        ;
                    }
                    return;
                }
            }
            
            float res_30211 = ((__global float *) res_mem_37111)[gtid_29825 *
                                                                 N_24013 +
                                                                 i_30206];
            
            res_30204 = res_30211;
        } else {
            res_30204 = INFINITY;
        }
        ((__global float *) mem_37482)[gtid_29825 * iota32_arg_24397 +
                                       gtid_29826] = res_30204;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30186
}
__kernel void mainDetailedzisegmap_29886(__global int *global_failure,
                                         int64_t m_24014, __global
                                         unsigned char *mem_37456, __global
                                         unsigned char *mem_37467, __global
                                         unsigned char *mem_37478)
{
    #define segmap_group_sizze_30170 (mainDetailedzisegmap_group_sizze_29888)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38845;
    int32_t local_tid_38846;
    int64_t group_sizze_38849;
    int32_t wave_sizze_38848;
    int32_t group_tid_38847;
    
    global_tid_38845 = get_global_id(0);
    local_tid_38846 = get_local_id(0);
    group_sizze_38849 = get_local_size(0);
    wave_sizze_38848 = LOCKSTEP_WIDTH;
    group_tid_38847 = get_group_id(0);
    
    int32_t phys_tid_29886;
    
    phys_tid_29886 = global_tid_38845;
    
    int64_t gtid_29885;
    
    gtid_29885 = sext_i32_i64(group_tid_38847) * segmap_group_sizze_30170 +
        sext_i32_i64(local_tid_38846);
    if (slt64(gtid_29885, m_24014)) {
        int32_t y_30173 = ((__global int32_t *) mem_37456)[gtid_29885];
        float res_30174 = ((__global float *) mem_37467)[gtid_29885];
        float res_30175 = sitofp_i32_f32(y_30173);
        float res_30176 = res_30174 / res_30175;
        
        ((__global float *) mem_37478)[gtid_29885] = res_30176;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30170
}
__kernel void mainDetailedzisegmap_29901(__global int *global_failure,
                                         int64_t m_24014, __global
                                         unsigned char *mem_37463, __global
                                         unsigned char *mem_37465, __global
                                         unsigned char *mem_37473, __global
                                         unsigned char *mem_37475)
{
    #define segmap_group_sizze_30147 (mainDetailedzisegmap_group_sizze_29903)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38840;
    int32_t local_tid_38841;
    int64_t group_sizze_38844;
    int32_t wave_sizze_38843;
    int32_t group_tid_38842;
    
    global_tid_38840 = get_global_id(0);
    local_tid_38841 = get_local_id(0);
    group_sizze_38844 = get_local_size(0);
    wave_sizze_38843 = LOCKSTEP_WIDTH;
    group_tid_38842 = get_group_id(0);
    
    int32_t phys_tid_29901;
    
    phys_tid_29901 = global_tid_38840;
    
    int64_t gtid_29900;
    
    gtid_29900 = sext_i32_i64(group_tid_38842) * segmap_group_sizze_30147 +
        sext_i32_i64(local_tid_38841);
    if (slt64(gtid_29900, m_24014)) {
        bool acc0_30153 = ((__global bool *) mem_37463)[gtid_29900];
        bool x_30158 = acc0_30153 && acc0_30153;
        int32_t res_30162;
        
        if (acc0_30153) {
            int32_t acc0_30154 = ((__global int32_t *) mem_37465)[gtid_29900];
            
            res_30162 = acc0_30154;
        } else {
            res_30162 = -1;
        }
        ((__global bool *) mem_37473)[gtid_29900] = x_30158;
        ((__global int32_t *) mem_37475)[gtid_29900] = res_30162;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30147
}
__kernel void mainDetailedzisegmap_30023(__global int *global_failure,
                                         int64_t m_24014,
                                         int64_t num_groups_30046, __global
                                         unsigned char *res_mem_37110, __global
                                         unsigned char *res_mem_37191, __global
                                         unsigned char *res_mem_37192, __global
                                         unsigned char *mem_37454, __global
                                         unsigned char *mem_37456)
{
    #define segmap_group_sizze_30045 (mainDetailedzisegmap_group_sizze_30025)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38678;
    int32_t local_tid_38679;
    int64_t group_sizze_38682;
    int32_t wave_sizze_38681;
    int32_t group_tid_38680;
    
    global_tid_38678 = get_global_id(0);
    local_tid_38679 = get_local_id(0);
    group_sizze_38682 = get_local_size(0);
    wave_sizze_38681 = LOCKSTEP_WIDTH;
    group_tid_38680 = get_group_id(0);
    
    int32_t phys_tid_30023;
    
    phys_tid_30023 = global_tid_38678;
    
    int32_t phys_group_id_38683;
    
    phys_group_id_38683 = get_group_id(0);
    for (int32_t i_38684 = 0; i_38684 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014, segmap_group_sizze_30045)) -
                   phys_group_id_38683, sext_i64_i32(num_groups_30046));
         i_38684++) {
        int32_t virt_group_id_38685 = phys_group_id_38683 + i_38684 *
                sext_i64_i32(num_groups_30046);
        int64_t gtid_30022 = sext_i32_i64(virt_group_id_38685) *
                segmap_group_sizze_30045 + sext_i32_i64(local_tid_38679);
        
        if (slt64(gtid_30022, m_24014)) {
            int32_t x_30052 = ((__global int32_t *) res_mem_37110)[gtid_30022];
            int32_t x_30053 = ((__global int32_t *) res_mem_37191)[gtid_30022];
            float x_30054 = ((__global float *) res_mem_37192)[gtid_30022];
            int32_t y_30055 = sub32(x_30052, x_30053);
            float res_30056 = sitofp_i32_f32(x_30053);
            float res_30057;
            
            res_30057 = futrts_sqrt32(res_30056);
            
            float y_30058 = x_30054 * res_30057;
            
            ((__global float *) mem_37454)[gtid_30022] = y_30058;
            ((__global int32_t *) mem_37456)[gtid_30022] = y_30055;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30045
}
__kernel void mainDetailedzisegmap_intragroup_26334(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *mem_36786_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_36776_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_36766_backing_aligned_2,
                                                    int32_t k2p2zq_24031,
                                                    int64_t res_24033,
                                                    int64_t m_24164,
                                                    int64_t nm_24165,
                                                    int32_t res_24173,
                                                    int64_t computed_group_sizze_26275,
                                                    __global
                                                    unsigned char *res_mem_36762,
                                                    __global
                                                    unsigned char *mem_36790)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36786_backing_2 = (__local volatile
                                                           char *) mem_36786_backing_aligned_0;
    __local volatile char *restrict mem_36776_backing_1 = (__local volatile
                                                           char *) mem_36776_backing_aligned_1;
    __local volatile char *restrict mem_36766_backing_0 = (__local volatile
                                                           char *) mem_36766_backing_aligned_2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_37901;
    int32_t local_tid_37902;
    int64_t group_sizze_37905;
    int32_t wave_sizze_37904;
    int32_t group_tid_37903;
    
    global_tid_37901 = get_global_id(0);
    local_tid_37902 = get_local_id(0);
    group_sizze_37905 = get_local_size(0);
    wave_sizze_37904 = LOCKSTEP_WIDTH;
    group_tid_37903 = get_group_id(0);
    
    int32_t phys_tid_26334;
    
    phys_tid_26334 = group_tid_37903;
    
    int32_t ltid_pre_37906;
    
    ltid_pre_37906 = squot32(local_tid_37902, sext_i64_i32(res_24033));
    
    int32_t ltid_pre_37907;
    
    ltid_pre_37907 = local_tid_37902 - squot32(local_tid_37902,
                                               sext_i64_i32(res_24033)) *
        sext_i64_i32(res_24033);
    
    int32_t ltid_pre_37908;
    
    ltid_pre_37908 = local_tid_37902;
    
    int64_t gtid_26273;
    
    gtid_26273 = sext_i32_i64(group_tid_37903);
    
    __local char *mem_36766;
    
    mem_36766 = (__local char *) mem_36766_backing_0;
    
    int64_t gtid_26276 = sext_i32_i64(ltid_pre_37908);
    int32_t phys_tid_26277 = local_tid_37902;
    
    if (slt64(gtid_26276, nm_24165)) {
        int64_t res_26473 = sdiv64(gtid_26276, m_24164);
        int64_t res_26474 = smod64(gtid_26276, m_24164);
        bool cond_26475 = slt64(res_26474, res_24033);
        float res_26476;
        
        if (cond_26475) {
            float res_26477 = ((__global float *) res_mem_36762)[gtid_26273 *
                                                                 (res_24033 *
                                                                  res_24033) +
                                                                 res_26473 *
                                                                 res_24033 +
                                                                 res_26474];
            
            res_26476 = res_26477;
        } else {
            int64_t y_26478 = add64(res_24033, res_26473);
            bool cond_26479 = res_26474 == y_26478;
            float res_26480;
            
            if (cond_26479) {
                res_26480 = 1.0F;
            } else {
                res_26480 = 0.0F;
            }
            res_26476 = res_26480;
        }
        ((__local float *) mem_36766)[gtid_26276] = res_26476;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_36776;
    
    mem_36776 = (__local char *) mem_36776_backing_1;
    for (int32_t i_26482 = 0; i_26482 < k2p2zq_24031; i_26482++) {
        int64_t i_26484 = sext_i32_i64(i_26482);
        bool x_26485 = sle64(0, i_26484);
        bool y_26486 = slt64(i_26484, nm_24165);
        bool bounds_check_26487 = x_26485 && y_26486;
        bool index_certs_26488;
        
        if (!bounds_check_26487) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 16) == -1) {
                    global_failure_args[0] = i_26484;
                    global_failure_args[1] = nm_24165;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_26489 = ((__local float *) mem_36766)[i_26484];
        bool cond_26490 = v1_26489 == 0.0F;
        int64_t gtid_26287 = sext_i32_i64(ltid_pre_37908);
        int32_t phys_tid_26288 = local_tid_37902;
        
        if (slt64(gtid_26287, nm_24165)) {
            int32_t res_26493 = sext_i64_i32(gtid_26287);
            int32_t res_26494 = sdiv32(res_26493, res_24173);
            int32_t res_26495 = smod32(res_26493, res_24173);
            float res_26496;
            
            if (cond_26490) {
                int32_t x_26497 = mul32(res_24173, res_26494);
                int32_t i_26498 = add32(res_26495, x_26497);
                int64_t i_26499 = sext_i32_i64(i_26498);
                float res_26500 = ((__local float *) mem_36766)[i_26499];
                
                res_26496 = res_26500;
            } else {
                int64_t j_26501 = sext_i32_i64(res_26495);
                float x_26502 = ((__local float *) mem_36766)[j_26501];
                float x_26503 = x_26502 / v1_26489;
                int32_t y_26504 = sub32(k2p2zq_24031, 1);
                bool cond_26505 = slt32(res_26494, y_26504);
                float res_26506;
                
                if (cond_26505) {
                    int32_t x_26507 = add32(1, res_26494);
                    int32_t x_26508 = mul32(res_24173, x_26507);
                    int32_t i_26509 = add32(res_26495, x_26508);
                    int64_t i_26510 = sext_i32_i64(i_26509);
                    float x_26511 = ((__local float *) mem_36766)[i_26510];
                    int32_t i_26512 = add32(i_26482, x_26508);
                    int64_t i_26513 = sext_i32_i64(i_26512);
                    float x_26514 = ((__local float *) mem_36766)[i_26513];
                    float y_26515 = x_26503 * x_26514;
                    float res_26516 = x_26511 - y_26515;
                    
                    res_26506 = res_26516;
                } else {
                    res_26506 = x_26503;
                }
                res_26496 = res_26506;
            }
            ((__local float *) mem_36776)[gtid_26287] = res_26496;
        }
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_26314 = sext_i32_i64(ltid_pre_37908);
        int32_t phys_tid_26315 = local_tid_37902;
        
        if (slt64(write_i_26314, nm_24165)) {
            float write_value_26519 = ((__local
                                        float *) mem_36776)[write_i_26314];
            
            if (sle64(0, write_i_26314) && slt64(write_i_26314, nm_24165)) {
                ((__local float *) mem_36766)[write_i_26314] =
                    write_value_26519;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    __local char *mem_36786;
    
    mem_36786 = (__local char *) mem_36786_backing_2;
    
    int64_t gtid_26317 = sext_i32_i64(ltid_pre_37906);
    int64_t gtid_26318 = sext_i32_i64(ltid_pre_37907);
    int32_t phys_tid_26319 = local_tid_37902;
    
    if (slt64(gtid_26317, res_24033) && slt64(gtid_26318, res_24033)) {
        int64_t index_primexp_35325 = m_24164 * gtid_26317;
        int64_t i_26526 = add64(res_24033, gtid_26318);
        int64_t new_index_26527 = i_26526 + index_primexp_35325;
        float res_26528 = ((__local float *) mem_36766)[new_index_26527];
        
        ((__local float *) mem_36786)[gtid_26317 * res_24033 + gtid_26318] =
            res_26528;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_37910 = 0; i_37910 < sdiv_up64(res_24033 * res_24033 -
                                                  sext_i32_i64(local_tid_37902),
                                                  computed_group_sizze_26275);
         i_37910++) {
        ((__global float *) mem_36790)[gtid_26273 * (res_24033 * res_24033) +
                                       squot64(i_37910 *
                                               computed_group_sizze_26275 +
                                               sext_i32_i64(local_tid_37902),
                                               res_24033) * res_24033 +
                                       (i_37910 * computed_group_sizze_26275 +
                                        sext_i32_i64(local_tid_37902) -
                                        squot64(i_37910 *
                                                computed_group_sizze_26275 +
                                                sext_i32_i64(local_tid_37902),
                                                res_24033) * res_24033)] =
            ((__local float *) mem_36786)[squot64(i_37910 *
                                                  computed_group_sizze_26275 +
                                                  sext_i32_i64(local_tid_37902),
                                                  res_24033) * res_24033 +
                                          (i_37910 *
                                           computed_group_sizze_26275 +
                                           sext_i32_i64(local_tid_37902) -
                                           squot64(i_37910 *
                                                   computed_group_sizze_26275 +
                                                   sext_i32_i64(local_tid_37902),
                                                   res_24033) * res_24033)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_26678(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_36811_backing_aligned_0,
                                                    int64_t m_24014,
                                                    int32_t k2p2zq_24031,
                                                    int64_t nm_24165,
                                                    int32_t res_24173,
                                                    int32_t i_27065,
                                                    int64_t i_27067,
                                                    int64_t ctx_param_ext_36797,
                                                    int64_t ctx_param_ext_36798,
                                                    int64_t ctx_param_ext_36800,
                                                    __global
                                                    unsigned char *mem_param_36802,
                                                    __global
                                                    unsigned char *mem_36807,
                                                    __global
                                                    unsigned char *mem_36815)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36811_backing_0 = (__local volatile
                                                           char *) mem_36811_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37937;
    int32_t local_tid_37938;
    int64_t group_sizze_37941;
    int32_t wave_sizze_37940;
    int32_t group_tid_37939;
    
    global_tid_37937 = get_global_id(0);
    local_tid_37938 = get_local_id(0);
    group_sizze_37941 = get_local_size(0);
    wave_sizze_37940 = LOCKSTEP_WIDTH;
    group_tid_37939 = get_group_id(0);
    
    int32_t phys_tid_26678;
    
    phys_tid_26678 = group_tid_37939;
    
    int32_t ltid_pre_37942;
    
    ltid_pre_37942 = local_tid_37938;
    
    int64_t gtid_26646;
    
    gtid_26646 = sext_i32_i64(group_tid_37939);
    
    float v1_27084 = ((__global float *) mem_param_36802)[ctx_param_ext_36797 +
                                                          (gtid_26646 *
                                                           ctx_param_ext_36798 +
                                                           i_27067 *
                                                           ctx_param_ext_36800)];
    bool cond_27085 = v1_27084 == 0.0F;
    __local char *mem_36811;
    
    mem_36811 = (__local char *) mem_36811_backing_0;
    
    int64_t gtid_26649 = sext_i32_i64(ltid_pre_37942);
    int32_t phys_tid_26650 = local_tid_37938;
    
    if (slt64(gtid_26649, nm_24165)) {
        int32_t res_27088 = sext_i64_i32(gtid_26649);
        int32_t res_27089 = sdiv32(res_27088, res_24173);
        int32_t res_27090 = smod32(res_27088, res_24173);
        float res_27091;
        
        if (cond_27085) {
            int32_t x_27092 = mul32(res_24173, res_27089);
            int32_t i_27093 = add32(res_27090, x_27092);
            int64_t i_27094 = sext_i32_i64(i_27093);
            float res_27095 = ((__global
                                float *) mem_param_36802)[ctx_param_ext_36797 +
                                                          (gtid_26646 *
                                                           ctx_param_ext_36798 +
                                                           i_27094 *
                                                           ctx_param_ext_36800)];
            
            res_27091 = res_27095;
        } else {
            int64_t j_27096 = sext_i32_i64(res_27090);
            float x_27097 = ((__global
                              float *) mem_param_36802)[ctx_param_ext_36797 +
                                                        (gtid_26646 *
                                                         ctx_param_ext_36798 +
                                                         j_27096 *
                                                         ctx_param_ext_36800)];
            float x_27098 = x_27097 / v1_27084;
            int32_t y_27099 = sub32(k2p2zq_24031, 1);
            bool cond_27100 = slt32(res_27089, y_27099);
            float res_27101;
            
            if (cond_27100) {
                int32_t x_27102 = add32(1, res_27089);
                int32_t x_27103 = mul32(res_24173, x_27102);
                int32_t i_27104 = add32(res_27090, x_27103);
                int64_t i_27105 = sext_i32_i64(i_27104);
                float x_27106 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_26646 *
                                                             ctx_param_ext_36798 +
                                                             i_27105 *
                                                             ctx_param_ext_36800)];
                int32_t i_27107 = add32(i_27065, x_27103);
                int64_t i_27108 = sext_i32_i64(i_27107);
                float x_27109 = ((__global
                                  float *) mem_param_36802)[ctx_param_ext_36797 +
                                                            (gtid_26646 *
                                                             ctx_param_ext_36798 +
                                                             i_27108 *
                                                             ctx_param_ext_36800)];
                float y_27110 = x_27098 * x_27109;
                float res_27111 = x_27106 - y_27110;
                
                res_27101 = res_27111;
            } else {
                res_27101 = x_27098;
            }
            res_27091 = res_27101;
        }
        ((__local float *) mem_36811)[gtid_26649] = res_27091;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_26676 = sext_i32_i64(ltid_pre_37942);
    int32_t phys_tid_26677 = local_tid_37938;
    
    if (slt64(write_i_26676, nm_24165)) {
        float write_value_27114 = ((__local float *) mem_36811)[write_i_26676];
        
        if (sle64(0, write_i_26676) && slt64(write_i_26676, nm_24165)) {
            ((__global float *) mem_36807)[gtid_26646 + write_i_26676 *
                                           m_24014] = write_value_27114;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_37938 == 0) {
        for (int64_t i_37943 = 0; i_37943 < nm_24165; i_37943++) {
            ((__global float *) mem_36815)[gtid_26646 * nm_24165 + i_37943] =
                ((__global float *) mem_36807)[gtid_26646 + i_37943 * m_24014];
        }
    }
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_27652(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37089_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37087_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_37085_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37083_backing_aligned_3,
                                                    int64_t N_24013,
                                                    int64_t N_24015,
                                                    int64_t i_24280, __global
                                                    unsigned char *images_mem_36652,
                                                    __global
                                                    unsigned char *res_mem_37073,
                                                    __global
                                                    unsigned char *mem_37092,
                                                    __global
                                                    unsigned char *mem_37095,
                                                    __global
                                                    unsigned char *mem_37098)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37089_backing_3 = (__local volatile
                                                           char *) mem_37089_backing_aligned_0;
    __local volatile char *restrict mem_37087_backing_2 = (__local volatile
                                                           char *) mem_37087_backing_aligned_1;
    __local volatile char *restrict mem_37085_backing_1 = (__local volatile
                                                           char *) mem_37085_backing_aligned_2;
    __local volatile char *restrict mem_37083_backing_0 = (__local volatile
                                                           char *) mem_37083_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38242;
    int32_t local_tid_38243;
    int64_t group_sizze_38246;
    int32_t wave_sizze_38245;
    int32_t group_tid_38244;
    
    global_tid_38242 = get_global_id(0);
    local_tid_38243 = get_local_id(0);
    group_sizze_38246 = get_local_size(0);
    wave_sizze_38245 = LOCKSTEP_WIDTH;
    group_tid_38244 = get_group_id(0);
    
    int32_t phys_tid_27652;
    
    phys_tid_27652 = group_tid_38244;
    
    int32_t ltid_pre_38247;
    
    ltid_pre_38247 = local_tid_38243;
    
    int64_t gtid_27645;
    
    gtid_27645 = sext_i32_i64(group_tid_38244);
    
    __local char *mem_37083;
    
    mem_37083 = (__local char *) mem_37083_backing_0;
    
    __local char *mem_37085;
    
    mem_37085 = (__local char *) mem_37085_backing_1;
    
    int64_t gtid_27648 = sext_i32_i64(ltid_pre_38247);
    int32_t phys_tid_27649 = local_tid_38243;
    
    if (slt64(gtid_27648, N_24013)) {
        float x_27741 = ((__global float *) images_mem_36652)[gtid_27645 *
                                                              N_24015 +
                                                              gtid_27648];
        bool res_27743;
        
        res_27743 = futrts_isnan32(x_27741);
        
        bool cond_27744 = !res_27743;
        float res_27745;
        
        if (cond_27744) {
            float x_27742 = ((__global float *) res_mem_37073)[gtid_27645 *
                                                               N_24013 +
                                                               gtid_27648];
            float res_27746 = x_27741 - x_27742;
            
            res_27745 = res_27746;
        } else {
            res_27745 = NAN;
        }
        
        bool res_27747;
        
        res_27747 = futrts_isnan32(res_27745);
        
        bool res_27748 = !res_27747;
        int64_t res_27749 = btoi_bool_i64(res_27748);
        
        ((__local int64_t *) mem_37083)[gtid_27648] = res_27749;
        ((__local float *) mem_37085)[gtid_27648] = res_27745;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38248;
    
    dims_flat_38248 = N_24013;
    
    int64_t x_27738;
    int64_t x_27739;
    int64_t x_38250;
    int64_t x_38251;
    bool ltid_in_bounds_38253;
    
    ltid_in_bounds_38253 = slt64(sext_i32_i64(local_tid_38243), N_24013);
    
    int32_t skip_threads_38254;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38253) {
            x_27739 = ((volatile __local
                        int64_t *) mem_37083)[sext_i32_i64(local_tid_38243)];
            if ((local_tid_38243 - squot32(local_tid_38243, 32) * 32) == 0) {
                x_27738 = x_27739;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38254 = 1;
        while (slt32(skip_threads_38254, 32)) {
            if (sle32(skip_threads_38254, local_tid_38243 -
                      squot32(local_tid_38243, 32) * 32) &&
                ltid_in_bounds_38253) {
                // read operands
                {
                    x_27738 = ((volatile __local
                                int64_t *) mem_37083)[sext_i32_i64(local_tid_38243) -
                                                      sext_i32_i64(skip_threads_38254)];
                }
                // perform operation
                {
                    bool inactive_38255 =
                         slt64(srem64(sext_i32_i64(local_tid_38243), N_24013),
                               sext_i32_i64(local_tid_38243) -
                               sext_i32_i64(local_tid_38243 -
                               skip_threads_38254));
                    
                    if (inactive_38255) {
                        x_27738 = x_27739;
                    }
                    if (!inactive_38255) {
                        int64_t res_27740 = add64(x_27738, x_27739);
                        
                        x_27738 = res_27740;
                    }
                }
            }
            if (sle32(wave_sizze_38245, skip_threads_38254)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38254, local_tid_38243 -
                      squot32(local_tid_38243, 32) * 32) &&
                ltid_in_bounds_38253) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37083)[sext_i32_i64(local_tid_38243)] =
                        x_27738;
                    x_27739 = x_27738;
                }
            }
            if (sle32(wave_sizze_38245, skip_threads_38254)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38254 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38243 - squot32(local_tid_38243, 32) * 32) == 31 &&
            ltid_in_bounds_38253) {
            ((volatile __local
              int64_t *) mem_37083)[sext_i32_i64(squot32(local_tid_38243,
                                                         32))] = x_27738;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38256;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38243, 32) == 0 && ltid_in_bounds_38253) {
                x_38251 = ((volatile __local
                            int64_t *) mem_37083)[sext_i32_i64(local_tid_38243)];
                if ((local_tid_38243 - squot32(local_tid_38243, 32) * 32) ==
                    0) {
                    x_38250 = x_38251;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38256 = 1;
            while (slt32(skip_threads_38256, 32)) {
                if (sle32(skip_threads_38256, local_tid_38243 -
                          squot32(local_tid_38243, 32) * 32) &&
                    (squot32(local_tid_38243, 32) == 0 &&
                     ltid_in_bounds_38253)) {
                    // read operands
                    {
                        x_38250 = ((volatile __local
                                    int64_t *) mem_37083)[sext_i32_i64(local_tid_38243) -
                                                          sext_i32_i64(skip_threads_38256)];
                    }
                    // perform operation
                    {
                        bool inactive_38257 =
                             slt64(srem64(sext_i32_i64(local_tid_38243 * 32 +
                                          32 - 1), N_24013),
                                   sext_i32_i64(local_tid_38243 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38243 -
                                                 skip_threads_38256) * 32 + 32 -
                                   1));
                        
                        if (inactive_38257) {
                            x_38250 = x_38251;
                        }
                        if (!inactive_38257) {
                            int64_t res_38252 = add64(x_38250, x_38251);
                            
                            x_38250 = res_38252;
                        }
                    }
                }
                if (sle32(wave_sizze_38245, skip_threads_38256)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38256, local_tid_38243 -
                          squot32(local_tid_38243, 32) * 32) &&
                    (squot32(local_tid_38243, 32) == 0 &&
                     ltid_in_bounds_38253)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37083)[sext_i32_i64(local_tid_38243)] =
                            x_38250;
                        x_38251 = x_38250;
                    }
                }
                if (sle32(wave_sizze_38245, skip_threads_38256)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38256 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38243, 32) == 0 || !ltid_in_bounds_38253)) {
            // read operands
            {
                x_27739 = x_27738;
                x_27738 = ((__local
                            int64_t *) mem_37083)[sext_i32_i64(squot32(local_tid_38243,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38258 =
                     slt64(srem64(sext_i32_i64(local_tid_38243), N_24013),
                           sext_i32_i64(local_tid_38243) -
                           sext_i32_i64(squot32(local_tid_38243, 32) * 32 - 1));
                
                if (inactive_38258) {
                    x_27738 = x_27739;
                }
                if (!inactive_38258) {
                    int64_t res_27740 = add64(x_27738, x_27739);
                    
                    x_27738 = res_27740;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37083)[sext_i32_i64(local_tid_38243)] =
                    x_27738;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38243, 32) == 0) {
            ((__local int64_t *) mem_37083)[sext_i32_i64(local_tid_38243)] =
                x_27739;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_27750 = ((__local int64_t *) mem_37083)[i_24280];
    int32_t res_27751 = sext_i64_i32(res_27750);
    __local char *mem_37087;
    
    mem_37087 = (__local char *) mem_37087_backing_2;
    ((__local float *) mem_37087)[sext_i32_i64(local_tid_38243)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37089;
    
    mem_37089 = (__local char *) mem_37089_backing_3;
    ((__local int32_t *) mem_37089)[sext_i32_i64(local_tid_38243)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_27650 = sext_i32_i64(ltid_pre_38247);
    int32_t phys_tid_27651 = local_tid_38243;
    
    if (slt64(write_i_27650, N_24013)) {
        float x_27756 = ((__local float *) mem_37085)[write_i_27650];
        int32_t index_primexp_35347 = sext_i64_i32(write_i_27650);
        bool res_27759;
        
        res_27759 = futrts_isnan32(x_27756);
        
        bool res_27760 = !res_27759;
        int64_t res_27761;
        
        if (res_27760) {
            int64_t x_27757 = ((__local int64_t *) mem_37083)[write_i_27650];
            int64_t res_27762 = sub64(x_27757, 1);
            
            res_27761 = res_27762;
        } else {
            res_27761 = -1;
        }
        if (sle64(0, res_27761) && slt64(res_27761, N_24013)) {
            ((__local int32_t *) mem_37089)[res_27761] = index_primexp_35347;
        }
        if (sle64(0, res_27761) && slt64(res_27761, N_24013)) {
            ((__local float *) mem_37087)[res_27761] = x_27756;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38243 == 0) {
        ((__global int32_t *) mem_37092)[gtid_27645] = res_27751;
    }
    ((__global float *) mem_37095)[gtid_27645 * N_24013 +
                                   sext_i32_i64(local_tid_38243)] = ((__local
                                                                      float *) mem_37087)[sext_i32_i64(local_tid_38243)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_37098)[gtid_27645 * N_24013 +
                                     sext_i32_i64(local_tid_38243)] = ((__local
                                                                        int32_t *) mem_37089)[sext_i32_i64(local_tid_38243)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_27992(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38351_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38347_backing_aligned_1,
                                                    int64_t N_24013,
                                                    int64_t N_24015,
                                                    float hfrac_24020,
                                                    int64_t res_24027,
                                                    int32_t k2p2_24029, __global
                                                    unsigned char *images_mem_36652,
                                                    __global
                                                    unsigned char *res_mem_37111,
                                                    __global
                                                    unsigned char *mem_37171,
                                                    __global
                                                    unsigned char *mem_37173,
                                                    __global
                                                    unsigned char *mem_37175)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38351_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38351_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38347_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38347_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38341;
    int32_t local_tid_38342;
    int64_t group_sizze_38345;
    int32_t wave_sizze_38344;
    int32_t group_tid_38343;
    
    global_tid_38341 = get_global_id(0);
    local_tid_38342 = get_local_id(0);
    group_sizze_38345 = get_local_size(0);
    wave_sizze_38344 = LOCKSTEP_WIDTH;
    group_tid_38343 = get_group_id(0);
    
    int32_t phys_tid_27992;
    
    phys_tid_27992 = group_tid_38343;
    
    int32_t ltid_pre_38346;
    
    ltid_pre_38346 = local_tid_38342;
    
    int64_t gtid_27985;
    
    gtid_27985 = sext_i32_i64(group_tid_38343);
    
    int32_t res_28069;
    int64_t gtid_27988 = sext_i32_i64(ltid_pre_38346);
    int32_t phys_tid_27989 = local_tid_38342;
    __local char *red_arr_mem_38347;
    
    red_arr_mem_38347 = (__local char *) red_arr_mem_38347_backing_0;
    if (slt64(gtid_27988, res_24027)) {
        float x_28073 = ((__global float *) images_mem_36652)[gtid_27985 *
                                                              N_24015 +
                                                              gtid_27988];
        bool res_28074;
        
        res_28074 = futrts_isnan32(x_28073);
        
        bool cond_28075 = !res_28074;
        int32_t res_28076 = btoi_bool_i32(cond_28075);
        
        ((__local int32_t *) red_arr_mem_38347)[gtid_27988] = res_28076;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38349;
    int32_t skip_waves_38350;
    
    skip_waves_38350 = 1;
    
    int32_t x_28070;
    int32_t x_28071;
    
    offset_38349 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38342, sext_i64_i32(res_24027))) {
            x_28070 = ((__local
                        int32_t *) red_arr_mem_38347)[sext_i32_i64(local_tid_38342 +
                                                      offset_38349)];
        }
    }
    offset_38349 = 1;
    while (slt32(offset_38349, wave_sizze_38344)) {
        if (slt32(local_tid_38342 + offset_38349, sext_i64_i32(res_24027)) &&
            ((local_tid_38342 - squot32(local_tid_38342, wave_sizze_38344) *
              wave_sizze_38344) & (2 * offset_38349 - 1)) == 0) {
            // read array element
            {
                x_28071 = ((volatile __local
                            int32_t *) red_arr_mem_38347)[sext_i32_i64(local_tid_38342 +
                                                          offset_38349)];
            }
            // apply reduction operation
            {
                int32_t res_28072 = add32(x_28070, x_28071);
                
                x_28070 = res_28072;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38347)[sext_i32_i64(local_tid_38342)] =
                    x_28070;
            }
        }
        offset_38349 *= 2;
    }
    while (slt32(skip_waves_38350, squot32(sext_i64_i32(res_24027) +
                                           wave_sizze_38344 - 1,
                                           wave_sizze_38344))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38349 = skip_waves_38350 * wave_sizze_38344;
        if (slt32(local_tid_38342 + offset_38349, sext_i64_i32(res_24027)) &&
            ((local_tid_38342 - squot32(local_tid_38342, wave_sizze_38344) *
              wave_sizze_38344) == 0 && (squot32(local_tid_38342,
                                                 wave_sizze_38344) & (2 *
                                                                      skip_waves_38350 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_28071 = ((__local
                            int32_t *) red_arr_mem_38347)[sext_i32_i64(local_tid_38342 +
                                                          offset_38349)];
            }
            // apply reduction operation
            {
                int32_t res_28072 = add32(x_28070, x_28071);
                
                x_28070 = res_28072;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38347)[sext_i32_i64(local_tid_38342)] =
                    x_28070;
            }
        }
        skip_waves_38350 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_28069 = ((__local int32_t *) red_arr_mem_38347)[0];
    
    float res_28077;
    int64_t gtid_27990 = sext_i32_i64(ltid_pre_38346);
    int32_t phys_tid_27991 = local_tid_38342;
    __local char *red_arr_mem_38351;
    
    red_arr_mem_38351 = (__local char *) red_arr_mem_38351_backing_1;
    if (slt64(gtid_27990, res_24027)) {
        int32_t index_primexp_35355 = sext_i64_i32(gtid_27990);
        bool cond_28082 = slt32(index_primexp_35355, res_28069);
        float res_28083;
        
        if (cond_28082) {
            int64_t i_28084 = sext_i32_i64(index_primexp_35355);
            float res_28085 = ((__global float *) res_mem_37111)[gtid_27985 *
                                                                 N_24013 +
                                                                 i_28084];
            
            res_28083 = res_28085;
        } else {
            res_28083 = 0.0F;
        }
        
        float res_28086 = res_28083 * res_28083;
        
        ((__local float *) red_arr_mem_38351)[gtid_27990] = res_28086;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38353;
    int32_t skip_waves_38354;
    
    skip_waves_38354 = 1;
    
    float x_28078;
    float x_28079;
    
    offset_38353 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38342, sext_i64_i32(res_24027))) {
            x_28078 = ((__local
                        float *) red_arr_mem_38351)[sext_i32_i64(local_tid_38342 +
                                                    offset_38353)];
        }
    }
    offset_38353 = 1;
    while (slt32(offset_38353, wave_sizze_38344)) {
        if (slt32(local_tid_38342 + offset_38353, sext_i64_i32(res_24027)) &&
            ((local_tid_38342 - squot32(local_tid_38342, wave_sizze_38344) *
              wave_sizze_38344) & (2 * offset_38353 - 1)) == 0) {
            // read array element
            {
                x_28079 = ((volatile __local
                            float *) red_arr_mem_38351)[sext_i32_i64(local_tid_38342 +
                                                        offset_38353)];
            }
            // apply reduction operation
            {
                float res_28080 = x_28078 + x_28079;
                
                x_28078 = res_28080;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_38351)[sext_i32_i64(local_tid_38342)] =
                    x_28078;
            }
        }
        offset_38353 *= 2;
    }
    while (slt32(skip_waves_38354, squot32(sext_i64_i32(res_24027) +
                                           wave_sizze_38344 - 1,
                                           wave_sizze_38344))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38353 = skip_waves_38354 * wave_sizze_38344;
        if (slt32(local_tid_38342 + offset_38353, sext_i64_i32(res_24027)) &&
            ((local_tid_38342 - squot32(local_tid_38342, wave_sizze_38344) *
              wave_sizze_38344) == 0 && (squot32(local_tid_38342,
                                                 wave_sizze_38344) & (2 *
                                                                      skip_waves_38354 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_28079 = ((__local
                            float *) red_arr_mem_38351)[sext_i32_i64(local_tid_38342 +
                                                        offset_38353)];
            }
            // apply reduction operation
            {
                float res_28080 = x_28078 + x_28079;
                
                x_28078 = res_28080;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_38351)[sext_i32_i64(local_tid_38342)] =
                    x_28078;
            }
        }
        skip_waves_38354 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_28077 = ((__local float *) red_arr_mem_38351)[0];
    
    int32_t r32_arg_28087 = sub32(res_28069, k2p2_24029);
    float res_28088 = sitofp_i32_f32(r32_arg_28087);
    float sqrt_arg_28089 = res_28077 / res_28088;
    float res_28090;
    
    res_28090 = futrts_sqrt32(sqrt_arg_28089);
    
    float res_28091 = sitofp_i32_f32(res_28069);
    float t32_arg_28092 = hfrac_24020 * res_28091;
    int32_t res_28093 = fptosi_f32_i32(t32_arg_28092);
    
    if (local_tid_38342 == 0) {
        ((__global int32_t *) mem_37171)[gtid_27985] = res_28093;
    }
    if (local_tid_38342 == 0) {
        ((__global int32_t *) mem_37173)[gtid_27985] = res_28069;
    }
    if (local_tid_38342 == 0) {
        ((__global float *) mem_37175)[gtid_27985] = res_28090;
    }
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_28440(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *mem_37438_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37428_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *double_buffer_mem_37629_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37426_backing_aligned_3,
                                                    __local volatile
                                                    int64_t *mem_37424_backing_aligned_4,
                                                    __local volatile
                                                    int64_t *mem_37422_backing_aligned_5,
                                                    __local volatile
                                                    int64_t *mem_37420_backing_aligned_6,
                                                    __local volatile
                                                    int64_t *mem_37418_backing_aligned_7,
                                                    __local volatile
                                                    int64_t *mem_37408_backing_aligned_8,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38650_backing_aligned_9,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38648_backing_aligned_10,
                                                    __local volatile
                                                    int64_t *red_arr_mem_38646_backing_aligned_11,
                                                    __local volatile
                                                    int64_t *mem_37405_backing_aligned_12,
                                                    __local volatile
                                                    int64_t *mem_37402_backing_aligned_13,
                                                    int64_t N_24013,
                                                    int32_t n_24018,
                                                    int64_t iota32_arg_24397,
                                                    int32_t iters_24423,
                                                    int64_t i_24425, __global
                                                    unsigned char *res_mem_37110,
                                                    __global
                                                    unsigned char *res_mem_37111,
                                                    __global
                                                    unsigned char *res_mem_37112,
                                                    __global
                                                    unsigned char *res_mem_37190,
                                                    __global
                                                    unsigned char *res_mem_37191,
                                                    __global
                                                    unsigned char *res_mem_37192,
                                                    __global
                                                    unsigned char *res_mem_37241,
                                                    __global
                                                    unsigned char *mem_37246,
                                                    __global
                                                    unsigned char *mem_37442,
                                                    __global
                                                    unsigned char *mem_37445,
                                                    __global
                                                    unsigned char *mem_37447,
                                                    __global
                                                    unsigned char *mem_37449,
                                                    __global
                                                    unsigned char *mem_37451)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37438_backing_13 = (__local volatile
                                                            char *) mem_37438_backing_aligned_0;
    __local volatile char *restrict mem_37428_backing_12 = (__local volatile
                                                            char *) mem_37428_backing_aligned_1;
    __local volatile char *restrict double_buffer_mem_37629_backing_11 =
                          (__local volatile
                           char *) double_buffer_mem_37629_backing_aligned_2;
    __local volatile char *restrict mem_37426_backing_10 = (__local volatile
                                                            char *) mem_37426_backing_aligned_3;
    __local volatile char *restrict mem_37424_backing_9 = (__local volatile
                                                           char *) mem_37424_backing_aligned_4;
    __local volatile char *restrict mem_37422_backing_8 = (__local volatile
                                                           char *) mem_37422_backing_aligned_5;
    __local volatile char *restrict mem_37420_backing_7 = (__local volatile
                                                           char *) mem_37420_backing_aligned_6;
    __local volatile char *restrict mem_37418_backing_6 = (__local volatile
                                                           char *) mem_37418_backing_aligned_7;
    __local volatile char *restrict mem_37408_backing_5 = (__local volatile
                                                           char *) mem_37408_backing_aligned_8;
    __local volatile char *restrict red_arr_mem_38650_backing_4 =
                          (__local volatile
                           char *) red_arr_mem_38650_backing_aligned_9;
    __local volatile char *restrict red_arr_mem_38648_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_38648_backing_aligned_10;
    __local volatile char *restrict red_arr_mem_38646_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38646_backing_aligned_11;
    __local volatile char *restrict mem_37405_backing_1 = (__local volatile
                                                           char *) mem_37405_backing_aligned_12;
    __local volatile char *restrict mem_37402_backing_0 = (__local volatile
                                                           char *) mem_37402_backing_aligned_13;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_38629;
    int32_t local_tid_38630;
    int64_t group_sizze_38633;
    int32_t wave_sizze_38632;
    int32_t group_tid_38631;
    
    global_tid_38629 = get_global_id(0);
    local_tid_38630 = get_local_id(0);
    group_sizze_38633 = get_local_size(0);
    wave_sizze_38632 = LOCKSTEP_WIDTH;
    group_tid_38631 = get_group_id(0);
    
    int32_t phys_tid_28440;
    
    phys_tid_28440 = group_tid_38631;
    
    int32_t ltid_pre_38634;
    
    ltid_pre_38634 = local_tid_38630;
    
    int64_t gtid_28405;
    
    gtid_28405 = sext_i32_i64(group_tid_38631);
    
    int32_t x_28952;
    
    x_28952 = ((__global int32_t *) res_mem_37110)[gtid_28405];
    
    int32_t x_28953 = ((__global int32_t *) res_mem_37191)[gtid_28405];
    float x_28954 = ((__global float *) res_mem_37192)[gtid_28405];
    int32_t x_28955 = ((__global int32_t *) res_mem_37190)[gtid_28405];
    float x_28956 = ((__global float *) res_mem_37241)[gtid_28405];
    int32_t y_28959 = sub32(x_28952, x_28953);
    float res_28960 = sitofp_i32_f32(x_28953);
    float res_28961;
    
    res_28961 = futrts_sqrt32(res_28960);
    
    float y_28962 = x_28954 * res_28961;
    __local char *mem_37402;
    
    mem_37402 = (__local char *) mem_37402_backing_0;
    
    int64_t gtid_28408 = sext_i32_i64(ltid_pre_38634);
    int32_t phys_tid_28409 = local_tid_38630;
    
    if (slt64(gtid_28408, iota32_arg_24397)) {
        int32_t index_primexp_35368 = sext_i64_i32(gtid_28408);
        bool cond_28975 = sle32(y_28959, index_primexp_35368);
        float res_28976;
        
        if (cond_28975) {
            res_28976 = 0.0F;
        } else {
            bool cond_28977 = index_primexp_35368 == 0;
            float res_28978;
            
            if (cond_28977) {
                res_28978 = x_28956;
            } else {
                int32_t x_28979 = sub32(x_28953, x_28955);
                int32_t i_28980 = add32(x_28979, index_primexp_35368);
                int64_t i_28981 = sext_i32_i64(i_28980);
                float negate_arg_28982 = ((__global
                                           float *) res_mem_37111)[gtid_28405 *
                                                                   N_24013 +
                                                                   i_28981];
                float x_28983 = 0.0F - negate_arg_28982;
                int32_t i_28984 = add32(x_28953, index_primexp_35368);
                int64_t i_28985 = sext_i32_i64(i_28984);
                float y_28986 = ((__global float *) res_mem_37111)[gtid_28405 *
                                                                   N_24013 +
                                                                   i_28985];
                float res_28987 = x_28983 + y_28986;
                
                res_28978 = res_28987;
            }
            res_28976 = res_28978;
        }
        ((__local float *) mem_37402)[gtid_28408] = res_28976;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38635;
    
    dims_flat_38635 = iota32_arg_24397;
    
    float x_28971;
    float x_28972;
    float x_38637;
    float x_38638;
    bool ltid_in_bounds_38640;
    
    ltid_in_bounds_38640 = slt64(sext_i32_i64(local_tid_38630),
                                 iota32_arg_24397);
    
    int32_t skip_threads_38641;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38640) {
            x_28972 = ((volatile __local
                        float *) mem_37402)[sext_i32_i64(local_tid_38630)];
            if ((local_tid_38630 - squot32(local_tid_38630, 32) * 32) == 0) {
                x_28971 = x_28972;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38641 = 1;
        while (slt32(skip_threads_38641, 32)) {
            if (sle32(skip_threads_38641, local_tid_38630 -
                      squot32(local_tid_38630, 32) * 32) &&
                ltid_in_bounds_38640) {
                // read operands
                {
                    x_28971 = ((volatile __local
                                float *) mem_37402)[sext_i32_i64(local_tid_38630) -
                                                    sext_i32_i64(skip_threads_38641)];
                }
                // perform operation
                {
                    bool inactive_38642 =
                         slt64(srem64(sext_i32_i64(local_tid_38630),
                                      iota32_arg_24397),
                               sext_i32_i64(local_tid_38630) -
                               sext_i32_i64(local_tid_38630 -
                               skip_threads_38641));
                    
                    if (inactive_38642) {
                        x_28971 = x_28972;
                    }
                    if (!inactive_38642) {
                        float res_28973 = x_28971 + x_28972;
                        
                        x_28971 = res_28973;
                    }
                }
            }
            if (sle32(wave_sizze_38632, skip_threads_38641)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38641, local_tid_38630 -
                      squot32(local_tid_38630, 32) * 32) &&
                ltid_in_bounds_38640) {
                // write result
                {
                    ((volatile __local
                      float *) mem_37402)[sext_i32_i64(local_tid_38630)] =
                        x_28971;
                    x_28972 = x_28971;
                }
            }
            if (sle32(wave_sizze_38632, skip_threads_38641)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38641 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38630 - squot32(local_tid_38630, 32) * 32) == 31 &&
            ltid_in_bounds_38640) {
            ((volatile __local
              float *) mem_37402)[sext_i32_i64(squot32(local_tid_38630, 32))] =
                x_28971;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38643;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38630, 32) == 0 && ltid_in_bounds_38640) {
                x_38638 = ((volatile __local
                            float *) mem_37402)[sext_i32_i64(local_tid_38630)];
                if ((local_tid_38630 - squot32(local_tid_38630, 32) * 32) ==
                    0) {
                    x_38637 = x_38638;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38643 = 1;
            while (slt32(skip_threads_38643, 32)) {
                if (sle32(skip_threads_38643, local_tid_38630 -
                          squot32(local_tid_38630, 32) * 32) &&
                    (squot32(local_tid_38630, 32) == 0 &&
                     ltid_in_bounds_38640)) {
                    // read operands
                    {
                        x_38637 = ((volatile __local
                                    float *) mem_37402)[sext_i32_i64(local_tid_38630) -
                                                        sext_i32_i64(skip_threads_38643)];
                    }
                    // perform operation
                    {
                        bool inactive_38644 =
                             slt64(srem64(sext_i32_i64(local_tid_38630 * 32 +
                                          32 - 1), iota32_arg_24397),
                                   sext_i32_i64(local_tid_38630 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38630 -
                                                 skip_threads_38643) * 32 + 32 -
                                   1));
                        
                        if (inactive_38644) {
                            x_38637 = x_38638;
                        }
                        if (!inactive_38644) {
                            float res_38639 = x_38637 + x_38638;
                            
                            x_38637 = res_38639;
                        }
                    }
                }
                if (sle32(wave_sizze_38632, skip_threads_38643)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38643, local_tid_38630 -
                          squot32(local_tid_38630, 32) * 32) &&
                    (squot32(local_tid_38630, 32) == 0 &&
                     ltid_in_bounds_38640)) {
                    // write result
                    {
                        ((volatile __local
                          float *) mem_37402)[sext_i32_i64(local_tid_38630)] =
                            x_38637;
                        x_38638 = x_38637;
                    }
                }
                if (sle32(wave_sizze_38632, skip_threads_38643)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38643 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38630, 32) == 0 || !ltid_in_bounds_38640)) {
            // read operands
            {
                x_28972 = x_28971;
                x_28971 = ((__local
                            float *) mem_37402)[sext_i32_i64(squot32(local_tid_38630,
                                                                     32)) - 1];
            }
            // perform operation
            {
                bool inactive_38645 =
                     slt64(srem64(sext_i32_i64(local_tid_38630),
                                  iota32_arg_24397),
                           sext_i32_i64(local_tid_38630) -
                           sext_i32_i64(squot32(local_tid_38630, 32) * 32 - 1));
                
                if (inactive_38645) {
                    x_28971 = x_28972;
                }
                if (!inactive_38645) {
                    float res_28973 = x_28971 + x_28972;
                    
                    x_28971 = res_28973;
                }
            }
            // write final result
            {
                ((__local float *) mem_37402)[sext_i32_i64(local_tid_38630)] =
                    x_28971;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38630, 32) == 0) {
            ((__local float *) mem_37402)[sext_i32_i64(local_tid_38630)] =
                x_28972;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37405;
    
    mem_37405 = (__local char *) mem_37405_backing_1;
    
    bool acc0_28993;
    int32_t acc0_28994;
    float acc0_28995;
    int64_t gtid_28410 = sext_i32_i64(ltid_pre_38634);
    int32_t phys_tid_28411 = local_tid_38630;
    __local char *red_arr_mem_38646;
    
    red_arr_mem_38646 = (__local char *) red_arr_mem_38646_backing_2;
    
    __local char *red_arr_mem_38648;
    
    red_arr_mem_38648 = (__local char *) red_arr_mem_38648_backing_3;
    
    __local char *red_arr_mem_38650;
    
    red_arr_mem_38650 = (__local char *) red_arr_mem_38650_backing_4;
    if (slt64(gtid_28410, iota32_arg_24397)) {
        float x_29011 = ((__local float *) mem_37402)[gtid_28410];
        float x_29012 = ((__global float *) mem_37246)[gtid_28410];
        int32_t index_primexp_35371 = sext_i64_i32(gtid_28410);
        float res_29015 = x_29011 / y_28962;
        bool cond_29016 = slt32(index_primexp_35371, y_28959);
        bool res_29017;
        
        res_29017 = futrts_isnan32(res_29015);
        
        bool res_29018 = !res_29017;
        bool x_29019 = cond_29016 && res_29018;
        float res_29020 = (float) fabs(res_29015);
        bool res_29021 = x_29012 < res_29020;
        bool x_29022 = x_29019 && res_29021;
        float res_29023;
        
        if (cond_29016) {
            res_29023 = res_29015;
        } else {
            res_29023 = 0.0F;
        }
        ((__local bool *) red_arr_mem_38646)[gtid_28410] = x_29022;
        ((__local int32_t *) red_arr_mem_38648)[gtid_28410] =
            index_primexp_35371;
        ((__local float *) red_arr_mem_38650)[gtid_28410] = res_29023;
        ((__local float *) mem_37405)[gtid_28410] = res_29015;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38652;
    int32_t skip_waves_38653;
    
    skip_waves_38653 = 1;
    
    bool x_28997;
    int32_t x_28998;
    float x_28999;
    bool x_29000;
    int32_t x_29001;
    float x_29002;
    
    offset_38652 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38630, sext_i64_i32(iota32_arg_24397))) {
            x_28997 = ((__local
                        bool *) red_arr_mem_38646)[sext_i32_i64(local_tid_38630 +
                                                   offset_38652)];
            x_28998 = ((__local
                        int32_t *) red_arr_mem_38648)[sext_i32_i64(local_tid_38630 +
                                                      offset_38652)];
            x_28999 = ((__local
                        float *) red_arr_mem_38650)[sext_i32_i64(local_tid_38630 +
                                                    offset_38652)];
        }
    }
    offset_38652 = 1;
    while (slt32(offset_38652, wave_sizze_38632)) {
        if (slt32(local_tid_38630 + offset_38652,
                  sext_i64_i32(iota32_arg_24397)) && ((local_tid_38630 -
                                                       squot32(local_tid_38630,
                                                               wave_sizze_38632) *
                                                       wave_sizze_38632) & (2 *
                                                                            offset_38652 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_29000 = ((volatile __local
                            bool *) red_arr_mem_38646)[sext_i32_i64(local_tid_38630 +
                                                       offset_38652)];
                x_29001 = ((volatile __local
                            int32_t *) red_arr_mem_38648)[sext_i32_i64(local_tid_38630 +
                                                          offset_38652)];
                x_29002 = ((volatile __local
                            float *) red_arr_mem_38650)[sext_i32_i64(local_tid_38630 +
                                                        offset_38652)];
            }
            // apply reduction operation
            {
                bool res_29003;
                int32_t res_29004;
                
                if (x_28997) {
                    res_29003 = x_28997;
                    res_29004 = x_28998;
                } else {
                    bool x_29005 = x_29000 && x_29000;
                    bool x_29006 = !x_29000;
                    bool y_29007 = x_28997 && x_29006;
                    bool res_29008 = x_29005 || y_29007;
                    int32_t res_29009;
                    
                    if (x_29000) {
                        res_29009 = x_29001;
                    } else {
                        res_29009 = x_28998;
                    }
                    res_29003 = res_29008;
                    res_29004 = res_29009;
                }
                
                float res_29010 = x_28999 + x_29002;
                
                x_28997 = res_29003;
                x_28998 = res_29004;
                x_28999 = res_29010;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_38646)[sext_i32_i64(local_tid_38630)] =
                    x_28997;
                ((volatile __local
                  int32_t *) red_arr_mem_38648)[sext_i32_i64(local_tid_38630)] =
                    x_28998;
                ((volatile __local
                  float *) red_arr_mem_38650)[sext_i32_i64(local_tid_38630)] =
                    x_28999;
            }
        }
        offset_38652 *= 2;
    }
    while (slt32(skip_waves_38653, squot32(sext_i64_i32(iota32_arg_24397) +
                                           wave_sizze_38632 - 1,
                                           wave_sizze_38632))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38652 = skip_waves_38653 * wave_sizze_38632;
        if (slt32(local_tid_38630 + offset_38652,
                  sext_i64_i32(iota32_arg_24397)) && ((local_tid_38630 -
                                                       squot32(local_tid_38630,
                                                               wave_sizze_38632) *
                                                       wave_sizze_38632) == 0 &&
                                                      (squot32(local_tid_38630,
                                                               wave_sizze_38632) &
                                                       (2 * skip_waves_38653 -
                                                        1)) == 0)) {
            // read array element
            {
                x_29000 = ((__local
                            bool *) red_arr_mem_38646)[sext_i32_i64(local_tid_38630 +
                                                       offset_38652)];
                x_29001 = ((__local
                            int32_t *) red_arr_mem_38648)[sext_i32_i64(local_tid_38630 +
                                                          offset_38652)];
                x_29002 = ((__local
                            float *) red_arr_mem_38650)[sext_i32_i64(local_tid_38630 +
                                                        offset_38652)];
            }
            // apply reduction operation
            {
                bool res_29003;
                int32_t res_29004;
                
                if (x_28997) {
                    res_29003 = x_28997;
                    res_29004 = x_28998;
                } else {
                    bool x_29005 = x_29000 && x_29000;
                    bool x_29006 = !x_29000;
                    bool y_29007 = x_28997 && x_29006;
                    bool res_29008 = x_29005 || y_29007;
                    int32_t res_29009;
                    
                    if (x_29000) {
                        res_29009 = x_29001;
                    } else {
                        res_29009 = x_28998;
                    }
                    res_29003 = res_29008;
                    res_29004 = res_29009;
                }
                
                float res_29010 = x_28999 + x_29002;
                
                x_28997 = res_29003;
                x_28998 = res_29004;
                x_28999 = res_29010;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_38646)[sext_i32_i64(local_tid_38630)] =
                    x_28997;
                ((__local
                  int32_t *) red_arr_mem_38648)[sext_i32_i64(local_tid_38630)] =
                    x_28998;
                ((__local
                  float *) red_arr_mem_38650)[sext_i32_i64(local_tid_38630)] =
                    x_28999;
            }
        }
        skip_waves_38653 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_28993 = ((__local bool *) red_arr_mem_38646)[0];
    acc0_28994 = ((__local int32_t *) red_arr_mem_38648)[0];
    acc0_28995 = ((__local float *) red_arr_mem_38650)[0];
    
    bool x_29026 = acc0_28993 && acc0_28993;
    int32_t res_29030;
    
    if (acc0_28993) {
        res_29030 = acc0_28994;
    } else {
        res_29030 = -1;
    }
    
    float res_29037 = sitofp_i32_f32(y_28959);
    float res_29038 = acc0_28995 / res_29037;
    __local char *mem_37408;
    
    mem_37408 = (__local char *) mem_37408_backing_5;
    
    int64_t gtid_28412 = sext_i32_i64(ltid_pre_38634);
    int32_t phys_tid_28413 = local_tid_38630;
    
    if (slt64(gtid_28412, iota32_arg_24397)) {
        int32_t index_primexp_35374 = sext_i64_i32(gtid_28412);
        bool cond_29041 = slt32(index_primexp_35374, y_28959);
        bool cond_29042;
        
        if (cond_29041) {
            int32_t i_29043 = add32(x_28953, index_primexp_35374);
            int64_t i_29044 = sext_i32_i64(i_29043);
            bool x_29045 = sle64(0, i_29044);
            bool y_29046 = slt64(i_29044, N_24013);
            bool bounds_check_29047 = x_29045 && y_29046;
            bool index_certs_29048;
            
            if (!bounds_check_29047) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 22) ==
                        -1) {
                        global_failure_args[0] = i_29044;
                        global_failure_args[1] = N_24013;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float isnan_arg_29049 = ((__global
                                      float *) res_mem_37111)[gtid_28405 *
                                                              N_24013 +
                                                              i_29044];
            bool res_29050;
            
            res_29050 = futrts_isnan32(isnan_arg_29049);
            
            bool res_29051 = !res_29050;
            
            cond_29042 = res_29051;
        } else {
            cond_29042 = 0;
        }
        
        float res_29052;
        
        if (cond_29042) {
            int32_t i_29053 = add32(x_28953, index_primexp_35374);
            int64_t i_29054 = sext_i32_i64(i_29053);
            bool x_29055 = sle64(0, i_29054);
            bool y_29056 = slt64(i_29054, N_24013);
            bool bounds_check_29057 = x_29055 && y_29056;
            bool index_certs_29058;
            
            if (!bounds_check_29057) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 23) ==
                        -1) {
                        global_failure_args[0] = i_29054;
                        global_failure_args[1] = N_24013;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            float res_29059 = ((__global float *) res_mem_37111)[gtid_28405 *
                                                                 N_24013 +
                                                                 i_29054];
            
            res_29052 = res_29059;
        } else {
            res_29052 = INFINITY;
        }
        ((__local float *) mem_37408)[gtid_28412] = res_29052;
    }
    
  error_3:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37418;
    
    mem_37418 = (__local char *) mem_37418_backing_6;
    
    __local char *mem_37420;
    
    mem_37420 = (__local char *) mem_37420_backing_7;
    
    __local char *mem_37422;
    
    mem_37422 = (__local char *) mem_37422_backing_8;
    
    __local char *mem_37424;
    
    mem_37424 = (__local char *) mem_37424_backing_9;
    
    __local char *mem_37426;
    
    mem_37426 = (__local char *) mem_37426_backing_10;
    
    __local char *double_buffer_mem_37629;
    
    double_buffer_mem_37629 = (__local
                               char *) double_buffer_mem_37629_backing_11;
    ((__local float *) double_buffer_mem_37629)[sext_i32_i64(local_tid_38630)] =
        ((__local float *) mem_37408)[sext_i32_i64(local_tid_38630)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37428;
    
    mem_37428 = (__local char *) mem_37428_backing_12;
    for (int32_t i_29061 = 0; i_29061 < iters_24423; i_29061++) {
        int32_t lifted_2_radix_sort_step_arg_29063 = mul32(2, i_29061);
        int32_t lifted_0_get_bit_arg_29064 = add32(1,
                                                   lifted_2_radix_sort_step_arg_29063);
        bool res_29065 = lifted_0_get_bit_arg_29064 == 31;
        bool res_29066 = lifted_2_radix_sort_step_arg_29063 == 31;
        int64_t gtid_28434 = sext_i32_i64(ltid_pre_38634);
        int32_t phys_tid_28435 = local_tid_38630;
        
        if (slt64(gtid_28434, iota32_arg_24397)) {
            float x_29084 = ((__local
                              float *) double_buffer_mem_37629)[gtid_28434];
            int32_t i32_arg_29085;
            
            i32_arg_29085 = futrts_to_bits32(x_29084);
            
            int32_t unsign_arg_29086 = ashr32(i32_arg_29085,
                                              lifted_0_get_bit_arg_29064);
            int32_t unsign_arg_29087 = 1 & unsign_arg_29086;
            int32_t unsign_arg_29088 = ashr32(i32_arg_29085, 31);
            int32_t unsign_arg_29089 = 1 & unsign_arg_29088;
            bool cond_29090 = unsign_arg_29089 == 1;
            bool x_29091 = !cond_29090;
            bool y_29092 = res_29065 && x_29091;
            bool cond_29093 = cond_29090 || y_29092;
            int32_t res_29094;
            
            if (cond_29093) {
                int32_t res_29095 = 1 ^ unsign_arg_29087;
                
                res_29094 = res_29095;
            } else {
                res_29094 = unsign_arg_29087;
            }
            
            int32_t x_29096 = mul32(2, res_29094);
            int32_t unsign_arg_29097 = ashr32(i32_arg_29085,
                                              lifted_2_radix_sort_step_arg_29063);
            int32_t unsign_arg_29098 = 1 & unsign_arg_29097;
            bool y_29099 = res_29066 && x_29091;
            bool cond_29100 = cond_29090 || y_29099;
            int32_t res_29101;
            
            if (cond_29100) {
                int32_t res_29102 = 1 ^ unsign_arg_29098;
                
                res_29101 = res_29102;
            } else {
                res_29101 = unsign_arg_29098;
            }
            
            int32_t res_29103 = add32(x_29096, res_29101);
            bool cond_29104 = res_29103 == 0;
            int64_t res_29105 = btoi_bool_i64(cond_29104);
            int64_t res_29106;
            int64_t res_29107;
            int64_t res_29108;
            
            if (cond_29104) {
                res_29106 = 0;
                res_29107 = 0;
                res_29108 = 0;
            } else {
                bool cond_29109 = res_29103 == 1;
                int64_t res_29110 = btoi_bool_i64(cond_29109);
                int64_t res_29111;
                int64_t res_29112;
                
                if (cond_29109) {
                    res_29111 = 0;
                    res_29112 = 0;
                } else {
                    bool cond_29113 = res_29103 == 2;
                    int64_t res_29114 = btoi_bool_i64(cond_29113);
                    bool cond_neg_29115 = !cond_29113;
                    int64_t res_29116 = btoi_bool_i64(cond_neg_29115);
                    
                    res_29111 = res_29114;
                    res_29112 = res_29116;
                }
                res_29106 = res_29110;
                res_29107 = res_29111;
                res_29108 = res_29112;
            }
            ((__local int64_t *) mem_37418)[gtid_28434] = res_29105;
            ((__local int64_t *) mem_37420)[gtid_28434] = res_29106;
            ((__local int64_t *) mem_37422)[gtid_28434] = res_29107;
            ((__local int64_t *) mem_37424)[gtid_28434] = res_29108;
            ((__local int32_t *) mem_37426)[gtid_28434] = res_29103;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t dims_flat_38655;
        
        dims_flat_38655 = iota32_arg_24397;
        
        int64_t x_29072;
        int64_t x_29073;
        int64_t x_29074;
        int64_t x_29075;
        int64_t x_29076;
        int64_t x_29077;
        int64_t x_29078;
        int64_t x_29079;
        int64_t x_38660;
        int64_t x_38661;
        int64_t x_38662;
        int64_t x_38663;
        int64_t x_38664;
        int64_t x_38665;
        int64_t x_38666;
        int64_t x_38667;
        bool ltid_in_bounds_38672;
        
        ltid_in_bounds_38672 = slt64(sext_i32_i64(local_tid_38630),
                                     iota32_arg_24397);
        
        int32_t skip_threads_38673;
        
        // read input for in-block scan
        {
            if (ltid_in_bounds_38672) {
                x_29076 = ((volatile __local
                            int64_t *) mem_37418)[sext_i32_i64(local_tid_38630)];
                x_29077 = ((volatile __local
                            int64_t *) mem_37420)[sext_i32_i64(local_tid_38630)];
                x_29078 = ((volatile __local
                            int64_t *) mem_37422)[sext_i32_i64(local_tid_38630)];
                x_29079 = ((volatile __local
                            int64_t *) mem_37424)[sext_i32_i64(local_tid_38630)];
                if ((local_tid_38630 - squot32(local_tid_38630, 32) * 32) ==
                    0) {
                    x_29072 = x_29076;
                    x_29073 = x_29077;
                    x_29074 = x_29078;
                    x_29075 = x_29079;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38673 = 1;
            while (slt32(skip_threads_38673, 32)) {
                if (sle32(skip_threads_38673, local_tid_38630 -
                          squot32(local_tid_38630, 32) * 32) &&
                    ltid_in_bounds_38672) {
                    // read operands
                    {
                        x_29072 = ((volatile __local
                                    int64_t *) mem_37418)[sext_i32_i64(local_tid_38630) -
                                                          sext_i32_i64(skip_threads_38673)];
                        x_29073 = ((volatile __local
                                    int64_t *) mem_37420)[sext_i32_i64(local_tid_38630) -
                                                          sext_i32_i64(skip_threads_38673)];
                        x_29074 = ((volatile __local
                                    int64_t *) mem_37422)[sext_i32_i64(local_tid_38630) -
                                                          sext_i32_i64(skip_threads_38673)];
                        x_29075 = ((volatile __local
                                    int64_t *) mem_37424)[sext_i32_i64(local_tid_38630) -
                                                          sext_i32_i64(skip_threads_38673)];
                    }
                    // perform operation
                    {
                        bool inactive_38674 =
                             slt64(srem64(sext_i32_i64(local_tid_38630),
                                          iota32_arg_24397),
                                   sext_i32_i64(local_tid_38630) -
                                   sext_i32_i64(local_tid_38630 -
                                   skip_threads_38673));
                        
                        if (inactive_38674) {
                            x_29072 = x_29076;
                            x_29073 = x_29077;
                            x_29074 = x_29078;
                            x_29075 = x_29079;
                        }
                        if (!inactive_38674) {
                            int64_t res_29080 = add64(x_29072, x_29076);
                            int64_t res_29081 = add64(x_29073, x_29077);
                            int64_t res_29082 = add64(x_29074, x_29078);
                            int64_t res_29083 = add64(x_29075, x_29079);
                            
                            x_29072 = res_29080;
                            x_29073 = res_29081;
                            x_29074 = res_29082;
                            x_29075 = res_29083;
                        }
                    }
                }
                if (sle32(wave_sizze_38632, skip_threads_38673)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38673, local_tid_38630 -
                          squot32(local_tid_38630, 32) * 32) &&
                    ltid_in_bounds_38672) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37418)[sext_i32_i64(local_tid_38630)] =
                            x_29072;
                        x_29076 = x_29072;
                        ((volatile __local
                          int64_t *) mem_37420)[sext_i32_i64(local_tid_38630)] =
                            x_29073;
                        x_29077 = x_29073;
                        ((volatile __local
                          int64_t *) mem_37422)[sext_i32_i64(local_tid_38630)] =
                            x_29074;
                        x_29078 = x_29074;
                        ((volatile __local
                          int64_t *) mem_37424)[sext_i32_i64(local_tid_38630)] =
                            x_29075;
                        x_29079 = x_29075;
                    }
                }
                if (sle32(wave_sizze_38632, skip_threads_38673)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38673 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_38630 - squot32(local_tid_38630, 32) * 32) == 31 &&
                ltid_in_bounds_38672) {
                ((volatile __local
                  int64_t *) mem_37418)[sext_i32_i64(squot32(local_tid_38630,
                                                             32))] = x_29072;
                ((volatile __local
                  int64_t *) mem_37420)[sext_i32_i64(squot32(local_tid_38630,
                                                             32))] = x_29073;
                ((volatile __local
                  int64_t *) mem_37422)[sext_i32_i64(squot32(local_tid_38630,
                                                             32))] = x_29074;
                ((volatile __local
                  int64_t *) mem_37424)[sext_i32_i64(squot32(local_tid_38630,
                                                             32))] = x_29075;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_38675;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_38630, 32) == 0 && ltid_in_bounds_38672) {
                    x_38664 = ((volatile __local
                                int64_t *) mem_37418)[sext_i32_i64(local_tid_38630)];
                    x_38665 = ((volatile __local
                                int64_t *) mem_37420)[sext_i32_i64(local_tid_38630)];
                    x_38666 = ((volatile __local
                                int64_t *) mem_37422)[sext_i32_i64(local_tid_38630)];
                    x_38667 = ((volatile __local
                                int64_t *) mem_37424)[sext_i32_i64(local_tid_38630)];
                    if ((local_tid_38630 - squot32(local_tid_38630, 32) * 32) ==
                        0) {
                        x_38660 = x_38664;
                        x_38661 = x_38665;
                        x_38662 = x_38666;
                        x_38663 = x_38667;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_38675 = 1;
                while (slt32(skip_threads_38675, 32)) {
                    if (sle32(skip_threads_38675, local_tid_38630 -
                              squot32(local_tid_38630, 32) * 32) &&
                        (squot32(local_tid_38630, 32) == 0 &&
                         ltid_in_bounds_38672)) {
                        // read operands
                        {
                            x_38660 = ((volatile __local
                                        int64_t *) mem_37418)[sext_i32_i64(local_tid_38630) -
                                                              sext_i32_i64(skip_threads_38675)];
                            x_38661 = ((volatile __local
                                        int64_t *) mem_37420)[sext_i32_i64(local_tid_38630) -
                                                              sext_i32_i64(skip_threads_38675)];
                            x_38662 = ((volatile __local
                                        int64_t *) mem_37422)[sext_i32_i64(local_tid_38630) -
                                                              sext_i32_i64(skip_threads_38675)];
                            x_38663 = ((volatile __local
                                        int64_t *) mem_37424)[sext_i32_i64(local_tid_38630) -
                                                              sext_i32_i64(skip_threads_38675)];
                        }
                        // perform operation
                        {
                            bool inactive_38676 =
                                 slt64(srem64(sext_i32_i64(local_tid_38630 *
                                              32 + 32 - 1), iota32_arg_24397),
                                       sext_i32_i64(local_tid_38630 * 32 + 32 -
                                       1) - sext_i32_i64((local_tid_38630 -
                                                          skip_threads_38675) *
                                       32 + 32 - 1));
                            
                            if (inactive_38676) {
                                x_38660 = x_38664;
                                x_38661 = x_38665;
                                x_38662 = x_38666;
                                x_38663 = x_38667;
                            }
                            if (!inactive_38676) {
                                int64_t res_38668 = add64(x_38660, x_38664);
                                int64_t res_38669 = add64(x_38661, x_38665);
                                int64_t res_38670 = add64(x_38662, x_38666);
                                int64_t res_38671 = add64(x_38663, x_38667);
                                
                                x_38660 = res_38668;
                                x_38661 = res_38669;
                                x_38662 = res_38670;
                                x_38663 = res_38671;
                            }
                        }
                    }
                    if (sle32(wave_sizze_38632, skip_threads_38675)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_38675, local_tid_38630 -
                              squot32(local_tid_38630, 32) * 32) &&
                        (squot32(local_tid_38630, 32) == 0 &&
                         ltid_in_bounds_38672)) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) mem_37418)[sext_i32_i64(local_tid_38630)] =
                                x_38660;
                            x_38664 = x_38660;
                            ((volatile __local
                              int64_t *) mem_37420)[sext_i32_i64(local_tid_38630)] =
                                x_38661;
                            x_38665 = x_38661;
                            ((volatile __local
                              int64_t *) mem_37422)[sext_i32_i64(local_tid_38630)] =
                                x_38662;
                            x_38666 = x_38662;
                            ((volatile __local
                              int64_t *) mem_37424)[sext_i32_i64(local_tid_38630)] =
                                x_38663;
                            x_38667 = x_38663;
                        }
                    }
                    if (sle32(wave_sizze_38632, skip_threads_38675)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_38675 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // carry-in for every block except the first
        {
            if (!(squot32(local_tid_38630, 32) == 0 || !ltid_in_bounds_38672)) {
                // read operands
                {
                    x_29076 = x_29072;
                    x_29077 = x_29073;
                    x_29078 = x_29074;
                    x_29079 = x_29075;
                    x_29072 = ((__local
                                int64_t *) mem_37418)[sext_i32_i64(squot32(local_tid_38630,
                                                                           32)) -
                                                      1];
                    x_29073 = ((__local
                                int64_t *) mem_37420)[sext_i32_i64(squot32(local_tid_38630,
                                                                           32)) -
                                                      1];
                    x_29074 = ((__local
                                int64_t *) mem_37422)[sext_i32_i64(squot32(local_tid_38630,
                                                                           32)) -
                                                      1];
                    x_29075 = ((__local
                                int64_t *) mem_37424)[sext_i32_i64(squot32(local_tid_38630,
                                                                           32)) -
                                                      1];
                }
                // perform operation
                {
                    bool inactive_38677 =
                         slt64(srem64(sext_i32_i64(local_tid_38630),
                                      iota32_arg_24397),
                               sext_i32_i64(local_tid_38630) -
                               sext_i32_i64(squot32(local_tid_38630, 32) * 32 -
                               1));
                    
                    if (inactive_38677) {
                        x_29072 = x_29076;
                        x_29073 = x_29077;
                        x_29074 = x_29078;
                        x_29075 = x_29079;
                    }
                    if (!inactive_38677) {
                        int64_t res_29080 = add64(x_29072, x_29076);
                        int64_t res_29081 = add64(x_29073, x_29077);
                        int64_t res_29082 = add64(x_29074, x_29078);
                        int64_t res_29083 = add64(x_29075, x_29079);
                        
                        x_29072 = res_29080;
                        x_29073 = res_29081;
                        x_29074 = res_29082;
                        x_29075 = res_29083;
                    }
                }
                // write final result
                {
                    ((__local
                      int64_t *) mem_37418)[sext_i32_i64(local_tid_38630)] =
                        x_29072;
                    ((__local
                      int64_t *) mem_37420)[sext_i32_i64(local_tid_38630)] =
                        x_29073;
                    ((__local
                      int64_t *) mem_37422)[sext_i32_i64(local_tid_38630)] =
                        x_29074;
                    ((__local
                      int64_t *) mem_37424)[sext_i32_i64(local_tid_38630)] =
                        x_29075;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_38630, 32) == 0) {
                ((__local int64_t *) mem_37418)[sext_i32_i64(local_tid_38630)] =
                    x_29076;
                ((__local int64_t *) mem_37420)[sext_i32_i64(local_tid_38630)] =
                    x_29077;
                ((__local int64_t *) mem_37422)[sext_i32_i64(local_tid_38630)] =
                    x_29078;
                ((__local int64_t *) mem_37424)[sext_i32_i64(local_tid_38630)] =
                    x_29079;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t res_29117 = ((__local int64_t *) mem_37418)[i_24425];
        int64_t res_29118 = ((__local int64_t *) mem_37420)[i_24425];
        int64_t res_29119 = ((__local int64_t *) mem_37422)[i_24425];
        
        ((__local float *) mem_37428)[sext_i32_i64(local_tid_38630)] = ((__local
                                                                         float *) double_buffer_mem_37629)[sext_i32_i64(local_tid_38630)];
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_28436 = sext_i32_i64(ltid_pre_38634);
        int32_t phys_tid_28437 = local_tid_38630;
        
        if (slt64(write_i_28436, iota32_arg_24397)) {
            int32_t x_29122 = ((__local int32_t *) mem_37426)[write_i_28436];
            float write_value_29127 = ((__local
                                        float *) double_buffer_mem_37629)[write_i_28436];
            bool match_lit_29128 = 0 == x_29122;
            int64_t res_29129;
            
            if (match_lit_29128) {
                int64_t x_29123 = ((__local
                                    int64_t *) mem_37418)[write_i_28436];
                int64_t res_29130 = sub64(x_29123, 1);
                
                res_29129 = res_29130;
            } else {
                int64_t x_29124 = ((__local
                                    int64_t *) mem_37420)[write_i_28436];
                int64_t x_29125 = ((__local
                                    int64_t *) mem_37422)[write_i_28436];
                int64_t x_29126 = ((__local
                                    int64_t *) mem_37424)[write_i_28436];
                bool match_lit_29131 = 1 == x_29122;
                int64_t x_29132;
                
                if (match_lit_29131) {
                    int64_t x_29133 = add64(res_29117, x_29124);
                    int64_t res_29134 = sub64(x_29133, 1);
                    
                    x_29132 = res_29134;
                } else {
                    bool match_lit_29135 = 2 == x_29122;
                    int64_t x_29136;
                    
                    if (match_lit_29135) {
                        int64_t x_29137 = add64(res_29117, res_29118);
                        int64_t x_29138 = add64(x_29125, x_29137);
                        int64_t res_29139 = sub64(x_29138, 1);
                        
                        x_29136 = res_29139;
                    } else {
                        int64_t x_29140 = add64(res_29117, res_29118);
                        int64_t x_29141 = add64(res_29119, x_29140);
                        int64_t x_29142 = add64(x_29126, x_29141);
                        int64_t res_29143 = sub64(x_29142, 1);
                        
                        x_29136 = res_29143;
                    }
                    x_29132 = x_29136;
                }
                res_29129 = x_29132;
            }
            if (sle64(0, res_29129) && slt64(res_29129, iota32_arg_24397)) {
                ((__local float *) mem_37428)[res_29129] = write_value_29127;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ((__local
          float *) double_buffer_mem_37629)[sext_i32_i64(local_tid_38630)] =
            ((__local float *) mem_37428)[sext_i32_i64(local_tid_38630)];
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    int32_t i_29144 = sdiv32(y_28959, 2);
    int32_t j_29145 = sub32(i_29144, 1);
    int32_t x_29146 = smod32(y_28959, 2);
    bool cond_29147 = x_29146 == 0;
    float res_29148;
    
    if (cond_29147) {
        int64_t j_29149 = sext_i32_i64(j_29145);
        bool x_29150 = sle64(0, j_29149);
        bool y_29151 = slt64(j_29149, iota32_arg_24397);
        bool bounds_check_29152 = x_29150 && y_29151;
        bool index_certs_29153;
        
        if (!bounds_check_29152) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 24) == -1) {
                    global_failure_args[0] = j_29149;
                    global_failure_args[1] = iota32_arg_24397;
                    ;
                }
                local_failure = true;
                goto error_6;
            }
        }
        
        float x_29154 = ((__local float *) double_buffer_mem_37629)[j_29149];
        int64_t i_29155 = sext_i32_i64(i_29144);
        bool x_29156 = sle64(0, i_29155);
        bool y_29157 = slt64(i_29155, iota32_arg_24397);
        bool bounds_check_29158 = x_29156 && y_29157;
        bool index_certs_29159;
        
        if (!bounds_check_29158) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 25) == -1) {
                    global_failure_args[0] = i_29155;
                    global_failure_args[1] = iota32_arg_24397;
                    ;
                }
                local_failure = true;
                goto error_6;
            }
        }
        
        float y_29160 = ((__local float *) double_buffer_mem_37629)[i_29155];
        float x_29161 = x_29154 + y_29160;
        float res_29162 = x_29161 / 2.0F;
        
        res_29148 = res_29162;
    } else {
        int64_t i_29163 = sext_i32_i64(i_29144);
        bool x_29164 = sle64(0, i_29163);
        bool y_29165 = slt64(i_29163, iota32_arg_24397);
        bool bounds_check_29166 = x_29164 && y_29165;
        bool index_certs_29167;
        
        if (!bounds_check_29166) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 26) == -1) {
                    global_failure_args[0] = i_29163;
                    global_failure_args[1] = iota32_arg_24397;
                    ;
                }
                local_failure = true;
                goto error_6;
            }
        }
        
        float res_29168 = ((__local float *) double_buffer_mem_37629)[i_29163];
        
        res_29148 = res_29168;
    }
    
    bool cond_29169 = !x_29026;
    int32_t fst_breakzq_29170;
    
    if (cond_29169) {
        fst_breakzq_29170 = -1;
    } else {
        bool cond_29171 = slt32(res_29030, y_28959);
        int32_t res_29172;
        
        if (cond_29171) {
            int32_t i_29173 = add32(x_28953, res_29030);
            int64_t i_29174 = sext_i32_i64(i_29173);
            int32_t x_29175 = ((__global int32_t *) res_mem_37112)[gtid_28405 *
                                                                   N_24013 +
                                                                   i_29174];
            int32_t res_29176 = sub32(x_29175, n_24018);
            
            res_29172 = res_29176;
        } else {
            res_29172 = -1;
        }
        fst_breakzq_29170 = res_29172;
    }
    
    bool cond_29177 = sle32(x_28953, 5);
    bool res_29178 = sle32(y_28959, 5);
    bool x_29179 = !cond_29177;
    bool y_29180 = res_29178 && x_29179;
    bool cond_29181 = cond_29177 || y_29180;
    int32_t fst_breakzq_29182;
    
    if (cond_29181) {
        fst_breakzq_29182 = -2;
    } else {
        fst_breakzq_29182 = fst_breakzq_29170;
    }
    
    __local char *mem_37438;
    
    mem_37438 = (__local char *) mem_37438_backing_13;
    ((__local float *) mem_37438)[sext_i32_i64(local_tid_38630)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_28438 = sext_i32_i64(ltid_pre_38634);
    int32_t phys_tid_28439 = local_tid_38630;
    
    if (slt64(write_i_28438, iota32_arg_24397)) {
        int32_t index_primexp_35377 = sext_i64_i32(write_i_28438);
        float write_value_29186 = ((__local float *) mem_37405)[write_i_28438];
        bool cond_29187 = slt32(index_primexp_35377, y_28959);
        int32_t res_29188;
        
        if (cond_29187) {
            int32_t i_29189 = add32(x_28953, index_primexp_35377);
            int64_t i_29190 = sext_i32_i64(i_29189);
            int32_t x_29191 = ((__global int32_t *) res_mem_37112)[gtid_28405 *
                                                                   N_24013 +
                                                                   i_29190];
            int32_t res_29192 = sub32(x_29191, n_24018);
            
            res_29188 = res_29192;
        } else {
            res_29188 = -1;
        }
        
        int64_t res_29193 = sext_i32_i64(res_29188);
        
        if (sle64(0, res_29193) && slt64(res_29193, iota32_arg_24397)) {
            ((__local float *) mem_37438)[res_29193] = write_value_29186;
        }
    }
    
  error_6:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37442)[gtid_28405 * iota32_arg_24397 +
                                   sext_i32_i64(local_tid_38630)] = ((__local
                                                                      float *) mem_37438)[sext_i32_i64(local_tid_38630)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37445)[gtid_28405 * iota32_arg_24397 +
                                   sext_i32_i64(local_tid_38630)] = ((__local
                                                                      float *) mem_37405)[sext_i32_i64(local_tid_38630)];
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_38630 == 0) {
        ((__global int32_t *) mem_37447)[gtid_28405] = fst_breakzq_29182;
    }
    if (local_tid_38630 == 0) {
        ((__global float *) mem_37449)[gtid_28405] = res_29038;
    }
    if (local_tid_38630 == 0) {
        ((__global float *) mem_37451)[gtid_28405] = res_29148;
    }
    
  error_7:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_29312(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37509_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37507_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_37505_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37503_backing_aligned_3,
                                                    __local volatile
                                                    int64_t *mem_37501_backing_aligned_4,
                                                    __local volatile
                                                    int64_t *mem_37499_backing_aligned_5,
                                                    int64_t m_24014,
                                                    int64_t iota32_arg_24397,
                                                    int64_t i_24425,
                                                    int32_t lifted_2_radix_sort_step_arg_30216,
                                                    int32_t lifted_0_get_bit_arg_30217,
                                                    unsigned char res_30218,
                                                    unsigned char res_30219,
                                                    __global
                                                    unsigned char *mem_param_37490,
                                                    __global
                                                    unsigned char *mem_37495,
                                                    __global
                                                    unsigned char *mem_37513)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37509_backing_5 = (__local volatile
                                                           char *) mem_37509_backing_aligned_0;
    __local volatile char *restrict mem_37507_backing_4 = (__local volatile
                                                           char *) mem_37507_backing_aligned_1;
    __local volatile char *restrict mem_37505_backing_3 = (__local volatile
                                                           char *) mem_37505_backing_aligned_2;
    __local volatile char *restrict mem_37503_backing_2 = (__local volatile
                                                           char *) mem_37503_backing_aligned_3;
    __local volatile char *restrict mem_37501_backing_1 = (__local volatile
                                                           char *) mem_37501_backing_aligned_4;
    __local volatile char *restrict mem_37499_backing_0 = (__local volatile
                                                           char *) mem_37499_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38857;
    int32_t local_tid_38858;
    int64_t group_sizze_38861;
    int32_t wave_sizze_38860;
    int32_t group_tid_38859;
    
    global_tid_38857 = get_global_id(0);
    local_tid_38858 = get_local_id(0);
    group_sizze_38861 = get_local_size(0);
    wave_sizze_38860 = LOCKSTEP_WIDTH;
    group_tid_38859 = get_group_id(0);
    
    int32_t phys_tid_29312;
    
    phys_tid_29312 = group_tid_38859;
    
    int32_t ltid_pre_38862;
    
    ltid_pre_38862 = local_tid_38858;
    
    int64_t gtid_29305;
    
    gtid_29305 = sext_i32_i64(group_tid_38859);
    
    __local char *mem_37499;
    
    mem_37499 = (__local char *) mem_37499_backing_0;
    
    __local char *mem_37501;
    
    mem_37501 = (__local char *) mem_37501_backing_1;
    
    __local char *mem_37503;
    
    mem_37503 = (__local char *) mem_37503_backing_2;
    
    __local char *mem_37505;
    
    mem_37505 = (__local char *) mem_37505_backing_3;
    
    __local char *mem_37507;
    
    mem_37507 = (__local char *) mem_37507_backing_4;
    
    int64_t gtid_29308 = sext_i32_i64(ltid_pre_38862);
    int32_t phys_tid_29309 = local_tid_38858;
    
    if (slt64(gtid_29308, iota32_arg_24397)) {
        float x_30249 = ((__global float *) mem_param_37490)[gtid_29305 *
                                                             iota32_arg_24397 +
                                                             gtid_29308];
        int32_t i32_arg_30250;
        
        i32_arg_30250 = futrts_to_bits32(x_30249);
        
        int32_t unsign_arg_30251 = ashr32(i32_arg_30250,
                                          lifted_0_get_bit_arg_30217);
        int32_t unsign_arg_30252 = 1 & unsign_arg_30251;
        int32_t unsign_arg_30253 = ashr32(i32_arg_30250, 31);
        int32_t unsign_arg_30254 = 1 & unsign_arg_30253;
        bool cond_30255 = unsign_arg_30254 == 1;
        bool x_30256 = !cond_30255;
        bool y_30257 = res_30218 && x_30256;
        bool cond_30258 = cond_30255 || y_30257;
        int32_t res_30259;
        
        if (cond_30258) {
            int32_t res_30260 = 1 ^ unsign_arg_30252;
            
            res_30259 = res_30260;
        } else {
            res_30259 = unsign_arg_30252;
        }
        
        int32_t x_30261 = mul32(2, res_30259);
        int32_t unsign_arg_30262 = ashr32(i32_arg_30250,
                                          lifted_2_radix_sort_step_arg_30216);
        int32_t unsign_arg_30263 = 1 & unsign_arg_30262;
        bool y_30264 = res_30219 && x_30256;
        bool cond_30265 = cond_30255 || y_30264;
        int32_t res_30266;
        
        if (cond_30265) {
            int32_t res_30267 = 1 ^ unsign_arg_30263;
            
            res_30266 = res_30267;
        } else {
            res_30266 = unsign_arg_30263;
        }
        
        int32_t res_30268 = add32(x_30261, res_30266);
        bool cond_30269 = res_30268 == 0;
        int64_t res_30270 = btoi_bool_i64(cond_30269);
        int64_t res_30271;
        int64_t res_30272;
        int64_t res_30273;
        
        if (cond_30269) {
            res_30271 = 0;
            res_30272 = 0;
            res_30273 = 0;
        } else {
            bool cond_30274 = res_30268 == 1;
            int64_t res_30275 = btoi_bool_i64(cond_30274);
            int64_t res_30276;
            int64_t res_30277;
            
            if (cond_30274) {
                res_30276 = 0;
                res_30277 = 0;
            } else {
                bool cond_30278 = res_30268 == 2;
                int64_t res_30279 = btoi_bool_i64(cond_30278);
                bool cond_neg_30280 = !cond_30278;
                int64_t res_30281 = btoi_bool_i64(cond_neg_30280);
                
                res_30276 = res_30279;
                res_30277 = res_30281;
            }
            res_30271 = res_30275;
            res_30272 = res_30276;
            res_30273 = res_30277;
        }
        ((__local int64_t *) mem_37499)[gtid_29308] = res_30270;
        ((__local int64_t *) mem_37501)[gtid_29308] = res_30271;
        ((__local int64_t *) mem_37503)[gtid_29308] = res_30272;
        ((__local int64_t *) mem_37505)[gtid_29308] = res_30273;
        ((__local int32_t *) mem_37507)[gtid_29308] = res_30268;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_38863;
    
    dims_flat_38863 = iota32_arg_24397;
    
    int64_t x_30237;
    int64_t x_30238;
    int64_t x_30239;
    int64_t x_30240;
    int64_t x_30241;
    int64_t x_30242;
    int64_t x_30243;
    int64_t x_30244;
    int64_t x_38868;
    int64_t x_38869;
    int64_t x_38870;
    int64_t x_38871;
    int64_t x_38872;
    int64_t x_38873;
    int64_t x_38874;
    int64_t x_38875;
    bool ltid_in_bounds_38880;
    
    ltid_in_bounds_38880 = slt64(sext_i32_i64(local_tid_38858),
                                 iota32_arg_24397);
    
    int32_t skip_threads_38881;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_38880) {
            x_30241 = ((volatile __local
                        int64_t *) mem_37499)[sext_i32_i64(local_tid_38858)];
            x_30242 = ((volatile __local
                        int64_t *) mem_37501)[sext_i32_i64(local_tid_38858)];
            x_30243 = ((volatile __local
                        int64_t *) mem_37503)[sext_i32_i64(local_tid_38858)];
            x_30244 = ((volatile __local
                        int64_t *) mem_37505)[sext_i32_i64(local_tid_38858)];
            if ((local_tid_38858 - squot32(local_tid_38858, 32) * 32) == 0) {
                x_30237 = x_30241;
                x_30238 = x_30242;
                x_30239 = x_30243;
                x_30240 = x_30244;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_38881 = 1;
        while (slt32(skip_threads_38881, 32)) {
            if (sle32(skip_threads_38881, local_tid_38858 -
                      squot32(local_tid_38858, 32) * 32) &&
                ltid_in_bounds_38880) {
                // read operands
                {
                    x_30237 = ((volatile __local
                                int64_t *) mem_37499)[sext_i32_i64(local_tid_38858) -
                                                      sext_i32_i64(skip_threads_38881)];
                    x_30238 = ((volatile __local
                                int64_t *) mem_37501)[sext_i32_i64(local_tid_38858) -
                                                      sext_i32_i64(skip_threads_38881)];
                    x_30239 = ((volatile __local
                                int64_t *) mem_37503)[sext_i32_i64(local_tid_38858) -
                                                      sext_i32_i64(skip_threads_38881)];
                    x_30240 = ((volatile __local
                                int64_t *) mem_37505)[sext_i32_i64(local_tid_38858) -
                                                      sext_i32_i64(skip_threads_38881)];
                }
                // perform operation
                {
                    bool inactive_38882 =
                         slt64(srem64(sext_i32_i64(local_tid_38858),
                                      iota32_arg_24397),
                               sext_i32_i64(local_tid_38858) -
                               sext_i32_i64(local_tid_38858 -
                               skip_threads_38881));
                    
                    if (inactive_38882) {
                        x_30237 = x_30241;
                        x_30238 = x_30242;
                        x_30239 = x_30243;
                        x_30240 = x_30244;
                    }
                    if (!inactive_38882) {
                        int64_t res_30245 = add64(x_30237, x_30241);
                        int64_t res_30246 = add64(x_30238, x_30242);
                        int64_t res_30247 = add64(x_30239, x_30243);
                        int64_t res_30248 = add64(x_30240, x_30244);
                        
                        x_30237 = res_30245;
                        x_30238 = res_30246;
                        x_30239 = res_30247;
                        x_30240 = res_30248;
                    }
                }
            }
            if (sle32(wave_sizze_38860, skip_threads_38881)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_38881, local_tid_38858 -
                      squot32(local_tid_38858, 32) * 32) &&
                ltid_in_bounds_38880) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_37499)[sext_i32_i64(local_tid_38858)] =
                        x_30237;
                    x_30241 = x_30237;
                    ((volatile __local
                      int64_t *) mem_37501)[sext_i32_i64(local_tid_38858)] =
                        x_30238;
                    x_30242 = x_30238;
                    ((volatile __local
                      int64_t *) mem_37503)[sext_i32_i64(local_tid_38858)] =
                        x_30239;
                    x_30243 = x_30239;
                    ((volatile __local
                      int64_t *) mem_37505)[sext_i32_i64(local_tid_38858)] =
                        x_30240;
                    x_30244 = x_30240;
                }
            }
            if (sle32(wave_sizze_38860, skip_threads_38881)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_38881 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_38858 - squot32(local_tid_38858, 32) * 32) == 31 &&
            ltid_in_bounds_38880) {
            ((volatile __local
              int64_t *) mem_37499)[sext_i32_i64(squot32(local_tid_38858,
                                                         32))] = x_30237;
            ((volatile __local
              int64_t *) mem_37501)[sext_i32_i64(squot32(local_tid_38858,
                                                         32))] = x_30238;
            ((volatile __local
              int64_t *) mem_37503)[sext_i32_i64(squot32(local_tid_38858,
                                                         32))] = x_30239;
            ((volatile __local
              int64_t *) mem_37505)[sext_i32_i64(squot32(local_tid_38858,
                                                         32))] = x_30240;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_38883;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_38858, 32) == 0 && ltid_in_bounds_38880) {
                x_38872 = ((volatile __local
                            int64_t *) mem_37499)[sext_i32_i64(local_tid_38858)];
                x_38873 = ((volatile __local
                            int64_t *) mem_37501)[sext_i32_i64(local_tid_38858)];
                x_38874 = ((volatile __local
                            int64_t *) mem_37503)[sext_i32_i64(local_tid_38858)];
                x_38875 = ((volatile __local
                            int64_t *) mem_37505)[sext_i32_i64(local_tid_38858)];
                if ((local_tid_38858 - squot32(local_tid_38858, 32) * 32) ==
                    0) {
                    x_38868 = x_38872;
                    x_38869 = x_38873;
                    x_38870 = x_38874;
                    x_38871 = x_38875;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_38883 = 1;
            while (slt32(skip_threads_38883, 32)) {
                if (sle32(skip_threads_38883, local_tid_38858 -
                          squot32(local_tid_38858, 32) * 32) &&
                    (squot32(local_tid_38858, 32) == 0 &&
                     ltid_in_bounds_38880)) {
                    // read operands
                    {
                        x_38868 = ((volatile __local
                                    int64_t *) mem_37499)[sext_i32_i64(local_tid_38858) -
                                                          sext_i32_i64(skip_threads_38883)];
                        x_38869 = ((volatile __local
                                    int64_t *) mem_37501)[sext_i32_i64(local_tid_38858) -
                                                          sext_i32_i64(skip_threads_38883)];
                        x_38870 = ((volatile __local
                                    int64_t *) mem_37503)[sext_i32_i64(local_tid_38858) -
                                                          sext_i32_i64(skip_threads_38883)];
                        x_38871 = ((volatile __local
                                    int64_t *) mem_37505)[sext_i32_i64(local_tid_38858) -
                                                          sext_i32_i64(skip_threads_38883)];
                    }
                    // perform operation
                    {
                        bool inactive_38884 =
                             slt64(srem64(sext_i32_i64(local_tid_38858 * 32 +
                                          32 - 1), iota32_arg_24397),
                                   sext_i32_i64(local_tid_38858 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_38858 -
                                                 skip_threads_38883) * 32 + 32 -
                                   1));
                        
                        if (inactive_38884) {
                            x_38868 = x_38872;
                            x_38869 = x_38873;
                            x_38870 = x_38874;
                            x_38871 = x_38875;
                        }
                        if (!inactive_38884) {
                            int64_t res_38876 = add64(x_38868, x_38872);
                            int64_t res_38877 = add64(x_38869, x_38873);
                            int64_t res_38878 = add64(x_38870, x_38874);
                            int64_t res_38879 = add64(x_38871, x_38875);
                            
                            x_38868 = res_38876;
                            x_38869 = res_38877;
                            x_38870 = res_38878;
                            x_38871 = res_38879;
                        }
                    }
                }
                if (sle32(wave_sizze_38860, skip_threads_38883)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_38883, local_tid_38858 -
                          squot32(local_tid_38858, 32) * 32) &&
                    (squot32(local_tid_38858, 32) == 0 &&
                     ltid_in_bounds_38880)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_37499)[sext_i32_i64(local_tid_38858)] =
                            x_38868;
                        x_38872 = x_38868;
                        ((volatile __local
                          int64_t *) mem_37501)[sext_i32_i64(local_tid_38858)] =
                            x_38869;
                        x_38873 = x_38869;
                        ((volatile __local
                          int64_t *) mem_37503)[sext_i32_i64(local_tid_38858)] =
                            x_38870;
                        x_38874 = x_38870;
                        ((volatile __local
                          int64_t *) mem_37505)[sext_i32_i64(local_tid_38858)] =
                            x_38871;
                        x_38875 = x_38871;
                    }
                }
                if (sle32(wave_sizze_38860, skip_threads_38883)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_38883 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_38858, 32) == 0 || !ltid_in_bounds_38880)) {
            // read operands
            {
                x_30241 = x_30237;
                x_30242 = x_30238;
                x_30243 = x_30239;
                x_30244 = x_30240;
                x_30237 = ((__local
                            int64_t *) mem_37499)[sext_i32_i64(squot32(local_tid_38858,
                                                                       32)) -
                                                  1];
                x_30238 = ((__local
                            int64_t *) mem_37501)[sext_i32_i64(squot32(local_tid_38858,
                                                                       32)) -
                                                  1];
                x_30239 = ((__local
                            int64_t *) mem_37503)[sext_i32_i64(squot32(local_tid_38858,
                                                                       32)) -
                                                  1];
                x_30240 = ((__local
                            int64_t *) mem_37505)[sext_i32_i64(squot32(local_tid_38858,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_38885 =
                     slt64(srem64(sext_i32_i64(local_tid_38858),
                                  iota32_arg_24397),
                           sext_i32_i64(local_tid_38858) -
                           sext_i32_i64(squot32(local_tid_38858, 32) * 32 - 1));
                
                if (inactive_38885) {
                    x_30237 = x_30241;
                    x_30238 = x_30242;
                    x_30239 = x_30243;
                    x_30240 = x_30244;
                }
                if (!inactive_38885) {
                    int64_t res_30245 = add64(x_30237, x_30241);
                    int64_t res_30246 = add64(x_30238, x_30242);
                    int64_t res_30247 = add64(x_30239, x_30243);
                    int64_t res_30248 = add64(x_30240, x_30244);
                    
                    x_30237 = res_30245;
                    x_30238 = res_30246;
                    x_30239 = res_30247;
                    x_30240 = res_30248;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_37499)[sext_i32_i64(local_tid_38858)] =
                    x_30237;
                ((__local int64_t *) mem_37501)[sext_i32_i64(local_tid_38858)] =
                    x_30238;
                ((__local int64_t *) mem_37503)[sext_i32_i64(local_tid_38858)] =
                    x_30239;
                ((__local int64_t *) mem_37505)[sext_i32_i64(local_tid_38858)] =
                    x_30240;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_38858, 32) == 0) {
            ((__local int64_t *) mem_37499)[sext_i32_i64(local_tid_38858)] =
                x_30241;
            ((__local int64_t *) mem_37501)[sext_i32_i64(local_tid_38858)] =
                x_30242;
            ((__local int64_t *) mem_37503)[sext_i32_i64(local_tid_38858)] =
                x_30243;
            ((__local int64_t *) mem_37505)[sext_i32_i64(local_tid_38858)] =
                x_30244;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_30282 = ((__local int64_t *) mem_37499)[i_24425];
    int64_t res_30283 = ((__local int64_t *) mem_37501)[i_24425];
    int64_t res_30284 = ((__local int64_t *) mem_37503)[i_24425];
    __local char *mem_37509;
    
    mem_37509 = (__local char *) mem_37509_backing_5;
    ((__local float *) mem_37509)[sext_i32_i64(local_tid_38858)] = ((__global
                                                                     float *) mem_37495)[gtid_29305 +
                                                                                         sext_i32_i64(local_tid_38858) *
                                                                                         m_24014];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_29310 = sext_i32_i64(ltid_pre_38862);
    int32_t phys_tid_29311 = local_tid_38858;
    
    if (slt64(write_i_29310, iota32_arg_24397)) {
        int32_t x_30287 = ((__local int32_t *) mem_37507)[write_i_29310];
        float write_value_30292 = ((__global
                                    float *) mem_param_37490)[gtid_29305 *
                                                              iota32_arg_24397 +
                                                              write_i_29310];
        bool match_lit_30293 = 0 == x_30287;
        int64_t res_30294;
        
        if (match_lit_30293) {
            int64_t x_30288 = ((__local int64_t *) mem_37499)[write_i_29310];
            int64_t res_30295 = sub64(x_30288, 1);
            
            res_30294 = res_30295;
        } else {
            int64_t x_30289 = ((__local int64_t *) mem_37501)[write_i_29310];
            int64_t x_30290 = ((__local int64_t *) mem_37503)[write_i_29310];
            int64_t x_30291 = ((__local int64_t *) mem_37505)[write_i_29310];
            bool match_lit_30296 = 1 == x_30287;
            int64_t x_30297;
            
            if (match_lit_30296) {
                int64_t x_30298 = add64(res_30282, x_30289);
                int64_t res_30299 = sub64(x_30298, 1);
                
                x_30297 = res_30299;
            } else {
                bool match_lit_30300 = 2 == x_30287;
                int64_t x_30301;
                
                if (match_lit_30300) {
                    int64_t x_30302 = add64(res_30282, res_30283);
                    int64_t x_30303 = add64(x_30290, x_30302);
                    int64_t res_30304 = sub64(x_30303, 1);
                    
                    x_30301 = res_30304;
                } else {
                    int64_t x_30305 = add64(res_30282, res_30283);
                    int64_t x_30306 = add64(res_30284, x_30305);
                    int64_t x_30307 = add64(x_30291, x_30306);
                    int64_t res_30308 = sub64(x_30307, 1);
                    
                    x_30301 = res_30308;
                }
                x_30297 = x_30301;
            }
            res_30294 = x_30297;
        }
        if (sle64(0, res_30294) && slt64(res_30294, iota32_arg_24397)) {
            ((__local float *) mem_37509)[res_30294] = write_value_30292;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_37513)[gtid_29305 * iota32_arg_24397 +
                                   sext_i32_i64(local_tid_38858)] = ((__local
                                                                      float *) mem_37509)[sext_i32_i64(local_tid_38858)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_35467(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_36911_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_36908_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_36889_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_36886_backing_aligned_3,
                                                    int64_t m_24014,
                                                    int64_t N_24015,
                                                    int64_t res_24027,
                                                    int64_t res_24033,
                                                    int64_t num_groups_y_35465,
                                                    int64_t num_whole_tiles_35483,
                                                    int64_t residual_input_35633,
                                                    unsigned char cond_35634,
                                                    __global
                                                    unsigned char *images_mem_36652,
                                                    __global
                                                    unsigned char *mem_36664,
                                                    __global
                                                    unsigned char *mem_36926)
{
    #define tile_sizze_35462 (mainDetailedzitile_sizze_35461)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_36911_backing_7 = (__local volatile
                                                           char *) mem_36911_backing_aligned_0;
    __local volatile char *restrict mem_36908_backing_6 = (__local volatile
                                                           char *) mem_36908_backing_aligned_1;
    __local volatile char *restrict mem_36889_backing_1 = (__local volatile
                                                           char *) mem_36889_backing_aligned_2;
    __local volatile char *restrict mem_36886_backing_0 = (__local volatile
                                                           char *) mem_36886_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37979;
    int32_t local_tid_37980;
    int64_t group_sizze_37983;
    int32_t wave_sizze_37982;
    int32_t group_tid_37981;
    
    global_tid_37979 = get_global_id(0);
    local_tid_37980 = get_local_id(0);
    group_sizze_37983 = get_local_size(0);
    wave_sizze_37982 = LOCKSTEP_WIDTH;
    group_tid_37981 = get_group_id(0);
    
    int32_t gid_flat_35467;
    
    gid_flat_35467 = group_tid_37981;
    
    int32_t ltid_pre_37984;
    
    ltid_pre_37984 = squot32(local_tid_37980, sext_i64_i32(tile_sizze_35462));
    
    int32_t ltid_pre_37985;
    
    ltid_pre_37985 = local_tid_37980 - squot32(local_tid_37980,
                                               sext_i64_i32(tile_sizze_35462)) *
        sext_i64_i32(tile_sizze_35462);
    
    int64_t gid_x_35459;
    
    gid_x_35459 = squot64(sext_i32_i64(group_tid_37981), num_groups_y_35465);
    
    int64_t gid_y_35460;
    
    gid_y_35460 = sext_i32_i64(group_tid_37981) -
        squot64(sext_i32_i64(group_tid_37981), num_groups_y_35465) *
        num_groups_y_35465;
    
    float mem_36871[1];
    int64_t ltid_x_35484 = sext_i32_i64(ltid_pre_37984);
    int64_t ltid_y_35485 = sext_i32_i64(ltid_pre_37985);
    int32_t ltid_flat_35486 = local_tid_37980;
    
    if (slt64(ltid_x_35484, tile_sizze_35462) && slt64(ltid_y_35485,
                                                       tile_sizze_35462)) {
        mem_36871[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35583 = gid_x_35459 * tile_sizze_35462;
    int64_t binop_x_35585 = gid_y_35460 * tile_sizze_35462;
    __local char *mem_36886;
    
    mem_36886 = (__local char *) mem_36886_backing_0;
    
    __local char *mem_36889;
    
    mem_36889 = (__local char *) mem_36889_backing_1;
    
    float accs_mem_36904[1];
    float mem_param_36879[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_36879[i_2] = mem_36871[i_2];
    for (int64_t tile_id_35495 = 0; tile_id_35495 < num_whole_tiles_35483;
         tile_id_35495++) {
        int64_t binop_x_35579 = tile_sizze_35462 * tile_id_35495;
        int64_t ltid_x_35496 = sext_i32_i64(ltid_pre_37984);
        int64_t ltid_y_35497 = sext_i32_i64(ltid_pre_37985);
        int32_t ltid_flat_35498 = local_tid_37980;
        int64_t i_35580 = ltid_x_35496 + binop_x_35579;
        int64_t j_35582 = ltid_y_35497 + binop_x_35579;
        int64_t gtid_35584 = ltid_x_35496 + binop_x_35583;
        int64_t gtid_35586 = ltid_y_35497 + binop_x_35585;
        bool binop_x_35589 = slt64(i_35580, res_24027);
        bool binop_y_35590 = slt64(gtid_35586, res_24033);
        bool cond_35591 = binop_x_35589 && binop_y_35590;
        float pre_35592;
        
        if (cond_35591) {
            float x_35593 = ((__global float *) mem_36664)[i_35580 * res_24033 +
                                                           gtid_35586];
            
            pre_35592 = x_35593;
        } else {
            pre_35592 = 0.0F;
        }
        
        bool binop_x_35595 = slt64(j_35582, res_24027);
        bool binop_y_35596 = slt64(gtid_35584, m_24014);
        bool cond_35597 = binop_x_35595 && binop_y_35596;
        float pre_35598;
        
        if (cond_35597) {
            float x_35599 = ((__global float *) images_mem_36652)[gtid_35584 *
                                                                  N_24015 +
                                                                  j_35582];
            
            pre_35598 = x_35599;
        } else {
            pre_35598 = 0.0F;
        }
        ((__local float *) mem_36886)[ltid_x_35496 * tile_sizze_35462 +
                                      ltid_y_35497] = pre_35592;
        ((__local float *) mem_36889)[ltid_x_35496 * tile_sizze_35462 +
                                      ltid_y_35497] = pre_35598;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_36893[1];
        int64_t ltid_x_35541 = sext_i32_i64(ltid_pre_37984);
        int64_t ltid_y_35542 = sext_i32_i64(ltid_pre_37985);
        int32_t ltid_flat_35543 = local_tid_37980;
        int64_t gtid_35603 = ltid_x_35541 + binop_x_35583;
        int64_t gtid_35605 = ltid_y_35542 + binop_x_35585;
        float acc_35608 = mem_param_36879[0];
        bool binop_x_35611 = slt64(gtid_35603, m_24014);
        bool binop_y_35612 = slt64(gtid_35605, res_24033);
        bool cond_35613 = binop_x_35611 && binop_y_35612;
        float acc_35614;
        
        if (cond_35613) {
            float x_35615;
            float redout_36539 = acc_35608;
            
            for (int64_t i_36540 = 0; i_36540 < tile_sizze_35462; i_36540++) {
                float x_35620 = ((__local float *) mem_36889)[ltid_x_35541 *
                                                              tile_sizze_35462 +
                                                              i_36540];
                bool res_35621;
                
                res_35621 = futrts_isnan32(x_35620);
                
                float res_35622;
                
                if (res_35621) {
                    res_35622 = 0.0F;
                } else {
                    float x_35619 = ((__local float *) mem_36886)[i_36540 *
                                                                  tile_sizze_35462 +
                                                                  ltid_y_35542];
                    float res_35623 = x_35619 * x_35620;
                    
                    res_35622 = res_35623;
                }
                
                float res_35618 = res_35622 + redout_36539;
                float redout_tmp_37988 = res_35618;
                
                redout_36539 = redout_tmp_37988;
            }
            x_35615 = redout_36539;
            acc_35614 = x_35615;
        } else {
            acc_35614 = acc_35608;
        }
        mem_36893[0] = acc_35614;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_37986[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_37986[i_3] = mem_36893[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_36879[i_4] = mem_param_tmp_37986[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_36904[i_5] = mem_param_36879[i_5];
    
    __local char *mem_36908;
    
    mem_36908 = (__local char *) mem_36908_backing_6;
    
    __local char *mem_36911;
    
    mem_36911 = (__local char *) mem_36911_backing_7;
    
    float mem_36915[1];
    float mem_37580[1];
    
    if (cond_35634) {
        mem_37580[0] = accs_mem_36904[0];
    } else {
        int64_t binop_x_35720 = tile_sizze_35462 * num_whole_tiles_35483;
        int64_t ltid_x_35635 = sext_i32_i64(ltid_pre_37984);
        int64_t ltid_y_35636 = sext_i32_i64(ltid_pre_37985);
        int32_t ltid_flat_35637 = local_tid_37980;
        int64_t i_35721 = ltid_x_35635 + binop_x_35720;
        int64_t j_35723 = ltid_y_35636 + binop_x_35720;
        int64_t gtid_35725 = binop_x_35583 + ltid_x_35635;
        int64_t gtid_35727 = binop_x_35585 + ltid_y_35636;
        bool binop_x_35730 = slt64(i_35721, res_24027);
        bool binop_y_35731 = slt64(gtid_35727, res_24033);
        bool cond_35732 = binop_x_35730 && binop_y_35731;
        float pre_35733;
        
        if (cond_35732) {
            float x_35734 = ((__global float *) mem_36664)[i_35721 * res_24033 +
                                                           gtid_35727];
            
            pre_35733 = x_35734;
        } else {
            pre_35733 = 0.0F;
        }
        
        bool binop_x_35736 = slt64(j_35723, res_24027);
        bool binop_y_35737 = slt64(gtid_35725, m_24014);
        bool cond_35738 = binop_x_35736 && binop_y_35737;
        float pre_35739;
        
        if (cond_35738) {
            float x_35740 = ((__global float *) images_mem_36652)[gtid_35725 *
                                                                  N_24015 +
                                                                  j_35723];
            
            pre_35739 = x_35740;
        } else {
            pre_35739 = 0.0F;
        }
        ((__local float *) mem_36908)[ltid_x_35635 * tile_sizze_35462 +
                                      ltid_y_35636] = pre_35733;
        ((__local float *) mem_36911)[ltid_x_35635 * tile_sizze_35462 +
                                      ltid_y_35636] = pre_35739;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_35682 = sext_i32_i64(ltid_pre_37984);
        int64_t ltid_y_35683 = sext_i32_i64(ltid_pre_37985);
        int32_t ltid_flat_35684 = local_tid_37980;
        int64_t gtid_35746 = binop_x_35583 + ltid_x_35682;
        int64_t gtid_35748 = binop_x_35585 + ltid_y_35683;
        float acc_35751 = accs_mem_36904[0];
        bool binop_x_35754 = slt64(gtid_35746, m_24014);
        bool binop_y_35755 = slt64(gtid_35748, res_24033);
        bool cond_35756 = binop_x_35754 && binop_y_35755;
        float acc_35757;
        
        if (cond_35756) {
            float x_35758;
            float redout_36541 = acc_35751;
            
            for (int64_t i_36542 = 0; i_36542 < residual_input_35633;
                 i_36542++) {
                float x_35763 = ((__local float *) mem_36911)[ltid_x_35682 *
                                                              tile_sizze_35462 +
                                                              i_36542];
                bool res_35764;
                
                res_35764 = futrts_isnan32(x_35763);
                
                float res_35765;
                
                if (res_35764) {
                    res_35765 = 0.0F;
                } else {
                    float x_35762 = ((__local float *) mem_36908)[i_36542 *
                                                                  tile_sizze_35462 +
                                                                  ltid_y_35683];
                    float res_35766 = x_35762 * x_35763;
                    
                    res_35765 = res_35766;
                }
                
                float res_35761 = res_35765 + redout_36541;
                float redout_tmp_37989 = res_35761;
                
                redout_36541 = redout_tmp_37989;
            }
            x_35758 = redout_36541;
            acc_35757 = x_35758;
        } else {
            acc_35757 = acc_35751;
        }
        mem_36915[0] = acc_35757;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37580[0] = mem_36915[0];
    }
    
    int64_t thread_out_index_37990 = gid_x_35459 * tile_sizze_35462 +
            sext_i32_i64(ltid_pre_37984);
    int64_t thread_out_index_37991 = gid_y_35460 * tile_sizze_35462 +
            sext_i32_i64(ltid_pre_37985);
    
    if (slt64(thread_out_index_37990, m_24014) && slt64(thread_out_index_37991,
                                                        res_24033)) {
        ((__global float *) mem_36926)[thread_out_index_37990 * res_24033 +
                                       thread_out_index_37991] = mem_37580[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35462
}
__kernel void mainDetailedzisegmap_intragroup_35789(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37048_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37045_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_37026_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_37023_backing_aligned_3,
                                                    int64_t N_24013,
                                                    int64_t m_24014,
                                                    int64_t res_24033,
                                                    int64_t num_groups_y_35787,
                                                    int64_t num_whole_tiles_35805,
                                                    int64_t residual_input_35949,
                                                    unsigned char cond_35950,
                                                    __global
                                                    unsigned char *res_mem_36979,
                                                    __global
                                                    unsigned char *mem_37003,
                                                    __global
                                                    unsigned char *mem_37063)
{
    #define tile_sizze_35784 (mainDetailedzitile_sizze_35783)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37048_backing_7 = (__local volatile
                                                           char *) mem_37048_backing_aligned_0;
    __local volatile char *restrict mem_37045_backing_6 = (__local volatile
                                                           char *) mem_37045_backing_aligned_1;
    __local volatile char *restrict mem_37026_backing_1 = (__local volatile
                                                           char *) mem_37026_backing_aligned_2;
    __local volatile char *restrict mem_37023_backing_0 = (__local volatile
                                                           char *) mem_37023_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38148;
    int32_t local_tid_38149;
    int64_t group_sizze_38152;
    int32_t wave_sizze_38151;
    int32_t group_tid_38150;
    
    global_tid_38148 = get_global_id(0);
    local_tid_38149 = get_local_id(0);
    group_sizze_38152 = get_local_size(0);
    wave_sizze_38151 = LOCKSTEP_WIDTH;
    group_tid_38150 = get_group_id(0);
    
    int32_t gid_flat_35789;
    
    gid_flat_35789 = group_tid_38150;
    
    int32_t ltid_pre_38153;
    
    ltid_pre_38153 = squot32(local_tid_38149, sext_i64_i32(tile_sizze_35784));
    
    int32_t ltid_pre_38154;
    
    ltid_pre_38154 = local_tid_38149 - squot32(local_tid_38149,
                                               sext_i64_i32(tile_sizze_35784)) *
        sext_i64_i32(tile_sizze_35784);
    
    int64_t gid_x_35781;
    
    gid_x_35781 = squot64(sext_i32_i64(group_tid_38150), num_groups_y_35787);
    
    int64_t gid_y_35782;
    
    gid_y_35782 = sext_i32_i64(group_tid_38150) -
        squot64(sext_i32_i64(group_tid_38150), num_groups_y_35787) *
        num_groups_y_35787;
    
    float mem_37008[1];
    int64_t ltid_x_35806 = sext_i32_i64(ltid_pre_38153);
    int64_t ltid_y_35807 = sext_i32_i64(ltid_pre_38154);
    int32_t ltid_flat_35808 = local_tid_38149;
    
    if (slt64(ltid_x_35806, tile_sizze_35784) && slt64(ltid_y_35807,
                                                       tile_sizze_35784)) {
        mem_37008[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_35903 = gid_x_35781 * tile_sizze_35784;
    int64_t binop_x_35905 = gid_y_35782 * tile_sizze_35784;
    __local char *mem_37023;
    
    mem_37023 = (__local char *) mem_37023_backing_0;
    
    __local char *mem_37026;
    
    mem_37026 = (__local char *) mem_37026_backing_1;
    
    float accs_mem_37041[1];
    float mem_param_37016[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_37016[i_2] = mem_37008[i_2];
    for (int64_t tile_id_35817 = 0; tile_id_35817 < num_whole_tiles_35805;
         tile_id_35817++) {
        int64_t binop_x_35899 = tile_sizze_35784 * tile_id_35817;
        int64_t ltid_x_35818 = sext_i32_i64(ltid_pre_38153);
        int64_t ltid_y_35819 = sext_i32_i64(ltid_pre_38154);
        int32_t ltid_flat_35820 = local_tid_38149;
        int64_t i_35900 = ltid_x_35818 + binop_x_35899;
        int64_t j_35902 = ltid_y_35819 + binop_x_35899;
        int64_t gtid_35904 = ltid_x_35818 + binop_x_35903;
        int64_t gtid_35906 = ltid_y_35819 + binop_x_35905;
        bool binop_x_35909 = slt64(j_35902, res_24033);
        bool binop_y_35910 = slt64(gtid_35904, m_24014);
        bool cond_35911 = binop_x_35909 && binop_y_35910;
        float pre_35912;
        
        if (cond_35911) {
            float x_35913 = ((__global float *) res_mem_36979)[gtid_35904 *
                                                               res_24033 +
                                                               j_35902];
            
            pre_35912 = x_35913;
        } else {
            pre_35912 = 0.0F;
        }
        
        bool binop_x_35915 = slt64(i_35900, res_24033);
        bool binop_y_35916 = slt64(gtid_35906, N_24013);
        bool cond_35917 = binop_x_35915 && binop_y_35916;
        float pre_35918;
        
        if (cond_35917) {
            float x_35919 = ((__global float *) mem_37003)[i_35900 * N_24013 +
                                                           gtid_35906];
            
            pre_35918 = x_35919;
        } else {
            pre_35918 = 0.0F;
        }
        ((__local float *) mem_37023)[ltid_x_35818 * tile_sizze_35784 +
                                      ltid_y_35819] = pre_35912;
        ((__local float *) mem_37026)[ltid_x_35818 * tile_sizze_35784 +
                                      ltid_y_35819] = pre_35918;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37030[1];
        int64_t ltid_x_35863 = sext_i32_i64(ltid_pre_38153);
        int64_t ltid_y_35864 = sext_i32_i64(ltid_pre_38154);
        int32_t ltid_flat_35865 = local_tid_38149;
        int64_t gtid_35923 = ltid_x_35863 + binop_x_35903;
        int64_t gtid_35925 = ltid_y_35864 + binop_x_35905;
        float acc_35928 = mem_param_37016[0];
        bool binop_x_35931 = slt64(gtid_35923, m_24014);
        bool binop_y_35932 = slt64(gtid_35925, N_24013);
        bool cond_35933 = binop_x_35931 && binop_y_35932;
        float acc_35934;
        
        if (cond_35933) {
            float x_35935;
            float redout_36557 = acc_35928;
            
            for (int64_t i_36558 = 0; i_36558 < tile_sizze_35784; i_36558++) {
                float x_35939 = ((__local float *) mem_37023)[ltid_x_35863 *
                                                              tile_sizze_35784 +
                                                              i_36558];
                float x_35940 = ((__local float *) mem_37026)[i_36558 *
                                                              tile_sizze_35784 +
                                                              ltid_y_35864];
                float res_35941 = x_35939 * x_35940;
                float res_35938 = res_35941 + redout_36557;
                float redout_tmp_38157 = res_35938;
                
                redout_36557 = redout_tmp_38157;
            }
            x_35935 = redout_36557;
            acc_35934 = x_35935;
        } else {
            acc_35934 = acc_35928;
        }
        mem_37030[0] = acc_35934;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38155[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_38155[i_3] = mem_37030[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_37016[i_4] = mem_param_tmp_38155[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_37041[i_5] = mem_param_37016[i_5];
    
    __local char *mem_37045;
    
    mem_37045 = (__local char *) mem_37045_backing_6;
    
    __local char *mem_37048;
    
    mem_37048 = (__local char *) mem_37048_backing_7;
    
    float mem_37052[1];
    float mem_37592[1];
    
    if (cond_35950) {
        mem_37592[0] = accs_mem_37041[0];
    } else {
        int64_t binop_x_36034 = tile_sizze_35784 * num_whole_tiles_35805;
        int64_t ltid_x_35951 = sext_i32_i64(ltid_pre_38153);
        int64_t ltid_y_35952 = sext_i32_i64(ltid_pre_38154);
        int32_t ltid_flat_35953 = local_tid_38149;
        int64_t i_36035 = ltid_x_35951 + binop_x_36034;
        int64_t j_36037 = ltid_y_35952 + binop_x_36034;
        int64_t gtid_36039 = binop_x_35903 + ltid_x_35951;
        int64_t gtid_36041 = binop_x_35905 + ltid_y_35952;
        bool binop_x_36044 = slt64(j_36037, res_24033);
        bool binop_y_36045 = slt64(gtid_36039, m_24014);
        bool cond_36046 = binop_x_36044 && binop_y_36045;
        float pre_36047;
        
        if (cond_36046) {
            float x_36048 = ((__global float *) res_mem_36979)[gtid_36039 *
                                                               res_24033 +
                                                               j_36037];
            
            pre_36047 = x_36048;
        } else {
            pre_36047 = 0.0F;
        }
        
        bool binop_x_36050 = slt64(i_36035, res_24033);
        bool binop_y_36051 = slt64(gtid_36041, N_24013);
        bool cond_36052 = binop_x_36050 && binop_y_36051;
        float pre_36053;
        
        if (cond_36052) {
            float x_36054 = ((__global float *) mem_37003)[i_36035 * N_24013 +
                                                           gtid_36041];
            
            pre_36053 = x_36054;
        } else {
            pre_36053 = 0.0F;
        }
        ((__local float *) mem_37045)[ltid_x_35951 * tile_sizze_35784 +
                                      ltid_y_35952] = pre_36047;
        ((__local float *) mem_37048)[ltid_x_35951 * tile_sizze_35784 +
                                      ltid_y_35952] = pre_36053;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_35998 = sext_i32_i64(ltid_pre_38153);
        int64_t ltid_y_35999 = sext_i32_i64(ltid_pre_38154);
        int32_t ltid_flat_36000 = local_tid_38149;
        int64_t gtid_36060 = binop_x_35903 + ltid_x_35998;
        int64_t gtid_36062 = binop_x_35905 + ltid_y_35999;
        float acc_36065 = accs_mem_37041[0];
        bool binop_x_36068 = slt64(gtid_36060, m_24014);
        bool binop_y_36069 = slt64(gtid_36062, N_24013);
        bool cond_36070 = binop_x_36068 && binop_y_36069;
        float acc_36071;
        
        if (cond_36070) {
            float x_36072;
            float redout_36559 = acc_36065;
            
            for (int64_t i_36560 = 0; i_36560 < residual_input_35949;
                 i_36560++) {
                float x_36076 = ((__local float *) mem_37045)[ltid_x_35998 *
                                                              tile_sizze_35784 +
                                                              i_36560];
                float x_36077 = ((__local float *) mem_37048)[i_36560 *
                                                              tile_sizze_35784 +
                                                              ltid_y_35999];
                float res_36078 = x_36076 * x_36077;
                float res_36075 = res_36078 + redout_36559;
                float redout_tmp_38158 = res_36075;
                
                redout_36559 = redout_tmp_38158;
            }
            x_36072 = redout_36559;
            acc_36071 = x_36072;
        } else {
            acc_36071 = acc_36065;
        }
        mem_37052[0] = acc_36071;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37592[0] = mem_37052[0];
    }
    
    int64_t thread_out_index_38159 = gid_x_35781 * tile_sizze_35784 +
            sext_i32_i64(ltid_pre_38153);
    int64_t thread_out_index_38160 = gid_y_35782 * tile_sizze_35784 +
            sext_i32_i64(ltid_pre_38154);
    
    if (slt64(thread_out_index_38159, m_24014) && slt64(thread_out_index_38160,
                                                        N_24013)) {
        ((__global float *) mem_37063)[thread_out_index_38159 * N_24013 +
                                       thread_out_index_38160] = mem_37592[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_35784
}
__kernel void mainDetailedzisegmap_intragroup_36094(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37145_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37132_backing_aligned_1,
                                                    int64_t m_24014,
                                                    int32_t n_24018,
                                                    float hfrac_24020,
                                                    int64_t res_24027,
                                                    int32_t k2p2_24029,
                                                    int64_t num_whole_tiles_36102,
                                                    int64_t residual_input_36223,
                                                    unsigned char cond_36224,
                                                    __global
                                                    unsigned char *mem_37115,
                                                    __global
                                                    unsigned char *mem_37118,
                                                    __global
                                                    unsigned char *mem_37162,
                                                    __global
                                                    unsigned char *mem_37164,
                                                    __global
                                                    unsigned char *mem_37166)
{
    #define segmap_group_sizze_28027 (mainDetailedzisegmap_group_sizze_27996)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37145_backing_5 = (__local volatile
                                                           char *) mem_37145_backing_aligned_0;
    __local volatile char *restrict mem_37132_backing_0 = (__local volatile
                                                           char *) mem_37132_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38328;
    int32_t local_tid_38329;
    int64_t group_sizze_38332;
    int32_t wave_sizze_38331;
    int32_t group_tid_38330;
    
    global_tid_38328 = get_global_id(0);
    local_tid_38329 = get_local_id(0);
    group_sizze_38332 = get_local_size(0);
    wave_sizze_38331 = LOCKSTEP_WIDTH;
    group_tid_38330 = get_group_id(0);
    
    int32_t gid_flat_36094;
    
    gid_flat_36094 = group_tid_38330;
    
    int32_t ltid_pre_38333;
    
    ltid_pre_38333 = local_tid_38329;
    
    int64_t gid_36093;
    
    gid_36093 = sext_i32_i64(group_tid_38330);
    
    float mem_37122[1];
    int64_t ltid_36103 = sext_i32_i64(ltid_pre_38333);
    int32_t ltid_flat_36104 = local_tid_38329;
    
    if (slt64(ltid_36103, segmap_group_sizze_28027)) {
        mem_37122[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_36189 = segmap_group_sizze_28027 * gid_36093;
    __local char *mem_37132;
    
    mem_37132 = (__local char *) mem_37132_backing_0;
    
    float accs_mem_37142[1];
    float mem_param_37127[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37127[i_1] = mem_37122[i_1];
    for (int64_t tile_id_36110 = 0; tile_id_36110 < num_whole_tiles_36102;
         tile_id_36110++) {
        int64_t binop_x_36171 = segmap_group_sizze_28027 * tile_id_36110;
        int64_t ltid_36111 = sext_i32_i64(ltid_pre_38333);
        int32_t ltid_flat_36112 = local_tid_38329;
        
        if (slt64(ltid_36111, segmap_group_sizze_28027)) {
            int64_t j_36172 = ltid_36111 + binop_x_36171;
            bool cond_36184 = slt64(j_36172, res_24027);
            int32_t pre_36185;
            
            if (cond_36184) {
                int32_t index_primexp_36509 = sext_i64_i32(j_36172);
                
                pre_36185 = index_primexp_36509;
            } else {
                pre_36185 = 0;
            }
            ((__local int32_t *) mem_37132)[ltid_36111] = pre_36185;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37135[1];
        int64_t ltid_36138 = sext_i32_i64(ltid_pre_38333);
        int32_t ltid_flat_36139 = local_tid_38329;
        
        if (slt64(ltid_36138, segmap_group_sizze_28027)) {
            int64_t gtid_36190 = ltid_36138 + binop_x_36189;
            int32_t res_36192;
            int32_t redout_36561 = 0;
            
            for (int32_t i_36639 = 0; i_36639 < n_24018; i_36639++) {
                int64_t i_36562 = sext_i32_i64(i_36639);
                float x_36196 = ((__global float *) mem_37115)[i_36562 *
                                                               m_24014 +
                                                               gtid_36190];
                bool res_36197;
                
                res_36197 = futrts_isnan32(x_36196);
                
                bool cond_36198 = !res_36197;
                int32_t res_36199 = btoi_bool_i32(cond_36198);
                int32_t res_36195 = add32(res_36199, redout_36561);
                int32_t redout_tmp_38336 = res_36195;
                
                redout_36561 = redout_tmp_38336;
            }
            res_36192 = redout_36561;
            
            float acc_36200 = mem_param_37127[0];
            bool cond_36201 = slt64(gtid_36190, m_24014);
            float acc_36202;
            
            if (cond_36201) {
                float x_36203;
                float redout_36563 = acc_36200;
                
                for (int64_t i_36564 = 0; i_36564 < segmap_group_sizze_28027;
                     i_36564++) {
                    int32_t x_36207 = ((__local int32_t *) mem_37132)[i_36564];
                    bool cond_36208 = slt32(x_36207, res_36192);
                    float res_36209;
                    
                    if (cond_36208) {
                        int64_t i_36210 = sext_i32_i64(x_36207);
                        float res_36211 = ((__global
                                            float *) mem_37118)[i_36210 *
                                                                m_24014 +
                                                                gtid_36190];
                        
                        res_36209 = res_36211;
                    } else {
                        res_36209 = 0.0F;
                    }
                    
                    float res_36212 = res_36209 * res_36209;
                    float res_36206 = res_36212 + redout_36563;
                    float redout_tmp_38337 = res_36206;
                    
                    redout_36563 = redout_tmp_38337;
                }
                x_36203 = redout_36563;
                acc_36202 = x_36203;
            } else {
                acc_36202 = acc_36200;
            }
            mem_37135[0] = acc_36202;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38334[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38334[i_2] = mem_37135[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37127[i_3] = mem_param_tmp_38334[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37142[i_4] = mem_param_37127[i_4];
    
    __local char *mem_37145;
    
    mem_37145 = (__local char *) mem_37145_backing_5;
    
    float mem_37148[1];
    float mem_37601[1];
    
    if (cond_36224) {
        mem_37601[0] = accs_mem_37142[0];
    } else {
        int64_t binop_x_36234 = segmap_group_sizze_28027 *
                num_whole_tiles_36102;
        int64_t ltid_36225 = sext_i32_i64(ltid_pre_38333);
        int32_t ltid_flat_36226 = local_tid_38329;
        
        if (slt64(ltid_36225, segmap_group_sizze_28027)) {
            int64_t j_36235 = ltid_36225 + binop_x_36234;
            bool cond_36247 = slt64(j_36235, res_24027);
            int32_t pre_36248;
            
            if (cond_36247) {
                int32_t index_primexp_36510 = sext_i64_i32(j_36235);
                
                pre_36248 = index_primexp_36510;
            } else {
                pre_36248 = 0;
            }
            ((__local int32_t *) mem_37145)[ltid_36225] = pre_36248;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36253 = sext_i32_i64(ltid_pre_38333);
        int32_t ltid_flat_36254 = local_tid_38329;
        
        if (slt64(ltid_36253, segmap_group_sizze_28027)) {
            int64_t gtid_36261 = binop_x_36189 + ltid_36253;
            int32_t res_36263;
            int32_t redout_36565 = 0;
            
            for (int32_t i_36640 = 0; i_36640 < n_24018; i_36640++) {
                int64_t i_36566 = sext_i32_i64(i_36640);
                float x_36267 = ((__global float *) mem_37115)[i_36566 *
                                                               m_24014 +
                                                               gtid_36261];
                bool res_36268;
                
                res_36268 = futrts_isnan32(x_36267);
                
                bool cond_36269 = !res_36268;
                int32_t res_36270 = btoi_bool_i32(cond_36269);
                int32_t res_36266 = add32(res_36270, redout_36565);
                int32_t redout_tmp_38338 = res_36266;
                
                redout_36565 = redout_tmp_38338;
            }
            res_36263 = redout_36565;
            
            float acc_36271 = accs_mem_37142[0];
            bool cond_36272 = slt64(gtid_36261, m_24014);
            float acc_36273;
            
            if (cond_36272) {
                float x_36274;
                float redout_36567 = acc_36271;
                
                for (int64_t i_36568 = 0; i_36568 < residual_input_36223;
                     i_36568++) {
                    int32_t x_36278 = ((__local int32_t *) mem_37145)[i_36568];
                    bool cond_36279 = slt32(x_36278, res_36263);
                    float res_36280;
                    
                    if (cond_36279) {
                        int64_t i_36281 = sext_i32_i64(x_36278);
                        float res_36282 = ((__global
                                            float *) mem_37118)[i_36281 *
                                                                m_24014 +
                                                                gtid_36261];
                        
                        res_36280 = res_36282;
                    } else {
                        res_36280 = 0.0F;
                    }
                    
                    float res_36283 = res_36280 * res_36280;
                    float res_36277 = res_36283 + redout_36567;
                    float redout_tmp_38339 = res_36277;
                    
                    redout_36567 = redout_tmp_38339;
                }
                x_36274 = redout_36567;
                acc_36273 = x_36274;
            } else {
                acc_36273 = acc_36271;
            }
            mem_37148[0] = acc_36273;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37601[0] = mem_37148[0];
    }
    
    int32_t mem_37156[1];
    int32_t mem_37158[1];
    float mem_37160[1];
    int64_t ltid_36286 = sext_i32_i64(ltid_pre_38333);
    int32_t ltid_flat_36287 = local_tid_38329;
    
    if (slt64(ltid_36286, segmap_group_sizze_28027)) {
        int64_t gtid_36297 = binop_x_36189 + ltid_36286;
        bool cond_36299 = slt64(gtid_36297, m_24014);
        int32_t postlude_36300;
        int32_t postlude_36301;
        float postlude_36302;
        
        if (cond_36299) {
            float res_36298 = mem_37601[0];
            int32_t res_36304;
            int32_t redout_36569 = 0;
            
            for (int32_t i_36641 = 0; i_36641 < n_24018; i_36641++) {
                int64_t i_36570 = sext_i32_i64(i_36641);
                float x_36308 = ((__global float *) mem_37115)[i_36570 *
                                                               m_24014 +
                                                               gtid_36297];
                bool res_36309;
                
                res_36309 = futrts_isnan32(x_36308);
                
                bool cond_36310 = !res_36309;
                int32_t res_36311 = btoi_bool_i32(cond_36310);
                int32_t res_36307 = add32(res_36311, redout_36569);
                int32_t redout_tmp_38340 = res_36307;
                
                redout_36569 = redout_tmp_38340;
            }
            res_36304 = redout_36569;
            
            int32_t r32_arg_36312 = sub32(res_36304, k2p2_24029);
            float res_36313 = sitofp_i32_f32(r32_arg_36312);
            float sqrt_arg_36314 = res_36298 / res_36313;
            float res_36315;
            
            res_36315 = futrts_sqrt32(sqrt_arg_36314);
            
            float res_36316 = sitofp_i32_f32(res_36304);
            float t32_arg_36317 = hfrac_24020 * res_36316;
            int32_t res_36318 = fptosi_f32_i32(t32_arg_36317);
            
            postlude_36300 = res_36318;
            postlude_36301 = res_36304;
            postlude_36302 = res_36315;
        } else {
            postlude_36300 = 0;
            postlude_36301 = 0;
            postlude_36302 = 0.0F;
        }
        mem_37156[0] = postlude_36300;
        mem_37158[0] = postlude_36301;
        mem_37160[0] = postlude_36302;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_38329) + segmap_group_sizze_28027 *
              sext_i32_i64(group_tid_38330), m_24014)) {
        ((__global int32_t *) mem_37162)[sext_i32_i64(local_tid_38329) +
                                         segmap_group_sizze_28027 *
                                         sext_i32_i64(group_tid_38330)] =
            mem_37156[0];
    }
    if (slt64(sext_i32_i64(local_tid_38329) + segmap_group_sizze_28027 *
              sext_i32_i64(group_tid_38330), m_24014)) {
        ((__global int32_t *) mem_37164)[sext_i32_i64(local_tid_38329) +
                                         segmap_group_sizze_28027 *
                                         sext_i32_i64(group_tid_38330)] =
            mem_37158[0];
    }
    if (slt64(sext_i32_i64(local_tid_38329) + segmap_group_sizze_28027 *
              sext_i32_i64(group_tid_38330), m_24014)) {
        ((__global float *) mem_37166)[sext_i32_i64(local_tid_38329) +
                                       segmap_group_sizze_28027 *
                                       sext_i32_i64(group_tid_38330)] =
            mem_37160[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_28027
}
__kernel void mainDetailedzisegmap_intragroup_36326(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_37227_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_37214_backing_aligned_1,
                                                    int64_t N_24013,
                                                    int64_t m_24014,
                                                    int64_t res_24375,
                                                    int64_t num_whole_tiles_36346,
                                                    int64_t residual_input_36445,
                                                    unsigned char cond_36446,
                                                    __global
                                                    unsigned char *res_mem_37111,
                                                    __global
                                                    unsigned char *res_mem_37190,
                                                    __global
                                                    unsigned char *res_mem_37191,
                                                    __global
                                                    unsigned char *mem_37237)
{
    #define segmap_group_sizze_28264 (mainDetailedzisegmap_group_sizze_28245)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_37227_backing_5 = (__local volatile
                                                           char *) mem_37227_backing_aligned_0;
    __local volatile char *restrict mem_37214_backing_0 = (__local volatile
                                                           char *) mem_37214_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38514;
    int32_t local_tid_38515;
    int64_t group_sizze_38518;
    int32_t wave_sizze_38517;
    int32_t group_tid_38516;
    
    global_tid_38514 = get_global_id(0);
    local_tid_38515 = get_local_id(0);
    group_sizze_38518 = get_local_size(0);
    wave_sizze_38517 = LOCKSTEP_WIDTH;
    group_tid_38516 = get_group_id(0);
    
    int32_t gid_flat_36326;
    
    gid_flat_36326 = group_tid_38516;
    
    int32_t ltid_pre_38519;
    
    ltid_pre_38519 = local_tid_38515;
    
    int64_t gid_36325;
    
    gid_36325 = sext_i32_i64(group_tid_38516);
    
    int64_t binop_x_36335;
    
    binop_x_36335 = segmap_group_sizze_28264 * gid_36325;
    
    int32_t mem_37199[1];
    int32_t mem_37201[1];
    int64_t ltid_36327 = sext_i32_i64(ltid_pre_38519);
    int32_t ltid_flat_36328 = local_tid_38515;
    
    if (slt64(ltid_36327, segmap_group_sizze_28264)) {
        int64_t gtid_36336 = ltid_36327 + binop_x_36335;
        bool cond_36337 = slt64(gtid_36336, m_24014);
        int32_t pre_36338;
        int32_t pre_36339;
        
        if (cond_36337) {
            int32_t x_36340 = ((__global int32_t *) res_mem_37191)[gtid_36336];
            int32_t x_36341 = ((__global int32_t *) res_mem_37190)[gtid_36336];
            
            pre_36338 = x_36340;
            pre_36339 = x_36341;
        } else {
            pre_36338 = 0;
            pre_36339 = 0;
        }
        mem_37199[0] = pre_36338;
        mem_37201[0] = pre_36339;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float mem_37204[1];
    int64_t ltid_36347 = sext_i32_i64(ltid_pre_38519);
    int32_t ltid_flat_36348 = local_tid_38515;
    
    if (slt64(ltid_36347, segmap_group_sizze_28264)) {
        mem_37204[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_37214;
    
    mem_37214 = (__local char *) mem_37214_backing_0;
    
    float accs_mem_37224[1];
    float mem_param_37209[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_37209[i_1] = mem_37204[i_1];
    for (int64_t tile_id_36354 = 0; tile_id_36354 < num_whole_tiles_36346;
         tile_id_36354++) {
        int64_t binop_x_36403 = segmap_group_sizze_28264 * tile_id_36354;
        int64_t ltid_36355 = sext_i32_i64(ltid_pre_38519);
        int32_t ltid_flat_36356 = local_tid_38515;
        
        if (slt64(ltid_36355, segmap_group_sizze_28264)) {
            int64_t j_36404 = ltid_36355 + binop_x_36403;
            bool cond_36409 = slt64(j_36404, res_24375);
            int32_t pre_36410;
            
            if (cond_36409) {
                int32_t index_primexp_36511 = sext_i64_i32(j_36404);
                
                pre_36410 = index_primexp_36511;
            } else {
                pre_36410 = 0;
            }
            ((__local int32_t *) mem_37214)[ltid_36355] = pre_36410;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_37217[1];
        int64_t ltid_36375 = sext_i32_i64(ltid_pre_38519);
        int32_t ltid_flat_36376 = local_tid_38515;
        
        if (slt64(ltid_36375, segmap_group_sizze_28264)) {
            int64_t gtid_36415 = binop_x_36335 + ltid_36375;
            float acc_36418 = mem_param_37209[0];
            bool cond_36419 = slt64(gtid_36415, m_24014);
            float acc_36420;
            
            if (cond_36419) {
                int32_t x_36416 = mem_37199[0];
                int32_t x_36417 = mem_37201[0];
                float x_36421;
                float redout_36571 = acc_36418;
                
                for (int64_t i_36572 = 0; i_36572 < segmap_group_sizze_28264;
                     i_36572++) {
                    int32_t x_36425 = ((__local int32_t *) mem_37214)[i_36572];
                    bool cond_36426 = slt32(x_36425, x_36417);
                    float res_36427;
                    
                    if (cond_36426) {
                        int32_t x_36428 = add32(x_36416, x_36425);
                        int32_t x_36429 = sub32(x_36428, x_36417);
                        int32_t i_36430 = add32(1, x_36429);
                        int64_t i_36431 = sext_i32_i64(i_36430);
                        float res_36432 = ((__global
                                            float *) res_mem_37111)[gtid_36415 *
                                                                    N_24013 +
                                                                    i_36431];
                        
                        res_36427 = res_36432;
                    } else {
                        res_36427 = 0.0F;
                    }
                    
                    float res_36424 = res_36427 + redout_36571;
                    float redout_tmp_38522 = res_36424;
                    
                    redout_36571 = redout_tmp_38522;
                }
                x_36421 = redout_36571;
                acc_36420 = x_36421;
            } else {
                acc_36420 = acc_36418;
            }
            mem_37217[0] = acc_36420;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_38520[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_38520[i_2] = mem_37217[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_37209[i_3] = mem_param_tmp_38520[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_37224[i_4] = mem_param_37209[i_4];
    
    __local char *mem_37227;
    
    mem_37227 = (__local char *) mem_37227_backing_5;
    
    float mem_37230[1];
    float mem_37610[1];
    
    if (cond_36446) {
        mem_37610[0] = accs_mem_37224[0];
    } else {
        int64_t binop_x_36456 = segmap_group_sizze_28264 *
                num_whole_tiles_36346;
        int64_t ltid_36447 = sext_i32_i64(ltid_pre_38519);
        int32_t ltid_flat_36448 = local_tid_38515;
        
        if (slt64(ltid_36447, segmap_group_sizze_28264)) {
            int64_t j_36457 = ltid_36447 + binop_x_36456;
            bool cond_36462 = slt64(j_36457, res_24375);
            int32_t pre_36463;
            
            if (cond_36462) {
                int32_t index_primexp_36512 = sext_i64_i32(j_36457);
                
                pre_36463 = index_primexp_36512;
            } else {
                pre_36463 = 0;
            }
            ((__local int32_t *) mem_37227)[ltid_36447] = pre_36463;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_36468 = sext_i32_i64(ltid_pre_38519);
        int32_t ltid_flat_36469 = local_tid_38515;
        
        if (slt64(ltid_36468, segmap_group_sizze_28264)) {
            int64_t gtid_36476 = binop_x_36335 + ltid_36468;
            float acc_36479 = accs_mem_37224[0];
            bool cond_36480 = slt64(gtid_36476, m_24014);
            float acc_36481;
            
            if (cond_36480) {
                int32_t x_36477 = mem_37199[0];
                int32_t x_36478 = mem_37201[0];
                float x_36482;
                float redout_36573 = acc_36479;
                
                for (int64_t i_36574 = 0; i_36574 < residual_input_36445;
                     i_36574++) {
                    int32_t x_36486 = ((__local int32_t *) mem_37227)[i_36574];
                    bool cond_36487 = slt32(x_36486, x_36478);
                    float res_36488;
                    
                    if (cond_36487) {
                        int32_t x_36489 = add32(x_36477, x_36486);
                        int32_t x_36490 = sub32(x_36489, x_36478);
                        int32_t i_36491 = add32(1, x_36490);
                        int64_t i_36492 = sext_i32_i64(i_36491);
                        float res_36493 = ((__global
                                            float *) res_mem_37111)[gtid_36476 *
                                                                    N_24013 +
                                                                    i_36492];
                        
                        res_36488 = res_36493;
                    } else {
                        res_36488 = 0.0F;
                    }
                    
                    float res_36485 = res_36488 + redout_36573;
                    float redout_tmp_38523 = res_36485;
                    
                    redout_36573 = redout_tmp_38523;
                }
                x_36482 = redout_36573;
                acc_36481 = x_36482;
            } else {
                acc_36481 = acc_36479;
            }
            mem_37230[0] = acc_36481;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_37610[0] = mem_37230[0];
    }
    if (slt64(sext_i32_i64(local_tid_38515) + segmap_group_sizze_28264 *
              sext_i32_i64(group_tid_38516), m_24014)) {
        ((__global float *) mem_37237)[sext_i32_i64(local_tid_38515) +
                                       segmap_group_sizze_28264 *
                                       sext_i32_i64(group_tid_38516)] =
            mem_37610[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_28264
}
__kernel void mainDetailedzisegred_large_26113(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_37875_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_37873_backing_aligned_1,
                                               int64_t N_24013, int64_t N_24015,
                                               int64_t res_24027,
                                               int64_t res_24033,
                                               int64_t num_groups_26252,
                                               __global
                                               unsigned char *images_mem_36652,
                                               __global
                                               unsigned char *binop_p_mem_36661,
                                               __global
                                               unsigned char *mem_36744,
                                               __global
                                               unsigned char *mem_36749,
                                               int64_t groups_per_segment_37859,
                                               int64_t elements_per_thread_37860,
                                               int64_t virt_num_groups_37861,
                                               int64_t threads_per_segment_37863,
                                               __global
                                               unsigned char *group_res_arr_mem_37864,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_37866)
{
    #define segred_group_sizze_26251 (mainDetailedzisegred_group_sizze_26107)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_37875_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_37875_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_37873_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37873_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37868;
    int32_t local_tid_37869;
    int64_t group_sizze_37872;
    int32_t wave_sizze_37871;
    int32_t group_tid_37870;
    
    global_tid_37868 = get_global_id(0);
    local_tid_37869 = get_local_id(0);
    group_sizze_37872 = get_local_size(0);
    wave_sizze_37871 = LOCKSTEP_WIDTH;
    group_tid_37870 = get_group_id(0);
    
    int32_t phys_tid_26113;
    
    phys_tid_26113 = global_tid_37868;
    
    __local char *red_arr_mem_37873;
    
    red_arr_mem_37873 = (__local char *) red_arr_mem_37873_backing_0;
    
    __local char *sync_arr_mem_37875;
    
    sync_arr_mem_37875 = (__local char *) sync_arr_mem_37875_backing_1;
    
    int32_t phys_group_id_37877;
    
    phys_group_id_37877 = get_group_id(0);
    for (int32_t i_37878 = 0; i_37878 <
         sdiv_up32(sext_i64_i32(virt_num_groups_37861) - phys_group_id_37877,
                   sext_i64_i32(num_groups_26252)); i_37878++) {
        int32_t virt_group_id_37879 = phys_group_id_37877 + i_37878 *
                sext_i64_i32(num_groups_26252);
        int32_t flat_segment_id_37880 = squot32(virt_group_id_37879,
                                                sext_i64_i32(groups_per_segment_37859));
        int64_t global_tid_37881 = srem64(sext_i32_i64(virt_group_id_37879) *
                                          segred_group_sizze_26251 +
                                          sext_i32_i64(local_tid_37869),
                                          segred_group_sizze_26251 *
                                          groups_per_segment_37859);
        int64_t gtid_26100 = squot64(sext_i32_i64(flat_segment_id_37880),
                                     res_24033 * res_24033);
        int64_t gtid_26101 = squot64(sext_i32_i64(flat_segment_id_37880) -
                                     squot64(sext_i32_i64(flat_segment_id_37880),
                                             res_24033 * res_24033) *
                                     (res_24033 * res_24033), res_24033);
        int64_t gtid_26102 = sext_i32_i64(flat_segment_id_37880) -
                squot64(sext_i32_i64(flat_segment_id_37880), res_24033 *
                        res_24033) * (res_24033 * res_24033) -
                squot64(sext_i32_i64(flat_segment_id_37880) -
                        squot64(sext_i32_i64(flat_segment_id_37880), res_24033 *
                                res_24033) * (res_24033 * res_24033),
                        res_24033) * res_24033;
        int64_t gtid_26112;
        float x_acc_37882;
        int64_t chunk_sizze_37883;
        
        chunk_sizze_37883 = smin64(elements_per_thread_37860,
                                   sdiv_up64(res_24027 -
                                             sext_i32_i64(sext_i64_i32(global_tid_37881)),
                                             threads_per_segment_37863));
        
        float x_26255;
        float x_26256;
        
        // neutral-initialise the accumulators
        {
            x_acc_37882 = 0.0F;
        }
        for (int64_t i_37887 = 0; i_37887 < chunk_sizze_37883; i_37887++) {
            gtid_26112 = sext_i32_i64(sext_i64_i32(global_tid_37881)) +
                threads_per_segment_37863 * i_37887;
            // apply map function
            {
                float x_26261 = ((__global
                                  float *) images_mem_36652)[gtid_26100 *
                                                             N_24015 +
                                                             gtid_26112];
                float x_26262 = ((__global
                                  float *) binop_p_mem_36661)[gtid_26101 *
                                                              N_24013 +
                                                              gtid_26112];
                float x_26263 = ((__global float *) mem_36744)[gtid_26102 *
                                                               N_24013 +
                                                               gtid_26112];
                float x_26264 = x_26262 * x_26263;
                bool res_26265;
                
                res_26265 = futrts_isnan32(x_26261);
                
                float y_26266;
                
                if (res_26265) {
                    y_26266 = 0.0F;
                } else {
                    y_26266 = 1.0F;
                }
                
                float res_26267 = x_26264 * y_26266;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_26255 = x_acc_37882;
                }
                // load new values
                {
                    x_26256 = res_26267;
                }
                // apply reduction operator
                {
                    float res_26257 = x_26255 + x_26256;
                    
                    // store in accumulator
                    {
                        x_acc_37882 = res_26257;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_26255 = x_acc_37882;
            ((__local
              float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869)] =
                x_26255;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_37888;
        int32_t skip_waves_37889;
        
        skip_waves_37889 = 1;
        
        float x_37884;
        float x_37885;
        
        offset_37888 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_37869,
                      sext_i64_i32(segred_group_sizze_26251))) {
                x_37884 = ((__local
                            float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869 +
                                                        offset_37888)];
            }
        }
        offset_37888 = 1;
        while (slt32(offset_37888, wave_sizze_37871)) {
            if (slt32(local_tid_37869 + offset_37888,
                      sext_i64_i32(segred_group_sizze_26251)) &&
                ((local_tid_37869 - squot32(local_tid_37869, wave_sizze_37871) *
                  wave_sizze_37871) & (2 * offset_37888 - 1)) == 0) {
                // read array element
                {
                    x_37885 = ((volatile __local
                                float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869 +
                                                            offset_37888)];
                }
                // apply reduction operation
                {
                    float res_37886 = x_37884 + x_37885;
                    
                    x_37884 = res_37886;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869)] =
                        x_37884;
                }
            }
            offset_37888 *= 2;
        }
        while (slt32(skip_waves_37889,
                     squot32(sext_i64_i32(segred_group_sizze_26251) +
                             wave_sizze_37871 - 1, wave_sizze_37871))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_37888 = skip_waves_37889 * wave_sizze_37871;
            if (slt32(local_tid_37869 + offset_37888,
                      sext_i64_i32(segred_group_sizze_26251)) &&
                ((local_tid_37869 - squot32(local_tid_37869, wave_sizze_37871) *
                  wave_sizze_37871) == 0 && (squot32(local_tid_37869,
                                                     wave_sizze_37871) & (2 *
                                                                          skip_waves_37889 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_37885 = ((__local
                                float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869 +
                                                            offset_37888)];
                }
                // apply reduction operation
                {
                    float res_37886 = x_37884 + x_37885;
                    
                    x_37884 = res_37886;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869)] =
                        x_37884;
                }
            }
            skip_waves_37889 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_37869) == 0) {
                x_acc_37882 = x_37884;
            }
        }
        if (groups_per_segment_37859 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_37869 == 0) {
                    ((__global float *) mem_36749)[gtid_26100 * (res_24033 *
                                                                 res_24033) +
                                                   gtid_26101 * res_24033 +
                                                   gtid_26102] = x_acc_37882;
                }
            }
        } else {
            int32_t old_counter_37890;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_37869 == 0) {
                    ((__global
                      float *) group_res_arr_mem_37864)[sext_i32_i64(virt_group_id_37879) *
                                                        segred_group_sizze_26251] =
                        x_acc_37882;
                    mem_fence_global();
                    old_counter_37890 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_37866)[sext_i32_i64(srem32(flat_segment_id_37880,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_37875)[0] =
                        old_counter_37890 == groups_per_segment_37859 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_37891;
            
            is_last_group_37891 = ((__local bool *) sync_arr_mem_37875)[0];
            if (is_last_group_37891) {
                if (local_tid_37869 == 0) {
                    old_counter_37890 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_37866)[sext_i32_i64(srem32(flat_segment_id_37880,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_37859));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_37892 =
                            sdiv_up64(groups_per_segment_37859,
                                      segred_group_sizze_26251);
                    
                    x_26255 = 0.0F;
                    for (int64_t i_37893 = 0; i_37893 < read_per_thread_37892;
                         i_37893++) {
                        int64_t group_res_id_37894 =
                                sext_i32_i64(local_tid_37869) *
                                read_per_thread_37892 + i_37893;
                        int64_t index_of_group_res_37895 =
                                sext_i32_i64(flat_segment_id_37880) *
                                groups_per_segment_37859 + group_res_id_37894;
                        
                        if (slt64(group_res_id_37894,
                                  groups_per_segment_37859)) {
                            x_26256 = ((__global
                                        float *) group_res_arr_mem_37864)[index_of_group_res_37895 *
                                                                          segred_group_sizze_26251];
                            
                            float res_26257;
                            
                            res_26257 = x_26255 + x_26256;
                            x_26255 = res_26257;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869)] =
                    x_26255;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_37896;
                    int32_t skip_waves_37897;
                    
                    skip_waves_37897 = 1;
                    
                    float x_37884;
                    float x_37885;
                    
                    offset_37896 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_37869,
                                  sext_i64_i32(segred_group_sizze_26251))) {
                            x_37884 = ((__local
                                        float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869 +
                                                                    offset_37896)];
                        }
                    }
                    offset_37896 = 1;
                    while (slt32(offset_37896, wave_sizze_37871)) {
                        if (slt32(local_tid_37869 + offset_37896,
                                  sext_i64_i32(segred_group_sizze_26251)) &&
                            ((local_tid_37869 - squot32(local_tid_37869,
                                                        wave_sizze_37871) *
                              wave_sizze_37871) & (2 * offset_37896 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_37885 = ((volatile __local
                                            float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869 +
                                                                        offset_37896)];
                            }
                            // apply reduction operation
                            {
                                float res_37886 = x_37884 + x_37885;
                                
                                x_37884 = res_37886;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869)] =
                                    x_37884;
                            }
                        }
                        offset_37896 *= 2;
                    }
                    while (slt32(skip_waves_37897,
                                 squot32(sext_i64_i32(segred_group_sizze_26251) +
                                         wave_sizze_37871 - 1,
                                         wave_sizze_37871))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_37896 = skip_waves_37897 * wave_sizze_37871;
                        if (slt32(local_tid_37869 + offset_37896,
                                  sext_i64_i32(segred_group_sizze_26251)) &&
                            ((local_tid_37869 - squot32(local_tid_37869,
                                                        wave_sizze_37871) *
                              wave_sizze_37871) == 0 &&
                             (squot32(local_tid_37869, wave_sizze_37871) & (2 *
                                                                            skip_waves_37897 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_37885 = ((__local
                                            float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869 +
                                                                        offset_37896)];
                            }
                            // apply reduction operation
                            {
                                float res_37886 = x_37884 + x_37885;
                                
                                x_37884 = res_37886;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_37873)[sext_i32_i64(local_tid_37869)] =
                                    x_37884;
                            }
                        }
                        skip_waves_37897 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_37869 == 0) {
                            ((__global float *) mem_36749)[gtid_26100 *
                                                           (res_24033 *
                                                            res_24033) +
                                                           gtid_26101 *
                                                           res_24033 +
                                                           gtid_26102] =
                                x_37884;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_26251
}
__kernel void mainDetailedzisegred_large_27286(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38029_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38027_backing_aligned_1,
                                               int64_t N_24013, int64_t N_24015,
                                               int64_t res_24027,
                                               int64_t res_24033,
                                               int64_t num_groups_27339,
                                               __global
                                               unsigned char *images_mem_36652,
                                               __global
                                               unsigned char *binop_p_mem_36661,
                                               __global
                                               unsigned char *mem_36930,
                                               int64_t groups_per_segment_38013,
                                               int64_t elements_per_thread_38014,
                                               int64_t virt_num_groups_38015,
                                               int64_t threads_per_segment_38017,
                                               __global
                                               unsigned char *group_res_arr_mem_38018,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38020)
{
    #define segred_group_sizze_27338 (mainDetailedzisegred_group_sizze_27280)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38029_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38029_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38027_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38027_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38022;
    int32_t local_tid_38023;
    int64_t group_sizze_38026;
    int32_t wave_sizze_38025;
    int32_t group_tid_38024;
    
    global_tid_38022 = get_global_id(0);
    local_tid_38023 = get_local_id(0);
    group_sizze_38026 = get_local_size(0);
    wave_sizze_38025 = LOCKSTEP_WIDTH;
    group_tid_38024 = get_group_id(0);
    
    int32_t phys_tid_27286;
    
    phys_tid_27286 = global_tid_38022;
    
    __local char *red_arr_mem_38027;
    
    red_arr_mem_38027 = (__local char *) red_arr_mem_38027_backing_0;
    
    __local char *sync_arr_mem_38029;
    
    sync_arr_mem_38029 = (__local char *) sync_arr_mem_38029_backing_1;
    
    int32_t phys_group_id_38031;
    
    phys_group_id_38031 = get_group_id(0);
    for (int32_t i_38032 = 0; i_38032 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38015) - phys_group_id_38031,
                   sext_i64_i32(num_groups_27339)); i_38032++) {
        int32_t virt_group_id_38033 = phys_group_id_38031 + i_38032 *
                sext_i64_i32(num_groups_27339);
        int32_t flat_segment_id_38034 = squot32(virt_group_id_38033,
                                                sext_i64_i32(groups_per_segment_38013));
        int64_t global_tid_38035 = srem64(sext_i32_i64(virt_group_id_38033) *
                                          segred_group_sizze_27338 +
                                          sext_i32_i64(local_tid_38023),
                                          segred_group_sizze_27338 *
                                          groups_per_segment_38013);
        int64_t gtid_27275 = squot64(sext_i32_i64(flat_segment_id_38034),
                                     res_24033);
        int64_t gtid_27276 = sext_i32_i64(flat_segment_id_38034) -
                squot64(sext_i32_i64(flat_segment_id_38034), res_24033) *
                res_24033;
        int64_t gtid_27285;
        float x_acc_38036;
        int64_t chunk_sizze_38037;
        
        chunk_sizze_38037 = smin64(elements_per_thread_38014,
                                   sdiv_up64(res_24027 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38035)),
                                             threads_per_segment_38017));
        
        float x_27342;
        float x_27343;
        
        // neutral-initialise the accumulators
        {
            x_acc_38036 = 0.0F;
        }
        for (int64_t i_38041 = 0; i_38041 < chunk_sizze_38037; i_38041++) {
            gtid_27285 = sext_i32_i64(sext_i64_i32(global_tid_38035)) +
                threads_per_segment_38017 * i_38041;
            // apply map function
            {
                float x_27348 = ((__global
                                  float *) images_mem_36652)[gtid_27275 *
                                                             N_24015 +
                                                             gtid_27285];
                bool res_27349;
                
                res_27349 = futrts_isnan32(x_27348);
                
                float res_27350;
                
                if (res_27349) {
                    res_27350 = 0.0F;
                } else {
                    float x_27347 = ((__global
                                      float *) binop_p_mem_36661)[gtid_27276 *
                                                                  N_24013 +
                                                                  gtid_27285];
                    float res_27351 = x_27347 * x_27348;
                    
                    res_27350 = res_27351;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_27342 = x_acc_38036;
                }
                // load new values
                {
                    x_27343 = res_27350;
                }
                // apply reduction operator
                {
                    float res_27344 = x_27342 + x_27343;
                    
                    // store in accumulator
                    {
                        x_acc_38036 = res_27344;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27342 = x_acc_38036;
            ((__local
              float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023)] =
                x_27342;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38042;
        int32_t skip_waves_38043;
        
        skip_waves_38043 = 1;
        
        float x_38038;
        float x_38039;
        
        offset_38042 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38023,
                      sext_i64_i32(segred_group_sizze_27338))) {
                x_38038 = ((__local
                            float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023 +
                                                        offset_38042)];
            }
        }
        offset_38042 = 1;
        while (slt32(offset_38042, wave_sizze_38025)) {
            if (slt32(local_tid_38023 + offset_38042,
                      sext_i64_i32(segred_group_sizze_27338)) &&
                ((local_tid_38023 - squot32(local_tid_38023, wave_sizze_38025) *
                  wave_sizze_38025) & (2 * offset_38042 - 1)) == 0) {
                // read array element
                {
                    x_38039 = ((volatile __local
                                float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023 +
                                                            offset_38042)];
                }
                // apply reduction operation
                {
                    float res_38040 = x_38038 + x_38039;
                    
                    x_38038 = res_38040;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023)] =
                        x_38038;
                }
            }
            offset_38042 *= 2;
        }
        while (slt32(skip_waves_38043,
                     squot32(sext_i64_i32(segred_group_sizze_27338) +
                             wave_sizze_38025 - 1, wave_sizze_38025))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38042 = skip_waves_38043 * wave_sizze_38025;
            if (slt32(local_tid_38023 + offset_38042,
                      sext_i64_i32(segred_group_sizze_27338)) &&
                ((local_tid_38023 - squot32(local_tid_38023, wave_sizze_38025) *
                  wave_sizze_38025) == 0 && (squot32(local_tid_38023,
                                                     wave_sizze_38025) & (2 *
                                                                          skip_waves_38043 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38039 = ((__local
                                float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023 +
                                                            offset_38042)];
                }
                // apply reduction operation
                {
                    float res_38040 = x_38038 + x_38039;
                    
                    x_38038 = res_38040;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023)] =
                        x_38038;
                }
            }
            skip_waves_38043 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38023) == 0) {
                x_acc_38036 = x_38038;
            }
        }
        if (groups_per_segment_38013 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38023 == 0) {
                    ((__global float *) mem_36930)[gtid_27275 * res_24033 +
                                                   gtid_27276] = x_acc_38036;
                }
            }
        } else {
            int32_t old_counter_38044;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38023 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38018)[sext_i32_i64(virt_group_id_38033) *
                                                        segred_group_sizze_27338] =
                        x_acc_38036;
                    mem_fence_global();
                    old_counter_38044 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38020)[sext_i32_i64(srem32(flat_segment_id_38034,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38029)[0] =
                        old_counter_38044 == groups_per_segment_38013 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38045;
            
            is_last_group_38045 = ((__local bool *) sync_arr_mem_38029)[0];
            if (is_last_group_38045) {
                if (local_tid_38023 == 0) {
                    old_counter_38044 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38020)[sext_i32_i64(srem32(flat_segment_id_38034,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38013));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38046 =
                            sdiv_up64(groups_per_segment_38013,
                                      segred_group_sizze_27338);
                    
                    x_27342 = 0.0F;
                    for (int64_t i_38047 = 0; i_38047 < read_per_thread_38046;
                         i_38047++) {
                        int64_t group_res_id_38048 =
                                sext_i32_i64(local_tid_38023) *
                                read_per_thread_38046 + i_38047;
                        int64_t index_of_group_res_38049 =
                                sext_i32_i64(flat_segment_id_38034) *
                                groups_per_segment_38013 + group_res_id_38048;
                        
                        if (slt64(group_res_id_38048,
                                  groups_per_segment_38013)) {
                            x_27343 = ((__global
                                        float *) group_res_arr_mem_38018)[index_of_group_res_38049 *
                                                                          segred_group_sizze_27338];
                            
                            float res_27344;
                            
                            res_27344 = x_27342 + x_27343;
                            x_27342 = res_27344;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023)] =
                    x_27342;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38050;
                    int32_t skip_waves_38051;
                    
                    skip_waves_38051 = 1;
                    
                    float x_38038;
                    float x_38039;
                    
                    offset_38050 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38023,
                                  sext_i64_i32(segred_group_sizze_27338))) {
                            x_38038 = ((__local
                                        float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023 +
                                                                    offset_38050)];
                        }
                    }
                    offset_38050 = 1;
                    while (slt32(offset_38050, wave_sizze_38025)) {
                        if (slt32(local_tid_38023 + offset_38050,
                                  sext_i64_i32(segred_group_sizze_27338)) &&
                            ((local_tid_38023 - squot32(local_tid_38023,
                                                        wave_sizze_38025) *
                              wave_sizze_38025) & (2 * offset_38050 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38039 = ((volatile __local
                                            float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023 +
                                                                        offset_38050)];
                            }
                            // apply reduction operation
                            {
                                float res_38040 = x_38038 + x_38039;
                                
                                x_38038 = res_38040;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023)] =
                                    x_38038;
                            }
                        }
                        offset_38050 *= 2;
                    }
                    while (slt32(skip_waves_38051,
                                 squot32(sext_i64_i32(segred_group_sizze_27338) +
                                         wave_sizze_38025 - 1,
                                         wave_sizze_38025))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38050 = skip_waves_38051 * wave_sizze_38025;
                        if (slt32(local_tid_38023 + offset_38050,
                                  sext_i64_i32(segred_group_sizze_27338)) &&
                            ((local_tid_38023 - squot32(local_tid_38023,
                                                        wave_sizze_38025) *
                              wave_sizze_38025) == 0 &&
                             (squot32(local_tid_38023, wave_sizze_38025) & (2 *
                                                                            skip_waves_38051 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38039 = ((__local
                                            float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023 +
                                                                        offset_38050)];
                            }
                            // apply reduction operation
                            {
                                float res_38040 = x_38038 + x_38039;
                                
                                x_38038 = res_38040;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38027)[sext_i32_i64(local_tid_38023)] =
                                    x_38038;
                            }
                        }
                        skip_waves_38051 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38023 == 0) {
                            ((__global float *) mem_36930)[gtid_27275 *
                                                           res_24033 +
                                                           gtid_27276] =
                                x_38038;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27338
}
__kernel void mainDetailedzisegred_large_27423(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38110_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38108_backing_aligned_1,
                                               int64_t res_24033,
                                               int64_t num_groups_27472,
                                               __global
                                               unsigned char *res_mem_36845,
                                               __global
                                               unsigned char *res_mem_36936,
                                               __global
                                               unsigned char *mem_36973,
                                               int64_t groups_per_segment_38094,
                                               int64_t elements_per_thread_38095,
                                               int64_t virt_num_groups_38096,
                                               int64_t threads_per_segment_38098,
                                               __global
                                               unsigned char *group_res_arr_mem_38099,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38101)
{
    #define segred_group_sizze_27471 (mainDetailedzisegred_group_sizze_27417)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38110_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38110_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38108_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38108_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38103;
    int32_t local_tid_38104;
    int64_t group_sizze_38107;
    int32_t wave_sizze_38106;
    int32_t group_tid_38105;
    
    global_tid_38103 = get_global_id(0);
    local_tid_38104 = get_local_id(0);
    group_sizze_38107 = get_local_size(0);
    wave_sizze_38106 = LOCKSTEP_WIDTH;
    group_tid_38105 = get_group_id(0);
    
    int32_t phys_tid_27423;
    
    phys_tid_27423 = global_tid_38103;
    
    __local char *red_arr_mem_38108;
    
    red_arr_mem_38108 = (__local char *) red_arr_mem_38108_backing_0;
    
    __local char *sync_arr_mem_38110;
    
    sync_arr_mem_38110 = (__local char *) sync_arr_mem_38110_backing_1;
    
    int32_t phys_group_id_38112;
    
    phys_group_id_38112 = get_group_id(0);
    for (int32_t i_38113 = 0; i_38113 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38096) - phys_group_id_38112,
                   sext_i64_i32(num_groups_27472)); i_38113++) {
        int32_t virt_group_id_38114 = phys_group_id_38112 + i_38113 *
                sext_i64_i32(num_groups_27472);
        int32_t flat_segment_id_38115 = squot32(virt_group_id_38114,
                                                sext_i64_i32(groups_per_segment_38094));
        int64_t global_tid_38116 = srem64(sext_i32_i64(virt_group_id_38114) *
                                          segred_group_sizze_27471 +
                                          sext_i32_i64(local_tid_38104),
                                          segred_group_sizze_27471 *
                                          groups_per_segment_38094);
        int64_t gtid_27412 = squot64(sext_i32_i64(flat_segment_id_38115),
                                     res_24033);
        int64_t gtid_27413 = sext_i32_i64(flat_segment_id_38115) -
                squot64(sext_i32_i64(flat_segment_id_38115), res_24033) *
                res_24033;
        int64_t gtid_27422;
        float x_acc_38117;
        int64_t chunk_sizze_38118;
        
        chunk_sizze_38118 = smin64(elements_per_thread_38095,
                                   sdiv_up64(res_24033 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38116)),
                                             threads_per_segment_38098));
        
        float x_27475;
        float x_27476;
        
        // neutral-initialise the accumulators
        {
            x_acc_38117 = 0.0F;
        }
        for (int64_t i_38122 = 0; i_38122 < chunk_sizze_38118; i_38122++) {
            gtid_27422 = sext_i32_i64(sext_i64_i32(global_tid_38116)) +
                threads_per_segment_38098 * i_38122;
            // apply map function
            {
                float x_27481 = ((__global float *) res_mem_36936)[gtid_27412 *
                                                                   res_24033 +
                                                                   gtid_27422];
                float x_27482 = ((__global float *) res_mem_36845)[gtid_27412 *
                                                                   (res_24033 *
                                                                    res_24033) +
                                                                   gtid_27413 *
                                                                   res_24033 +
                                                                   gtid_27422];
                float res_27483 = x_27481 * x_27482;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27475 = x_acc_38117;
                }
                // load new values
                {
                    x_27476 = res_27483;
                }
                // apply reduction operator
                {
                    float res_27477 = x_27475 + x_27476;
                    
                    // store in accumulator
                    {
                        x_acc_38117 = res_27477;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27475 = x_acc_38117;
            ((__local
              float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104)] =
                x_27475;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38123;
        int32_t skip_waves_38124;
        
        skip_waves_38124 = 1;
        
        float x_38119;
        float x_38120;
        
        offset_38123 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38104,
                      sext_i64_i32(segred_group_sizze_27471))) {
                x_38119 = ((__local
                            float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104 +
                                                        offset_38123)];
            }
        }
        offset_38123 = 1;
        while (slt32(offset_38123, wave_sizze_38106)) {
            if (slt32(local_tid_38104 + offset_38123,
                      sext_i64_i32(segred_group_sizze_27471)) &&
                ((local_tid_38104 - squot32(local_tid_38104, wave_sizze_38106) *
                  wave_sizze_38106) & (2 * offset_38123 - 1)) == 0) {
                // read array element
                {
                    x_38120 = ((volatile __local
                                float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104 +
                                                            offset_38123)];
                }
                // apply reduction operation
                {
                    float res_38121 = x_38119 + x_38120;
                    
                    x_38119 = res_38121;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104)] =
                        x_38119;
                }
            }
            offset_38123 *= 2;
        }
        while (slt32(skip_waves_38124,
                     squot32(sext_i64_i32(segred_group_sizze_27471) +
                             wave_sizze_38106 - 1, wave_sizze_38106))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38123 = skip_waves_38124 * wave_sizze_38106;
            if (slt32(local_tid_38104 + offset_38123,
                      sext_i64_i32(segred_group_sizze_27471)) &&
                ((local_tid_38104 - squot32(local_tid_38104, wave_sizze_38106) *
                  wave_sizze_38106) == 0 && (squot32(local_tid_38104,
                                                     wave_sizze_38106) & (2 *
                                                                          skip_waves_38124 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38120 = ((__local
                                float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104 +
                                                            offset_38123)];
                }
                // apply reduction operation
                {
                    float res_38121 = x_38119 + x_38120;
                    
                    x_38119 = res_38121;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104)] =
                        x_38119;
                }
            }
            skip_waves_38124 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38104) == 0) {
                x_acc_38117 = x_38119;
            }
        }
        if (groups_per_segment_38094 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38104 == 0) {
                    ((__global float *) mem_36973)[gtid_27412 * res_24033 +
                                                   gtid_27413] = x_acc_38117;
                }
            }
        } else {
            int32_t old_counter_38125;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38104 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38099)[sext_i32_i64(virt_group_id_38114) *
                                                        segred_group_sizze_27471] =
                        x_acc_38117;
                    mem_fence_global();
                    old_counter_38125 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38101)[sext_i32_i64(srem32(flat_segment_id_38115,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38110)[0] =
                        old_counter_38125 == groups_per_segment_38094 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38126;
            
            is_last_group_38126 = ((__local bool *) sync_arr_mem_38110)[0];
            if (is_last_group_38126) {
                if (local_tid_38104 == 0) {
                    old_counter_38125 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38101)[sext_i32_i64(srem32(flat_segment_id_38115,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38094));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38127 =
                            sdiv_up64(groups_per_segment_38094,
                                      segred_group_sizze_27471);
                    
                    x_27475 = 0.0F;
                    for (int64_t i_38128 = 0; i_38128 < read_per_thread_38127;
                         i_38128++) {
                        int64_t group_res_id_38129 =
                                sext_i32_i64(local_tid_38104) *
                                read_per_thread_38127 + i_38128;
                        int64_t index_of_group_res_38130 =
                                sext_i32_i64(flat_segment_id_38115) *
                                groups_per_segment_38094 + group_res_id_38129;
                        
                        if (slt64(group_res_id_38129,
                                  groups_per_segment_38094)) {
                            x_27476 = ((__global
                                        float *) group_res_arr_mem_38099)[index_of_group_res_38130 *
                                                                          segred_group_sizze_27471];
                            
                            float res_27477;
                            
                            res_27477 = x_27475 + x_27476;
                            x_27475 = res_27477;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104)] =
                    x_27475;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38131;
                    int32_t skip_waves_38132;
                    
                    skip_waves_38132 = 1;
                    
                    float x_38119;
                    float x_38120;
                    
                    offset_38131 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38104,
                                  sext_i64_i32(segred_group_sizze_27471))) {
                            x_38119 = ((__local
                                        float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104 +
                                                                    offset_38131)];
                        }
                    }
                    offset_38131 = 1;
                    while (slt32(offset_38131, wave_sizze_38106)) {
                        if (slt32(local_tid_38104 + offset_38131,
                                  sext_i64_i32(segred_group_sizze_27471)) &&
                            ((local_tid_38104 - squot32(local_tid_38104,
                                                        wave_sizze_38106) *
                              wave_sizze_38106) & (2 * offset_38131 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38120 = ((volatile __local
                                            float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104 +
                                                                        offset_38131)];
                            }
                            // apply reduction operation
                            {
                                float res_38121 = x_38119 + x_38120;
                                
                                x_38119 = res_38121;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104)] =
                                    x_38119;
                            }
                        }
                        offset_38131 *= 2;
                    }
                    while (slt32(skip_waves_38132,
                                 squot32(sext_i64_i32(segred_group_sizze_27471) +
                                         wave_sizze_38106 - 1,
                                         wave_sizze_38106))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38131 = skip_waves_38132 * wave_sizze_38106;
                        if (slt32(local_tid_38104 + offset_38131,
                                  sext_i64_i32(segred_group_sizze_27471)) &&
                            ((local_tid_38104 - squot32(local_tid_38104,
                                                        wave_sizze_38106) *
                              wave_sizze_38106) == 0 &&
                             (squot32(local_tid_38104, wave_sizze_38106) & (2 *
                                                                            skip_waves_38132 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38120 = ((__local
                                            float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104 +
                                                                        offset_38131)];
                            }
                            // apply reduction operation
                            {
                                float res_38121 = x_38119 + x_38120;
                                
                                x_38119 = res_38121;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38108)[sext_i32_i64(local_tid_38104)] =
                                    x_38119;
                            }
                        }
                        skip_waves_38132 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38104 == 0) {
                            ((__global float *) mem_36973)[gtid_27412 *
                                                           res_24033 +
                                                           gtid_27413] =
                                x_38119;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27471
}
__kernel void mainDetailedzisegred_large_27553(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38198_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38196_backing_aligned_1,
                                               int64_t N_24013,
                                               int64_t res_24033,
                                               int64_t num_groups_27600,
                                               __global
                                               unsigned char *mem_36668,
                                               __global
                                               unsigned char *res_mem_36979,
                                               __global
                                               unsigned char *mem_37067,
                                               int64_t groups_per_segment_38182,
                                               int64_t elements_per_thread_38183,
                                               int64_t virt_num_groups_38184,
                                               int64_t threads_per_segment_38186,
                                               __global
                                               unsigned char *group_res_arr_mem_38187,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38189)
{
    #define segred_group_sizze_27599 (mainDetailedzisegred_group_sizze_27547)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38198_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38198_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38196_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38196_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38191;
    int32_t local_tid_38192;
    int64_t group_sizze_38195;
    int32_t wave_sizze_38194;
    int32_t group_tid_38193;
    
    global_tid_38191 = get_global_id(0);
    local_tid_38192 = get_local_id(0);
    group_sizze_38195 = get_local_size(0);
    wave_sizze_38194 = LOCKSTEP_WIDTH;
    group_tid_38193 = get_group_id(0);
    
    int32_t phys_tid_27553;
    
    phys_tid_27553 = global_tid_38191;
    
    __local char *red_arr_mem_38196;
    
    red_arr_mem_38196 = (__local char *) red_arr_mem_38196_backing_0;
    
    __local char *sync_arr_mem_38198;
    
    sync_arr_mem_38198 = (__local char *) sync_arr_mem_38198_backing_1;
    
    int32_t phys_group_id_38200;
    
    phys_group_id_38200 = get_group_id(0);
    for (int32_t i_38201 = 0; i_38201 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38184) - phys_group_id_38200,
                   sext_i64_i32(num_groups_27600)); i_38201++) {
        int32_t virt_group_id_38202 = phys_group_id_38200 + i_38201 *
                sext_i64_i32(num_groups_27600);
        int32_t flat_segment_id_38203 = squot32(virt_group_id_38202,
                                                sext_i64_i32(groups_per_segment_38182));
        int64_t global_tid_38204 = srem64(sext_i32_i64(virt_group_id_38202) *
                                          segred_group_sizze_27599 +
                                          sext_i32_i64(local_tid_38192),
                                          segred_group_sizze_27599 *
                                          groups_per_segment_38182);
        int64_t gtid_27542 = squot64(sext_i32_i64(flat_segment_id_38203),
                                     N_24013);
        int64_t gtid_27543 = sext_i32_i64(flat_segment_id_38203) -
                squot64(sext_i32_i64(flat_segment_id_38203), N_24013) * N_24013;
        int64_t gtid_27552;
        float x_acc_38205;
        int64_t chunk_sizze_38206;
        
        chunk_sizze_38206 = smin64(elements_per_thread_38183,
                                   sdiv_up64(res_24033 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38204)),
                                             threads_per_segment_38186));
        
        float x_27603;
        float x_27604;
        
        // neutral-initialise the accumulators
        {
            x_acc_38205 = 0.0F;
        }
        for (int64_t i_38210 = 0; i_38210 < chunk_sizze_38206; i_38210++) {
            gtid_27552 = sext_i32_i64(sext_i64_i32(global_tid_38204)) +
                threads_per_segment_38186 * i_38210;
            // apply map function
            {
                float x_27608 = ((__global float *) res_mem_36979)[gtid_27542 *
                                                                   res_24033 +
                                                                   gtid_27552];
                float x_27609 = ((__global float *) mem_36668)[gtid_27543 *
                                                               res_24033 +
                                                               gtid_27552];
                float res_27610 = x_27608 * x_27609;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27603 = x_acc_38205;
                }
                // load new values
                {
                    x_27604 = res_27610;
                }
                // apply reduction operator
                {
                    float res_27605 = x_27603 + x_27604;
                    
                    // store in accumulator
                    {
                        x_acc_38205 = res_27605;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27603 = x_acc_38205;
            ((__local
              float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192)] =
                x_27603;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38211;
        int32_t skip_waves_38212;
        
        skip_waves_38212 = 1;
        
        float x_38207;
        float x_38208;
        
        offset_38211 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38192,
                      sext_i64_i32(segred_group_sizze_27599))) {
                x_38207 = ((__local
                            float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192 +
                                                        offset_38211)];
            }
        }
        offset_38211 = 1;
        while (slt32(offset_38211, wave_sizze_38194)) {
            if (slt32(local_tid_38192 + offset_38211,
                      sext_i64_i32(segred_group_sizze_27599)) &&
                ((local_tid_38192 - squot32(local_tid_38192, wave_sizze_38194) *
                  wave_sizze_38194) & (2 * offset_38211 - 1)) == 0) {
                // read array element
                {
                    x_38208 = ((volatile __local
                                float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192 +
                                                            offset_38211)];
                }
                // apply reduction operation
                {
                    float res_38209 = x_38207 + x_38208;
                    
                    x_38207 = res_38209;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192)] =
                        x_38207;
                }
            }
            offset_38211 *= 2;
        }
        while (slt32(skip_waves_38212,
                     squot32(sext_i64_i32(segred_group_sizze_27599) +
                             wave_sizze_38194 - 1, wave_sizze_38194))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38211 = skip_waves_38212 * wave_sizze_38194;
            if (slt32(local_tid_38192 + offset_38211,
                      sext_i64_i32(segred_group_sizze_27599)) &&
                ((local_tid_38192 - squot32(local_tid_38192, wave_sizze_38194) *
                  wave_sizze_38194) == 0 && (squot32(local_tid_38192,
                                                     wave_sizze_38194) & (2 *
                                                                          skip_waves_38212 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38208 = ((__local
                                float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192 +
                                                            offset_38211)];
                }
                // apply reduction operation
                {
                    float res_38209 = x_38207 + x_38208;
                    
                    x_38207 = res_38209;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192)] =
                        x_38207;
                }
            }
            skip_waves_38212 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38192) == 0) {
                x_acc_38205 = x_38207;
            }
        }
        if (groups_per_segment_38182 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38192 == 0) {
                    ((__global float *) mem_37067)[gtid_27542 * N_24013 +
                                                   gtid_27543] = x_acc_38205;
                }
            }
        } else {
            int32_t old_counter_38213;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38192 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38187)[sext_i32_i64(virt_group_id_38202) *
                                                        segred_group_sizze_27599] =
                        x_acc_38205;
                    mem_fence_global();
                    old_counter_38213 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38189)[sext_i32_i64(srem32(flat_segment_id_38203,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38198)[0] =
                        old_counter_38213 == groups_per_segment_38182 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38214;
            
            is_last_group_38214 = ((__local bool *) sync_arr_mem_38198)[0];
            if (is_last_group_38214) {
                if (local_tid_38192 == 0) {
                    old_counter_38213 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38189)[sext_i32_i64(srem32(flat_segment_id_38203,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38182));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38215 =
                            sdiv_up64(groups_per_segment_38182,
                                      segred_group_sizze_27599);
                    
                    x_27603 = 0.0F;
                    for (int64_t i_38216 = 0; i_38216 < read_per_thread_38215;
                         i_38216++) {
                        int64_t group_res_id_38217 =
                                sext_i32_i64(local_tid_38192) *
                                read_per_thread_38215 + i_38216;
                        int64_t index_of_group_res_38218 =
                                sext_i32_i64(flat_segment_id_38203) *
                                groups_per_segment_38182 + group_res_id_38217;
                        
                        if (slt64(group_res_id_38217,
                                  groups_per_segment_38182)) {
                            x_27604 = ((__global
                                        float *) group_res_arr_mem_38187)[index_of_group_res_38218 *
                                                                          segred_group_sizze_27599];
                            
                            float res_27605;
                            
                            res_27605 = x_27603 + x_27604;
                            x_27603 = res_27605;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192)] =
                    x_27603;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38219;
                    int32_t skip_waves_38220;
                    
                    skip_waves_38220 = 1;
                    
                    float x_38207;
                    float x_38208;
                    
                    offset_38219 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38192,
                                  sext_i64_i32(segred_group_sizze_27599))) {
                            x_38207 = ((__local
                                        float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192 +
                                                                    offset_38219)];
                        }
                    }
                    offset_38219 = 1;
                    while (slt32(offset_38219, wave_sizze_38194)) {
                        if (slt32(local_tid_38192 + offset_38219,
                                  sext_i64_i32(segred_group_sizze_27599)) &&
                            ((local_tid_38192 - squot32(local_tid_38192,
                                                        wave_sizze_38194) *
                              wave_sizze_38194) & (2 * offset_38219 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38208 = ((volatile __local
                                            float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192 +
                                                                        offset_38219)];
                            }
                            // apply reduction operation
                            {
                                float res_38209 = x_38207 + x_38208;
                                
                                x_38207 = res_38209;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192)] =
                                    x_38207;
                            }
                        }
                        offset_38219 *= 2;
                    }
                    while (slt32(skip_waves_38220,
                                 squot32(sext_i64_i32(segred_group_sizze_27599) +
                                         wave_sizze_38194 - 1,
                                         wave_sizze_38194))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38219 = skip_waves_38220 * wave_sizze_38194;
                        if (slt32(local_tid_38192 + offset_38219,
                                  sext_i64_i32(segred_group_sizze_27599)) &&
                            ((local_tid_38192 - squot32(local_tid_38192,
                                                        wave_sizze_38194) *
                              wave_sizze_38194) == 0 &&
                             (squot32(local_tid_38192, wave_sizze_38194) & (2 *
                                                                            skip_waves_38220 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38208 = ((__local
                                            float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192 +
                                                                        offset_38219)];
                            }
                            // apply reduction operation
                            {
                                float res_38209 = x_38207 + x_38208;
                                
                                x_38207 = res_38209;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38196)[sext_i32_i64(local_tid_38192)] =
                                    x_38207;
                            }
                        }
                        skip_waves_38220 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38192 == 0) {
                            ((__global float *) mem_37067)[gtid_27542 *
                                                           N_24013 +
                                                           gtid_27543] =
                                x_38207;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27599
}
__kernel void mainDetailedzisegred_large_28119(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38452_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38450_backing_aligned_1,
                                               int64_t N_24013,
                                               int64_t res_24027,
                                               int64_t num_groups_28166,
                                               __global
                                               unsigned char *res_mem_37111,
                                               __global
                                               unsigned char *mem_37178,
                                               __global
                                               unsigned char *mem_37181,
                                               int64_t groups_per_segment_38436,
                                               int64_t elements_per_thread_38437,
                                               int64_t virt_num_groups_38438,
                                               int64_t threads_per_segment_38440,
                                               __global
                                               unsigned char *group_res_arr_mem_38441,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38443)
{
    #define segred_group_sizze_28165 (mainDetailedzisegred_group_sizze_28113)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38452_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38452_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38450_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38450_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38445;
    int32_t local_tid_38446;
    int64_t group_sizze_38449;
    int32_t wave_sizze_38448;
    int32_t group_tid_38447;
    
    global_tid_38445 = get_global_id(0);
    local_tid_38446 = get_local_id(0);
    group_sizze_38449 = get_local_size(0);
    wave_sizze_38448 = LOCKSTEP_WIDTH;
    group_tid_38447 = get_group_id(0);
    
    int32_t phys_tid_28119;
    
    phys_tid_28119 = global_tid_38445;
    
    __local char *red_arr_mem_38450;
    
    red_arr_mem_38450 = (__local char *) red_arr_mem_38450_backing_0;
    
    __local char *sync_arr_mem_38452;
    
    sync_arr_mem_38452 = (__local char *) sync_arr_mem_38452_backing_1;
    
    int32_t phys_group_id_38454;
    
    phys_group_id_38454 = get_group_id(0);
    for (int32_t i_38455 = 0; i_38455 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38438) - phys_group_id_38454,
                   sext_i64_i32(num_groups_28166)); i_38455++) {
        int32_t virt_group_id_38456 = phys_group_id_38454 + i_38455 *
                sext_i64_i32(num_groups_28166);
        int32_t flat_segment_id_38457 = squot32(virt_group_id_38456,
                                                sext_i64_i32(groups_per_segment_38436));
        int64_t global_tid_38458 = srem64(sext_i32_i64(virt_group_id_38456) *
                                          segred_group_sizze_28165 +
                                          sext_i32_i64(local_tid_38446),
                                          segred_group_sizze_28165 *
                                          groups_per_segment_38436);
        int64_t gtid_28110 = sext_i32_i64(flat_segment_id_38457);
        int64_t gtid_28118;
        float x_acc_38459;
        int64_t chunk_sizze_38460;
        
        chunk_sizze_38460 = smin64(elements_per_thread_38437,
                                   sdiv_up64(res_24027 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38458)),
                                             threads_per_segment_38440));
        
        float x_28169;
        float x_28170;
        
        // neutral-initialise the accumulators
        {
            x_acc_38459 = 0.0F;
        }
        for (int64_t i_38464 = 0; i_38464 < chunk_sizze_38460; i_38464++) {
            gtid_28118 = sext_i32_i64(sext_i64_i32(global_tid_38458)) +
                threads_per_segment_38440 * i_38464;
            // apply map function
            {
                int32_t res_28173 = ((__global
                                      int32_t *) mem_37178)[gtid_28110];
                int32_t index_primexp_35358 = sext_i64_i32(gtid_28118);
                bool cond_28175 = slt32(index_primexp_35358, res_28173);
                float res_28176;
                
                if (cond_28175) {
                    int64_t i_28177 = sext_i32_i64(index_primexp_35358);
                    float res_28178 = ((__global
                                        float *) res_mem_37111)[gtid_28110 *
                                                                N_24013 +
                                                                i_28177];
                    
                    res_28176 = res_28178;
                } else {
                    res_28176 = 0.0F;
                }
                
                float res_28179 = res_28176 * res_28176;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_28169 = x_acc_38459;
                }
                // load new values
                {
                    x_28170 = res_28179;
                }
                // apply reduction operator
                {
                    float res_28171 = x_28169 + x_28170;
                    
                    // store in accumulator
                    {
                        x_acc_38459 = res_28171;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_28169 = x_acc_38459;
            ((__local
              float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446)] =
                x_28169;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38465;
        int32_t skip_waves_38466;
        
        skip_waves_38466 = 1;
        
        float x_38461;
        float x_38462;
        
        offset_38465 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38446,
                      sext_i64_i32(segred_group_sizze_28165))) {
                x_38461 = ((__local
                            float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446 +
                                                        offset_38465)];
            }
        }
        offset_38465 = 1;
        while (slt32(offset_38465, wave_sizze_38448)) {
            if (slt32(local_tid_38446 + offset_38465,
                      sext_i64_i32(segred_group_sizze_28165)) &&
                ((local_tid_38446 - squot32(local_tid_38446, wave_sizze_38448) *
                  wave_sizze_38448) & (2 * offset_38465 - 1)) == 0) {
                // read array element
                {
                    x_38462 = ((volatile __local
                                float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446 +
                                                            offset_38465)];
                }
                // apply reduction operation
                {
                    float res_38463 = x_38461 + x_38462;
                    
                    x_38461 = res_38463;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446)] =
                        x_38461;
                }
            }
            offset_38465 *= 2;
        }
        while (slt32(skip_waves_38466,
                     squot32(sext_i64_i32(segred_group_sizze_28165) +
                             wave_sizze_38448 - 1, wave_sizze_38448))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38465 = skip_waves_38466 * wave_sizze_38448;
            if (slt32(local_tid_38446 + offset_38465,
                      sext_i64_i32(segred_group_sizze_28165)) &&
                ((local_tid_38446 - squot32(local_tid_38446, wave_sizze_38448) *
                  wave_sizze_38448) == 0 && (squot32(local_tid_38446,
                                                     wave_sizze_38448) & (2 *
                                                                          skip_waves_38466 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38462 = ((__local
                                float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446 +
                                                            offset_38465)];
                }
                // apply reduction operation
                {
                    float res_38463 = x_38461 + x_38462;
                    
                    x_38461 = res_38463;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446)] =
                        x_38461;
                }
            }
            skip_waves_38466 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38446) == 0) {
                x_acc_38459 = x_38461;
            }
        }
        if (groups_per_segment_38436 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38446 == 0) {
                    ((__global float *) mem_37181)[gtid_28110] = x_acc_38459;
                }
            }
        } else {
            int32_t old_counter_38467;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38446 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38441)[sext_i32_i64(virt_group_id_38456) *
                                                        segred_group_sizze_28165] =
                        x_acc_38459;
                    mem_fence_global();
                    old_counter_38467 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38443)[sext_i32_i64(srem32(flat_segment_id_38457,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38452)[0] =
                        old_counter_38467 == groups_per_segment_38436 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38468;
            
            is_last_group_38468 = ((__local bool *) sync_arr_mem_38452)[0];
            if (is_last_group_38468) {
                if (local_tid_38446 == 0) {
                    old_counter_38467 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38443)[sext_i32_i64(srem32(flat_segment_id_38457,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38436));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38469 =
                            sdiv_up64(groups_per_segment_38436,
                                      segred_group_sizze_28165);
                    
                    x_28169 = 0.0F;
                    for (int64_t i_38470 = 0; i_38470 < read_per_thread_38469;
                         i_38470++) {
                        int64_t group_res_id_38471 =
                                sext_i32_i64(local_tid_38446) *
                                read_per_thread_38469 + i_38470;
                        int64_t index_of_group_res_38472 =
                                sext_i32_i64(flat_segment_id_38457) *
                                groups_per_segment_38436 + group_res_id_38471;
                        
                        if (slt64(group_res_id_38471,
                                  groups_per_segment_38436)) {
                            x_28170 = ((__global
                                        float *) group_res_arr_mem_38441)[index_of_group_res_38472 *
                                                                          segred_group_sizze_28165];
                            
                            float res_28171;
                            
                            res_28171 = x_28169 + x_28170;
                            x_28169 = res_28171;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446)] =
                    x_28169;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38473;
                    int32_t skip_waves_38474;
                    
                    skip_waves_38474 = 1;
                    
                    float x_38461;
                    float x_38462;
                    
                    offset_38473 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38446,
                                  sext_i64_i32(segred_group_sizze_28165))) {
                            x_38461 = ((__local
                                        float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446 +
                                                                    offset_38473)];
                        }
                    }
                    offset_38473 = 1;
                    while (slt32(offset_38473, wave_sizze_38448)) {
                        if (slt32(local_tid_38446 + offset_38473,
                                  sext_i64_i32(segred_group_sizze_28165)) &&
                            ((local_tid_38446 - squot32(local_tid_38446,
                                                        wave_sizze_38448) *
                              wave_sizze_38448) & (2 * offset_38473 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38462 = ((volatile __local
                                            float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446 +
                                                                        offset_38473)];
                            }
                            // apply reduction operation
                            {
                                float res_38463 = x_38461 + x_38462;
                                
                                x_38461 = res_38463;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446)] =
                                    x_38461;
                            }
                        }
                        offset_38473 *= 2;
                    }
                    while (slt32(skip_waves_38474,
                                 squot32(sext_i64_i32(segred_group_sizze_28165) +
                                         wave_sizze_38448 - 1,
                                         wave_sizze_38448))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38473 = skip_waves_38474 * wave_sizze_38448;
                        if (slt32(local_tid_38446 + offset_38473,
                                  sext_i64_i32(segred_group_sizze_28165)) &&
                            ((local_tid_38446 - squot32(local_tid_38446,
                                                        wave_sizze_38448) *
                              wave_sizze_38448) == 0 &&
                             (squot32(local_tid_38446, wave_sizze_38448) & (2 *
                                                                            skip_waves_38474 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38462 = ((__local
                                            float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446 +
                                                                        offset_38473)];
                            }
                            // apply reduction operation
                            {
                                float res_38463 = x_38461 + x_38462;
                                
                                x_38461 = res_38463;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38450)[sext_i32_i64(local_tid_38446)] =
                                    x_38461;
                            }
                        }
                        skip_waves_38474 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38446 == 0) {
                            ((__global float *) mem_37181)[gtid_28110] =
                                x_38461;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28165
}
__kernel void mainDetailedzisegred_large_28140(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38392_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38390_backing_aligned_1,
                                               int64_t N_24015,
                                               int64_t res_24027,
                                               int64_t num_groups_28152,
                                               __global
                                               unsigned char *images_mem_36652,
                                               __global
                                               unsigned char *mem_37178,
                                               int64_t groups_per_segment_38376,
                                               int64_t elements_per_thread_38377,
                                               int64_t virt_num_groups_38378,
                                               int64_t threads_per_segment_38380,
                                               __global
                                               unsigned char *group_res_arr_mem_38381,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38383)
{
    #define segred_group_sizze_28151 (mainDetailedzisegred_group_sizze_28134)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38392_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38392_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38390_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38390_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38385;
    int32_t local_tid_38386;
    int64_t group_sizze_38389;
    int32_t wave_sizze_38388;
    int32_t group_tid_38387;
    
    global_tid_38385 = get_global_id(0);
    local_tid_38386 = get_local_id(0);
    group_sizze_38389 = get_local_size(0);
    wave_sizze_38388 = LOCKSTEP_WIDTH;
    group_tid_38387 = get_group_id(0);
    
    int32_t phys_tid_28140;
    
    phys_tid_28140 = global_tid_38385;
    
    __local char *red_arr_mem_38390;
    
    red_arr_mem_38390 = (__local char *) red_arr_mem_38390_backing_0;
    
    __local char *sync_arr_mem_38392;
    
    sync_arr_mem_38392 = (__local char *) sync_arr_mem_38392_backing_1;
    
    int32_t phys_group_id_38394;
    
    phys_group_id_38394 = get_group_id(0);
    for (int32_t i_38395 = 0; i_38395 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38378) - phys_group_id_38394,
                   sext_i64_i32(num_groups_28152)); i_38395++) {
        int32_t virt_group_id_38396 = phys_group_id_38394 + i_38395 *
                sext_i64_i32(num_groups_28152);
        int32_t flat_segment_id_38397 = squot32(virt_group_id_38396,
                                                sext_i64_i32(groups_per_segment_38376));
        int64_t global_tid_38398 = srem64(sext_i32_i64(virt_group_id_38396) *
                                          segred_group_sizze_28151 +
                                          sext_i32_i64(local_tid_38386),
                                          segred_group_sizze_28151 *
                                          groups_per_segment_38376);
        int64_t gtid_28131 = sext_i32_i64(flat_segment_id_38397);
        int64_t gtid_28139;
        int32_t x_acc_38399;
        int64_t chunk_sizze_38400;
        
        chunk_sizze_38400 = smin64(elements_per_thread_38377,
                                   sdiv_up64(res_24027 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38398)),
                                             threads_per_segment_38380));
        
        int32_t x_28155;
        int32_t x_28156;
        
        // neutral-initialise the accumulators
        {
            x_acc_38399 = 0;
        }
        for (int64_t i_38404 = 0; i_38404 < chunk_sizze_38400; i_38404++) {
            gtid_28139 = sext_i32_i64(sext_i64_i32(global_tid_38398)) +
                threads_per_segment_38380 * i_38404;
            // apply map function
            {
                float x_28159 = ((__global
                                  float *) images_mem_36652)[gtid_28131 *
                                                             N_24015 +
                                                             gtid_28139];
                bool res_28160;
                
                res_28160 = futrts_isnan32(x_28159);
                
                bool cond_28161 = !res_28160;
                int32_t res_28162 = btoi_bool_i32(cond_28161);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_28155 = x_acc_38399;
                }
                // load new values
                {
                    x_28156 = res_28162;
                }
                // apply reduction operator
                {
                    int32_t res_28157 = add32(x_28155, x_28156);
                    
                    // store in accumulator
                    {
                        x_acc_38399 = res_28157;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_28155 = x_acc_38399;
            ((__local
              int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386)] =
                x_28155;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38405;
        int32_t skip_waves_38406;
        
        skip_waves_38406 = 1;
        
        int32_t x_38401;
        int32_t x_38402;
        
        offset_38405 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38386,
                      sext_i64_i32(segred_group_sizze_28151))) {
                x_38401 = ((__local
                            int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386 +
                                                          offset_38405)];
            }
        }
        offset_38405 = 1;
        while (slt32(offset_38405, wave_sizze_38388)) {
            if (slt32(local_tid_38386 + offset_38405,
                      sext_i64_i32(segred_group_sizze_28151)) &&
                ((local_tid_38386 - squot32(local_tid_38386, wave_sizze_38388) *
                  wave_sizze_38388) & (2 * offset_38405 - 1)) == 0) {
                // read array element
                {
                    x_38402 = ((volatile __local
                                int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386 +
                                                              offset_38405)];
                }
                // apply reduction operation
                {
                    int32_t res_38403 = add32(x_38401, x_38402);
                    
                    x_38401 = res_38403;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386)] =
                        x_38401;
                }
            }
            offset_38405 *= 2;
        }
        while (slt32(skip_waves_38406,
                     squot32(sext_i64_i32(segred_group_sizze_28151) +
                             wave_sizze_38388 - 1, wave_sizze_38388))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38405 = skip_waves_38406 * wave_sizze_38388;
            if (slt32(local_tid_38386 + offset_38405,
                      sext_i64_i32(segred_group_sizze_28151)) &&
                ((local_tid_38386 - squot32(local_tid_38386, wave_sizze_38388) *
                  wave_sizze_38388) == 0 && (squot32(local_tid_38386,
                                                     wave_sizze_38388) & (2 *
                                                                          skip_waves_38406 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38402 = ((__local
                                int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386 +
                                                              offset_38405)];
                }
                // apply reduction operation
                {
                    int32_t res_38403 = add32(x_38401, x_38402);
                    
                    x_38401 = res_38403;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386)] =
                        x_38401;
                }
            }
            skip_waves_38406 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38386) == 0) {
                x_acc_38399 = x_38401;
            }
        }
        if (groups_per_segment_38376 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38386 == 0) {
                    ((__global int32_t *) mem_37178)[gtid_28131] = x_acc_38399;
                }
            }
        } else {
            int32_t old_counter_38407;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38386 == 0) {
                    ((__global
                      int32_t *) group_res_arr_mem_38381)[sext_i32_i64(virt_group_id_38396) *
                                                          segred_group_sizze_28151] =
                        x_acc_38399;
                    mem_fence_global();
                    old_counter_38407 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38383)[sext_i32_i64(srem32(flat_segment_id_38397,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38392)[0] =
                        old_counter_38407 == groups_per_segment_38376 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38408;
            
            is_last_group_38408 = ((__local bool *) sync_arr_mem_38392)[0];
            if (is_last_group_38408) {
                if (local_tid_38386 == 0) {
                    old_counter_38407 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38383)[sext_i32_i64(srem32(flat_segment_id_38397,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38376));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38409 =
                            sdiv_up64(groups_per_segment_38376,
                                      segred_group_sizze_28151);
                    
                    x_28155 = 0;
                    for (int64_t i_38410 = 0; i_38410 < read_per_thread_38409;
                         i_38410++) {
                        int64_t group_res_id_38411 =
                                sext_i32_i64(local_tid_38386) *
                                read_per_thread_38409 + i_38410;
                        int64_t index_of_group_res_38412 =
                                sext_i32_i64(flat_segment_id_38397) *
                                groups_per_segment_38376 + group_res_id_38411;
                        
                        if (slt64(group_res_id_38411,
                                  groups_per_segment_38376)) {
                            x_28156 = ((__global
                                        int32_t *) group_res_arr_mem_38381)[index_of_group_res_38412 *
                                                                            segred_group_sizze_28151];
                            
                            int32_t res_28157;
                            
                            res_28157 = add32(x_28155, x_28156);
                            x_28155 = res_28157;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386)] =
                    x_28155;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38413;
                    int32_t skip_waves_38414;
                    
                    skip_waves_38414 = 1;
                    
                    int32_t x_38401;
                    int32_t x_38402;
                    
                    offset_38413 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38386,
                                  sext_i64_i32(segred_group_sizze_28151))) {
                            x_38401 = ((__local
                                        int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386 +
                                                                      offset_38413)];
                        }
                    }
                    offset_38413 = 1;
                    while (slt32(offset_38413, wave_sizze_38388)) {
                        if (slt32(local_tid_38386 + offset_38413,
                                  sext_i64_i32(segred_group_sizze_28151)) &&
                            ((local_tid_38386 - squot32(local_tid_38386,
                                                        wave_sizze_38388) *
                              wave_sizze_38388) & (2 * offset_38413 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38402 = ((volatile __local
                                            int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386 +
                                                                          offset_38413)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38403 = add32(x_38401, x_38402);
                                
                                x_38401 = res_38403;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386)] =
                                    x_38401;
                            }
                        }
                        offset_38413 *= 2;
                    }
                    while (slt32(skip_waves_38414,
                                 squot32(sext_i64_i32(segred_group_sizze_28151) +
                                         wave_sizze_38388 - 1,
                                         wave_sizze_38388))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38413 = skip_waves_38414 * wave_sizze_38388;
                        if (slt32(local_tid_38386 + offset_38413,
                                  sext_i64_i32(segred_group_sizze_28151)) &&
                            ((local_tid_38386 - squot32(local_tid_38386,
                                                        wave_sizze_38388) *
                              wave_sizze_38388) == 0 &&
                             (squot32(local_tid_38386, wave_sizze_38388) & (2 *
                                                                            skip_waves_38414 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38402 = ((__local
                                            int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386 +
                                                                          offset_38413)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_38403 = add32(x_38401, x_38402);
                                
                                x_38401 = res_38403;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_38390)[sext_i32_i64(local_tid_38386)] =
                                    x_38401;
                            }
                        }
                        skip_waves_38414 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38386 == 0) {
                            ((__global int32_t *) mem_37178)[gtid_28131] =
                                x_38401;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28151
}
__kernel void mainDetailedzisegred_large_28291(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38561_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38559_backing_aligned_1,
                                               int64_t N_24013,
                                               int64_t res_24375,
                                               int64_t num_groups_28309,
                                               __global
                                               unsigned char *res_mem_37111,
                                               __global
                                               unsigned char *res_mem_37190,
                                               __global
                                               unsigned char *res_mem_37191,
                                               __global
                                               unsigned char *mem_37240,
                                               int64_t groups_per_segment_38545,
                                               int64_t elements_per_thread_38546,
                                               int64_t virt_num_groups_38547,
                                               int64_t threads_per_segment_38549,
                                               __global
                                               unsigned char *group_res_arr_mem_38550,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38552)
{
    #define segred_group_sizze_28308 (mainDetailedzisegred_group_sizze_28285)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38561_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_38561_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38559_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38559_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38554;
    int32_t local_tid_38555;
    int64_t group_sizze_38558;
    int32_t wave_sizze_38557;
    int32_t group_tid_38556;
    
    global_tid_38554 = get_global_id(0);
    local_tid_38555 = get_local_id(0);
    group_sizze_38558 = get_local_size(0);
    wave_sizze_38557 = LOCKSTEP_WIDTH;
    group_tid_38556 = get_group_id(0);
    
    int32_t phys_tid_28291;
    
    phys_tid_28291 = global_tid_38554;
    
    __local char *red_arr_mem_38559;
    
    red_arr_mem_38559 = (__local char *) red_arr_mem_38559_backing_0;
    
    __local char *sync_arr_mem_38561;
    
    sync_arr_mem_38561 = (__local char *) sync_arr_mem_38561_backing_1;
    
    int32_t phys_group_id_38563;
    
    phys_group_id_38563 = get_group_id(0);
    for (int32_t i_38564 = 0; i_38564 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38547) - phys_group_id_38563,
                   sext_i64_i32(num_groups_28309)); i_38564++) {
        int32_t virt_group_id_38565 = phys_group_id_38563 + i_38564 *
                sext_i64_i32(num_groups_28309);
        int32_t flat_segment_id_38566 = squot32(virt_group_id_38565,
                                                sext_i64_i32(groups_per_segment_38545));
        int64_t global_tid_38567 = srem64(sext_i32_i64(virt_group_id_38565) *
                                          segred_group_sizze_28308 +
                                          sext_i32_i64(local_tid_38555),
                                          segred_group_sizze_28308 *
                                          groups_per_segment_38545);
        int64_t gtid_28282 = sext_i32_i64(flat_segment_id_38566);
        int64_t gtid_28290;
        float x_acc_38568;
        int64_t chunk_sizze_38569;
        
        chunk_sizze_38569 = smin64(elements_per_thread_38546,
                                   sdiv_up64(res_24375 -
                                             sext_i32_i64(sext_i64_i32(global_tid_38567)),
                                             threads_per_segment_38549));
        
        float x_28312;
        float x_28313;
        
        // neutral-initialise the accumulators
        {
            x_acc_38568 = 0.0F;
        }
        for (int64_t i_38573 = 0; i_38573 < chunk_sizze_38569; i_38573++) {
            gtid_28290 = sext_i32_i64(sext_i64_i32(global_tid_38567)) +
                threads_per_segment_38549 * i_38573;
            // apply map function
            {
                int32_t x_28317 = ((__global
                                    int32_t *) res_mem_37190)[gtid_28282];
                int32_t index_primexp_35363 = sext_i64_i32(gtid_28290);
                bool cond_28319 = slt32(index_primexp_35363, x_28317);
                float res_28320;
                
                if (cond_28319) {
                    int32_t x_28316 = ((__global
                                        int32_t *) res_mem_37191)[gtid_28282];
                    int32_t x_28321 = add32(x_28316, index_primexp_35363);
                    int32_t x_28322 = sub32(x_28321, x_28317);
                    int32_t i_28323 = add32(1, x_28322);
                    int64_t i_28324 = sext_i32_i64(i_28323);
                    float res_28325 = ((__global
                                        float *) res_mem_37111)[gtid_28282 *
                                                                N_24013 +
                                                                i_28324];
                    
                    res_28320 = res_28325;
                } else {
                    res_28320 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_28312 = x_acc_38568;
                }
                // load new values
                {
                    x_28313 = res_28320;
                }
                // apply reduction operator
                {
                    float res_28314 = x_28312 + x_28313;
                    
                    // store in accumulator
                    {
                        x_acc_38568 = res_28314;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_28312 = x_acc_38568;
            ((__local
              float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555)] =
                x_28312;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_38574;
        int32_t skip_waves_38575;
        
        skip_waves_38575 = 1;
        
        float x_38570;
        float x_38571;
        
        offset_38574 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_38555,
                      sext_i64_i32(segred_group_sizze_28308))) {
                x_38570 = ((__local
                            float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555 +
                                                        offset_38574)];
            }
        }
        offset_38574 = 1;
        while (slt32(offset_38574, wave_sizze_38557)) {
            if (slt32(local_tid_38555 + offset_38574,
                      sext_i64_i32(segred_group_sizze_28308)) &&
                ((local_tid_38555 - squot32(local_tid_38555, wave_sizze_38557) *
                  wave_sizze_38557) & (2 * offset_38574 - 1)) == 0) {
                // read array element
                {
                    x_38571 = ((volatile __local
                                float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555 +
                                                            offset_38574)];
                }
                // apply reduction operation
                {
                    float res_38572 = x_38570 + x_38571;
                    
                    x_38570 = res_38572;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555)] =
                        x_38570;
                }
            }
            offset_38574 *= 2;
        }
        while (slt32(skip_waves_38575,
                     squot32(sext_i64_i32(segred_group_sizze_28308) +
                             wave_sizze_38557 - 1, wave_sizze_38557))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_38574 = skip_waves_38575 * wave_sizze_38557;
            if (slt32(local_tid_38555 + offset_38574,
                      sext_i64_i32(segred_group_sizze_28308)) &&
                ((local_tid_38555 - squot32(local_tid_38555, wave_sizze_38557) *
                  wave_sizze_38557) == 0 && (squot32(local_tid_38555,
                                                     wave_sizze_38557) & (2 *
                                                                          skip_waves_38575 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_38571 = ((__local
                                float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555 +
                                                            offset_38574)];
                }
                // apply reduction operation
                {
                    float res_38572 = x_38570 + x_38571;
                    
                    x_38570 = res_38572;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555)] =
                        x_38570;
                }
            }
            skip_waves_38575 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_38555) == 0) {
                x_acc_38568 = x_38570;
            }
        }
        if (groups_per_segment_38545 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38555 == 0) {
                    ((__global float *) mem_37240)[gtid_28282] = x_acc_38568;
                }
            }
        } else {
            int32_t old_counter_38576;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38555 == 0) {
                    ((__global
                      float *) group_res_arr_mem_38550)[sext_i32_i64(virt_group_id_38565) *
                                                        segred_group_sizze_28308] =
                        x_acc_38568;
                    mem_fence_global();
                    old_counter_38576 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38552)[sext_i32_i64(srem32(flat_segment_id_38566,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38561)[0] =
                        old_counter_38576 == groups_per_segment_38545 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38577;
            
            is_last_group_38577 = ((__local bool *) sync_arr_mem_38561)[0];
            if (is_last_group_38577) {
                if (local_tid_38555 == 0) {
                    old_counter_38576 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38552)[sext_i32_i64(srem32(flat_segment_id_38566,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38545));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38578 =
                            sdiv_up64(groups_per_segment_38545,
                                      segred_group_sizze_28308);
                    
                    x_28312 = 0.0F;
                    for (int64_t i_38579 = 0; i_38579 < read_per_thread_38578;
                         i_38579++) {
                        int64_t group_res_id_38580 =
                                sext_i32_i64(local_tid_38555) *
                                read_per_thread_38578 + i_38579;
                        int64_t index_of_group_res_38581 =
                                sext_i32_i64(flat_segment_id_38566) *
                                groups_per_segment_38545 + group_res_id_38580;
                        
                        if (slt64(group_res_id_38580,
                                  groups_per_segment_38545)) {
                            x_28313 = ((__global
                                        float *) group_res_arr_mem_38550)[index_of_group_res_38581 *
                                                                          segred_group_sizze_28308];
                            
                            float res_28314;
                            
                            res_28314 = x_28312 + x_28313;
                            x_28312 = res_28314;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555)] =
                    x_28312;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38582;
                    int32_t skip_waves_38583;
                    
                    skip_waves_38583 = 1;
                    
                    float x_38570;
                    float x_38571;
                    
                    offset_38582 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38555,
                                  sext_i64_i32(segred_group_sizze_28308))) {
                            x_38570 = ((__local
                                        float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555 +
                                                                    offset_38582)];
                        }
                    }
                    offset_38582 = 1;
                    while (slt32(offset_38582, wave_sizze_38557)) {
                        if (slt32(local_tid_38555 + offset_38582,
                                  sext_i64_i32(segred_group_sizze_28308)) &&
                            ((local_tid_38555 - squot32(local_tid_38555,
                                                        wave_sizze_38557) *
                              wave_sizze_38557) & (2 * offset_38582 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38571 = ((volatile __local
                                            float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555 +
                                                                        offset_38582)];
                            }
                            // apply reduction operation
                            {
                                float res_38572 = x_38570 + x_38571;
                                
                                x_38570 = res_38572;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555)] =
                                    x_38570;
                            }
                        }
                        offset_38582 *= 2;
                    }
                    while (slt32(skip_waves_38583,
                                 squot32(sext_i64_i32(segred_group_sizze_28308) +
                                         wave_sizze_38557 - 1,
                                         wave_sizze_38557))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38582 = skip_waves_38583 * wave_sizze_38557;
                        if (slt32(local_tid_38555 + offset_38582,
                                  sext_i64_i32(segred_group_sizze_28308)) &&
                            ((local_tid_38555 - squot32(local_tid_38555,
                                                        wave_sizze_38557) *
                              wave_sizze_38557) == 0 &&
                             (squot32(local_tid_38555, wave_sizze_38557) & (2 *
                                                                            skip_waves_38583 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38571 = ((__local
                                            float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555 +
                                                                        offset_38582)];
                            }
                            // apply reduction operation
                            {
                                float res_38572 = x_38570 + x_38571;
                                
                                x_38570 = res_38572;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_38559)[sext_i32_i64(local_tid_38555)] =
                                    x_38570;
                            }
                        }
                        skip_waves_38583 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38555 == 0) {
                            ((__global float *) mem_37240)[gtid_28282] =
                                x_38570;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28308
}
__kernel void mainDetailedzisegred_large_29935(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_38802_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38800_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_38798_backing_aligned_2,
                                               __local volatile
                                               int64_t *red_arr_mem_38796_backing_aligned_3,
                                               int64_t iota32_arg_24397,
                                               int64_t num_groups_30108,
                                               __global
                                               unsigned char *mem_37246,
                                               __global
                                               unsigned char *mem_37454,
                                               __global
                                               unsigned char *mem_37456,
                                               __global
                                               unsigned char *mem_37460,
                                               __global
                                               unsigned char *mem_37463,
                                               __global
                                               unsigned char *mem_37465,
                                               __global
                                               unsigned char *mem_37467,
                                               __global
                                               unsigned char *mem_37470,
                                               int64_t groups_per_segment_38778,
                                               int64_t elements_per_thread_38779,
                                               int64_t virt_num_groups_38780,
                                               __global
                                               unsigned char *group_res_arr_mem_38783,
                                               __global
                                               unsigned char *group_res_arr_mem_38785,
                                               __global
                                               unsigned char *group_res_arr_mem_38787,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_38789)
{
    #define segred_group_sizze_30107 (mainDetailedzisegred_group_sizze_29929)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_38802_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_38802_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38800_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38800_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38798_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38798_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_38796_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38796_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38791;
    int32_t local_tid_38792;
    int64_t group_sizze_38795;
    int32_t wave_sizze_38794;
    int32_t group_tid_38793;
    
    global_tid_38791 = get_global_id(0);
    local_tid_38792 = get_local_id(0);
    group_sizze_38795 = get_local_size(0);
    wave_sizze_38794 = LOCKSTEP_WIDTH;
    group_tid_38793 = get_group_id(0);
    
    int32_t phys_tid_29935;
    
    phys_tid_29935 = global_tid_38791;
    
    __local char *red_arr_mem_38796;
    
    red_arr_mem_38796 = (__local char *) red_arr_mem_38796_backing_0;
    
    __local char *red_arr_mem_38798;
    
    red_arr_mem_38798 = (__local char *) red_arr_mem_38798_backing_1;
    
    __local char *red_arr_mem_38800;
    
    red_arr_mem_38800 = (__local char *) red_arr_mem_38800_backing_2;
    
    __local char *sync_arr_mem_38802;
    
    sync_arr_mem_38802 = (__local char *) sync_arr_mem_38802_backing_3;
    
    int32_t phys_group_id_38804;
    
    phys_group_id_38804 = get_group_id(0);
    for (int32_t i_38805 = 0; i_38805 <
         sdiv_up32(sext_i64_i32(virt_num_groups_38780) - phys_group_id_38804,
                   sext_i64_i32(num_groups_30108)); i_38805++) {
        int32_t virt_group_id_38806 = phys_group_id_38804 + i_38805 *
                sext_i64_i32(num_groups_30108);
        int32_t flat_segment_id_38807 = squot32(virt_group_id_38806,
                                                sext_i64_i32(groups_per_segment_38778));
        int64_t global_tid_38808 = srem64(sext_i32_i64(virt_group_id_38806) *
                                          segred_group_sizze_30107 +
                                          sext_i32_i64(local_tid_38792),
                                          segred_group_sizze_30107 *
                                          groups_per_segment_38778);
        int64_t gtid_29926 = sext_i32_i64(flat_segment_id_38807);
        int64_t gtid_29934;
        bool x_acc_38809;
        int32_t x_acc_38810;
        float x_acc_38811;
        int64_t chunk_sizze_38812;
        int64_t starting_point_38813;
        
        starting_point_38813 = sext_i32_i64(sext_i64_i32(global_tid_38808)) *
            elements_per_thread_38779;
        
        int64_t remaining_elements_38814;
        
        remaining_elements_38814 = iota32_arg_24397 - starting_point_38813;
        if (sle64(remaining_elements_38814, 0) || sle64(iota32_arg_24397,
                                                        starting_point_38813)) {
            chunk_sizze_38812 = 0;
        } else {
            if (slt64(iota32_arg_24397,
                      (sext_i32_i64(sext_i64_i32(global_tid_38808)) + 1) *
                      elements_per_thread_38779)) {
                chunk_sizze_38812 = iota32_arg_24397 -
                    sext_i32_i64(sext_i64_i32(global_tid_38808)) *
                    elements_per_thread_38779;
            } else {
                chunk_sizze_38812 = elements_per_thread_38779;
            }
        }
        
        bool x_30114;
        int32_t x_30115;
        float x_30116;
        bool x_30117;
        int32_t x_30118;
        float x_30119;
        
        // neutral-initialise the accumulators
        {
            x_acc_38809 = 0;
            x_acc_38810 = -1;
            x_acc_38811 = 0.0F;
        }
        for (int64_t i_38829 = 0; i_38829 < elements_per_thread_38779;
             i_38829++) {
            gtid_29934 = sext_i32_i64(local_tid_38792) +
                (sext_i32_i64(squot32(sext_i64_i32(global_tid_38808),
                                      sext_i64_i32(segred_group_sizze_30107))) *
                 elements_per_thread_38779 + i_38829) *
                segred_group_sizze_30107;
            if (slt64(gtid_29934, iota32_arg_24397)) {
                // apply map function
                {
                    int32_t y_30128 = ((__global
                                        int32_t *) mem_37456)[gtid_29926];
                    float y_30129 = ((__global float *) mem_37454)[gtid_29926];
                    float x_30133 = ((__global float *) mem_37460)[gtid_29926 *
                                                                   iota32_arg_24397 +
                                                                   gtid_29934];
                    float x_30134 = ((__global float *) mem_37246)[gtid_29934];
                    int32_t index_primexp_35383 = sext_i64_i32(gtid_29934);
                    float res_30137 = x_30133 / y_30129;
                    bool cond_30138 = slt32(index_primexp_35383, y_30128);
                    bool res_30139;
                    
                    res_30139 = futrts_isnan32(res_30137);
                    
                    bool res_30140 = !res_30139;
                    bool x_30141 = cond_30138 && res_30140;
                    float res_30142 = (float) fabs(res_30137);
                    bool res_30143 = x_30134 < res_30142;
                    bool x_30144 = x_30141 && res_30143;
                    float res_30145;
                    
                    if (cond_30138) {
                        res_30145 = res_30137;
                    } else {
                        res_30145 = 0.0F;
                    }
                    // save map-out results
                    {
                        ((__global float *) mem_37470)[gtid_29926 *
                                                       iota32_arg_24397 +
                                                       gtid_29934] = res_30137;
                    }
                    // load accumulator
                    {
                        x_30114 = x_acc_38809;
                        x_30115 = x_acc_38810;
                        x_30116 = x_acc_38811;
                    }
                    // load new values
                    {
                        x_30117 = x_30144;
                        x_30118 = index_primexp_35383;
                        x_30119 = res_30145;
                    }
                    // apply reduction operator
                    {
                        bool res_30120;
                        int32_t res_30121;
                        
                        if (x_30114) {
                            res_30120 = x_30114;
                            res_30121 = x_30115;
                        } else {
                            bool x_30122 = x_30117 && x_30117;
                            bool x_30123 = !x_30117;
                            bool y_30124 = x_30114 && x_30123;
                            bool res_30125 = x_30122 || y_30124;
                            int32_t res_30126;
                            
                            if (x_30117) {
                                res_30126 = x_30118;
                            } else {
                                res_30126 = x_30115;
                            }
                            res_30120 = res_30125;
                            res_30121 = res_30126;
                        }
                        
                        float res_30127 = x_30116 + x_30119;
                        
                        // store in accumulator
                        {
                            x_acc_38809 = res_30120;
                            x_acc_38810 = res_30121;
                            x_acc_38811 = res_30127;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_30114 = x_acc_38809;
                x_30115 = x_acc_38810;
                x_30116 = x_acc_38811;
                ((__local
                  bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792)] =
                    x_30114;
                ((__local
                  int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792)] =
                    x_30115;
                ((__local
                  float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792)] =
                    x_30116;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_38830;
            int32_t skip_waves_38831;
            
            skip_waves_38831 = 1;
            
            bool x_38815;
            int32_t x_38816;
            float x_38817;
            bool x_38818;
            int32_t x_38819;
            float x_38820;
            
            offset_38830 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38792,
                          sext_i64_i32(segred_group_sizze_30107))) {
                    x_38815 = ((__local
                                bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792 +
                                                           offset_38830)];
                    x_38816 = ((__local
                                int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792 +
                                                              offset_38830)];
                    x_38817 = ((__local
                                float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792 +
                                                            offset_38830)];
                }
            }
            offset_38830 = 1;
            while (slt32(offset_38830, wave_sizze_38794)) {
                if (slt32(local_tid_38792 + offset_38830,
                          sext_i64_i32(segred_group_sizze_30107)) &&
                    ((local_tid_38792 - squot32(local_tid_38792,
                                                wave_sizze_38794) *
                      wave_sizze_38794) & (2 * offset_38830 - 1)) == 0) {
                    // read array element
                    {
                        x_38818 = ((volatile __local
                                    bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792 +
                                                               offset_38830)];
                        x_38819 = ((volatile __local
                                    int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792 +
                                                                  offset_38830)];
                        x_38820 = ((volatile __local
                                    float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792 +
                                                                offset_38830)];
                    }
                    // apply reduction operation
                    {
                        bool res_38821;
                        int32_t res_38822;
                        
                        if (x_38815) {
                            res_38821 = x_38815;
                            res_38822 = x_38816;
                        } else {
                            bool x_38823 = x_38818 && x_38818;
                            bool x_38824 = !x_38818;
                            bool y_38825 = x_38815 && x_38824;
                            bool res_38826 = x_38823 || y_38825;
                            int32_t res_38827;
                            
                            if (x_38818) {
                                res_38827 = x_38819;
                            } else {
                                res_38827 = x_38816;
                            }
                            res_38821 = res_38826;
                            res_38822 = res_38827;
                        }
                        
                        float res_38828 = x_38817 + x_38820;
                        
                        x_38815 = res_38821;
                        x_38816 = res_38822;
                        x_38817 = res_38828;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792)] =
                            x_38815;
                        ((volatile __local
                          int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792)] =
                            x_38816;
                        ((volatile __local
                          float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792)] =
                            x_38817;
                    }
                }
                offset_38830 *= 2;
            }
            while (slt32(skip_waves_38831,
                         squot32(sext_i64_i32(segred_group_sizze_30107) +
                                 wave_sizze_38794 - 1, wave_sizze_38794))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38830 = skip_waves_38831 * wave_sizze_38794;
                if (slt32(local_tid_38792 + offset_38830,
                          sext_i64_i32(segred_group_sizze_30107)) &&
                    ((local_tid_38792 - squot32(local_tid_38792,
                                                wave_sizze_38794) *
                      wave_sizze_38794) == 0 && (squot32(local_tid_38792,
                                                         wave_sizze_38794) &
                                                 (2 * skip_waves_38831 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38818 = ((__local
                                    bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792 +
                                                               offset_38830)];
                        x_38819 = ((__local
                                    int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792 +
                                                                  offset_38830)];
                        x_38820 = ((__local
                                    float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792 +
                                                                offset_38830)];
                    }
                    // apply reduction operation
                    {
                        bool res_38821;
                        int32_t res_38822;
                        
                        if (x_38815) {
                            res_38821 = x_38815;
                            res_38822 = x_38816;
                        } else {
                            bool x_38823 = x_38818 && x_38818;
                            bool x_38824 = !x_38818;
                            bool y_38825 = x_38815 && x_38824;
                            bool res_38826 = x_38823 || y_38825;
                            int32_t res_38827;
                            
                            if (x_38818) {
                                res_38827 = x_38819;
                            } else {
                                res_38827 = x_38816;
                            }
                            res_38821 = res_38826;
                            res_38822 = res_38827;
                        }
                        
                        float res_38828 = x_38817 + x_38820;
                        
                        x_38815 = res_38821;
                        x_38816 = res_38822;
                        x_38817 = res_38828;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792)] =
                            x_38815;
                        ((__local
                          int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792)] =
                            x_38816;
                        ((__local
                          float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792)] =
                            x_38817;
                    }
                }
                skip_waves_38831 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_38792) == 0) {
                    x_acc_38809 = x_38815;
                    x_acc_38810 = x_38816;
                    x_acc_38811 = x_38817;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_38792) == 0)) {
                    x_acc_38809 = 0;
                    x_acc_38810 = -1;
                    x_acc_38811 = 0.0F;
                }
            }
        }
        x_30114 = x_acc_38809;
        x_30115 = x_acc_38810;
        x_30116 = x_acc_38811;
        if (groups_per_segment_38778 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_38792 == 0) {
                    ((__global bool *) mem_37463)[gtid_29926] = x_acc_38809;
                    ((__global int32_t *) mem_37465)[gtid_29926] = x_acc_38810;
                    ((__global float *) mem_37467)[gtid_29926] = x_acc_38811;
                }
            }
        } else {
            int32_t old_counter_38832;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_38792 == 0) {
                    ((__global
                      bool *) group_res_arr_mem_38783)[sext_i32_i64(virt_group_id_38806) *
                                                       segred_group_sizze_30107] =
                        x_acc_38809;
                    ((__global
                      int32_t *) group_res_arr_mem_38785)[sext_i32_i64(virt_group_id_38806) *
                                                          segred_group_sizze_30107] =
                        x_acc_38810;
                    ((__global
                      float *) group_res_arr_mem_38787)[sext_i32_i64(virt_group_id_38806) *
                                                        segred_group_sizze_30107] =
                        x_acc_38811;
                    mem_fence_global();
                    old_counter_38832 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38789)[sext_i32_i64(srem32(flat_segment_id_38807,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_38802)[0] =
                        old_counter_38832 == groups_per_segment_38778 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_38833;
            
            is_last_group_38833 = ((__local bool *) sync_arr_mem_38802)[0];
            if (is_last_group_38833) {
                if (local_tid_38792 == 0) {
                    old_counter_38832 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_38789)[sext_i32_i64(srem32(flat_segment_id_38807,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_38778));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_38834 =
                            sdiv_up64(groups_per_segment_38778,
                                      segred_group_sizze_30107);
                    
                    x_30114 = 0;
                    x_30115 = -1;
                    x_30116 = 0.0F;
                    for (int64_t i_38835 = 0; i_38835 < read_per_thread_38834;
                         i_38835++) {
                        int64_t group_res_id_38836 =
                                sext_i32_i64(local_tid_38792) *
                                read_per_thread_38834 + i_38835;
                        int64_t index_of_group_res_38837 =
                                sext_i32_i64(flat_segment_id_38807) *
                                groups_per_segment_38778 + group_res_id_38836;
                        
                        if (slt64(group_res_id_38836,
                                  groups_per_segment_38778)) {
                            x_30117 = ((__global
                                        bool *) group_res_arr_mem_38783)[index_of_group_res_38837 *
                                                                         segred_group_sizze_30107];
                            x_30118 = ((__global
                                        int32_t *) group_res_arr_mem_38785)[index_of_group_res_38837 *
                                                                            segred_group_sizze_30107];
                            x_30119 = ((__global
                                        float *) group_res_arr_mem_38787)[index_of_group_res_38837 *
                                                                          segred_group_sizze_30107];
                            
                            bool res_30120;
                            int32_t res_30121;
                            
                            if (x_30114) {
                                res_30120 = x_30114;
                                res_30121 = x_30115;
                            } else {
                                bool x_30122 = x_30117 && x_30117;
                                bool x_30123 = !x_30117;
                                bool y_30124 = x_30114 && x_30123;
                                bool res_30125 = x_30122 || y_30124;
                                int32_t res_30126;
                                
                                if (x_30117) {
                                    res_30126 = x_30118;
                                } else {
                                    res_30126 = x_30115;
                                }
                                res_30120 = res_30125;
                                res_30121 = res_30126;
                            }
                            
                            float res_30127 = x_30116 + x_30119;
                            
                            x_30114 = res_30120;
                            x_30115 = res_30121;
                            x_30116 = res_30127;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792)] =
                    x_30114;
                ((__local
                  int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792)] =
                    x_30115;
                ((__local
                  float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792)] =
                    x_30116;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_38838;
                    int32_t skip_waves_38839;
                    
                    skip_waves_38839 = 1;
                    
                    bool x_38815;
                    int32_t x_38816;
                    float x_38817;
                    bool x_38818;
                    int32_t x_38819;
                    float x_38820;
                    
                    offset_38838 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_38792,
                                  sext_i64_i32(segred_group_sizze_30107))) {
                            x_38815 = ((__local
                                        bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792 +
                                                                   offset_38838)];
                            x_38816 = ((__local
                                        int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792 +
                                                                      offset_38838)];
                            x_38817 = ((__local
                                        float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792 +
                                                                    offset_38838)];
                        }
                    }
                    offset_38838 = 1;
                    while (slt32(offset_38838, wave_sizze_38794)) {
                        if (slt32(local_tid_38792 + offset_38838,
                                  sext_i64_i32(segred_group_sizze_30107)) &&
                            ((local_tid_38792 - squot32(local_tid_38792,
                                                        wave_sizze_38794) *
                              wave_sizze_38794) & (2 * offset_38838 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_38818 = ((volatile __local
                                            bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792 +
                                                                       offset_38838)];
                                x_38819 = ((volatile __local
                                            int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792 +
                                                                          offset_38838)];
                                x_38820 = ((volatile __local
                                            float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792 +
                                                                        offset_38838)];
                            }
                            // apply reduction operation
                            {
                                bool res_38821;
                                int32_t res_38822;
                                
                                if (x_38815) {
                                    res_38821 = x_38815;
                                    res_38822 = x_38816;
                                } else {
                                    bool x_38823 = x_38818 && x_38818;
                                    bool x_38824 = !x_38818;
                                    bool y_38825 = x_38815 && x_38824;
                                    bool res_38826 = x_38823 || y_38825;
                                    int32_t res_38827;
                                    
                                    if (x_38818) {
                                        res_38827 = x_38819;
                                    } else {
                                        res_38827 = x_38816;
                                    }
                                    res_38821 = res_38826;
                                    res_38822 = res_38827;
                                }
                                
                                float res_38828 = x_38817 + x_38820;
                                
                                x_38815 = res_38821;
                                x_38816 = res_38822;
                                x_38817 = res_38828;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792)] =
                                    x_38815;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792)] =
                                    x_38816;
                                ((volatile __local
                                  float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792)] =
                                    x_38817;
                            }
                        }
                        offset_38838 *= 2;
                    }
                    while (slt32(skip_waves_38839,
                                 squot32(sext_i64_i32(segred_group_sizze_30107) +
                                         wave_sizze_38794 - 1,
                                         wave_sizze_38794))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_38838 = skip_waves_38839 * wave_sizze_38794;
                        if (slt32(local_tid_38792 + offset_38838,
                                  sext_i64_i32(segred_group_sizze_30107)) &&
                            ((local_tid_38792 - squot32(local_tid_38792,
                                                        wave_sizze_38794) *
                              wave_sizze_38794) == 0 &&
                             (squot32(local_tid_38792, wave_sizze_38794) & (2 *
                                                                            skip_waves_38839 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_38818 = ((__local
                                            bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792 +
                                                                       offset_38838)];
                                x_38819 = ((__local
                                            int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792 +
                                                                          offset_38838)];
                                x_38820 = ((__local
                                            float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792 +
                                                                        offset_38838)];
                            }
                            // apply reduction operation
                            {
                                bool res_38821;
                                int32_t res_38822;
                                
                                if (x_38815) {
                                    res_38821 = x_38815;
                                    res_38822 = x_38816;
                                } else {
                                    bool x_38823 = x_38818 && x_38818;
                                    bool x_38824 = !x_38818;
                                    bool y_38825 = x_38815 && x_38824;
                                    bool res_38826 = x_38823 || y_38825;
                                    int32_t res_38827;
                                    
                                    if (x_38818) {
                                        res_38827 = x_38819;
                                    } else {
                                        res_38827 = x_38816;
                                    }
                                    res_38821 = res_38826;
                                    res_38822 = res_38827;
                                }
                                
                                float res_38828 = x_38817 + x_38820;
                                
                                x_38815 = res_38821;
                                x_38816 = res_38822;
                                x_38817 = res_38828;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_38796)[sext_i32_i64(local_tid_38792)] =
                                    x_38815;
                                ((__local
                                  int32_t *) red_arr_mem_38798)[sext_i32_i64(local_tid_38792)] =
                                    x_38816;
                                ((__local
                                  float *) red_arr_mem_38800)[sext_i32_i64(local_tid_38792)] =
                                    x_38817;
                            }
                        }
                        skip_waves_38839 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_38792 == 0) {
                            ((__global bool *) mem_37463)[gtid_29926] = x_38815;
                            ((__global int32_t *) mem_37465)[gtid_29926] =
                                x_38816;
                            ((__global float *) mem_37467)[gtid_29926] =
                                x_38817;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_30107
}
__kernel void mainDetailedzisegred_nonseg_28209(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_38495_backing_aligned_0,
                                                __local volatile
                                                int64_t *sync_arr_mem_38493_backing_aligned_1,
                                                int64_t m_24014,
                                                int64_t num_groups_28204,
                                                __global
                                                unsigned char *res_mem_37190,
                                                __global
                                                unsigned char *mem_37195,
                                                __global
                                                unsigned char *mainDetailedzicounter_mem_38483,
                                                __global
                                                unsigned char *group_res_arr_mem_38485,
                                                int64_t num_threads_38487)
{
    #define segred_group_sizze_28202 (mainDetailedzisegred_group_sizze_28201)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38495_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38495_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_38493_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_38493_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38488;
    int32_t local_tid_38489;
    int64_t group_sizze_38492;
    int32_t wave_sizze_38491;
    int32_t group_tid_38490;
    
    global_tid_38488 = get_global_id(0);
    local_tid_38489 = get_local_id(0);
    group_sizze_38492 = get_local_size(0);
    wave_sizze_38491 = LOCKSTEP_WIDTH;
    group_tid_38490 = get_group_id(0);
    
    int32_t phys_tid_28209;
    
    phys_tid_28209 = global_tid_38488;
    
    __local char *sync_arr_mem_38493;
    
    sync_arr_mem_38493 = (__local char *) sync_arr_mem_38493_backing_0;
    
    __local char *red_arr_mem_38495;
    
    red_arr_mem_38495 = (__local char *) red_arr_mem_38495_backing_1;
    
    int64_t dummy_28207;
    
    dummy_28207 = 0;
    
    int64_t gtid_28208;
    
    gtid_28208 = 0;
    
    int32_t x_acc_38497;
    int64_t chunk_sizze_38498;
    
    chunk_sizze_38498 = smin64(sdiv_up64(m_24014,
                                         sext_i32_i64(sext_i64_i32(segred_group_sizze_28202 *
                                         num_groups_28204))),
                               sdiv_up64(m_24014 - sext_i32_i64(phys_tid_28209),
                                         num_threads_38487));
    
    int32_t x_24371;
    int32_t x_24372;
    
    // neutral-initialise the accumulators
    {
        x_acc_38497 = 0;
    }
    for (int64_t i_38502 = 0; i_38502 < chunk_sizze_38498; i_38502++) {
        gtid_28208 = sext_i32_i64(phys_tid_28209) + num_threads_38487 * i_38502;
        // apply map function
        {
            int32_t x_24374 = ((__global int32_t *) res_mem_37190)[gtid_28208];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_24371 = x_acc_38497;
            }
            // load new values
            {
                x_24372 = x_24374;
            }
            // apply reduction operator
            {
                int32_t res_24373 = smax32(x_24371, x_24372);
                
                // store in accumulator
                {
                    x_acc_38497 = res_24373;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_24371 = x_acc_38497;
        ((__local int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489)] =
            x_24371;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_38503;
    int32_t skip_waves_38504;
    
    skip_waves_38504 = 1;
    
    int32_t x_38499;
    int32_t x_38500;
    
    offset_38503 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_38489, sext_i64_i32(segred_group_sizze_28202))) {
            x_38499 = ((__local
                        int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489 +
                                                      offset_38503)];
        }
    }
    offset_38503 = 1;
    while (slt32(offset_38503, wave_sizze_38491)) {
        if (slt32(local_tid_38489 + offset_38503,
                  sext_i64_i32(segred_group_sizze_28202)) && ((local_tid_38489 -
                                                               squot32(local_tid_38489,
                                                                       wave_sizze_38491) *
                                                               wave_sizze_38491) &
                                                              (2 *
                                                               offset_38503 -
                                                               1)) == 0) {
            // read array element
            {
                x_38500 = ((volatile __local
                            int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489 +
                                                          offset_38503)];
            }
            // apply reduction operation
            {
                int32_t res_38501 = smax32(x_38499, x_38500);
                
                x_38499 = res_38501;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489)] =
                    x_38499;
            }
        }
        offset_38503 *= 2;
    }
    while (slt32(skip_waves_38504,
                 squot32(sext_i64_i32(segred_group_sizze_28202) +
                         wave_sizze_38491 - 1, wave_sizze_38491))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_38503 = skip_waves_38504 * wave_sizze_38491;
        if (slt32(local_tid_38489 + offset_38503,
                  sext_i64_i32(segred_group_sizze_28202)) && ((local_tid_38489 -
                                                               squot32(local_tid_38489,
                                                                       wave_sizze_38491) *
                                                               wave_sizze_38491) ==
                                                              0 &&
                                                              (squot32(local_tid_38489,
                                                                       wave_sizze_38491) &
                                                               (2 *
                                                                skip_waves_38504 -
                                                                1)) == 0)) {
            // read array element
            {
                x_38500 = ((__local
                            int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489 +
                                                          offset_38503)];
            }
            // apply reduction operation
            {
                int32_t res_38501 = smax32(x_38499, x_38500);
                
                x_38499 = res_38501;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489)] =
                    x_38499;
            }
        }
        skip_waves_38504 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_38489) == 0) {
            x_acc_38497 = x_38499;
        }
    }
    
    int32_t old_counter_38505;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_38489 == 0) {
            ((__global
              int32_t *) group_res_arr_mem_38485)[sext_i32_i64(group_tid_38490) *
                                                  segred_group_sizze_28202] =
                x_acc_38497;
            mem_fence_global();
            old_counter_38505 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_38483)[0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_38493)[0] = old_counter_38505 ==
                num_groups_28204 - 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_38506;
    
    is_last_group_38506 = ((__local bool *) sync_arr_mem_38493)[0];
    if (is_last_group_38506) {
        if (local_tid_38489 == 0) {
            old_counter_38505 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_38483)[0],
                                                      (int) (0 -
                                                             num_groups_28204));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_38507 = sdiv_up64(num_groups_28204,
                                                      segred_group_sizze_28202);
            
            x_24371 = 0;
            for (int64_t i_38508 = 0; i_38508 < read_per_thread_38507;
                 i_38508++) {
                int64_t group_res_id_38509 = sext_i32_i64(local_tid_38489) *
                        read_per_thread_38507 + i_38508;
                int64_t index_of_group_res_38510 = group_res_id_38509;
                
                if (slt64(group_res_id_38509, num_groups_28204)) {
                    x_24372 = ((__global
                                int32_t *) group_res_arr_mem_38485)[index_of_group_res_38510 *
                                                                    segred_group_sizze_28202];
                    
                    int32_t res_24373;
                    
                    res_24373 = smax32(x_24371, x_24372);
                    x_24371 = res_24373;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489)] =
            x_24371;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_38511;
            int32_t skip_waves_38512;
            
            skip_waves_38512 = 1;
            
            int32_t x_38499;
            int32_t x_38500;
            
            offset_38511 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_38489,
                          sext_i64_i32(segred_group_sizze_28202))) {
                    x_38499 = ((__local
                                int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489 +
                                                              offset_38511)];
                }
            }
            offset_38511 = 1;
            while (slt32(offset_38511, wave_sizze_38491)) {
                if (slt32(local_tid_38489 + offset_38511,
                          sext_i64_i32(segred_group_sizze_28202)) &&
                    ((local_tid_38489 - squot32(local_tid_38489,
                                                wave_sizze_38491) *
                      wave_sizze_38491) & (2 * offset_38511 - 1)) == 0) {
                    // read array element
                    {
                        x_38500 = ((volatile __local
                                    int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489 +
                                                                  offset_38511)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38501 = smax32(x_38499, x_38500);
                        
                        x_38499 = res_38501;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489)] =
                            x_38499;
                    }
                }
                offset_38511 *= 2;
            }
            while (slt32(skip_waves_38512,
                         squot32(sext_i64_i32(segred_group_sizze_28202) +
                                 wave_sizze_38491 - 1, wave_sizze_38491))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_38511 = skip_waves_38512 * wave_sizze_38491;
                if (slt32(local_tid_38489 + offset_38511,
                          sext_i64_i32(segred_group_sizze_28202)) &&
                    ((local_tid_38489 - squot32(local_tid_38489,
                                                wave_sizze_38491) *
                      wave_sizze_38491) == 0 && (squot32(local_tid_38489,
                                                         wave_sizze_38491) &
                                                 (2 * skip_waves_38512 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_38500 = ((__local
                                    int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489 +
                                                                  offset_38511)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_38501 = smax32(x_38499, x_38500);
                        
                        x_38499 = res_38501;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_38495)[sext_i32_i64(local_tid_38489)] =
                            x_38499;
                    }
                }
                skip_waves_38512 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_38489 == 0) {
                    ((__global int32_t *) mem_37195)[0] = x_38499;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28202
}
__kernel void mainDetailedzisegred_small_26113(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_37845_backing_aligned_0,
                                               int64_t N_24013, int64_t m_24014,
                                               int64_t N_24015,
                                               int64_t res_24027,
                                               int64_t res_24033,
                                               int64_t num_groups_26252,
                                               __global
                                               unsigned char *images_mem_36652,
                                               __global
                                               unsigned char *binop_p_mem_36661,
                                               __global
                                               unsigned char *mem_36744,
                                               __global
                                               unsigned char *mem_36749,
                                               int64_t segment_sizze_nonzzero_37838)
{
    #define segred_group_sizze_26251 (mainDetailedzisegred_group_sizze_26107)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_37845_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37845_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37840;
    int32_t local_tid_37841;
    int64_t group_sizze_37844;
    int32_t wave_sizze_37843;
    int32_t group_tid_37842;
    
    global_tid_37840 = get_global_id(0);
    local_tid_37841 = get_local_id(0);
    group_sizze_37844 = get_local_size(0);
    wave_sizze_37843 = LOCKSTEP_WIDTH;
    group_tid_37842 = get_group_id(0);
    
    int32_t phys_tid_26113;
    
    phys_tid_26113 = global_tid_37840;
    
    __local char *red_arr_mem_37845;
    
    red_arr_mem_37845 = (__local char *) red_arr_mem_37845_backing_0;
    
    int32_t phys_group_id_37847;
    
    phys_group_id_37847 = get_group_id(0);
    for (int32_t i_37848 = 0; i_37848 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014 * res_24033 * res_24033,
                                          squot64(segred_group_sizze_26251,
                                                  segment_sizze_nonzzero_37838))) -
                   phys_group_id_37847, sext_i64_i32(num_groups_26252));
         i_37848++) {
        int32_t virt_group_id_37849 = phys_group_id_37847 + i_37848 *
                sext_i64_i32(num_groups_26252);
        int64_t gtid_26100 = squot64(squot64(sext_i32_i64(local_tid_37841),
                                             segment_sizze_nonzzero_37838) +
                                     sext_i32_i64(virt_group_id_37849) *
                                     squot64(segred_group_sizze_26251,
                                             segment_sizze_nonzzero_37838),
                                     res_24033 * res_24033);
        int64_t gtid_26101 = squot64(squot64(sext_i32_i64(local_tid_37841),
                                             segment_sizze_nonzzero_37838) +
                                     sext_i32_i64(virt_group_id_37849) *
                                     squot64(segred_group_sizze_26251,
                                             segment_sizze_nonzzero_37838) -
                                     squot64(squot64(sext_i32_i64(local_tid_37841),
                                                     segment_sizze_nonzzero_37838) +
                                             sext_i32_i64(virt_group_id_37849) *
                                             squot64(segred_group_sizze_26251,
                                                     segment_sizze_nonzzero_37838),
                                             res_24033 * res_24033) *
                                     (res_24033 * res_24033), res_24033);
        int64_t gtid_26102 = squot64(sext_i32_i64(local_tid_37841),
                                     segment_sizze_nonzzero_37838) +
                sext_i32_i64(virt_group_id_37849) *
                squot64(segred_group_sizze_26251,
                        segment_sizze_nonzzero_37838) -
                squot64(squot64(sext_i32_i64(local_tid_37841),
                                segment_sizze_nonzzero_37838) +
                        sext_i32_i64(virt_group_id_37849) *
                        squot64(segred_group_sizze_26251,
                                segment_sizze_nonzzero_37838), res_24033 *
                        res_24033) * (res_24033 * res_24033) -
                squot64(squot64(sext_i32_i64(local_tid_37841),
                                segment_sizze_nonzzero_37838) +
                        sext_i32_i64(virt_group_id_37849) *
                        squot64(segred_group_sizze_26251,
                                segment_sizze_nonzzero_37838) -
                        squot64(squot64(sext_i32_i64(local_tid_37841),
                                        segment_sizze_nonzzero_37838) +
                                sext_i32_i64(virt_group_id_37849) *
                                squot64(segred_group_sizze_26251,
                                        segment_sizze_nonzzero_37838),
                                res_24033 * res_24033) * (res_24033 *
                                                          res_24033),
                        res_24033) * res_24033;
        int64_t gtid_26112 = srem64(sext_i32_i64(local_tid_37841), res_24027);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24027) && (((slt64(gtid_26100, m_24014) &&
                                          slt64(gtid_26101, res_24033)) &&
                                         slt64(gtid_26102, res_24033)) &&
                                        slt64(sext_i32_i64(local_tid_37841),
                                              res_24027 *
                                              squot64(segred_group_sizze_26251,
                                                      segment_sizze_nonzzero_37838)))) {
                float x_26261 = ((__global
                                  float *) images_mem_36652)[gtid_26100 *
                                                             N_24015 +
                                                             gtid_26112];
                float x_26262 = ((__global
                                  float *) binop_p_mem_36661)[gtid_26101 *
                                                              N_24013 +
                                                              gtid_26112];
                float x_26263 = ((__global float *) mem_36744)[gtid_26102 *
                                                               N_24013 +
                                                               gtid_26112];
                float x_26264 = x_26262 * x_26263;
                bool res_26265;
                
                res_26265 = futrts_isnan32(x_26261);
                
                float y_26266;
                
                if (res_26265) {
                    y_26266 = 0.0F;
                } else {
                    y_26266 = 1.0F;
                }
                
                float res_26267 = x_26264 * y_26266;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)] =
                        res_26267;
                }
            } else {
                ((__local
                  float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24027)) {
            // perform segmented scan to imitate reduction
            {
                float x_26255;
                float x_26256;
                float x_37850;
                float x_37851;
                bool ltid_in_bounds_37853;
                
                ltid_in_bounds_37853 = slt64(sext_i32_i64(local_tid_37841),
                                             res_24027 *
                                             squot64(segred_group_sizze_26251,
                                                     segment_sizze_nonzzero_37838));
                
                int32_t skip_threads_37854;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_37853) {
                        x_26256 = ((volatile __local
                                    float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)];
                        if ((local_tid_37841 - squot32(local_tid_37841, 32) *
                             32) == 0) {
                            x_26255 = x_26256;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_37854 = 1;
                    while (slt32(skip_threads_37854, 32)) {
                        if (sle32(skip_threads_37854, local_tid_37841 -
                                  squot32(local_tid_37841, 32) * 32) &&
                            ltid_in_bounds_37853) {
                            // read operands
                            {
                                x_26255 = ((volatile __local
                                            float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841) -
                                                                        sext_i32_i64(skip_threads_37854)];
                            }
                            // perform operation
                            {
                                bool inactive_37855 =
                                     slt64(srem64(sext_i32_i64(local_tid_37841),
                                                  res_24027),
                                           sext_i32_i64(local_tid_37841) -
                                           sext_i32_i64(local_tid_37841 -
                                           skip_threads_37854));
                                
                                if (inactive_37855) {
                                    x_26255 = x_26256;
                                }
                                if (!inactive_37855) {
                                    float res_26257 = x_26255 + x_26256;
                                    
                                    x_26255 = res_26257;
                                }
                            }
                        }
                        if (sle32(wave_sizze_37843, skip_threads_37854)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_37854, local_tid_37841 -
                                  squot32(local_tid_37841, 32) * 32) &&
                            ltid_in_bounds_37853) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)] =
                                    x_26255;
                                x_26256 = x_26255;
                            }
                        }
                        if (sle32(wave_sizze_37843, skip_threads_37854)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_37854 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_37841 - squot32(local_tid_37841, 32) * 32) ==
                        31 && ltid_in_bounds_37853) {
                        ((volatile __local
                          float *) red_arr_mem_37845)[sext_i32_i64(squot32(local_tid_37841,
                                                                           32))] =
                            x_26255;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_37856;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_37841, 32) == 0 &&
                            ltid_in_bounds_37853) {
                            x_37851 = ((volatile __local
                                        float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)];
                            if ((local_tid_37841 - squot32(local_tid_37841,
                                                           32) * 32) == 0) {
                                x_37850 = x_37851;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_37856 = 1;
                        while (slt32(skip_threads_37856, 32)) {
                            if (sle32(skip_threads_37856, local_tid_37841 -
                                      squot32(local_tid_37841, 32) * 32) &&
                                (squot32(local_tid_37841, 32) == 0 &&
                                 ltid_in_bounds_37853)) {
                                // read operands
                                {
                                    x_37850 = ((volatile __local
                                                float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841) -
                                                                            sext_i32_i64(skip_threads_37856)];
                                }
                                // perform operation
                                {
                                    bool inactive_37857 =
                                         slt64(srem64(sext_i32_i64(local_tid_37841 *
                                                      32 + 32 - 1), res_24027),
                                               sext_i32_i64(local_tid_37841 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_37841 -
                                                             skip_threads_37856) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_37857) {
                                        x_37850 = x_37851;
                                    }
                                    if (!inactive_37857) {
                                        float res_37852 = x_37850 + x_37851;
                                        
                                        x_37850 = res_37852;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_37843, skip_threads_37856)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_37856, local_tid_37841 -
                                      squot32(local_tid_37841, 32) * 32) &&
                                (squot32(local_tid_37841, 32) == 0 &&
                                 ltid_in_bounds_37853)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)] =
                                        x_37850;
                                    x_37851 = x_37850;
                                }
                            }
                            if (sle32(wave_sizze_37843, skip_threads_37856)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_37856 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_37841, 32) == 0 ||
                          !ltid_in_bounds_37853)) {
                        // read operands
                        {
                            x_26256 = x_26255;
                            x_26255 = ((__local
                                        float *) red_arr_mem_37845)[sext_i32_i64(squot32(local_tid_37841,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_37858 =
                                 slt64(srem64(sext_i32_i64(local_tid_37841),
                                              res_24027),
                                       sext_i32_i64(local_tid_37841) -
                                       sext_i32_i64(squot32(local_tid_37841,
                                                            32) * 32 - 1));
                            
                            if (inactive_37858) {
                                x_26255 = x_26256;
                            }
                            if (!inactive_37858) {
                                float res_26257 = x_26255 + x_26256;
                                
                                x_26255 = res_26257;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)] =
                                x_26255;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_37841, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_37845)[sext_i32_i64(local_tid_37841)] =
                            x_26256;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_37849) *
                      squot64(segred_group_sizze_26251,
                              segment_sizze_nonzzero_37838) +
                      sext_i32_i64(local_tid_37841), m_24014 * res_24033 *
                      res_24033) && slt64(sext_i32_i64(local_tid_37841),
                                          squot64(segred_group_sizze_26251,
                                                  segment_sizze_nonzzero_37838))) {
                ((__global
                  float *) mem_36749)[squot64(sext_i32_i64(virt_group_id_37849) *
                                              squot64(segred_group_sizze_26251,
                                                      segment_sizze_nonzzero_37838) +
                                              sext_i32_i64(local_tid_37841),
                                              res_24033 * res_24033) *
                                      (res_24033 * res_24033) +
                                      squot64(sext_i32_i64(virt_group_id_37849) *
                                              squot64(segred_group_sizze_26251,
                                                      segment_sizze_nonzzero_37838) +
                                              sext_i32_i64(local_tid_37841) -
                                              squot64(sext_i32_i64(virt_group_id_37849) *
                                                      squot64(segred_group_sizze_26251,
                                                              segment_sizze_nonzzero_37838) +
                                                      sext_i32_i64(local_tid_37841),
                                                      res_24033 * res_24033) *
                                              (res_24033 * res_24033),
                                              res_24033) * res_24033 +
                                      (sext_i32_i64(virt_group_id_37849) *
                                       squot64(segred_group_sizze_26251,
                                               segment_sizze_nonzzero_37838) +
                                       sext_i32_i64(local_tid_37841) -
                                       squot64(sext_i32_i64(virt_group_id_37849) *
                                               squot64(segred_group_sizze_26251,
                                                       segment_sizze_nonzzero_37838) +
                                               sext_i32_i64(local_tid_37841),
                                               res_24033 * res_24033) *
                                       (res_24033 * res_24033) -
                                       squot64(sext_i32_i64(virt_group_id_37849) *
                                               squot64(segred_group_sizze_26251,
                                                       segment_sizze_nonzzero_37838) +
                                               sext_i32_i64(local_tid_37841) -
                                               squot64(sext_i32_i64(virt_group_id_37849) *
                                                       squot64(segred_group_sizze_26251,
                                                               segment_sizze_nonzzero_37838) +
                                                       sext_i32_i64(local_tid_37841),
                                                       res_24033 * res_24033) *
                                               (res_24033 * res_24033),
                                               res_24033) * res_24033)] =
                    ((__local
                      float *) red_arr_mem_37845)[(sext_i32_i64(local_tid_37841) +
                                                   1) *
                                                  segment_sizze_nonzzero_37838 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_26251
}
__kernel void mainDetailedzisegred_small_27286(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_37999_backing_aligned_0,
                                               int64_t N_24013, int64_t m_24014,
                                               int64_t N_24015,
                                               int64_t res_24027,
                                               int64_t res_24033,
                                               int64_t num_groups_27339,
                                               __global
                                               unsigned char *images_mem_36652,
                                               __global
                                               unsigned char *binop_p_mem_36661,
                                               __global
                                               unsigned char *mem_36930,
                                               int64_t segment_sizze_nonzzero_37992)
{
    #define segred_group_sizze_27338 (mainDetailedzisegred_group_sizze_27280)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_37999_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_37999_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37994;
    int32_t local_tid_37995;
    int64_t group_sizze_37998;
    int32_t wave_sizze_37997;
    int32_t group_tid_37996;
    
    global_tid_37994 = get_global_id(0);
    local_tid_37995 = get_local_id(0);
    group_sizze_37998 = get_local_size(0);
    wave_sizze_37997 = LOCKSTEP_WIDTH;
    group_tid_37996 = get_group_id(0);
    
    int32_t phys_tid_27286;
    
    phys_tid_27286 = global_tid_37994;
    
    __local char *red_arr_mem_37999;
    
    red_arr_mem_37999 = (__local char *) red_arr_mem_37999_backing_0;
    
    int32_t phys_group_id_38001;
    
    phys_group_id_38001 = get_group_id(0);
    for (int32_t i_38002 = 0; i_38002 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014 * res_24033,
                                          squot64(segred_group_sizze_27338,
                                                  segment_sizze_nonzzero_37992))) -
                   phys_group_id_38001, sext_i64_i32(num_groups_27339));
         i_38002++) {
        int32_t virt_group_id_38003 = phys_group_id_38001 + i_38002 *
                sext_i64_i32(num_groups_27339);
        int64_t gtid_27275 = squot64(squot64(sext_i32_i64(local_tid_37995),
                                             segment_sizze_nonzzero_37992) +
                                     sext_i32_i64(virt_group_id_38003) *
                                     squot64(segred_group_sizze_27338,
                                             segment_sizze_nonzzero_37992),
                                     res_24033);
        int64_t gtid_27276 = squot64(sext_i32_i64(local_tid_37995),
                                     segment_sizze_nonzzero_37992) +
                sext_i32_i64(virt_group_id_38003) *
                squot64(segred_group_sizze_27338,
                        segment_sizze_nonzzero_37992) -
                squot64(squot64(sext_i32_i64(local_tid_37995),
                                segment_sizze_nonzzero_37992) +
                        sext_i32_i64(virt_group_id_38003) *
                        squot64(segred_group_sizze_27338,
                                segment_sizze_nonzzero_37992), res_24033) *
                res_24033;
        int64_t gtid_27285 = srem64(sext_i32_i64(local_tid_37995), res_24027);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24027) && ((slt64(gtid_27275, m_24014) &&
                                         slt64(gtid_27276, res_24033)) &&
                                        slt64(sext_i32_i64(local_tid_37995),
                                              res_24027 *
                                              squot64(segred_group_sizze_27338,
                                                      segment_sizze_nonzzero_37992)))) {
                float x_27348 = ((__global
                                  float *) images_mem_36652)[gtid_27275 *
                                                             N_24015 +
                                                             gtid_27285];
                bool res_27349;
                
                res_27349 = futrts_isnan32(x_27348);
                
                float res_27350;
                
                if (res_27349) {
                    res_27350 = 0.0F;
                } else {
                    float x_27347 = ((__global
                                      float *) binop_p_mem_36661)[gtid_27276 *
                                                                  N_24013 +
                                                                  gtid_27285];
                    float res_27351 = x_27347 * x_27348;
                    
                    res_27350 = res_27351;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)] =
                        res_27350;
                }
            } else {
                ((__local
                  float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24027)) {
            // perform segmented scan to imitate reduction
            {
                float x_27342;
                float x_27343;
                float x_38004;
                float x_38005;
                bool ltid_in_bounds_38007;
                
                ltid_in_bounds_38007 = slt64(sext_i32_i64(local_tid_37995),
                                             res_24027 *
                                             squot64(segred_group_sizze_27338,
                                                     segment_sizze_nonzzero_37992));
                
                int32_t skip_threads_38008;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38007) {
                        x_27343 = ((volatile __local
                                    float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)];
                        if ((local_tid_37995 - squot32(local_tid_37995, 32) *
                             32) == 0) {
                            x_27342 = x_27343;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38008 = 1;
                    while (slt32(skip_threads_38008, 32)) {
                        if (sle32(skip_threads_38008, local_tid_37995 -
                                  squot32(local_tid_37995, 32) * 32) &&
                            ltid_in_bounds_38007) {
                            // read operands
                            {
                                x_27342 = ((volatile __local
                                            float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995) -
                                                                        sext_i32_i64(skip_threads_38008)];
                            }
                            // perform operation
                            {
                                bool inactive_38009 =
                                     slt64(srem64(sext_i32_i64(local_tid_37995),
                                                  res_24027),
                                           sext_i32_i64(local_tid_37995) -
                                           sext_i32_i64(local_tid_37995 -
                                           skip_threads_38008));
                                
                                if (inactive_38009) {
                                    x_27342 = x_27343;
                                }
                                if (!inactive_38009) {
                                    float res_27344 = x_27342 + x_27343;
                                    
                                    x_27342 = res_27344;
                                }
                            }
                        }
                        if (sle32(wave_sizze_37997, skip_threads_38008)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38008, local_tid_37995 -
                                  squot32(local_tid_37995, 32) * 32) &&
                            ltid_in_bounds_38007) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)] =
                                    x_27342;
                                x_27343 = x_27342;
                            }
                        }
                        if (sle32(wave_sizze_37997, skip_threads_38008)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38008 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_37995 - squot32(local_tid_37995, 32) * 32) ==
                        31 && ltid_in_bounds_38007) {
                        ((volatile __local
                          float *) red_arr_mem_37999)[sext_i32_i64(squot32(local_tid_37995,
                                                                           32))] =
                            x_27342;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38010;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_37995, 32) == 0 &&
                            ltid_in_bounds_38007) {
                            x_38005 = ((volatile __local
                                        float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)];
                            if ((local_tid_37995 - squot32(local_tid_37995,
                                                           32) * 32) == 0) {
                                x_38004 = x_38005;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38010 = 1;
                        while (slt32(skip_threads_38010, 32)) {
                            if (sle32(skip_threads_38010, local_tid_37995 -
                                      squot32(local_tid_37995, 32) * 32) &&
                                (squot32(local_tid_37995, 32) == 0 &&
                                 ltid_in_bounds_38007)) {
                                // read operands
                                {
                                    x_38004 = ((volatile __local
                                                float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995) -
                                                                            sext_i32_i64(skip_threads_38010)];
                                }
                                // perform operation
                                {
                                    bool inactive_38011 =
                                         slt64(srem64(sext_i32_i64(local_tid_37995 *
                                                      32 + 32 - 1), res_24027),
                                               sext_i32_i64(local_tid_37995 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_37995 -
                                                             skip_threads_38010) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38011) {
                                        x_38004 = x_38005;
                                    }
                                    if (!inactive_38011) {
                                        float res_38006 = x_38004 + x_38005;
                                        
                                        x_38004 = res_38006;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_37997, skip_threads_38010)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38010, local_tid_37995 -
                                      squot32(local_tid_37995, 32) * 32) &&
                                (squot32(local_tid_37995, 32) == 0 &&
                                 ltid_in_bounds_38007)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)] =
                                        x_38004;
                                    x_38005 = x_38004;
                                }
                            }
                            if (sle32(wave_sizze_37997, skip_threads_38010)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38010 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_37995, 32) == 0 ||
                          !ltid_in_bounds_38007)) {
                        // read operands
                        {
                            x_27343 = x_27342;
                            x_27342 = ((__local
                                        float *) red_arr_mem_37999)[sext_i32_i64(squot32(local_tid_37995,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38012 =
                                 slt64(srem64(sext_i32_i64(local_tid_37995),
                                              res_24027),
                                       sext_i32_i64(local_tid_37995) -
                                       sext_i32_i64(squot32(local_tid_37995,
                                                            32) * 32 - 1));
                            
                            if (inactive_38012) {
                                x_27342 = x_27343;
                            }
                            if (!inactive_38012) {
                                float res_27344 = x_27342 + x_27343;
                                
                                x_27342 = res_27344;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)] =
                                x_27342;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_37995, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_37999)[sext_i32_i64(local_tid_37995)] =
                            x_27343;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38003) *
                      squot64(segred_group_sizze_27338,
                              segment_sizze_nonzzero_37992) +
                      sext_i32_i64(local_tid_37995), m_24014 * res_24033) &&
                slt64(sext_i32_i64(local_tid_37995),
                      squot64(segred_group_sizze_27338,
                              segment_sizze_nonzzero_37992))) {
                ((__global
                  float *) mem_36930)[squot64(sext_i32_i64(virt_group_id_38003) *
                                              squot64(segred_group_sizze_27338,
                                                      segment_sizze_nonzzero_37992) +
                                              sext_i32_i64(local_tid_37995),
                                              res_24033) * res_24033 +
                                      (sext_i32_i64(virt_group_id_38003) *
                                       squot64(segred_group_sizze_27338,
                                               segment_sizze_nonzzero_37992) +
                                       sext_i32_i64(local_tid_37995) -
                                       squot64(sext_i32_i64(virt_group_id_38003) *
                                               squot64(segred_group_sizze_27338,
                                                       segment_sizze_nonzzero_37992) +
                                               sext_i32_i64(local_tid_37995),
                                               res_24033) * res_24033)] =
                    ((__local
                      float *) red_arr_mem_37999)[(sext_i32_i64(local_tid_37995) +
                                                   1) *
                                                  segment_sizze_nonzzero_37992 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27338
}
__kernel void mainDetailedzisegred_small_27423(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38080_backing_aligned_0,
                                               int64_t m_24014,
                                               int64_t res_24033,
                                               int64_t num_groups_27472,
                                               __global
                                               unsigned char *res_mem_36845,
                                               __global
                                               unsigned char *res_mem_36936,
                                               __global
                                               unsigned char *mem_36973,
                                               int64_t segment_sizze_nonzzero_38073)
{
    #define segred_group_sizze_27471 (mainDetailedzisegred_group_sizze_27417)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38080_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38080_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38075;
    int32_t local_tid_38076;
    int64_t group_sizze_38079;
    int32_t wave_sizze_38078;
    int32_t group_tid_38077;
    
    global_tid_38075 = get_global_id(0);
    local_tid_38076 = get_local_id(0);
    group_sizze_38079 = get_local_size(0);
    wave_sizze_38078 = LOCKSTEP_WIDTH;
    group_tid_38077 = get_group_id(0);
    
    int32_t phys_tid_27423;
    
    phys_tid_27423 = global_tid_38075;
    
    __local char *red_arr_mem_38080;
    
    red_arr_mem_38080 = (__local char *) red_arr_mem_38080_backing_0;
    
    int32_t phys_group_id_38082;
    
    phys_group_id_38082 = get_group_id(0);
    for (int32_t i_38083 = 0; i_38083 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014 * res_24033,
                                          squot64(segred_group_sizze_27471,
                                                  segment_sizze_nonzzero_38073))) -
                   phys_group_id_38082, sext_i64_i32(num_groups_27472));
         i_38083++) {
        int32_t virt_group_id_38084 = phys_group_id_38082 + i_38083 *
                sext_i64_i32(num_groups_27472);
        int64_t gtid_27412 = squot64(squot64(sext_i32_i64(local_tid_38076),
                                             segment_sizze_nonzzero_38073) +
                                     sext_i32_i64(virt_group_id_38084) *
                                     squot64(segred_group_sizze_27471,
                                             segment_sizze_nonzzero_38073),
                                     res_24033);
        int64_t gtid_27413 = squot64(sext_i32_i64(local_tid_38076),
                                     segment_sizze_nonzzero_38073) +
                sext_i32_i64(virt_group_id_38084) *
                squot64(segred_group_sizze_27471,
                        segment_sizze_nonzzero_38073) -
                squot64(squot64(sext_i32_i64(local_tid_38076),
                                segment_sizze_nonzzero_38073) +
                        sext_i32_i64(virt_group_id_38084) *
                        squot64(segred_group_sizze_27471,
                                segment_sizze_nonzzero_38073), res_24033) *
                res_24033;
        int64_t gtid_27422 = srem64(sext_i32_i64(local_tid_38076), res_24033);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24033) && ((slt64(gtid_27412, m_24014) &&
                                         slt64(gtid_27413, res_24033)) &&
                                        slt64(sext_i32_i64(local_tid_38076),
                                              res_24033 *
                                              squot64(segred_group_sizze_27471,
                                                      segment_sizze_nonzzero_38073)))) {
                float x_27481 = ((__global float *) res_mem_36936)[gtid_27412 *
                                                                   res_24033 +
                                                                   gtid_27422];
                float x_27482 = ((__global float *) res_mem_36845)[gtid_27412 *
                                                                   (res_24033 *
                                                                    res_24033) +
                                                                   gtid_27413 *
                                                                   res_24033 +
                                                                   gtid_27422];
                float res_27483 = x_27481 * x_27482;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)] =
                        res_27483;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24033)) {
            // perform segmented scan to imitate reduction
            {
                float x_27475;
                float x_27476;
                float x_38085;
                float x_38086;
                bool ltid_in_bounds_38088;
                
                ltid_in_bounds_38088 = slt64(sext_i32_i64(local_tid_38076),
                                             res_24033 *
                                             squot64(segred_group_sizze_27471,
                                                     segment_sizze_nonzzero_38073));
                
                int32_t skip_threads_38089;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38088) {
                        x_27476 = ((volatile __local
                                    float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)];
                        if ((local_tid_38076 - squot32(local_tid_38076, 32) *
                             32) == 0) {
                            x_27475 = x_27476;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38089 = 1;
                    while (slt32(skip_threads_38089, 32)) {
                        if (sle32(skip_threads_38089, local_tid_38076 -
                                  squot32(local_tid_38076, 32) * 32) &&
                            ltid_in_bounds_38088) {
                            // read operands
                            {
                                x_27475 = ((volatile __local
                                            float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076) -
                                                                        sext_i32_i64(skip_threads_38089)];
                            }
                            // perform operation
                            {
                                bool inactive_38090 =
                                     slt64(srem64(sext_i32_i64(local_tid_38076),
                                                  res_24033),
                                           sext_i32_i64(local_tid_38076) -
                                           sext_i32_i64(local_tid_38076 -
                                           skip_threads_38089));
                                
                                if (inactive_38090) {
                                    x_27475 = x_27476;
                                }
                                if (!inactive_38090) {
                                    float res_27477 = x_27475 + x_27476;
                                    
                                    x_27475 = res_27477;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38078, skip_threads_38089)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38089, local_tid_38076 -
                                  squot32(local_tid_38076, 32) * 32) &&
                            ltid_in_bounds_38088) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)] =
                                    x_27475;
                                x_27476 = x_27475;
                            }
                        }
                        if (sle32(wave_sizze_38078, skip_threads_38089)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38089 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38076 - squot32(local_tid_38076, 32) * 32) ==
                        31 && ltid_in_bounds_38088) {
                        ((volatile __local
                          float *) red_arr_mem_38080)[sext_i32_i64(squot32(local_tid_38076,
                                                                           32))] =
                            x_27475;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38091;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38076, 32) == 0 &&
                            ltid_in_bounds_38088) {
                            x_38086 = ((volatile __local
                                        float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)];
                            if ((local_tid_38076 - squot32(local_tid_38076,
                                                           32) * 32) == 0) {
                                x_38085 = x_38086;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38091 = 1;
                        while (slt32(skip_threads_38091, 32)) {
                            if (sle32(skip_threads_38091, local_tid_38076 -
                                      squot32(local_tid_38076, 32) * 32) &&
                                (squot32(local_tid_38076, 32) == 0 &&
                                 ltid_in_bounds_38088)) {
                                // read operands
                                {
                                    x_38085 = ((volatile __local
                                                float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076) -
                                                                            sext_i32_i64(skip_threads_38091)];
                                }
                                // perform operation
                                {
                                    bool inactive_38092 =
                                         slt64(srem64(sext_i32_i64(local_tid_38076 *
                                                      32 + 32 - 1), res_24033),
                                               sext_i32_i64(local_tid_38076 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38076 -
                                                             skip_threads_38091) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38092) {
                                        x_38085 = x_38086;
                                    }
                                    if (!inactive_38092) {
                                        float res_38087 = x_38085 + x_38086;
                                        
                                        x_38085 = res_38087;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38078, skip_threads_38091)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38091, local_tid_38076 -
                                      squot32(local_tid_38076, 32) * 32) &&
                                (squot32(local_tid_38076, 32) == 0 &&
                                 ltid_in_bounds_38088)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)] =
                                        x_38085;
                                    x_38086 = x_38085;
                                }
                            }
                            if (sle32(wave_sizze_38078, skip_threads_38091)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38091 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38076, 32) == 0 ||
                          !ltid_in_bounds_38088)) {
                        // read operands
                        {
                            x_27476 = x_27475;
                            x_27475 = ((__local
                                        float *) red_arr_mem_38080)[sext_i32_i64(squot32(local_tid_38076,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38093 =
                                 slt64(srem64(sext_i32_i64(local_tid_38076),
                                              res_24033),
                                       sext_i32_i64(local_tid_38076) -
                                       sext_i32_i64(squot32(local_tid_38076,
                                                            32) * 32 - 1));
                            
                            if (inactive_38093) {
                                x_27475 = x_27476;
                            }
                            if (!inactive_38093) {
                                float res_27477 = x_27475 + x_27476;
                                
                                x_27475 = res_27477;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)] =
                                x_27475;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38076, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38080)[sext_i32_i64(local_tid_38076)] =
                            x_27476;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38084) *
                      squot64(segred_group_sizze_27471,
                              segment_sizze_nonzzero_38073) +
                      sext_i32_i64(local_tid_38076), m_24014 * res_24033) &&
                slt64(sext_i32_i64(local_tid_38076),
                      squot64(segred_group_sizze_27471,
                              segment_sizze_nonzzero_38073))) {
                ((__global
                  float *) mem_36973)[squot64(sext_i32_i64(virt_group_id_38084) *
                                              squot64(segred_group_sizze_27471,
                                                      segment_sizze_nonzzero_38073) +
                                              sext_i32_i64(local_tid_38076),
                                              res_24033) * res_24033 +
                                      (sext_i32_i64(virt_group_id_38084) *
                                       squot64(segred_group_sizze_27471,
                                               segment_sizze_nonzzero_38073) +
                                       sext_i32_i64(local_tid_38076) -
                                       squot64(sext_i32_i64(virt_group_id_38084) *
                                               squot64(segred_group_sizze_27471,
                                                       segment_sizze_nonzzero_38073) +
                                               sext_i32_i64(local_tid_38076),
                                               res_24033) * res_24033)] =
                    ((__local
                      float *) red_arr_mem_38080)[(sext_i32_i64(local_tid_38076) +
                                                   1) *
                                                  segment_sizze_nonzzero_38073 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27471
}
__kernel void mainDetailedzisegred_small_27553(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38168_backing_aligned_0,
                                               int64_t N_24013, int64_t m_24014,
                                               int64_t res_24033,
                                               int64_t num_groups_27600,
                                               __global
                                               unsigned char *mem_36668,
                                               __global
                                               unsigned char *res_mem_36979,
                                               __global
                                               unsigned char *mem_37067,
                                               int64_t segment_sizze_nonzzero_38161)
{
    #define segred_group_sizze_27599 (mainDetailedzisegred_group_sizze_27547)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38168_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38168_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38163;
    int32_t local_tid_38164;
    int64_t group_sizze_38167;
    int32_t wave_sizze_38166;
    int32_t group_tid_38165;
    
    global_tid_38163 = get_global_id(0);
    local_tid_38164 = get_local_id(0);
    group_sizze_38167 = get_local_size(0);
    wave_sizze_38166 = LOCKSTEP_WIDTH;
    group_tid_38165 = get_group_id(0);
    
    int32_t phys_tid_27553;
    
    phys_tid_27553 = global_tid_38163;
    
    __local char *red_arr_mem_38168;
    
    red_arr_mem_38168 = (__local char *) red_arr_mem_38168_backing_0;
    
    int32_t phys_group_id_38170;
    
    phys_group_id_38170 = get_group_id(0);
    for (int32_t i_38171 = 0; i_38171 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014 * N_24013,
                                          squot64(segred_group_sizze_27599,
                                                  segment_sizze_nonzzero_38161))) -
                   phys_group_id_38170, sext_i64_i32(num_groups_27600));
         i_38171++) {
        int32_t virt_group_id_38172 = phys_group_id_38170 + i_38171 *
                sext_i64_i32(num_groups_27600);
        int64_t gtid_27542 = squot64(squot64(sext_i32_i64(local_tid_38164),
                                             segment_sizze_nonzzero_38161) +
                                     sext_i32_i64(virt_group_id_38172) *
                                     squot64(segred_group_sizze_27599,
                                             segment_sizze_nonzzero_38161),
                                     N_24013);
        int64_t gtid_27543 = squot64(sext_i32_i64(local_tid_38164),
                                     segment_sizze_nonzzero_38161) +
                sext_i32_i64(virt_group_id_38172) *
                squot64(segred_group_sizze_27599,
                        segment_sizze_nonzzero_38161) -
                squot64(squot64(sext_i32_i64(local_tid_38164),
                                segment_sizze_nonzzero_38161) +
                        sext_i32_i64(virt_group_id_38172) *
                        squot64(segred_group_sizze_27599,
                                segment_sizze_nonzzero_38161), N_24013) *
                N_24013;
        int64_t gtid_27552 = srem64(sext_i32_i64(local_tid_38164), res_24033);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24033) && ((slt64(gtid_27542, m_24014) &&
                                         slt64(gtid_27543, N_24013)) &&
                                        slt64(sext_i32_i64(local_tid_38164),
                                              res_24033 *
                                              squot64(segred_group_sizze_27599,
                                                      segment_sizze_nonzzero_38161)))) {
                float x_27608 = ((__global float *) res_mem_36979)[gtid_27542 *
                                                                   res_24033 +
                                                                   gtid_27552];
                float x_27609 = ((__global float *) mem_36668)[gtid_27543 *
                                                               res_24033 +
                                                               gtid_27552];
                float res_27610 = x_27608 * x_27609;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)] =
                        res_27610;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24033)) {
            // perform segmented scan to imitate reduction
            {
                float x_27603;
                float x_27604;
                float x_38173;
                float x_38174;
                bool ltid_in_bounds_38176;
                
                ltid_in_bounds_38176 = slt64(sext_i32_i64(local_tid_38164),
                                             res_24033 *
                                             squot64(segred_group_sizze_27599,
                                                     segment_sizze_nonzzero_38161));
                
                int32_t skip_threads_38177;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38176) {
                        x_27604 = ((volatile __local
                                    float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)];
                        if ((local_tid_38164 - squot32(local_tid_38164, 32) *
                             32) == 0) {
                            x_27603 = x_27604;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38177 = 1;
                    while (slt32(skip_threads_38177, 32)) {
                        if (sle32(skip_threads_38177, local_tid_38164 -
                                  squot32(local_tid_38164, 32) * 32) &&
                            ltid_in_bounds_38176) {
                            // read operands
                            {
                                x_27603 = ((volatile __local
                                            float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164) -
                                                                        sext_i32_i64(skip_threads_38177)];
                            }
                            // perform operation
                            {
                                bool inactive_38178 =
                                     slt64(srem64(sext_i32_i64(local_tid_38164),
                                                  res_24033),
                                           sext_i32_i64(local_tid_38164) -
                                           sext_i32_i64(local_tid_38164 -
                                           skip_threads_38177));
                                
                                if (inactive_38178) {
                                    x_27603 = x_27604;
                                }
                                if (!inactive_38178) {
                                    float res_27605 = x_27603 + x_27604;
                                    
                                    x_27603 = res_27605;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38166, skip_threads_38177)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38177, local_tid_38164 -
                                  squot32(local_tid_38164, 32) * 32) &&
                            ltid_in_bounds_38176) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)] =
                                    x_27603;
                                x_27604 = x_27603;
                            }
                        }
                        if (sle32(wave_sizze_38166, skip_threads_38177)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38177 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38164 - squot32(local_tid_38164, 32) * 32) ==
                        31 && ltid_in_bounds_38176) {
                        ((volatile __local
                          float *) red_arr_mem_38168)[sext_i32_i64(squot32(local_tid_38164,
                                                                           32))] =
                            x_27603;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38179;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38164, 32) == 0 &&
                            ltid_in_bounds_38176) {
                            x_38174 = ((volatile __local
                                        float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)];
                            if ((local_tid_38164 - squot32(local_tid_38164,
                                                           32) * 32) == 0) {
                                x_38173 = x_38174;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38179 = 1;
                        while (slt32(skip_threads_38179, 32)) {
                            if (sle32(skip_threads_38179, local_tid_38164 -
                                      squot32(local_tid_38164, 32) * 32) &&
                                (squot32(local_tid_38164, 32) == 0 &&
                                 ltid_in_bounds_38176)) {
                                // read operands
                                {
                                    x_38173 = ((volatile __local
                                                float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164) -
                                                                            sext_i32_i64(skip_threads_38179)];
                                }
                                // perform operation
                                {
                                    bool inactive_38180 =
                                         slt64(srem64(sext_i32_i64(local_tid_38164 *
                                                      32 + 32 - 1), res_24033),
                                               sext_i32_i64(local_tid_38164 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38164 -
                                                             skip_threads_38179) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38180) {
                                        x_38173 = x_38174;
                                    }
                                    if (!inactive_38180) {
                                        float res_38175 = x_38173 + x_38174;
                                        
                                        x_38173 = res_38175;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38166, skip_threads_38179)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38179, local_tid_38164 -
                                      squot32(local_tid_38164, 32) * 32) &&
                                (squot32(local_tid_38164, 32) == 0 &&
                                 ltid_in_bounds_38176)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)] =
                                        x_38173;
                                    x_38174 = x_38173;
                                }
                            }
                            if (sle32(wave_sizze_38166, skip_threads_38179)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38179 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38164, 32) == 0 ||
                          !ltid_in_bounds_38176)) {
                        // read operands
                        {
                            x_27604 = x_27603;
                            x_27603 = ((__local
                                        float *) red_arr_mem_38168)[sext_i32_i64(squot32(local_tid_38164,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38181 =
                                 slt64(srem64(sext_i32_i64(local_tid_38164),
                                              res_24033),
                                       sext_i32_i64(local_tid_38164) -
                                       sext_i32_i64(squot32(local_tid_38164,
                                                            32) * 32 - 1));
                            
                            if (inactive_38181) {
                                x_27603 = x_27604;
                            }
                            if (!inactive_38181) {
                                float res_27605 = x_27603 + x_27604;
                                
                                x_27603 = res_27605;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)] =
                                x_27603;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38164, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38168)[sext_i32_i64(local_tid_38164)] =
                            x_27604;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38172) *
                      squot64(segred_group_sizze_27599,
                              segment_sizze_nonzzero_38161) +
                      sext_i32_i64(local_tid_38164), m_24014 * N_24013) &&
                slt64(sext_i32_i64(local_tid_38164),
                      squot64(segred_group_sizze_27599,
                              segment_sizze_nonzzero_38161))) {
                ((__global
                  float *) mem_37067)[squot64(sext_i32_i64(virt_group_id_38172) *
                                              squot64(segred_group_sizze_27599,
                                                      segment_sizze_nonzzero_38161) +
                                              sext_i32_i64(local_tid_38164),
                                              N_24013) * N_24013 +
                                      (sext_i32_i64(virt_group_id_38172) *
                                       squot64(segred_group_sizze_27599,
                                               segment_sizze_nonzzero_38161) +
                                       sext_i32_i64(local_tid_38164) -
                                       squot64(sext_i32_i64(virt_group_id_38172) *
                                               squot64(segred_group_sizze_27599,
                                                       segment_sizze_nonzzero_38161) +
                                               sext_i32_i64(local_tid_38164),
                                               N_24013) * N_24013)] = ((__local
                                                                        float *) red_arr_mem_38168)[(sext_i32_i64(local_tid_38164) +
                                                                                                     1) *
                                                                                                    segment_sizze_nonzzero_38161 -
                                                                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27599
}
__kernel void mainDetailedzisegred_small_28119(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38422_backing_aligned_0,
                                               int64_t N_24013, int64_t m_24014,
                                               int64_t res_24027,
                                               int64_t num_groups_28166,
                                               __global
                                               unsigned char *res_mem_37111,
                                               __global
                                               unsigned char *mem_37178,
                                               __global
                                               unsigned char *mem_37181,
                                               int64_t segment_sizze_nonzzero_38415)
{
    #define segred_group_sizze_28165 (mainDetailedzisegred_group_sizze_28113)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38422_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38422_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38417;
    int32_t local_tid_38418;
    int64_t group_sizze_38421;
    int32_t wave_sizze_38420;
    int32_t group_tid_38419;
    
    global_tid_38417 = get_global_id(0);
    local_tid_38418 = get_local_id(0);
    group_sizze_38421 = get_local_size(0);
    wave_sizze_38420 = LOCKSTEP_WIDTH;
    group_tid_38419 = get_group_id(0);
    
    int32_t phys_tid_28119;
    
    phys_tid_28119 = global_tid_38417;
    
    __local char *red_arr_mem_38422;
    
    red_arr_mem_38422 = (__local char *) red_arr_mem_38422_backing_0;
    
    int32_t phys_group_id_38424;
    
    phys_group_id_38424 = get_group_id(0);
    for (int32_t i_38425 = 0; i_38425 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014,
                                          squot64(segred_group_sizze_28165,
                                                  segment_sizze_nonzzero_38415))) -
                   phys_group_id_38424, sext_i64_i32(num_groups_28166));
         i_38425++) {
        int32_t virt_group_id_38426 = phys_group_id_38424 + i_38425 *
                sext_i64_i32(num_groups_28166);
        int64_t gtid_28110 = squot64(sext_i32_i64(local_tid_38418),
                                     segment_sizze_nonzzero_38415) +
                sext_i32_i64(virt_group_id_38426) *
                squot64(segred_group_sizze_28165, segment_sizze_nonzzero_38415);
        int64_t gtid_28118 = srem64(sext_i32_i64(local_tid_38418), res_24027);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24027) && (slt64(gtid_28110, m_24014) &&
                                        slt64(sext_i32_i64(local_tid_38418),
                                              res_24027 *
                                              squot64(segred_group_sizze_28165,
                                                      segment_sizze_nonzzero_38415)))) {
                int32_t res_28173 = ((__global
                                      int32_t *) mem_37178)[gtid_28110];
                int32_t index_primexp_35358 = sext_i64_i32(gtid_28118);
                bool cond_28175 = slt32(index_primexp_35358, res_28173);
                float res_28176;
                
                if (cond_28175) {
                    int64_t i_28177 = sext_i32_i64(index_primexp_35358);
                    float res_28178 = ((__global
                                        float *) res_mem_37111)[gtid_28110 *
                                                                N_24013 +
                                                                i_28177];
                    
                    res_28176 = res_28178;
                } else {
                    res_28176 = 0.0F;
                }
                
                float res_28179 = res_28176 * res_28176;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)] =
                        res_28179;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24027)) {
            // perform segmented scan to imitate reduction
            {
                float x_28169;
                float x_28170;
                float x_38427;
                float x_38428;
                bool ltid_in_bounds_38430;
                
                ltid_in_bounds_38430 = slt64(sext_i32_i64(local_tid_38418),
                                             res_24027 *
                                             squot64(segred_group_sizze_28165,
                                                     segment_sizze_nonzzero_38415));
                
                int32_t skip_threads_38431;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38430) {
                        x_28170 = ((volatile __local
                                    float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)];
                        if ((local_tid_38418 - squot32(local_tid_38418, 32) *
                             32) == 0) {
                            x_28169 = x_28170;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38431 = 1;
                    while (slt32(skip_threads_38431, 32)) {
                        if (sle32(skip_threads_38431, local_tid_38418 -
                                  squot32(local_tid_38418, 32) * 32) &&
                            ltid_in_bounds_38430) {
                            // read operands
                            {
                                x_28169 = ((volatile __local
                                            float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418) -
                                                                        sext_i32_i64(skip_threads_38431)];
                            }
                            // perform operation
                            {
                                bool inactive_38432 =
                                     slt64(srem64(sext_i32_i64(local_tid_38418),
                                                  res_24027),
                                           sext_i32_i64(local_tid_38418) -
                                           sext_i32_i64(local_tid_38418 -
                                           skip_threads_38431));
                                
                                if (inactive_38432) {
                                    x_28169 = x_28170;
                                }
                                if (!inactive_38432) {
                                    float res_28171 = x_28169 + x_28170;
                                    
                                    x_28169 = res_28171;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38420, skip_threads_38431)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38431, local_tid_38418 -
                                  squot32(local_tid_38418, 32) * 32) &&
                            ltid_in_bounds_38430) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)] =
                                    x_28169;
                                x_28170 = x_28169;
                            }
                        }
                        if (sle32(wave_sizze_38420, skip_threads_38431)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38431 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38418 - squot32(local_tid_38418, 32) * 32) ==
                        31 && ltid_in_bounds_38430) {
                        ((volatile __local
                          float *) red_arr_mem_38422)[sext_i32_i64(squot32(local_tid_38418,
                                                                           32))] =
                            x_28169;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38433;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38418, 32) == 0 &&
                            ltid_in_bounds_38430) {
                            x_38428 = ((volatile __local
                                        float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)];
                            if ((local_tid_38418 - squot32(local_tid_38418,
                                                           32) * 32) == 0) {
                                x_38427 = x_38428;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38433 = 1;
                        while (slt32(skip_threads_38433, 32)) {
                            if (sle32(skip_threads_38433, local_tid_38418 -
                                      squot32(local_tid_38418, 32) * 32) &&
                                (squot32(local_tid_38418, 32) == 0 &&
                                 ltid_in_bounds_38430)) {
                                // read operands
                                {
                                    x_38427 = ((volatile __local
                                                float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418) -
                                                                            sext_i32_i64(skip_threads_38433)];
                                }
                                // perform operation
                                {
                                    bool inactive_38434 =
                                         slt64(srem64(sext_i32_i64(local_tid_38418 *
                                                      32 + 32 - 1), res_24027),
                                               sext_i32_i64(local_tid_38418 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38418 -
                                                             skip_threads_38433) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38434) {
                                        x_38427 = x_38428;
                                    }
                                    if (!inactive_38434) {
                                        float res_38429 = x_38427 + x_38428;
                                        
                                        x_38427 = res_38429;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38420, skip_threads_38433)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38433, local_tid_38418 -
                                      squot32(local_tid_38418, 32) * 32) &&
                                (squot32(local_tid_38418, 32) == 0 &&
                                 ltid_in_bounds_38430)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)] =
                                        x_38427;
                                    x_38428 = x_38427;
                                }
                            }
                            if (sle32(wave_sizze_38420, skip_threads_38433)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38433 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38418, 32) == 0 ||
                          !ltid_in_bounds_38430)) {
                        // read operands
                        {
                            x_28170 = x_28169;
                            x_28169 = ((__local
                                        float *) red_arr_mem_38422)[sext_i32_i64(squot32(local_tid_38418,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38435 =
                                 slt64(srem64(sext_i32_i64(local_tid_38418),
                                              res_24027),
                                       sext_i32_i64(local_tid_38418) -
                                       sext_i32_i64(squot32(local_tid_38418,
                                                            32) * 32 - 1));
                            
                            if (inactive_38435) {
                                x_28169 = x_28170;
                            }
                            if (!inactive_38435) {
                                float res_28171 = x_28169 + x_28170;
                                
                                x_28169 = res_28171;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)] =
                                x_28169;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38418, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38422)[sext_i32_i64(local_tid_38418)] =
                            x_28170;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38426) *
                      squot64(segred_group_sizze_28165,
                              segment_sizze_nonzzero_38415) +
                      sext_i32_i64(local_tid_38418), m_24014) &&
                slt64(sext_i32_i64(local_tid_38418),
                      squot64(segred_group_sizze_28165,
                              segment_sizze_nonzzero_38415))) {
                ((__global
                  float *) mem_37181)[sext_i32_i64(virt_group_id_38426) *
                                      squot64(segred_group_sizze_28165,
                                              segment_sizze_nonzzero_38415) +
                                      sext_i32_i64(local_tid_38418)] = ((__local
                                                                         float *) red_arr_mem_38422)[(sext_i32_i64(local_tid_38418) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38415 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28165
}
__kernel void mainDetailedzisegred_small_28140(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38362_backing_aligned_0,
                                               int64_t m_24014, int64_t N_24015,
                                               int64_t res_24027,
                                               int64_t num_groups_28152,
                                               __global
                                               unsigned char *images_mem_36652,
                                               __global
                                               unsigned char *mem_37178,
                                               int64_t segment_sizze_nonzzero_38355)
{
    #define segred_group_sizze_28151 (mainDetailedzisegred_group_sizze_28134)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38362_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38362_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38357;
    int32_t local_tid_38358;
    int64_t group_sizze_38361;
    int32_t wave_sizze_38360;
    int32_t group_tid_38359;
    
    global_tid_38357 = get_global_id(0);
    local_tid_38358 = get_local_id(0);
    group_sizze_38361 = get_local_size(0);
    wave_sizze_38360 = LOCKSTEP_WIDTH;
    group_tid_38359 = get_group_id(0);
    
    int32_t phys_tid_28140;
    
    phys_tid_28140 = global_tid_38357;
    
    __local char *red_arr_mem_38362;
    
    red_arr_mem_38362 = (__local char *) red_arr_mem_38362_backing_0;
    
    int32_t phys_group_id_38364;
    
    phys_group_id_38364 = get_group_id(0);
    for (int32_t i_38365 = 0; i_38365 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014,
                                          squot64(segred_group_sizze_28151,
                                                  segment_sizze_nonzzero_38355))) -
                   phys_group_id_38364, sext_i64_i32(num_groups_28152));
         i_38365++) {
        int32_t virt_group_id_38366 = phys_group_id_38364 + i_38365 *
                sext_i64_i32(num_groups_28152);
        int64_t gtid_28131 = squot64(sext_i32_i64(local_tid_38358),
                                     segment_sizze_nonzzero_38355) +
                sext_i32_i64(virt_group_id_38366) *
                squot64(segred_group_sizze_28151, segment_sizze_nonzzero_38355);
        int64_t gtid_28139 = srem64(sext_i32_i64(local_tid_38358), res_24027);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24027) && (slt64(gtid_28131, m_24014) &&
                                        slt64(sext_i32_i64(local_tid_38358),
                                              res_24027 *
                                              squot64(segred_group_sizze_28151,
                                                      segment_sizze_nonzzero_38355)))) {
                float x_28159 = ((__global
                                  float *) images_mem_36652)[gtid_28131 *
                                                             N_24015 +
                                                             gtid_28139];
                bool res_28160;
                
                res_28160 = futrts_isnan32(x_28159);
                
                bool cond_28161 = !res_28160;
                int32_t res_28162 = btoi_bool_i32(cond_28161);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)] =
                        res_28162;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24027)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_28155;
                int32_t x_28156;
                int32_t x_38367;
                int32_t x_38368;
                bool ltid_in_bounds_38370;
                
                ltid_in_bounds_38370 = slt64(sext_i32_i64(local_tid_38358),
                                             res_24027 *
                                             squot64(segred_group_sizze_28151,
                                                     segment_sizze_nonzzero_38355));
                
                int32_t skip_threads_38371;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38370) {
                        x_28156 = ((volatile __local
                                    int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)];
                        if ((local_tid_38358 - squot32(local_tid_38358, 32) *
                             32) == 0) {
                            x_28155 = x_28156;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38371 = 1;
                    while (slt32(skip_threads_38371, 32)) {
                        if (sle32(skip_threads_38371, local_tid_38358 -
                                  squot32(local_tid_38358, 32) * 32) &&
                            ltid_in_bounds_38370) {
                            // read operands
                            {
                                x_28155 = ((volatile __local
                                            int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358) -
                                                                          sext_i32_i64(skip_threads_38371)];
                            }
                            // perform operation
                            {
                                bool inactive_38372 =
                                     slt64(srem64(sext_i32_i64(local_tid_38358),
                                                  res_24027),
                                           sext_i32_i64(local_tid_38358) -
                                           sext_i32_i64(local_tid_38358 -
                                           skip_threads_38371));
                                
                                if (inactive_38372) {
                                    x_28155 = x_28156;
                                }
                                if (!inactive_38372) {
                                    int32_t res_28157 = add32(x_28155, x_28156);
                                    
                                    x_28155 = res_28157;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38360, skip_threads_38371)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38371, local_tid_38358 -
                                  squot32(local_tid_38358, 32) * 32) &&
                            ltid_in_bounds_38370) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)] =
                                    x_28155;
                                x_28156 = x_28155;
                            }
                        }
                        if (sle32(wave_sizze_38360, skip_threads_38371)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38371 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38358 - squot32(local_tid_38358, 32) * 32) ==
                        31 && ltid_in_bounds_38370) {
                        ((volatile __local
                          int32_t *) red_arr_mem_38362)[sext_i32_i64(squot32(local_tid_38358,
                                                                             32))] =
                            x_28155;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38373;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38358, 32) == 0 &&
                            ltid_in_bounds_38370) {
                            x_38368 = ((volatile __local
                                        int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)];
                            if ((local_tid_38358 - squot32(local_tid_38358,
                                                           32) * 32) == 0) {
                                x_38367 = x_38368;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38373 = 1;
                        while (slt32(skip_threads_38373, 32)) {
                            if (sle32(skip_threads_38373, local_tid_38358 -
                                      squot32(local_tid_38358, 32) * 32) &&
                                (squot32(local_tid_38358, 32) == 0 &&
                                 ltid_in_bounds_38370)) {
                                // read operands
                                {
                                    x_38367 = ((volatile __local
                                                int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358) -
                                                                              sext_i32_i64(skip_threads_38373)];
                                }
                                // perform operation
                                {
                                    bool inactive_38374 =
                                         slt64(srem64(sext_i32_i64(local_tid_38358 *
                                                      32 + 32 - 1), res_24027),
                                               sext_i32_i64(local_tid_38358 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38358 -
                                                             skip_threads_38373) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38374) {
                                        x_38367 = x_38368;
                                    }
                                    if (!inactive_38374) {
                                        int32_t res_38369 = add32(x_38367,
                                                                  x_38368);
                                        
                                        x_38367 = res_38369;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38360, skip_threads_38373)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38373, local_tid_38358 -
                                      squot32(local_tid_38358, 32) * 32) &&
                                (squot32(local_tid_38358, 32) == 0 &&
                                 ltid_in_bounds_38370)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)] =
                                        x_38367;
                                    x_38368 = x_38367;
                                }
                            }
                            if (sle32(wave_sizze_38360, skip_threads_38373)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38373 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38358, 32) == 0 ||
                          !ltid_in_bounds_38370)) {
                        // read operands
                        {
                            x_28156 = x_28155;
                            x_28155 = ((__local
                                        int32_t *) red_arr_mem_38362)[sext_i32_i64(squot32(local_tid_38358,
                                                                                           32)) -
                                                                      1];
                        }
                        // perform operation
                        {
                            bool inactive_38375 =
                                 slt64(srem64(sext_i32_i64(local_tid_38358),
                                              res_24027),
                                       sext_i32_i64(local_tid_38358) -
                                       sext_i32_i64(squot32(local_tid_38358,
                                                            32) * 32 - 1));
                            
                            if (inactive_38375) {
                                x_28155 = x_28156;
                            }
                            if (!inactive_38375) {
                                int32_t res_28157 = add32(x_28155, x_28156);
                                
                                x_28155 = res_28157;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)] =
                                x_28155;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38358, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_38362)[sext_i32_i64(local_tid_38358)] =
                            x_28156;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38366) *
                      squot64(segred_group_sizze_28151,
                              segment_sizze_nonzzero_38355) +
                      sext_i32_i64(local_tid_38358), m_24014) &&
                slt64(sext_i32_i64(local_tid_38358),
                      squot64(segred_group_sizze_28151,
                              segment_sizze_nonzzero_38355))) {
                ((__global
                  int32_t *) mem_37178)[sext_i32_i64(virt_group_id_38366) *
                                        squot64(segred_group_sizze_28151,
                                                segment_sizze_nonzzero_38355) +
                                        sext_i32_i64(local_tid_38358)] =
                    ((__local
                      int32_t *) red_arr_mem_38362)[(sext_i32_i64(local_tid_38358) +
                                                     1) *
                                                    segment_sizze_nonzzero_38355 -
                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28151
}
__kernel void mainDetailedzisegred_small_28291(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38531_backing_aligned_0,
                                               int64_t N_24013, int64_t m_24014,
                                               int64_t res_24375,
                                               int64_t num_groups_28309,
                                               __global
                                               unsigned char *res_mem_37111,
                                               __global
                                               unsigned char *res_mem_37190,
                                               __global
                                               unsigned char *res_mem_37191,
                                               __global
                                               unsigned char *mem_37240,
                                               int64_t segment_sizze_nonzzero_38524)
{
    #define segred_group_sizze_28308 (mainDetailedzisegred_group_sizze_28285)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38531_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38531_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38526;
    int32_t local_tid_38527;
    int64_t group_sizze_38530;
    int32_t wave_sizze_38529;
    int32_t group_tid_38528;
    
    global_tid_38526 = get_global_id(0);
    local_tid_38527 = get_local_id(0);
    group_sizze_38530 = get_local_size(0);
    wave_sizze_38529 = LOCKSTEP_WIDTH;
    group_tid_38528 = get_group_id(0);
    
    int32_t phys_tid_28291;
    
    phys_tid_28291 = global_tid_38526;
    
    __local char *red_arr_mem_38531;
    
    red_arr_mem_38531 = (__local char *) red_arr_mem_38531_backing_0;
    
    int32_t phys_group_id_38533;
    
    phys_group_id_38533 = get_group_id(0);
    for (int32_t i_38534 = 0; i_38534 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014,
                                          squot64(segred_group_sizze_28308,
                                                  segment_sizze_nonzzero_38524))) -
                   phys_group_id_38533, sext_i64_i32(num_groups_28309));
         i_38534++) {
        int32_t virt_group_id_38535 = phys_group_id_38533 + i_38534 *
                sext_i64_i32(num_groups_28309);
        int64_t gtid_28282 = squot64(sext_i32_i64(local_tid_38527),
                                     segment_sizze_nonzzero_38524) +
                sext_i32_i64(virt_group_id_38535) *
                squot64(segred_group_sizze_28308, segment_sizze_nonzzero_38524);
        int64_t gtid_28290 = srem64(sext_i32_i64(local_tid_38527), res_24375);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_24375) && (slt64(gtid_28282, m_24014) &&
                                        slt64(sext_i32_i64(local_tid_38527),
                                              res_24375 *
                                              squot64(segred_group_sizze_28308,
                                                      segment_sizze_nonzzero_38524)))) {
                int32_t x_28317 = ((__global
                                    int32_t *) res_mem_37190)[gtid_28282];
                int32_t index_primexp_35363 = sext_i64_i32(gtid_28290);
                bool cond_28319 = slt32(index_primexp_35363, x_28317);
                float res_28320;
                
                if (cond_28319) {
                    int32_t x_28316 = ((__global
                                        int32_t *) res_mem_37191)[gtid_28282];
                    int32_t x_28321 = add32(x_28316, index_primexp_35363);
                    int32_t x_28322 = sub32(x_28321, x_28317);
                    int32_t i_28323 = add32(1, x_28322);
                    int64_t i_28324 = sext_i32_i64(i_28323);
                    float res_28325 = ((__global
                                        float *) res_mem_37111)[gtid_28282 *
                                                                N_24013 +
                                                                i_28324];
                    
                    res_28320 = res_28325;
                } else {
                    res_28320 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)] =
                        res_28320;
                }
            } else {
                ((__local
                  float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_24375)) {
            // perform segmented scan to imitate reduction
            {
                float x_28312;
                float x_28313;
                float x_38536;
                float x_38537;
                bool ltid_in_bounds_38539;
                
                ltid_in_bounds_38539 = slt64(sext_i32_i64(local_tid_38527),
                                             res_24375 *
                                             squot64(segred_group_sizze_28308,
                                                     segment_sizze_nonzzero_38524));
                
                int32_t skip_threads_38540;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38539) {
                        x_28313 = ((volatile __local
                                    float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)];
                        if ((local_tid_38527 - squot32(local_tid_38527, 32) *
                             32) == 0) {
                            x_28312 = x_28313;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38540 = 1;
                    while (slt32(skip_threads_38540, 32)) {
                        if (sle32(skip_threads_38540, local_tid_38527 -
                                  squot32(local_tid_38527, 32) * 32) &&
                            ltid_in_bounds_38539) {
                            // read operands
                            {
                                x_28312 = ((volatile __local
                                            float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527) -
                                                                        sext_i32_i64(skip_threads_38540)];
                            }
                            // perform operation
                            {
                                bool inactive_38541 =
                                     slt64(srem64(sext_i32_i64(local_tid_38527),
                                                  res_24375),
                                           sext_i32_i64(local_tid_38527) -
                                           sext_i32_i64(local_tid_38527 -
                                           skip_threads_38540));
                                
                                if (inactive_38541) {
                                    x_28312 = x_28313;
                                }
                                if (!inactive_38541) {
                                    float res_28314 = x_28312 + x_28313;
                                    
                                    x_28312 = res_28314;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38529, skip_threads_38540)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38540, local_tid_38527 -
                                  squot32(local_tid_38527, 32) * 32) &&
                            ltid_in_bounds_38539) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)] =
                                    x_28312;
                                x_28313 = x_28312;
                            }
                        }
                        if (sle32(wave_sizze_38529, skip_threads_38540)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38540 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38527 - squot32(local_tid_38527, 32) * 32) ==
                        31 && ltid_in_bounds_38539) {
                        ((volatile __local
                          float *) red_arr_mem_38531)[sext_i32_i64(squot32(local_tid_38527,
                                                                           32))] =
                            x_28312;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38542;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38527, 32) == 0 &&
                            ltid_in_bounds_38539) {
                            x_38537 = ((volatile __local
                                        float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)];
                            if ((local_tid_38527 - squot32(local_tid_38527,
                                                           32) * 32) == 0) {
                                x_38536 = x_38537;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38542 = 1;
                        while (slt32(skip_threads_38542, 32)) {
                            if (sle32(skip_threads_38542, local_tid_38527 -
                                      squot32(local_tid_38527, 32) * 32) &&
                                (squot32(local_tid_38527, 32) == 0 &&
                                 ltid_in_bounds_38539)) {
                                // read operands
                                {
                                    x_38536 = ((volatile __local
                                                float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527) -
                                                                            sext_i32_i64(skip_threads_38542)];
                                }
                                // perform operation
                                {
                                    bool inactive_38543 =
                                         slt64(srem64(sext_i32_i64(local_tid_38527 *
                                                      32 + 32 - 1), res_24375),
                                               sext_i32_i64(local_tid_38527 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38527 -
                                                             skip_threads_38542) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38543) {
                                        x_38536 = x_38537;
                                    }
                                    if (!inactive_38543) {
                                        float res_38538 = x_38536 + x_38537;
                                        
                                        x_38536 = res_38538;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38529, skip_threads_38542)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38542, local_tid_38527 -
                                      squot32(local_tid_38527, 32) * 32) &&
                                (squot32(local_tid_38527, 32) == 0 &&
                                 ltid_in_bounds_38539)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)] =
                                        x_38536;
                                    x_38537 = x_38536;
                                }
                            }
                            if (sle32(wave_sizze_38529, skip_threads_38542)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38542 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38527, 32) == 0 ||
                          !ltid_in_bounds_38539)) {
                        // read operands
                        {
                            x_28313 = x_28312;
                            x_28312 = ((__local
                                        float *) red_arr_mem_38531)[sext_i32_i64(squot32(local_tid_38527,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38544 =
                                 slt64(srem64(sext_i32_i64(local_tid_38527),
                                              res_24375),
                                       sext_i32_i64(local_tid_38527) -
                                       sext_i32_i64(squot32(local_tid_38527,
                                                            32) * 32 - 1));
                            
                            if (inactive_38544) {
                                x_28312 = x_28313;
                            }
                            if (!inactive_38544) {
                                float res_28314 = x_28312 + x_28313;
                                
                                x_28312 = res_28314;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)] =
                                x_28312;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38527, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_38531)[sext_i32_i64(local_tid_38527)] =
                            x_28313;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38535) *
                      squot64(segred_group_sizze_28308,
                              segment_sizze_nonzzero_38524) +
                      sext_i32_i64(local_tid_38527), m_24014) &&
                slt64(sext_i32_i64(local_tid_38527),
                      squot64(segred_group_sizze_28308,
                              segment_sizze_nonzzero_38524))) {
                ((__global
                  float *) mem_37240)[sext_i32_i64(virt_group_id_38535) *
                                      squot64(segred_group_sizze_28308,
                                              segment_sizze_nonzzero_38524) +
                                      sext_i32_i64(local_tid_38527)] = ((__local
                                                                         float *) red_arr_mem_38531)[(sext_i32_i64(local_tid_38527) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38524 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28308
}
__kernel void mainDetailedzisegred_small_29935(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_38753_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_38751_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_38749_backing_aligned_2,
                                               int64_t m_24014,
                                               int64_t iota32_arg_24397,
                                               int64_t num_groups_30108,
                                               __global
                                               unsigned char *mem_37246,
                                               __global
                                               unsigned char *mem_37454,
                                               __global
                                               unsigned char *mem_37456,
                                               __global
                                               unsigned char *mem_37460,
                                               __global
                                               unsigned char *mem_37463,
                                               __global
                                               unsigned char *mem_37465,
                                               __global
                                               unsigned char *mem_37467,
                                               __global
                                               unsigned char *mem_37470,
                                               int64_t segment_sizze_nonzzero_38742)
{
    #define segred_group_sizze_30107 (mainDetailedzisegred_group_sizze_29929)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_38753_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_38753_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_38751_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_38751_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_38749_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_38749_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_38744;
    int32_t local_tid_38745;
    int64_t group_sizze_38748;
    int32_t wave_sizze_38747;
    int32_t group_tid_38746;
    
    global_tid_38744 = get_global_id(0);
    local_tid_38745 = get_local_id(0);
    group_sizze_38748 = get_local_size(0);
    wave_sizze_38747 = LOCKSTEP_WIDTH;
    group_tid_38746 = get_group_id(0);
    
    int32_t phys_tid_29935;
    
    phys_tid_29935 = global_tid_38744;
    
    __local char *red_arr_mem_38749;
    
    red_arr_mem_38749 = (__local char *) red_arr_mem_38749_backing_0;
    
    __local char *red_arr_mem_38751;
    
    red_arr_mem_38751 = (__local char *) red_arr_mem_38751_backing_1;
    
    __local char *red_arr_mem_38753;
    
    red_arr_mem_38753 = (__local char *) red_arr_mem_38753_backing_2;
    
    int32_t phys_group_id_38755;
    
    phys_group_id_38755 = get_group_id(0);
    for (int32_t i_38756 = 0; i_38756 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_24014,
                                          squot64(segred_group_sizze_30107,
                                                  segment_sizze_nonzzero_38742))) -
                   phys_group_id_38755, sext_i64_i32(num_groups_30108));
         i_38756++) {
        int32_t virt_group_id_38757 = phys_group_id_38755 + i_38756 *
                sext_i64_i32(num_groups_30108);
        int64_t gtid_29926 = squot64(sext_i32_i64(local_tid_38745),
                                     segment_sizze_nonzzero_38742) +
                sext_i32_i64(virt_group_id_38757) *
                squot64(segred_group_sizze_30107, segment_sizze_nonzzero_38742);
        int64_t gtid_29934 = srem64(sext_i32_i64(local_tid_38745),
                                    iota32_arg_24397);
        
        // apply map function if in bounds
        {
            if (slt64(0, iota32_arg_24397) && (slt64(gtid_29926, m_24014) &&
                                               slt64(sext_i32_i64(local_tid_38745),
                                                     iota32_arg_24397 *
                                                     squot64(segred_group_sizze_30107,
                                                             segment_sizze_nonzzero_38742)))) {
                int32_t y_30128 = ((__global int32_t *) mem_37456)[gtid_29926];
                float y_30129 = ((__global float *) mem_37454)[gtid_29926];
                float x_30133 = ((__global float *) mem_37460)[gtid_29926 *
                                                               iota32_arg_24397 +
                                                               gtid_29934];
                float x_30134 = ((__global float *) mem_37246)[gtid_29934];
                int32_t index_primexp_35383 = sext_i64_i32(gtid_29934);
                float res_30137 = x_30133 / y_30129;
                bool cond_30138 = slt32(index_primexp_35383, y_30128);
                bool res_30139;
                
                res_30139 = futrts_isnan32(res_30137);
                
                bool res_30140 = !res_30139;
                bool x_30141 = cond_30138 && res_30140;
                float res_30142 = (float) fabs(res_30137);
                bool res_30143 = x_30134 < res_30142;
                bool x_30144 = x_30141 && res_30143;
                float res_30145;
                
                if (cond_30138) {
                    res_30145 = res_30137;
                } else {
                    res_30145 = 0.0F;
                }
                // save map-out results
                {
                    ((__global float *) mem_37470)[gtid_29926 *
                                                   iota32_arg_24397 +
                                                   gtid_29934] = res_30137;
                }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)] =
                        x_30144;
                    ((__local
                      int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)] =
                        index_primexp_35383;
                    ((__local
                      float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)] =
                        res_30145;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)] = 0;
                ((__local
                  int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)] =
                    -1;
                ((__local
                  float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, iota32_arg_24397)) {
            // perform segmented scan to imitate reduction
            {
                bool x_30114;
                int32_t x_30115;
                float x_30116;
                bool x_30117;
                int32_t x_30118;
                float x_30119;
                bool x_38758;
                int32_t x_38759;
                float x_38760;
                bool x_38761;
                int32_t x_38762;
                float x_38763;
                bool ltid_in_bounds_38772;
                
                ltid_in_bounds_38772 = slt64(sext_i32_i64(local_tid_38745),
                                             iota32_arg_24397 *
                                             squot64(segred_group_sizze_30107,
                                                     segment_sizze_nonzzero_38742));
                
                int32_t skip_threads_38773;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_38772) {
                        x_30117 = ((volatile __local
                                    bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)];
                        x_30118 = ((volatile __local
                                    int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)];
                        x_30119 = ((volatile __local
                                    float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)];
                        if ((local_tid_38745 - squot32(local_tid_38745, 32) *
                             32) == 0) {
                            x_30114 = x_30117;
                            x_30115 = x_30118;
                            x_30116 = x_30119;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_38773 = 1;
                    while (slt32(skip_threads_38773, 32)) {
                        if (sle32(skip_threads_38773, local_tid_38745 -
                                  squot32(local_tid_38745, 32) * 32) &&
                            ltid_in_bounds_38772) {
                            // read operands
                            {
                                x_30114 = ((volatile __local
                                            bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745) -
                                                                       sext_i32_i64(skip_threads_38773)];
                                x_30115 = ((volatile __local
                                            int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745) -
                                                                          sext_i32_i64(skip_threads_38773)];
                                x_30116 = ((volatile __local
                                            float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745) -
                                                                        sext_i32_i64(skip_threads_38773)];
                            }
                            // perform operation
                            {
                                bool inactive_38774 =
                                     slt64(srem64(sext_i32_i64(local_tid_38745),
                                                  iota32_arg_24397),
                                           sext_i32_i64(local_tid_38745) -
                                           sext_i32_i64(local_tid_38745 -
                                           skip_threads_38773));
                                
                                if (inactive_38774) {
                                    x_30114 = x_30117;
                                    x_30115 = x_30118;
                                    x_30116 = x_30119;
                                }
                                if (!inactive_38774) {
                                    bool res_30120;
                                    int32_t res_30121;
                                    
                                    if (x_30114) {
                                        res_30120 = x_30114;
                                        res_30121 = x_30115;
                                    } else {
                                        bool x_30122 = x_30117 && x_30117;
                                        bool x_30123 = !x_30117;
                                        bool y_30124 = x_30114 && x_30123;
                                        bool res_30125 = x_30122 || y_30124;
                                        int32_t res_30126;
                                        
                                        if (x_30117) {
                                            res_30126 = x_30118;
                                        } else {
                                            res_30126 = x_30115;
                                        }
                                        res_30120 = res_30125;
                                        res_30121 = res_30126;
                                    }
                                    
                                    float res_30127 = x_30116 + x_30119;
                                    
                                    x_30114 = res_30120;
                                    x_30115 = res_30121;
                                    x_30116 = res_30127;
                                }
                            }
                        }
                        if (sle32(wave_sizze_38747, skip_threads_38773)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_38773, local_tid_38745 -
                                  squot32(local_tid_38745, 32) * 32) &&
                            ltid_in_bounds_38772) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)] =
                                    x_30114;
                                x_30117 = x_30114;
                                ((volatile __local
                                  int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)] =
                                    x_30115;
                                x_30118 = x_30115;
                                ((volatile __local
                                  float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)] =
                                    x_30116;
                                x_30119 = x_30116;
                            }
                        }
                        if (sle32(wave_sizze_38747, skip_threads_38773)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_38773 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_38745 - squot32(local_tid_38745, 32) * 32) ==
                        31 && ltid_in_bounds_38772) {
                        ((volatile __local
                          bool *) red_arr_mem_38749)[sext_i32_i64(squot32(local_tid_38745,
                                                                          32))] =
                            x_30114;
                        ((volatile __local
                          int32_t *) red_arr_mem_38751)[sext_i32_i64(squot32(local_tid_38745,
                                                                             32))] =
                            x_30115;
                        ((volatile __local
                          float *) red_arr_mem_38753)[sext_i32_i64(squot32(local_tid_38745,
                                                                           32))] =
                            x_30116;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_38775;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_38745, 32) == 0 &&
                            ltid_in_bounds_38772) {
                            x_38761 = ((volatile __local
                                        bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)];
                            x_38762 = ((volatile __local
                                        int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)];
                            x_38763 = ((volatile __local
                                        float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)];
                            if ((local_tid_38745 - squot32(local_tid_38745,
                                                           32) * 32) == 0) {
                                x_38758 = x_38761;
                                x_38759 = x_38762;
                                x_38760 = x_38763;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_38775 = 1;
                        while (slt32(skip_threads_38775, 32)) {
                            if (sle32(skip_threads_38775, local_tid_38745 -
                                      squot32(local_tid_38745, 32) * 32) &&
                                (squot32(local_tid_38745, 32) == 0 &&
                                 ltid_in_bounds_38772)) {
                                // read operands
                                {
                                    x_38758 = ((volatile __local
                                                bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745) -
                                                                           sext_i32_i64(skip_threads_38775)];
                                    x_38759 = ((volatile __local
                                                int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745) -
                                                                              sext_i32_i64(skip_threads_38775)];
                                    x_38760 = ((volatile __local
                                                float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745) -
                                                                            sext_i32_i64(skip_threads_38775)];
                                }
                                // perform operation
                                {
                                    bool inactive_38776 =
                                         slt64(srem64(sext_i32_i64(local_tid_38745 *
                                                      32 + 32 - 1),
                                                      iota32_arg_24397),
                                               sext_i32_i64(local_tid_38745 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_38745 -
                                                             skip_threads_38775) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_38776) {
                                        x_38758 = x_38761;
                                        x_38759 = x_38762;
                                        x_38760 = x_38763;
                                    }
                                    if (!inactive_38776) {
                                        bool res_38764;
                                        int32_t res_38765;
                                        
                                        if (x_38758) {
                                            res_38764 = x_38758;
                                            res_38765 = x_38759;
                                        } else {
                                            bool x_38766 = x_38761 && x_38761;
                                            bool x_38767 = !x_38761;
                                            bool y_38768 = x_38758 && x_38767;
                                            bool res_38769 = x_38766 || y_38768;
                                            int32_t res_38770;
                                            
                                            if (x_38761) {
                                                res_38770 = x_38762;
                                            } else {
                                                res_38770 = x_38759;
                                            }
                                            res_38764 = res_38769;
                                            res_38765 = res_38770;
                                        }
                                        
                                        float res_38771 = x_38760 + x_38763;
                                        
                                        x_38758 = res_38764;
                                        x_38759 = res_38765;
                                        x_38760 = res_38771;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_38747, skip_threads_38775)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_38775, local_tid_38745 -
                                      squot32(local_tid_38745, 32) * 32) &&
                                (squot32(local_tid_38745, 32) == 0 &&
                                 ltid_in_bounds_38772)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)] =
                                        x_38758;
                                    x_38761 = x_38758;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)] =
                                        x_38759;
                                    x_38762 = x_38759;
                                    ((volatile __local
                                      float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)] =
                                        x_38760;
                                    x_38763 = x_38760;
                                }
                            }
                            if (sle32(wave_sizze_38747, skip_threads_38775)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_38775 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_38745, 32) == 0 ||
                          !ltid_in_bounds_38772)) {
                        // read operands
                        {
                            x_30117 = x_30114;
                            x_30118 = x_30115;
                            x_30119 = x_30116;
                            x_30114 = ((__local
                                        bool *) red_arr_mem_38749)[sext_i32_i64(squot32(local_tid_38745,
                                                                                        32)) -
                                                                   1];
                            x_30115 = ((__local
                                        int32_t *) red_arr_mem_38751)[sext_i32_i64(squot32(local_tid_38745,
                                                                                           32)) -
                                                                      1];
                            x_30116 = ((__local
                                        float *) red_arr_mem_38753)[sext_i32_i64(squot32(local_tid_38745,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_38777 =
                                 slt64(srem64(sext_i32_i64(local_tid_38745),
                                              iota32_arg_24397),
                                       sext_i32_i64(local_tid_38745) -
                                       sext_i32_i64(squot32(local_tid_38745,
                                                            32) * 32 - 1));
                            
                            if (inactive_38777) {
                                x_30114 = x_30117;
                                x_30115 = x_30118;
                                x_30116 = x_30119;
                            }
                            if (!inactive_38777) {
                                bool res_30120;
                                int32_t res_30121;
                                
                                if (x_30114) {
                                    res_30120 = x_30114;
                                    res_30121 = x_30115;
                                } else {
                                    bool x_30122 = x_30117 && x_30117;
                                    bool x_30123 = !x_30117;
                                    bool y_30124 = x_30114 && x_30123;
                                    bool res_30125 = x_30122 || y_30124;
                                    int32_t res_30126;
                                    
                                    if (x_30117) {
                                        res_30126 = x_30118;
                                    } else {
                                        res_30126 = x_30115;
                                    }
                                    res_30120 = res_30125;
                                    res_30121 = res_30126;
                                }
                                
                                float res_30127 = x_30116 + x_30119;
                                
                                x_30114 = res_30120;
                                x_30115 = res_30121;
                                x_30116 = res_30127;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)] =
                                x_30114;
                            ((__local
                              int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)] =
                                x_30115;
                            ((__local
                              float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)] =
                                x_30116;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_38745, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_38749)[sext_i32_i64(local_tid_38745)] =
                            x_30117;
                        ((__local
                          int32_t *) red_arr_mem_38751)[sext_i32_i64(local_tid_38745)] =
                            x_30118;
                        ((__local
                          float *) red_arr_mem_38753)[sext_i32_i64(local_tid_38745)] =
                            x_30119;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_38757) *
                      squot64(segred_group_sizze_30107,
                              segment_sizze_nonzzero_38742) +
                      sext_i32_i64(local_tid_38745), m_24014) &&
                slt64(sext_i32_i64(local_tid_38745),
                      squot64(segred_group_sizze_30107,
                              segment_sizze_nonzzero_38742))) {
                ((__global
                  bool *) mem_37463)[sext_i32_i64(virt_group_id_38757) *
                                     squot64(segred_group_sizze_30107,
                                             segment_sizze_nonzzero_38742) +
                                     sext_i32_i64(local_tid_38745)] = ((__local
                                                                        bool *) red_arr_mem_38749)[(sext_i32_i64(local_tid_38745) +
                                                                                                    1) *
                                                                                                   segment_sizze_nonzzero_38742 -
                                                                                                   1];
                ((__global
                  int32_t *) mem_37465)[sext_i32_i64(virt_group_id_38757) *
                                        squot64(segred_group_sizze_30107,
                                                segment_sizze_nonzzero_38742) +
                                        sext_i32_i64(local_tid_38745)] =
                    ((__local
                      int32_t *) red_arr_mem_38751)[(sext_i32_i64(local_tid_38745) +
                                                     1) *
                                                    segment_sizze_nonzzero_38742 -
                                                    1];
                ((__global
                  float *) mem_37467)[sext_i32_i64(virt_group_id_38757) *
                                      squot64(segred_group_sizze_30107,
                                              segment_sizze_nonzzero_38742) +
                                      sext_i32_i64(local_tid_38745)] = ((__local
                                                                         float *) red_arr_mem_38753)[(sext_i32_i64(local_tid_38745) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_38742 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_30107
}
__kernel void remove_nanszisegmap_25500(__global int *global_failure,
                                        int64_t m_23999, int64_t n_24000,
                                        int64_t p_24001,
                                        int16_t nan_value_24002, __global
                                        unsigned char *images_mem_36651,
                                        __global unsigned char *mem_36656)
{
    #define segmap_group_sizze_25561 (remove_nanszisegmap_group_sizze_25504)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_37766;
    int32_t local_tid_37767;
    int64_t group_sizze_37770;
    int32_t wave_sizze_37769;
    int32_t group_tid_37768;
    
    global_tid_37766 = get_global_id(0);
    local_tid_37767 = get_local_id(0);
    group_sizze_37770 = get_local_size(0);
    wave_sizze_37769 = LOCKSTEP_WIDTH;
    group_tid_37768 = get_group_id(0);
    
    int32_t phys_tid_25500;
    
    phys_tid_25500 = global_tid_37766;
    
    int64_t gtid_25497;
    
    gtid_25497 = squot64(sext_i32_i64(group_tid_37768) *
                         segmap_group_sizze_25561 +
                         sext_i32_i64(local_tid_37767), n_24000 * p_24001);
    
    int64_t gtid_25498;
    
    gtid_25498 = squot64(sext_i32_i64(group_tid_37768) *
                         segmap_group_sizze_25561 +
                         sext_i32_i64(local_tid_37767) -
                         squot64(sext_i32_i64(group_tid_37768) *
                                 segmap_group_sizze_25561 +
                                 sext_i32_i64(local_tid_37767), n_24000 *
                                 p_24001) * (n_24000 * p_24001), p_24001);
    
    int64_t gtid_25499;
    
    gtid_25499 = sext_i32_i64(group_tid_37768) * segmap_group_sizze_25561 +
        sext_i32_i64(local_tid_37767) - squot64(sext_i32_i64(group_tid_37768) *
                                                segmap_group_sizze_25561 +
                                                sext_i32_i64(local_tid_37767),
                                                n_24000 * p_24001) * (n_24000 *
                                                                      p_24001) -
        squot64(sext_i32_i64(group_tid_37768) * segmap_group_sizze_25561 +
                sext_i32_i64(local_tid_37767) -
                squot64(sext_i32_i64(group_tid_37768) *
                        segmap_group_sizze_25561 +
                        sext_i32_i64(local_tid_37767), n_24000 * p_24001) *
                (n_24000 * p_24001), p_24001) * p_24001;
    if ((slt64(gtid_25497, m_23999) && slt64(gtid_25498, n_24000)) &&
        slt64(gtid_25499, p_24001)) {
        int16_t x_25564 = ((__global int16_t *) images_mem_36651)[gtid_25497 *
                                                                  (p_24001 *
                                                                   n_24000) +
                                                                  gtid_25498 *
                                                                  p_24001 +
                                                                  gtid_25499];
        bool cond_25565 = x_25564 == nan_value_24002;
        float res_25566;
        
        if (cond_25565) {
            res_25566 = NAN;
        } else {
            float res_25567 = sitofp_i16_f32(x_25564);
            
            res_25566 = res_25567;
        }
        ((__global float *) mem_36656)[gtid_25497 * (p_24001 * n_24000) +
                                       gtid_25498 * p_24001 + gtid_25499] =
            res_25566;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25561
}
"""
# Start of values.py.

# Hacky parser/reader/writer for values written in Futhark syntax.
# Used for reading stdin when compiling standalone programs with the
# Python code generator.

import numpy as np
import string
import struct
import sys

class ReaderInput:
    def __init__(self, f):
        self.f = f
        self.lookahead_buffer = []

    def get_char(self):
        if len(self.lookahead_buffer) == 0:
            return self.f.read(1)
        else:
            c = self.lookahead_buffer[0]
            self.lookahead_buffer = self.lookahead_buffer[1:]
            return c

    def unget_char(self, c):
        self.lookahead_buffer = [c] + self.lookahead_buffer

    def get_chars(self, n):
        n1 = min(n, len(self.lookahead_buffer))
        s = b''.join(self.lookahead_buffer[:n1])
        self.lookahead_buffer = self.lookahead_buffer[n1:]
        n2 = n - n1
        if n2 > 0:
            s += self.f.read(n2)
        return s

    def peek_char(self):
        c = self.get_char()
        if c:
            self.unget_char(c)
        return c

def skip_spaces(f):
    c = f.get_char()
    while c != None:
        if c.isspace():
            c = f.get_char()
        elif c == b'-':
          # May be line comment.
          if f.peek_char() == b'-':
            # Yes, line comment. Skip to end of line.
            while (c != b'\n' and c != None):
              c = f.get_char()
          else:
            break
        else:
          break
    if c:
        f.unget_char(c)

def parse_specific_char(f, expected):
    got = f.get_char()
    if got != expected:
        f.unget_char(got)
        raise ValueError
    return True

def parse_specific_string(f, s):
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    read = []
    try:
        for c in bs:
            parse_specific_char(f, c)
            read.append(c)
        return True
    except ValueError:
        for c in read[::-1]:
            f.unget_char(c)
        raise

def optional(p, *args):
    try:
        return p(*args)
    except ValueError:
        return None

def optional_specific_string(f, s):
    c = f.peek_char()
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    if c == bs[0]:
        return parse_specific_string(f, s)
    else:
        return False

def sepBy(p, sep, *args):
    elems = []
    x = optional(p, *args)
    if x != None:
        elems += [x]
        while optional(sep, *args) != None:
            x = p(*args)
            elems += [x]
    return elems

# Assumes '0x' has already been read
def parse_hex_int(f):
    s = b''
    c = f.get_char()
    while c != None:
        if c in b'01234556789ABCDEFabcdef':
            s += c
            c = f.get_char()
        elif c == b'_':
            c = f.get_char() # skip _
        else:
            f.unget_char(c)
            break
    return str(int(s, 16)).encode('utf8') # ugh

def parse_int(f):
    s = b''
    c = f.get_char()
    if c == b'0' and f.peek_char() in b'xX':
        c = f.get_char() # skip X
        return parse_hex_int(f)
    else:
        while c != None:
            if c.isdigit():
                s += c
                c = f.get_char()
            elif c == b'_':
                c = f.get_char() # skip _
            else:
                f.unget_char(c)
                break
        if len(s) == 0:
            raise ValueError
        return s

def parse_int_signed(f):
    s = b''
    c = f.get_char()

    if c == b'-' and f.peek_char().isdigit():
      return c + parse_int(f)
    else:
      if c != b'+':
          f.unget_char(c)
      return parse_int(f)

def read_str_comma(f):
    skip_spaces(f)
    parse_specific_char(f, b',')
    return b','

def read_str_int(f, s):
    skip_spaces(f)
    x = int(parse_int_signed(f))
    optional_specific_string(f, s)
    return x

def read_str_uint(f, s):
    skip_spaces(f)
    x = int(parse_int(f))
    optional_specific_string(f, s)
    return x

def read_str_i8(f):
    return np.int8(read_str_int(f, 'i8'))
def read_str_i16(f):
    return np.int16(read_str_int(f, 'i16'))
def read_str_i32(f):
    return np.int32(read_str_int(f, 'i32'))
def read_str_i64(f):
    return np.int64(read_str_int(f, 'i64'))

def read_str_u8(f):
    return np.uint8(read_str_int(f, 'u8'))
def read_str_u16(f):
    return np.uint16(read_str_int(f, 'u16'))
def read_str_u32(f):
    return np.uint32(read_str_int(f, 'u32'))
def read_str_u64(f):
    return np.uint64(read_str_int(f, 'u64'))

def read_char(f):
    skip_spaces(f)
    parse_specific_char(f, b'\'')
    c = f.get_char()
    parse_specific_char(f, b'\'')
    return c

def read_str_hex_float(f, sign):
    int_part = parse_hex_int(f)
    parse_specific_char(f, b'.')
    frac_part = parse_hex_int(f)
    parse_specific_char(f, b'p')
    exponent = parse_int(f)

    int_val = int(int_part, 16)
    frac_val = float(int(frac_part, 16)) / (16 ** len(frac_part))
    exp_val = int(exponent)

    total_val = (int_val + frac_val) * (2.0 ** exp_val)
    if sign == b'-':
        total_val = -1 * total_val

    return float(total_val)


def read_str_decimal(f):
    skip_spaces(f)
    c = f.get_char()
    if (c == b'-'):
      sign = b'-'
    else:
      f.unget_char(c)
      sign = b''

    # Check for hexadecimal float
    c = f.get_char()
    if (c == '0' and (f.peek_char() in ['x', 'X'])):
        f.get_char()
        return read_str_hex_float(f, sign)
    else:
        f.unget_char(c)

    bef = optional(parse_int, f)
    if bef == None:
        bef = b'0'
        parse_specific_char(f, b'.')
        aft = parse_int(f)
    elif optional(parse_specific_char, f, b'.'):
        aft = parse_int(f)
    else:
        aft = b'0'
    if (optional(parse_specific_char, f, b'E') or
        optional(parse_specific_char, f, b'e')):
        expt = parse_int_signed(f)
    else:
        expt = b'0'
    return float(sign + bef + b'.' + aft + b'E' + expt)

def read_str_f32(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f32.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f32.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f32.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f32')
               return x

def read_str_f64(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f64.nan')
        return np.float64(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f64.inf')
            return np.float64(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f64.inf')
               return np.float64(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f64')
               return x

def read_str_bool(f):
    skip_spaces(f)
    if f.peek_char() == b't':
        parse_specific_string(f, 'true')
        return True
    elif f.peek_char() == b'f':
        parse_specific_string(f, 'false')
        return False
    else:
        raise ValueError

def read_str_empty_array(f, type_name, rank):
    parse_specific_string(f, 'empty')
    parse_specific_char(f, b'(')
    dims = []
    for i in range(rank):
        parse_specific_string(f, '[')
        dims += [int(parse_int(f))]
        parse_specific_string(f, ']')
    if np.product(dims) != 0:
        raise ValueError
    parse_specific_string(f, type_name)
    parse_specific_char(f, b')')

    return tuple(dims)

def read_str_array_elems(f, elem_reader, type_name, rank):
    skip_spaces(f)
    try:
        parse_specific_char(f, b'[')
    except ValueError:
        return read_str_empty_array(f, type_name, rank)
    else:
        xs = sepBy(elem_reader, read_str_comma, f)
        skip_spaces(f)
        parse_specific_char(f, b']')
        return xs

def read_str_array_helper(f, elem_reader, type_name, rank):
    def nested_row_reader(_):
        return read_str_array_helper(f, elem_reader, type_name, rank-1)
    if rank == 1:
        row_reader = elem_reader
    else:
        row_reader = nested_row_reader
    return read_str_array_elems(f, row_reader, type_name, rank)

def expected_array_dims(l, rank):
  if rank > 1:
      n = len(l)
      if n == 0:
          elem = []
      else:
          elem = l[0]
      return [n] + expected_array_dims(elem, rank-1)
  else:
      return [len(l)]

def verify_array_dims(l, dims):
    if dims[0] != len(l):
        raise ValueError
    if len(dims) > 1:
        for x in l:
            verify_array_dims(x, dims[1:])

def read_str_array(f, elem_reader, type_name, rank, bt):
    elems = read_str_array_helper(f, elem_reader, type_name, rank)
    if type(elems) == tuple:
        # Empty array
        return np.empty(elems, dtype=bt)
    else:
        dims = expected_array_dims(elems, rank)
        verify_array_dims(elems, dims)
        return np.array(elems, dtype=bt)

################################################################################

READ_BINARY_VERSION = 2

# struct format specified at
# https://docs.python.org/2/library/struct.html#format-characters

def mk_bin_scalar_reader(t):
    def bin_reader(f):
        fmt = FUTHARK_PRIMTYPES[t]['bin_format']
        size = FUTHARK_PRIMTYPES[t]['size']
        return struct.unpack('<' + fmt, f.get_chars(size))[0]
    return bin_reader

read_bin_i8 = mk_bin_scalar_reader('i8')
read_bin_i16 = mk_bin_scalar_reader('i16')
read_bin_i32 = mk_bin_scalar_reader('i32')
read_bin_i64 = mk_bin_scalar_reader('i64')

read_bin_u8 = mk_bin_scalar_reader('u8')
read_bin_u16 = mk_bin_scalar_reader('u16')
read_bin_u32 = mk_bin_scalar_reader('u32')
read_bin_u64 = mk_bin_scalar_reader('u64')

read_bin_f32 = mk_bin_scalar_reader('f32')
read_bin_f64 = mk_bin_scalar_reader('f64')

read_bin_bool = mk_bin_scalar_reader('bool')

def read_is_binary(f):
    skip_spaces(f)
    c = f.get_char()
    if c == b'b':
        bin_version = read_bin_u8(f)
        if bin_version != READ_BINARY_VERSION:
            panic(1, "binary-input: File uses version %i, but I only understand version %i.\n",
                  bin_version, READ_BINARY_VERSION)
        return True
    else:
        f.unget_char(c)
        return False

FUTHARK_PRIMTYPES = {
    'i8':  {'binname' : b"  i8",
            'size' : 1,
            'bin_reader': read_bin_i8,
            'str_reader': read_str_i8,
            'bin_format': 'b',
            'numpy_type': np.int8 },

    'i16': {'binname' : b" i16",
            'size' : 2,
            'bin_reader': read_bin_i16,
            'str_reader': read_str_i16,
            'bin_format': 'h',
            'numpy_type': np.int16 },

    'i32': {'binname' : b" i32",
            'size' : 4,
            'bin_reader': read_bin_i32,
            'str_reader': read_str_i32,
            'bin_format': 'i',
            'numpy_type': np.int32 },

    'i64': {'binname' : b" i64",
            'size' : 8,
            'bin_reader': read_bin_i64,
            'str_reader': read_str_i64,
            'bin_format': 'q',
            'numpy_type': np.int64},

    'u8':  {'binname' : b"  u8",
            'size' : 1,
            'bin_reader': read_bin_u8,
            'str_reader': read_str_u8,
            'bin_format': 'B',
            'numpy_type': np.uint8 },

    'u16': {'binname' : b" u16",
            'size' : 2,
            'bin_reader': read_bin_u16,
            'str_reader': read_str_u16,
            'bin_format': 'H',
            'numpy_type': np.uint16 },

    'u32': {'binname' : b" u32",
            'size' : 4,
            'bin_reader': read_bin_u32,
            'str_reader': read_str_u32,
            'bin_format': 'I',
            'numpy_type': np.uint32 },

    'u64': {'binname' : b" u64",
            'size' : 8,
            'bin_reader': read_bin_u64,
            'str_reader': read_str_u64,
            'bin_format': 'Q',
            'numpy_type': np.uint64 },

    'f32': {'binname' : b" f32",
            'size' : 4,
            'bin_reader': read_bin_f32,
            'str_reader': read_str_f32,
            'bin_format': 'f',
            'numpy_type': np.float32 },

    'f64': {'binname' : b" f64",
            'size' : 8,
            'bin_reader': read_bin_f64,
            'str_reader': read_str_f64,
            'bin_format': 'd',
            'numpy_type': np.float64 },

    'bool': {'binname' : b"bool",
             'size' : 1,
             'bin_reader': read_bin_bool,
             'str_reader': read_str_bool,
             'bin_format': 'b',
             'numpy_type': np.bool }
}

def read_bin_read_type(f):
    read_binname = f.get_chars(4)

    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['binname'] == read_binname:
            return k
    panic(1, "binary-input: Did not recognize the type '%s'.\n", read_binname)

def numpy_type_to_type_name(t):
    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['numpy_type'] == t:
            return k
    raise Exception('Unknown Numpy type: {}'.format(t))

def read_bin_ensure_scalar(f, expected_type):
  dims = read_bin_i8(f)

  if dims != 0:
      panic(1, "binary-input: Expected scalar (0 dimensions), but got array with %i dimensions.\n", dims)

  bin_type = read_bin_read_type(f)
  if bin_type != expected_type:
      panic(1, "binary-input: Expected scalar of type %s but got scalar of type %s.\n",
            expected_type, bin_type)

# ------------------------------------------------------------------------------
# General interface for reading Primitive Futhark Values
# ------------------------------------------------------------------------------

def read_scalar(f, ty):
    if read_is_binary(f):
        read_bin_ensure_scalar(f, ty)
        return FUTHARK_PRIMTYPES[ty]['bin_reader'](f)
    return FUTHARK_PRIMTYPES[ty]['str_reader'](f)

def read_array(f, expected_type, rank):
    if not read_is_binary(f):
        str_reader = FUTHARK_PRIMTYPES[expected_type]['str_reader']
        return read_str_array(f, str_reader, expected_type, rank,
                              FUTHARK_PRIMTYPES[expected_type]['numpy_type'])

    bin_rank = read_bin_u8(f)

    if bin_rank != rank:
        panic(1, "binary-input: Expected %i dimensions, but got array with %i dimensions.\n",
              rank, bin_rank)

    bin_type_enum = read_bin_read_type(f)
    if expected_type != bin_type_enum:
        panic(1, "binary-input: Expected %iD-array with element type '%s' but got %iD-array with element type '%s'.\n",
              rank, expected_type, bin_rank, bin_type_enum)

    shape = []
    elem_count = 1
    for i in range(rank):
        bin_size = read_bin_u64(f)
        elem_count *= bin_size
        shape.append(bin_size)

    bin_fmt = FUTHARK_PRIMTYPES[bin_type_enum]['bin_format']

    # We first read the expected number of types into a bytestring,
    # then use np.fromstring.  This is because np.fromfile does not
    # work on things that are insufficiently file-like, like a network
    # stream.
    bytes = f.get_chars(elem_count * FUTHARK_PRIMTYPES[expected_type]['size'])
    arr = np.fromstring(bytes, dtype=FUTHARK_PRIMTYPES[bin_type_enum]['numpy_type'])
    arr.shape = shape

    return arr

if sys.version_info >= (3,0):
    input_reader = ReaderInput(sys.stdin.buffer)
else:
    input_reader = ReaderInput(sys.stdin)

import re

def read_value(type_desc, reader=input_reader):
    """Read a value of the given type.  The type is a string
representation of the Futhark type."""
    m = re.match(r'((?:\[\])*)([a-z0-9]+)$', type_desc)
    if m:
        dims = int(len(m.group(1))/2)
        basetype = m.group(2)
        assert basetype in FUTHARK_PRIMTYPES, "Unknown type: {}".format(type_desc)
        if dims > 0:
            return read_array(reader, basetype, dims)
        else:
            return read_scalar(reader, basetype)
        return (dims, basetype)

def end_of_input(entry, f=input_reader):
    skip_spaces(f)
    if f.get_char() != b'':
        panic(1, "Expected EOF on stdin after reading input for \"%s\".", entry)

def write_value_text(v, out=sys.stdout):
    if type(v) == np.uint8:
        out.write("%uu8" % v)
    elif type(v) == np.uint16:
        out.write("%uu16" % v)
    elif type(v) == np.uint32:
        out.write("%uu32" % v)
    elif type(v) == np.uint64:
        out.write("%uu64" % v)
    elif type(v) == np.int8:
        out.write("%di8" % v)
    elif type(v) == np.int16:
        out.write("%di16" % v)
    elif type(v) == np.int32:
        out.write("%di32" % v)
    elif type(v) == np.int64:
        out.write("%di64" % v)
    elif type(v) in [np.bool, np.bool_]:
        if v:
            out.write("true")
        else:
            out.write("false")
    elif type(v) == np.float32:
        if np.isnan(v):
            out.write('f32.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f32.inf')
            else:
                out.write('-f32.inf')
        else:
            out.write("%.6ff32" % v)
    elif type(v) == np.float64:
        if np.isnan(v):
            out.write('f64.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f64.inf')
            else:
                out.write('-f64.inf')
        else:
            out.write("%.6ff64" % v)
    elif type(v) == np.ndarray:
        if np.product(v.shape) == 0:
            tname = numpy_type_to_type_name(v.dtype)
            out.write('empty({}{})'.format(''.join(['[{}]'.format(d)
                                                    for d in v.shape]), tname))
        else:
            first = True
            out.write('[')
            for x in v:
                if not first: out.write(', ')
                first = False
                write_value(x, out=out)
            out.write(']')
    else:
        raise Exception("Cannot print value of type {}: {}".format(type(v), v))

type_strs = { np.dtype('int8'): b'  i8',
              np.dtype('int16'): b' i16',
              np.dtype('int32'): b' i32',
              np.dtype('int64'): b' i64',
              np.dtype('uint8'): b'  u8',
              np.dtype('uint16'): b' u16',
              np.dtype('uint32'): b' u32',
              np.dtype('uint64'): b' u64',
              np.dtype('float32'): b' f32',
              np.dtype('float64'): b' f64',
              np.dtype('bool'): b'bool'}

def construct_binary_value(v):
    t = v.dtype
    shape = v.shape

    elems = 1
    for d in shape:
        elems *= d

    num_bytes = 1 + 1 + 1 + 4 + len(shape) * 8 + elems * t.itemsize
    bytes = bytearray(num_bytes)
    bytes[0] = np.int8(ord('b'))
    bytes[1] = 2
    bytes[2] = np.int8(len(shape))
    bytes[3:7] = type_strs[t]

    for i in range(len(shape)):
        bytes[7+i*8:7+(i+1)*8] = np.int64(shape[i]).tostring()

    bytes[7+len(shape)*8:] = np.ascontiguousarray(v).tostring()

    return bytes

def write_value_binary(v, out=sys.stdout):
    if sys.version_info >= (3,0):
        out = out.buffer
    out.write(construct_binary_value(v))

def write_value(v, out=sys.stdout, binary=False):
    if binary:
        return write_value_binary(v, out=out)
    else:
        return write_value_text(v, out=out)

# End of values.py.
# Start of memory.py.

import ctypes as ct

def addressOffset(x, offset, bt):
  return ct.cast(ct.addressof(x.contents)+int(offset), ct.POINTER(bt))

def allocateMem(size):
  return ct.cast((ct.c_byte * max(0,size))(), ct.POINTER(ct.c_byte))

# Copy an array if its is not-None.  This is important for treating
# Numpy arrays as flat memory, but has some overhead.
def normaliseArray(x):
  if (x.base is x) or (x.base is None):
    return x
  else:
    return x.copy()

def unwrapArray(x):
  return normaliseArray(x).ctypes.data_as(ct.POINTER(ct.c_byte))

def createArray(x, shape):
  # HACK: np.ctypeslib.as_array may fail if the shape contains zeroes,
  # for some reason.
  if any(map(lambda x: x == 0, shape)):
      return np.ndarray(shape, dtype=x._type_)
  else:
      return np.ctypeslib.as_array(x, shape=shape)

def indexArray(x, offset, bt, nptype):
  return nptype(addressOffset(x, offset*ct.sizeof(bt), bt)[0])

def writeScalarArray(x, offset, v):
  ct.memmove(ct.addressof(x.contents)+int(offset)*ct.sizeof(v), ct.addressof(v), ct.sizeof(v))

# An opaque Futhark value.
class opaque(object):
  def __init__(self, desc, *payload):
    self.data = payload
    self.desc = desc

  def __repr__(self):
    return "<opaque Futhark value of type {}>".format(self.desc)

# End of memory.py.
# Start of panic.py.

def panic(exitcode, fmt, *args):
    sys.stderr.write('%s: ' % sys.argv[0])
    sys.stderr.write(fmt % args)
    sys.stderr.write('\n')
    sys.exit(exitcode)

# End of panic.py.
# Start of tuning.py

def read_tuning_file(kvs, f):
    for line in f.read().splitlines():
        size, value = line.split('=')
        kvs[size] = int(value)
    return kvs

# End of tuning.py.
# Start of scalar.py.

import numpy as np
import math
import struct

def intlit(t, x):
  if t == np.int8:
    return np.int8(x)
  elif t == np.int16:
    return np.int16(x)
  elif t == np.int32:
    return np.int32(x)
  else:
    return np.int64(x)

def signed(x):
  if type(x) == np.uint8:
    return np.int8(x)
  elif type(x) == np.uint16:
    return np.int16(x)
  elif type(x) == np.uint32:
    return np.int32(x)
  else:
    return np.int64(x)

def unsigned(x):
  if type(x) == np.int8:
    return np.uint8(x)
  elif type(x) == np.int16:
    return np.uint16(x)
  elif type(x) == np.int32:
    return np.uint32(x)
  else:
    return np.uint64(x)

def shlN(x,y):
  return x << y

def ashrN(x,y):
  return x >> y

# Python is so slow that we just make all the unsafe operations safe,
# always.

def sdivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x // y

def sdiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return (x+y-intlit(type(x), 1)) // y

def smodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x % y

def udivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) // unsigned(y))

def udiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed((unsigned(x)+unsigned(y)-unsigned(intlit(type(x),1))) // unsigned(y))

def umodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) % unsigned(y))

def squotN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.floor_divide(np.abs(x), np.abs(y)) * np.sign(x) * np.sign(y)

def sremN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.remainder(np.abs(x), np.abs(y)) * np.sign(x)

def sminN(x,y):
  return min(x,y)

def smaxN(x,y):
  return max(x,y)

def uminN(x,y):
  return signed(min(unsigned(x),unsigned(y)))

def umaxN(x,y):
  return signed(max(unsigned(x),unsigned(y)))

def fminN(x,y):
  return min(x,y)

def fmaxN(x,y):
  return max(x,y)

def powN(x,y):
  return x ** y

def fpowN(x,y):
  return x ** y

def sleN(x,y):
  return x <= y

def sltN(x,y):
  return x < y

def uleN(x,y):
  return unsigned(x) <= unsigned(y)

def ultN(x,y):
  return unsigned(x) < unsigned(y)

def lshr8(x,y):
  return np.int8(np.uint8(x) >> np.uint8(y))

def lshr16(x,y):
  return np.int16(np.uint16(x) >> np.uint16(y))

def lshr32(x,y):
  return np.int32(np.uint32(x) >> np.uint32(y))

def lshr64(x,y):
  return np.int64(np.uint64(x) >> np.uint64(y))

def sext_T_i8(x):
  return np.int8(x)

def sext_T_i16(x):
  return np.int16(x)

def sext_T_i32(x):
  return np.int32(x)

def sext_T_i64(x):
  return np.int64(x)

def itob_T_bool(x):
  return np.bool(x)

def btoi_bool_i8(x):
  return np.int8(x)

def btoi_bool_i16(x):
  return np.int8(x)

def btoi_bool_i32(x):
  return np.int8(x)

def btoi_bool_i64(x):
  return np.int8(x)

def zext_i8_i8(x):
  return np.int8(np.uint8(x))

def zext_i8_i16(x):
  return np.int16(np.uint8(x))

def zext_i8_i32(x):
  return np.int32(np.uint8(x))

def zext_i8_i64(x):
  return np.int64(np.uint8(x))

def zext_i16_i8(x):
  return np.int8(np.uint16(x))

def zext_i16_i16(x):
  return np.int16(np.uint16(x))

def zext_i16_i32(x):
  return np.int32(np.uint16(x))

def zext_i16_i64(x):
  return np.int64(np.uint16(x))

def zext_i32_i8(x):
  return np.int8(np.uint32(x))

def zext_i32_i16(x):
  return np.int16(np.uint32(x))

def zext_i32_i32(x):
  return np.int32(np.uint32(x))

def zext_i32_i64(x):
  return np.int64(np.uint32(x))

def zext_i64_i8(x):
  return np.int8(np.uint64(x))

def zext_i64_i16(x):
  return np.int16(np.uint64(x))

def zext_i64_i32(x):
  return np.int32(np.uint64(x))

def zext_i64_i64(x):
  return np.int64(np.uint64(x))

sdiv8 = sdiv16 = sdiv32 = sdiv64 = sdivN
sdiv_up8 = sdiv1_up6 = sdiv_up32 = sdiv_up64 = sdiv_upN
sdiv_safe8 = sdiv1_safe6 = sdiv_safe32 = sdiv_safe64 = sdivN
sdiv_up_safe8 = sdiv_up1_safe6 = sdiv_up_safe32 = sdiv_up_safe64 = sdiv_upN
smod8 = smod16 = smod32 = smod64 = smodN
smod_safe8 = smod_safe16 = smod_safe32 = smod_safe64 = smodN
udiv8 = udiv16 = udiv32 = udiv64 = udivN
udiv_up8 = udiv_up16 = udiv_up32 = udiv_up64 = udivN
udiv_safe8 = udiv_safe16 = udiv_safe32 = udiv_safe64 = udiv_upN
udiv_up_safe8 = udiv_up_safe16 = udiv_up_safe32 = udiv_up_safe64 = udiv_upN
umod8 = umod16 = umod32 = umod64 = umodN
umod_safe8 = umod_safe16 = umod_safe32 = umod_safe64 = umodN
squot8 = squot16 = squot32 = squot64 = squotN
squot_safe8 = squot_safe16 = squot_safe32 = squot_safe64 = squotN
srem8 = srem16 = srem32 = srem64 = sremN
srem_safe8 = srem_safe16 = srem_safe32 = srem_safe64 = sremN

shl8 = shl16 = shl32 = shl64 = shlN
ashr8 = ashr16 = ashr32 = ashr64 = ashrN
smax8 = smax16 = smax32 = smax64 = smaxN
smin8 = smin16 = smin32 = smin64 = sminN
umax8 = umax16 = umax32 = umax64 = umaxN
umin8 = umin16 = umin32 = umin64 = uminN
pow8 = pow16 = pow32 = pow64 = powN
fpow32 = fpow64 = fpowN
fmax32 = fmax64 = fmaxN
fmin32 = fmin64 = fminN
sle8 = sle16 = sle32 = sle64 = sleN
slt8 = slt16 = slt32 = slt64 = sltN
ule8 = ule16 = ule32 = ule64 = uleN
ult8 = ult16 = ult32 = ult64 = ultN
sext_i8_i8 = sext_i16_i8 = sext_i32_i8 = sext_i64_i8 = sext_T_i8
sext_i8_i16 = sext_i16_i16 = sext_i32_i16 = sext_i64_i16 = sext_T_i16
sext_i8_i32 = sext_i16_i32 = sext_i32_i32 = sext_i64_i32 = sext_T_i32
sext_i8_i64 = sext_i16_i64 = sext_i32_i64 = sext_i64_i64 = sext_T_i64
itob_i8_bool = itob_i16_bool = itob_i32_bool = itob_i64_bool = itob_T_bool

def clz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if x < 0:
      break
    n += 1
    x <<= np.int8(1)
  return n

def ctz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if (x & 1) == 1:
      break
    n += 1
    x >>= np.int8(1)
  return n

def popc_T(x):
  c = np.int32(0)
  while x != 0:
    x &= x - np.int8(1)
    c += np.int8(1)
  return c

futhark_popc8 = futhark_popc16 = futhark_popc32 = futhark_popc64 = popc_T
futhark_clzz8 = futhark_clzz16 = futhark_clzz32 = futhark_clzz64 = clz_T
futhark_ctzz8 = futhark_ctzz16 = futhark_ctzz32 = futhark_ctzz64 = ctz_T

def ssignum(x):
  return np.sign(x)

def usignum(x):
  if x < 0:
    return ssignum(-x)
  else:
    return ssignum(x)

def sitofp_T_f32(x):
  return np.float32(x)
sitofp_i8_f32 = sitofp_i16_f32 = sitofp_i32_f32 = sitofp_i64_f32 = sitofp_T_f32

def sitofp_T_f64(x):
  return np.float64(x)
sitofp_i8_f64 = sitofp_i16_f64 = sitofp_i32_f64 = sitofp_i64_f64 = sitofp_T_f64

def uitofp_T_f32(x):
  return np.float32(unsigned(x))
uitofp_i8_f32 = uitofp_i16_f32 = uitofp_i32_f32 = uitofp_i64_f32 = uitofp_T_f32

def uitofp_T_f64(x):
  return np.float64(unsigned(x))
uitofp_i8_f64 = uitofp_i16_f64 = uitofp_i32_f64 = uitofp_i64_f64 = uitofp_T_f64

def fptosi_T_i8(x):
  return np.int8(np.trunc(x))
fptosi_f32_i8 = fptosi_f64_i8 = fptosi_T_i8

def fptosi_T_i16(x):
  return np.int16(np.trunc(x))
fptosi_f32_i16 = fptosi_f64_i16 = fptosi_T_i16

def fptosi_T_i32(x):
  return np.int32(np.trunc(x))
fptosi_f32_i32 = fptosi_f64_i32 = fptosi_T_i32

def fptosi_T_i64(x):
  return np.int64(np.trunc(x))
fptosi_f32_i64 = fptosi_f64_i64 = fptosi_T_i64

def fptoui_T_i8(x):
  return np.uint8(np.trunc(x))
fptoui_f32_i8 = fptoui_f64_i8 = fptoui_T_i8

def fptoui_T_i16(x):
  return np.uint16(np.trunc(x))
fptoui_f32_i16 = fptoui_f64_i16 = fptoui_T_i16

def fptoui_T_i32(x):
  return np.uint32(np.trunc(x))
fptoui_f32_i32 = fptoui_f64_i32 = fptoui_T_i32

def fptoui_T_i64(x):
  return np.uint64(np.trunc(x))
fptoui_f32_i64 = fptoui_f64_i64 = fptoui_T_i64

def fpconv_f32_f64(x):
  return np.float64(x)

def fpconv_f64_f32(x):
  return np.float32(x)

def futhark_mul_hi8(a, b):
  a = np.uint64(np.uint8(a))
  b = np.uint64(np.uint8(b))
  return np.int8((a*b) >> np.uint64(8))

def futhark_mul_hi16(a, b):
  a = np.uint64(np.uint16(a))
  b = np.uint64(np.uint16(b))
  return np.int16((a*b) >> np.uint64(16))

def futhark_mul_hi32(a, b):
  a = np.uint64(np.uint32(a))
  b = np.uint64(np.uint32(b))
  return np.int32((a*b) >> np.uint64(32))

# This one is done with arbitrary-precision integers.
def futhark_mul_hi64(a, b):
  a = int(np.uint64(a))
  b = int(np.uint64(b))
  return np.int64(np.uint64(a*b >> 64))

def futhark_mad_hi8(a, b, c):
  return futhark_mul_hi8(a,b) + c

def futhark_mad_hi16(a, b, c):
  return futhark_mul_hi16(a,b) + c

def futhark_mad_hi32(a, b, c):
  return futhark_mul_hi32(a,b) + c

def futhark_mad_hi64(a, b, c):
  return futhark_mul_hi64(a,b) + c

def futhark_log64(x):
  return np.float64(np.log(x))

def futhark_log2_64(x):
  return np.float64(np.log2(x))

def futhark_log10_64(x):
  return np.float64(np.log10(x))

def futhark_sqrt64(x):
  return np.sqrt(x)

def futhark_exp64(x):
  return np.exp(x)

def futhark_cos64(x):
  return np.cos(x)

def futhark_sin64(x):
  return np.sin(x)

def futhark_tan64(x):
  return np.tan(x)

def futhark_acos64(x):
  return np.arccos(x)

def futhark_asin64(x):
  return np.arcsin(x)

def futhark_atan64(x):
  return np.arctan(x)

def futhark_cosh64(x):
  return np.cosh(x)

def futhark_sinh64(x):
  return np.sinh(x)

def futhark_tanh64(x):
  return np.tanh(x)

def futhark_acosh64(x):
  return np.arccosh(x)

def futhark_asinh64(x):
  return np.arcsinh(x)

def futhark_atanh64(x):
  return np.arctanh(x)

def futhark_atan2_64(x, y):
  return np.arctan2(x, y)

def futhark_gamma64(x):
  return np.float64(math.gamma(x))

def futhark_lgamma64(x):
  return np.float64(math.lgamma(x))

def futhark_round64(x):
  return np.round(x)

def futhark_ceil64(x):
  return np.ceil(x)

def futhark_floor64(x):
  return np.floor(x)

def futhark_isnan64(x):
  return np.isnan(x)

def futhark_isinf64(x):
  return np.isinf(x)

def futhark_to_bits64(x):
  s = struct.pack('>d', x)
  return np.int64(struct.unpack('>q', s)[0])

def futhark_from_bits64(x):
  s = struct.pack('>q', x)
  return np.float64(struct.unpack('>d', s)[0])

def futhark_log32(x):
  return np.float32(np.log(x))

def futhark_log2_32(x):
  return np.float32(np.log2(x))

def futhark_log10_32(x):
  return np.float32(np.log10(x))

def futhark_sqrt32(x):
  return np.float32(np.sqrt(x))

def futhark_exp32(x):
  return np.exp(x)

def futhark_cos32(x):
  return np.cos(x)

def futhark_sin32(x):
  return np.sin(x)

def futhark_tan32(x):
  return np.tan(x)

def futhark_acos32(x):
  return np.arccos(x)

def futhark_asin32(x):
  return np.arcsin(x)

def futhark_atan32(x):
  return np.arctan(x)

def futhark_cosh32(x):
  return np.cosh(x)

def futhark_sinh32(x):
  return np.sinh(x)

def futhark_tanh32(x):
  return np.tanh(x)

def futhark_acosh32(x):
  return np.arccosh(x)

def futhark_asinh32(x):
  return np.arcsinh(x)

def futhark_atanh32(x):
  return np.arctanh(x)

def futhark_atan2_32(x, y):
  return np.arctan2(x, y)

def futhark_gamma32(x):
  return np.float32(math.gamma(x))

def futhark_lgamma32(x):
  return np.float32(math.lgamma(x))

def futhark_round32(x):
  return np.round(x)

def futhark_ceil32(x):
  return np.ceil(x)

def futhark_floor32(x):
  return np.floor(x)

def futhark_isnan32(x):
  return np.isnan(x)

def futhark_isinf32(x):
  return np.isinf(x)

def futhark_to_bits32(x):
  s = struct.pack('>f', x)
  return np.int32(struct.unpack('>l', s)[0])

def futhark_from_bits32(x):
  s = struct.pack('>l', x)
  return np.float32(struct.unpack('>f', s)[0])

def futhark_lerp32(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp64(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_mad32(a, b, c):
  return a * b + c

def futhark_mad64(a, b, c):
  return a * b + c

def futhark_fma32(a, b, c):
  return a * b + c

def futhark_fma64(a, b, c):
  return a * b + c

# End of scalar.py.
class bfastfinal:
  entry_points = {"main": (["i32", "i32", "i32", "f32", "f32", "f32", "[]i32",
                            "[][]f32"], ["[]i32", "[]f32", "[]f32"]),
                  "mainDetailed": (["i32", "i32", "i32", "f32", "f32", "f32",
                                    "[]i32", "[][]f32"], ["[]f32", "[]i32",
                                                          "[]i32", "[]f32",
                                                          "[][]f32", "[][]f32",
                                                          "[]f32", "[]i32",
                                                          "[]f32", "[]f32",
                                                          "[][]f32",
                                                          "[][]f32"]),
                  "remove_nans": (["i16", "[][][]i16"], ["[][][]f32"]),
                  "reshapeTransp": (["[][][]f32"], ["[][]f32"])}
  def __init__(self, command_queue=None, interactive=False,
               platform_pref=preferred_platform, device_pref=preferred_device,
               default_group_size=default_group_size,
               default_num_groups=default_num_groups,
               default_tile_size=default_tile_size,
               default_threshold=default_threshold, sizes=sizes):
    size_heuristics=[("NVIDIA CUDA", cl.device_type.GPU, "lockstep_width",
      lambda device: np.int32(32)), ("AMD Accelerated Parallel Processing",
                                     cl.device_type.GPU, "lockstep_width",
                                     lambda device: np.int32(32)), ("",
                                                                    cl.device_type.GPU,
                                                                    "lockstep_width",
                                                                    lambda device: np.int32(1)),
     ("", cl.device_type.GPU, "num_groups",
      lambda device: (np.int32(4) * device.get_info(getattr(cl.device_info,
                                                            "MAX_COMPUTE_UNITS")))),
     ("", cl.device_type.GPU, "group_size", lambda device: np.int32(256)), ("",
                                                                            cl.device_type.GPU,
                                                                            "tile_size",
                                                                            lambda device: np.int32(32)),
     ("", cl.device_type.GPU, "threshold", lambda device: np.int32(32768)), ("",
                                                                             cl.device_type.CPU,
                                                                             "lockstep_width",
                                                                             lambda device: np.int32(1)),
     ("", cl.device_type.CPU, "num_groups",
      lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS"))),
     ("", cl.device_type.CPU, "group_size", lambda device: np.int32(32)), ("",
                                                                           cl.device_type.CPU,
                                                                           "tile_size",
                                                                           lambda device: np.int32(4)),
     ("", cl.device_type.CPU, "threshold",
      lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))]
    self.global_failure_args_max = 2
    self.failure_msgs=["Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:175:5-58\n   #4  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:138:70-84\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:139:45-59\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:46-50\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:54-58\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:150:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:138:70-84\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:139:45-59\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:46-50\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:54-58\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:150:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:138:70-84\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:139:45-59\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:46-50\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:54-58\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:150:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:168:3-56\n   #4  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:138:70-84\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:139:45-59\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:46-50\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:54-58\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:150:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:138:70-84\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:139:45-59\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:46-50\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:54-58\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:150:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:138:70-84\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:139:45-59\n   #1  bfastfinal.fut:138:29-141:52\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:118:50-158:9\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:46-50\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:149:54-58\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:150:45-49\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:138:29-150:50\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n"]
    program = initialise_opencl_object(self,
                                       program_src=fut_opencl_src,
                                       command_queue=command_queue,
                                       interactive=interactive,
                                       platform_pref=platform_pref,
                                       device_pref=device_pref,
                                       default_group_size=default_group_size,
                                       default_num_groups=default_num_groups,
                                       default_tile_size=default_tile_size,
                                       default_threshold=default_threshold,
                                       size_heuristics=size_heuristics,
                                       required_types=["i16", "i32", "i64", "f32", "bool", "cert"],
                                       user_sizes=sizes,
                                       all_sizes={"builtin#replicate_f32.group_size_38209": {"class": "group_size",
                                                                                   "value": None},
                                        "builtin#replicate_i32.group_size_38218": {"class": "group_size",
                                                                                   "value": None},
                                        "main.group_size_37913": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30601": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30779": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30907": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30939": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_30986": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31017": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31521": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31739": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31793": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31860": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_31952": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32157": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32298": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32335": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32430": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32711": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32786": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_32935": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33037": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33184": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33308": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_33381": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34092": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34419": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34669": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34730": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_34855": {"class": "group_size", "value": None},
                                        "main.segmap_num_groups_30941": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_30988": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_32159": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_32300": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_32432": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_34857": {"class": "num_groups", "value": None},
                                        "main.segred_group_size_31046": {"class": "group_size", "value": None},
                                        "main.segred_group_size_32219": {"class": "group_size", "value": None},
                                        "main.segred_group_size_32356": {"class": "group_size", "value": None},
                                        "main.segred_group_size_32486": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33052": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33073": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33140": {"class": "group_size", "value": None},
                                        "main.segred_group_size_33224": {"class": "group_size", "value": None},
                                        "main.segred_group_size_34759": {"class": "group_size", "value": None},
                                        "main.segred_num_groups_31048": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_32221": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_32358": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_32488": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33054": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33075": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33142": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_33226": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_34761": {"class": "num_groups", "value": None},
                                        "main.segscan_group_size_32795": {"class": "group_size", "value": None},
                                        "main.segscan_group_size_34469": {"class": "group_size", "value": None},
                                        "main.segscan_group_size_34813": {"class": "group_size", "value": None},
                                        "main.segscan_num_groups_32797": {"class": "num_groups", "value": None},
                                        "main.segscan_num_groups_34471": {"class": "num_groups", "value": None},
                                        "main.segscan_num_groups_34815": {"class": "num_groups", "value": None},
                                        "main.suff_intra_par_10": {"class": "threshold ()", "value": 32},
                                        "main.suff_intra_par_14": {"class": "threshold (!main.suff_intra_par_10)",
                                                                   "value": 32},
                                        "main.suff_intra_par_25": {"class": "threshold ()", "value": 32},
                                        "main.suff_intra_par_30": {"class": "threshold (!main.suff_outer_par_29)",
                                                                   "value": 32},
                                        "main.suff_intra_par_35": {"class": "threshold (!main.suff_outer_par_34)",
                                                                   "value": 32},
                                        "main.suff_intra_par_37": {"class": "threshold (!main.suff_outer_par_34 !main.suff_intra_par_35)",
                                                                   "value": 32},
                                        "main.suff_outer_par_17": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_18": {"class": "threshold (!main.suff_outer_par_17)",
                                                                   "value": None},
                                        "main.suff_outer_par_19": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_20": {"class": "threshold (!main.suff_outer_par_19)",
                                                                   "value": None},
                                        "main.suff_outer_par_21": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_22": {"class": "threshold (!main.suff_outer_par_21)",
                                                                   "value": None},
                                        "main.suff_outer_par_29": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_32": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_34": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_6": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_7": {"class": "threshold (!main.suff_outer_par_6)",
                                                                  "value": None},
                                        "main.suff_outer_par_8": {"class": "threshold (!main.suff_outer_par_7 !main.suff_outer_par_6)",
                                                                  "value": None},
                                        "main.tile_size_35461": {"class": "tile_size", "value": None},
                                        "main.tile_size_35783": {"class": "tile_size", "value": None},
                                        "mainDetailed.group_size_37935": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_25662": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_25840": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_25968": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26000": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26047": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26078": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26582": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26800": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26854": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_26921": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27013": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27218": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27359": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27396": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27491": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27772": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27847": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_27996": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28098": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28245": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28369": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_28444": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29201": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29253": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29580": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29830": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29888": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_29903": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_30025": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_num_groups_26002": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_26049": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_27220": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_27361": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_27493": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_28446": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_30027": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_group_size_26107": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_27280": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_27417": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_27547": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28113": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28134": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28201": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_28285": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_29929": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_num_groups_26109": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_27282": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_27419": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_27549": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28115": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28136": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28203": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_28287": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_29931": {"class": "num_groups", "value": None},
                                        "mainDetailed.segscan_group_size_27856": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_group_size_29630": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_group_size_29983": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_27858": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_29632": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_29985": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.suff_intra_par_10": {"class": "threshold ()", "value": 32},
                                        "mainDetailed.suff_intra_par_14": {"class": "threshold (!mainDetailed.suff_intra_par_10)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_25": {"class": "threshold ()", "value": 32},
                                        "mainDetailed.suff_intra_par_30": {"class": "threshold (!mainDetailed.suff_outer_par_29)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_35": {"class": "threshold (!mainDetailed.suff_outer_par_34)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_38": {"class": "threshold (!mainDetailed.suff_outer_par_34 !mainDetailed.suff_intra_par_35)",
                                                                           "value": 32},
                                        "mainDetailed.suff_outer_par_17": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_18": {"class": "threshold (!mainDetailed.suff_outer_par_17)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_19": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_20": {"class": "threshold (!mainDetailed.suff_outer_par_19)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_21": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_22": {"class": "threshold (!mainDetailed.suff_outer_par_21)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_29": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_32": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_34": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_6": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_7": {"class": "threshold (!mainDetailed.suff_outer_par_6)",
                                                                          "value": None},
                                        "mainDetailed.suff_outer_par_8": {"class": "threshold (!mainDetailed.suff_outer_par_7 !mainDetailed.suff_outer_par_6)",
                                                                          "value": None},
                                        "mainDetailed.tile_size_35461": {"class": "tile_size", "value": None},
                                        "mainDetailed.tile_size_35783": {"class": "tile_size", "value": None},
                                        "remove_nans.segmap_group_size_25504": {"class": "group_size", "value": None}})
    self.builtinzhreplicate_f32zireplicate_38206_var = program.builtinzhreplicate_f32zireplicate_38206
    self.builtinzhreplicate_i32zireplicate_38215_var = program.builtinzhreplicate_i32zireplicate_38215
    self.gpu_map_transpose_f32_var = program.gpu_map_transpose_f32
    self.gpu_map_transpose_f32_low_height_var = program.gpu_map_transpose_f32_low_height
    self.gpu_map_transpose_f32_low_width_var = program.gpu_map_transpose_f32_low_width
    self.gpu_map_transpose_f32_small_var = program.gpu_map_transpose_f32_small
    self.mainzicopy_37910_var = program.mainzicopy_37910
    self.mainziscan_stage1_32801_var = program.mainziscan_stage1_32801
    self.mainziscan_stage1_34475_var = program.mainziscan_stage1_34475
    self.mainziscan_stage1_34819_var = program.mainziscan_stage1_34819
    self.mainziscan_stage2_32801_var = program.mainziscan_stage2_32801
    self.mainziscan_stage2_34475_var = program.mainziscan_stage2_34475
    self.mainziscan_stage2_34819_var = program.mainziscan_stage2_34819
    self.mainziscan_stage3_32801_var = program.mainziscan_stage3_32801
    self.mainziscan_stage3_34475_var = program.mainziscan_stage3_34475
    self.mainziscan_stage3_34819_var = program.mainziscan_stage3_34819
    self.mainzisegmap_30598_var = program.mainzisegmap_30598
    self.mainzisegmap_30776_var = program.mainzisegmap_30776
    self.mainzisegmap_30904_var = program.mainzisegmap_30904
    self.mainzisegmap_30937_var = program.mainzisegmap_30937
    self.mainzisegmap_30983_var = program.mainzisegmap_30983
    self.mainzisegmap_31013_var = program.mainzisegmap_31013
    self.mainzisegmap_31517_var = program.mainzisegmap_31517
    self.mainzisegmap_31736_var = program.mainzisegmap_31736
    self.mainzisegmap_31790_var = program.mainzisegmap_31790
    self.mainzisegmap_31858_var = program.mainzisegmap_31858
    self.mainzisegmap_31949_var = program.mainzisegmap_31949
    self.mainzisegmap_32155_var = program.mainzisegmap_32155
    self.mainzisegmap_32296_var = program.mainzisegmap_32296
    self.mainzisegmap_32332_var = program.mainzisegmap_32332
    self.mainzisegmap_32428_var = program.mainzisegmap_32428
    self.mainzisegmap_32708_var = program.mainzisegmap_32708
    self.mainzisegmap_32784_var = program.mainzisegmap_32784
    self.mainzisegmap_33035_var = program.mainzisegmap_33035
    self.mainzisegmap_33306_var = program.mainzisegmap_33306
    self.mainzisegmap_33379_var = program.mainzisegmap_33379
    self.mainzisegmap_34090_var = program.mainzisegmap_34090
    self.mainzisegmap_34416_var = program.mainzisegmap_34416
    self.mainzisegmap_34666_var = program.mainzisegmap_34666
    self.mainzisegmap_34728_var = program.mainzisegmap_34728
    self.mainzisegmap_34853_var = program.mainzisegmap_34853
    self.mainzisegmap_intragroup_31273_var = program.mainzisegmap_intragroup_31273
    self.mainzisegmap_intragroup_31617_var = program.mainzisegmap_intragroup_31617
    self.mainzisegmap_intragroup_32591_var = program.mainzisegmap_intragroup_32591
    self.mainzisegmap_intragroup_32931_var = program.mainzisegmap_intragroup_32931
    self.mainzisegmap_intragroup_33377_var = program.mainzisegmap_intragroup_33377
    self.mainzisegmap_intragroup_34151_var = program.mainzisegmap_intragroup_34151
    self.mainzisegmap_intragroup_35467_var = program.mainzisegmap_intragroup_35467
    self.mainzisegmap_intragroup_35789_var = program.mainzisegmap_intragroup_35789
    self.mainzisegmap_intragroup_36094_var = program.mainzisegmap_intragroup_36094
    self.mainzisegmap_intragroup_36326_var = program.mainzisegmap_intragroup_36326
    self.mainzisegred_large_31052_var = program.mainzisegred_large_31052
    self.mainzisegred_large_32225_var = program.mainzisegred_large_32225
    self.mainzisegred_large_32362_var = program.mainzisegred_large_32362
    self.mainzisegred_large_32492_var = program.mainzisegred_large_32492
    self.mainzisegred_large_33058_var = program.mainzisegred_large_33058
    self.mainzisegred_large_33079_var = program.mainzisegred_large_33079
    self.mainzisegred_large_33230_var = program.mainzisegred_large_33230
    self.mainzisegred_large_34765_var = program.mainzisegred_large_34765
    self.mainzisegred_nonseg_33148_var = program.mainzisegred_nonseg_33148
    self.mainzisegred_small_31052_var = program.mainzisegred_small_31052
    self.mainzisegred_small_32225_var = program.mainzisegred_small_32225
    self.mainzisegred_small_32362_var = program.mainzisegred_small_32362
    self.mainzisegred_small_32492_var = program.mainzisegred_small_32492
    self.mainzisegred_small_33058_var = program.mainzisegred_small_33058
    self.mainzisegred_small_33079_var = program.mainzisegred_small_33079
    self.mainzisegred_small_33230_var = program.mainzisegred_small_33230
    self.mainzisegred_small_34765_var = program.mainzisegred_small_34765
    self.mainDetailedzicopy_37932_var = program.mainDetailedzicopy_37932
    self.mainDetailedziscan_stage1_27862_var = program.mainDetailedziscan_stage1_27862
    self.mainDetailedziscan_stage1_29636_var = program.mainDetailedziscan_stage1_29636
    self.mainDetailedziscan_stage1_29989_var = program.mainDetailedziscan_stage1_29989
    self.mainDetailedziscan_stage2_27862_var = program.mainDetailedziscan_stage2_27862
    self.mainDetailedziscan_stage2_29636_var = program.mainDetailedziscan_stage2_29636
    self.mainDetailedziscan_stage2_29989_var = program.mainDetailedziscan_stage2_29989
    self.mainDetailedziscan_stage3_27862_var = program.mainDetailedziscan_stage3_27862
    self.mainDetailedziscan_stage3_29636_var = program.mainDetailedziscan_stage3_29636
    self.mainDetailedziscan_stage3_29989_var = program.mainDetailedziscan_stage3_29989
    self.mainDetailedzisegmap_25659_var = program.mainDetailedzisegmap_25659
    self.mainDetailedzisegmap_25837_var = program.mainDetailedzisegmap_25837
    self.mainDetailedzisegmap_25965_var = program.mainDetailedzisegmap_25965
    self.mainDetailedzisegmap_25998_var = program.mainDetailedzisegmap_25998
    self.mainDetailedzisegmap_26044_var = program.mainDetailedzisegmap_26044
    self.mainDetailedzisegmap_26074_var = program.mainDetailedzisegmap_26074
    self.mainDetailedzisegmap_26578_var = program.mainDetailedzisegmap_26578
    self.mainDetailedzisegmap_26797_var = program.mainDetailedzisegmap_26797
    self.mainDetailedzisegmap_26851_var = program.mainDetailedzisegmap_26851
    self.mainDetailedzisegmap_26919_var = program.mainDetailedzisegmap_26919
    self.mainDetailedzisegmap_27010_var = program.mainDetailedzisegmap_27010
    self.mainDetailedzisegmap_27216_var = program.mainDetailedzisegmap_27216
    self.mainDetailedzisegmap_27357_var = program.mainDetailedzisegmap_27357
    self.mainDetailedzisegmap_27393_var = program.mainDetailedzisegmap_27393
    self.mainDetailedzisegmap_27489_var = program.mainDetailedzisegmap_27489
    self.mainDetailedzisegmap_27769_var = program.mainDetailedzisegmap_27769
    self.mainDetailedzisegmap_27845_var = program.mainDetailedzisegmap_27845
    self.mainDetailedzisegmap_28096_var = program.mainDetailedzisegmap_28096
    self.mainDetailedzisegmap_28367_var = program.mainDetailedzisegmap_28367
    self.mainDetailedzisegmap_28442_var = program.mainDetailedzisegmap_28442
    self.mainDetailedzisegmap_29198_var = program.mainDetailedzisegmap_29198
    self.mainDetailedzisegmap_29251_var = program.mainDetailedzisegmap_29251
    self.mainDetailedzisegmap_29577_var = program.mainDetailedzisegmap_29577
    self.mainDetailedzisegmap_29827_var = program.mainDetailedzisegmap_29827
    self.mainDetailedzisegmap_29886_var = program.mainDetailedzisegmap_29886
    self.mainDetailedzisegmap_29901_var = program.mainDetailedzisegmap_29901
    self.mainDetailedzisegmap_30023_var = program.mainDetailedzisegmap_30023
    self.mainDetailedzisegmap_intragroup_26334_var = program.mainDetailedzisegmap_intragroup_26334
    self.mainDetailedzisegmap_intragroup_26678_var = program.mainDetailedzisegmap_intragroup_26678
    self.mainDetailedzisegmap_intragroup_27652_var = program.mainDetailedzisegmap_intragroup_27652
    self.mainDetailedzisegmap_intragroup_27992_var = program.mainDetailedzisegmap_intragroup_27992
    self.mainDetailedzisegmap_intragroup_28440_var = program.mainDetailedzisegmap_intragroup_28440
    self.mainDetailedzisegmap_intragroup_29312_var = program.mainDetailedzisegmap_intragroup_29312
    self.mainDetailedzisegmap_intragroup_35467_var = program.mainDetailedzisegmap_intragroup_35467
    self.mainDetailedzisegmap_intragroup_35789_var = program.mainDetailedzisegmap_intragroup_35789
    self.mainDetailedzisegmap_intragroup_36094_var = program.mainDetailedzisegmap_intragroup_36094
    self.mainDetailedzisegmap_intragroup_36326_var = program.mainDetailedzisegmap_intragroup_36326
    self.mainDetailedzisegred_large_26113_var = program.mainDetailedzisegred_large_26113
    self.mainDetailedzisegred_large_27286_var = program.mainDetailedzisegred_large_27286
    self.mainDetailedzisegred_large_27423_var = program.mainDetailedzisegred_large_27423
    self.mainDetailedzisegred_large_27553_var = program.mainDetailedzisegred_large_27553
    self.mainDetailedzisegred_large_28119_var = program.mainDetailedzisegred_large_28119
    self.mainDetailedzisegred_large_28140_var = program.mainDetailedzisegred_large_28140
    self.mainDetailedzisegred_large_28291_var = program.mainDetailedzisegred_large_28291
    self.mainDetailedzisegred_large_29935_var = program.mainDetailedzisegred_large_29935
    self.mainDetailedzisegred_nonseg_28209_var = program.mainDetailedzisegred_nonseg_28209
    self.mainDetailedzisegred_small_26113_var = program.mainDetailedzisegred_small_26113
    self.mainDetailedzisegred_small_27286_var = program.mainDetailedzisegred_small_27286
    self.mainDetailedzisegred_small_27423_var = program.mainDetailedzisegred_small_27423
    self.mainDetailedzisegred_small_27553_var = program.mainDetailedzisegred_small_27553
    self.mainDetailedzisegred_small_28119_var = program.mainDetailedzisegred_small_28119
    self.mainDetailedzisegred_small_28140_var = program.mainDetailedzisegred_small_28140
    self.mainDetailedzisegred_small_28291_var = program.mainDetailedzisegred_small_28291
    self.mainDetailedzisegred_small_29935_var = program.mainDetailedzisegred_small_29935
    self.remove_nanszisegmap_25500_var = program.remove_nanszisegmap_25500
    self.constants = {}
    mainzicounter_mem_37844 = np.zeros(10240, dtype=np.int32)
    static_mem_38999 = opencl_alloc(self, 40960, "static_mem_38999")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_38999,
                      normaliseArray(mainzicounter_mem_37844),
                      is_blocking=synchronous)
    self.mainzicounter_mem_37844 = static_mem_38999
    mainzicounter_mem_37998 = np.zeros(10240, dtype=np.int32)
    static_mem_39002 = opencl_alloc(self, 40960, "static_mem_39002")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39002,
                      normaliseArray(mainzicounter_mem_37998),
                      is_blocking=synchronous)
    self.mainzicounter_mem_37998 = static_mem_39002
    mainzicounter_mem_38079 = np.zeros(10240, dtype=np.int32)
    static_mem_39003 = opencl_alloc(self, 40960, "static_mem_39003")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39003,
                      normaliseArray(mainzicounter_mem_38079),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38079 = static_mem_39003
    mainzicounter_mem_38167 = np.zeros(10240, dtype=np.int32)
    static_mem_39004 = opencl_alloc(self, 40960, "static_mem_39004")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39004,
                      normaliseArray(mainzicounter_mem_38167),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38167 = static_mem_39004
    mainzicounter_mem_38361 = np.zeros(10240, dtype=np.int32)
    static_mem_39005 = opencl_alloc(self, 40960, "static_mem_39005")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39005,
                      normaliseArray(mainzicounter_mem_38361),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38361 = static_mem_39005
    mainzicounter_mem_38421 = np.zeros(10240, dtype=np.int32)
    static_mem_39006 = opencl_alloc(self, 40960, "static_mem_39006")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39006,
                      normaliseArray(mainzicounter_mem_38421),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38421 = static_mem_39006
    mainzicounter_mem_38461 = np.array([np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0)], dtype=np.int32)
    static_mem_39007 = opencl_alloc(self, 40, "static_mem_39007")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_39007,
                      normaliseArray(mainzicounter_mem_38461),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38461 = static_mem_39007
    mainzicounter_mem_38530 = np.zeros(10240, dtype=np.int32)
    static_mem_39009 = opencl_alloc(self, 40960, "static_mem_39009")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39009,
                      normaliseArray(mainzicounter_mem_38530),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38530 = static_mem_39009
    mainzicounter_mem_38757 = np.zeros(10240, dtype=np.int32)
    static_mem_39011 = opencl_alloc(self, 40960, "static_mem_39011")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39011,
                      normaliseArray(mainzicounter_mem_38757),
                      is_blocking=synchronous)
    self.mainzicounter_mem_38757 = static_mem_39011
    mainDetailedzicounter_mem_37866 = np.zeros(10240, dtype=np.int32)
    static_mem_39014 = opencl_alloc(self, 40960, "static_mem_39014")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39014,
                      normaliseArray(mainDetailedzicounter_mem_37866),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_37866 = static_mem_39014
    mainDetailedzicounter_mem_38020 = np.zeros(10240, dtype=np.int32)
    static_mem_39017 = opencl_alloc(self, 40960, "static_mem_39017")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39017,
                      normaliseArray(mainDetailedzicounter_mem_38020),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38020 = static_mem_39017
    mainDetailedzicounter_mem_38101 = np.zeros(10240, dtype=np.int32)
    static_mem_39018 = opencl_alloc(self, 40960, "static_mem_39018")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39018,
                      normaliseArray(mainDetailedzicounter_mem_38101),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38101 = static_mem_39018
    mainDetailedzicounter_mem_38189 = np.zeros(10240, dtype=np.int32)
    static_mem_39019 = opencl_alloc(self, 40960, "static_mem_39019")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39019,
                      normaliseArray(mainDetailedzicounter_mem_38189),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38189 = static_mem_39019
    mainDetailedzicounter_mem_38383 = np.zeros(10240, dtype=np.int32)
    static_mem_39020 = opencl_alloc(self, 40960, "static_mem_39020")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39020,
                      normaliseArray(mainDetailedzicounter_mem_38383),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38383 = static_mem_39020
    mainDetailedzicounter_mem_38443 = np.zeros(10240, dtype=np.int32)
    static_mem_39021 = opencl_alloc(self, 40960, "static_mem_39021")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39021,
                      normaliseArray(mainDetailedzicounter_mem_38443),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38443 = static_mem_39021
    mainDetailedzicounter_mem_38483 = np.array([np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0)],
                                               dtype=np.int32)
    static_mem_39022 = opencl_alloc(self, 40, "static_mem_39022")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_39022,
                      normaliseArray(mainDetailedzicounter_mem_38483),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38483 = static_mem_39022
    mainDetailedzicounter_mem_38552 = np.zeros(10240, dtype=np.int32)
    static_mem_39024 = opencl_alloc(self, 40960, "static_mem_39024")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39024,
                      normaliseArray(mainDetailedzicounter_mem_38552),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38552 = static_mem_39024
    mainDetailedzicounter_mem_38789 = np.zeros(10240, dtype=np.int32)
    static_mem_39026 = opencl_alloc(self, 40960, "static_mem_39026")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_39026,
                      normaliseArray(mainDetailedzicounter_mem_38789),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_38789 = static_mem_39026
  def futhark_builtinzhgpu_map_transpose_f32(self, destmem_0, destoffset_1,
                                             srcmem_2, srcoffset_3,
                                             num_arrays_4, x_elems_5,
                                             y_elems_6):
    if ((num_arrays_4 == np.int32(0)) or ((x_elems_5 == np.int32(0)) or (y_elems_6 == np.int32(0)))):
      pass
    else:
      muly_8 = squot32(np.int32(16), x_elems_5)
      mulx_7 = squot32(np.int32(16), y_elems_6)
      if ((num_arrays_4 == np.int32(1)) and ((x_elems_5 == np.int32(1)) or (y_elems_6 == np.int32(1)))):
        if (sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4))) != 0):
          cl.enqueue_copy(self.queue, destmem_0, srcmem_2,
                          dest_offset=np.long(sext_i32_i64(destoffset_1)),
                          src_offset=np.long(sext_i32_i64(srcoffset_3)),
                          byte_count=np.long(sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4)))))
        if synchronous:
          sync(self)
      else:
        if (sle32(x_elems_5, np.int32(8)) and slt32(np.int32(16), y_elems_6)):
          if ((((1 * (np.long(sdiv_up32(x_elems_5,
                                        np.int32(16))) * np.long(np.int32(16)))) * (np.long(sdiv_up32(sdiv_up32(y_elems_6,
                                                                                                                muly_8),
                                                                                                      np.int32(16))) * np.long(np.int32(16)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
            self.gpu_map_transpose_f32_low_width_var.set_args(cl.LocalMemory(np.long(np.int64(1088))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.gpu_map_transpose_f32_low_width_var,
                                       ((np.long(sdiv_up32(x_elems_5,
                                                           np.int32(16))) * np.long(np.int32(16))),
                                        (np.long(sdiv_up32(sdiv_up32(y_elems_6,
                                                                     muly_8),
                                                           np.int32(16))) * np.long(np.int32(16))),
                                        (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                       (np.long(np.int32(16)),
                                        np.long(np.int32(16)),
                                        np.long(np.int32(1))))
            if synchronous:
              sync(self)
        else:
          if (sle32(y_elems_6, np.int32(8)) and slt32(np.int32(16), x_elems_5)):
            if ((((1 * (np.long(sdiv_up32(sdiv_up32(x_elems_5, mulx_7),
                                          np.int32(16))) * np.long(np.int32(16)))) * (np.long(sdiv_up32(y_elems_6,
                                                                                                        np.int32(16))) * np.long(np.int32(16)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
              self.gpu_map_transpose_f32_low_height_var.set_args(cl.LocalMemory(np.long(np.int64(1088))),
                                                                 np.int32(destoffset_1),
                                                                 np.int32(srcoffset_3),
                                                                 np.int32(num_arrays_4),
                                                                 np.int32(x_elems_5),
                                                                 np.int32(y_elems_6),
                                                                 np.int32(mulx_7),
                                                                 np.int32(muly_8),
                                                                 destmem_0,
                                                                 srcmem_2)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.gpu_map_transpose_f32_low_height_var,
                                         ((np.long(sdiv_up32(sdiv_up32(x_elems_5,
                                                                       mulx_7),
                                                             np.int32(16))) * np.long(np.int32(16))),
                                          (np.long(sdiv_up32(y_elems_6,
                                                             np.int32(16))) * np.long(np.int32(16))),
                                          (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                         (np.long(np.int32(16)),
                                          np.long(np.int32(16)),
                                          np.long(np.int32(1))))
              if synchronous:
                sync(self)
          else:
            if (sle32(x_elems_5, np.int32(8)) and sle32(y_elems_6,
                                                        np.int32(8))):
              if ((1 * (np.long(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                          np.int32(256))) * np.long(np.int32(256)))) != 0):
                self.gpu_map_transpose_f32_small_var.set_args(cl.LocalMemory(np.long(np.int64(1))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_small_var,
                                           ((np.long(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                                               np.int32(256))) * np.long(np.int32(256))),),
                                           (np.long(np.int32(256)),))
                if synchronous:
                  sync(self)
            else:
              if ((((1 * (np.long(sdiv_up32(x_elems_5,
                                            np.int32(32))) * np.long(np.int32(32)))) * (np.long(sdiv_up32(y_elems_6,
                                                                                                          np.int32(32))) * np.long(np.int32(8)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
                self.gpu_map_transpose_f32_var.set_args(cl.LocalMemory(np.long(np.int64(4224))),
                                                        np.int32(destoffset_1),
                                                        np.int32(srcoffset_3),
                                                        np.int32(num_arrays_4),
                                                        np.int32(x_elems_5),
                                                        np.int32(y_elems_6),
                                                        np.int32(mulx_7),
                                                        np.int32(muly_8),
                                                        destmem_0, srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_var,
                                           ((np.long(sdiv_up32(x_elems_5,
                                                               np.int32(32))) * np.long(np.int32(32))),
                                            (np.long(sdiv_up32(y_elems_6,
                                                               np.int32(32))) * np.long(np.int32(8))),
                                            (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                           (np.long(np.int32(32)),
                                            np.long(np.int32(8)),
                                            np.long(np.int32(1))))
                if synchronous:
                  sync(self)
    return ()
  def futhark_builtinzhreplicate_f32(self, mem_38202, num_elems_38203,
                                     val_38204):
    group_sizze_38209 = self.sizes["builtin#replicate_f32.group_size_38209"]
    num_groups_38210 = sdiv_up64(num_elems_38203, group_sizze_38209)
    if ((1 * (np.long(num_groups_38210) * np.long(group_sizze_38209))) != 0):
      self.builtinzhreplicate_f32zireplicate_38206_var.set_args(mem_38202,
                                                                np.int32(num_elems_38203),
                                                                np.float32(val_38204))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_f32zireplicate_38206_var,
                                 ((np.long(num_groups_38210) * np.long(group_sizze_38209)),),
                                 (np.long(group_sizze_38209),))
      if synchronous:
        sync(self)
    return ()
  def futhark_builtinzhreplicate_i32(self, mem_38211, num_elems_38212,
                                     val_38213):
    group_sizze_38218 = self.sizes["builtin#replicate_i32.group_size_38218"]
    num_groups_38219 = sdiv_up64(num_elems_38212, group_sizze_38218)
    if ((1 * (np.long(num_groups_38219) * np.long(group_sizze_38218))) != 0):
      self.builtinzhreplicate_i32zireplicate_38215_var.set_args(mem_38211,
                                                                np.int32(num_elems_38212),
                                                                np.int32(val_38213))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_i32zireplicate_38215_var,
                                 ((np.long(num_groups_38219) * np.long(group_sizze_38218)),),
                                 (np.long(group_sizze_38218),))
      if synchronous:
        sync(self)
    return ()
  def futhark_main(self, mappingindices_mem_36651, images_mem_36652, N_24750,
                   m_24751, N_24752, trend_24753, k_24754, n_24755, freq_24756,
                   hfrac_24757, lam_24758):
    dim_match_24761 = (N_24750 == N_24752)
    empty_or_match_cert_24762 = True
    assert dim_match_24761, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:170:1-176:32\n" % ("function arguments of wrong shape",))
    res_24764 = sext_i32_i64(n_24755)
    x_24765 = (np.int32(2) * k_24754)
    k2p2_24766 = (np.int32(2) + x_24765)
    cond_24767 = slt32(np.int32(0), trend_24753)
    if cond_24767:
      k2p2zq_24768 = k2p2_24766
    else:
      res_24769 = (k2p2_24766 - np.int32(1))
      k2p2zq_24768 = res_24769
    res_24770 = sext_i32_i64(k2p2zq_24768)
    binop_x_36655 = (N_24750 * res_24770)
    bytes_36654 = (np.int64(4) * binop_x_36655)
    if cond_24767:
      bounds_invalid_upwards_24772 = slt64(res_24770, np.int64(0))
      valid_24773 = not(bounds_invalid_upwards_24772)
      range_valid_c_24774 = True
      assert valid_24773, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:31:11-60\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24770,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_30671 = self.sizes["main.segmap_group_size_30601"]
      segmap_usable_groups_30672 = sdiv_up64(binop_x_36655,
                                             segmap_group_sizze_30671)
      mem_36656 = opencl_alloc(self, bytes_36654, "mem_36656")
      if ((1 * (np.long(segmap_usable_groups_30672) * np.long(segmap_group_sizze_30671))) != 0):
        self.mainzisegmap_30598_var.set_args(self.global_failure,
                                             np.int64(N_24750),
                                             np.float32(freq_24756),
                                             np.int64(res_24770),
                                             mappingindices_mem_36651,
                                             mem_36656)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30598_var,
                                   ((np.long(segmap_usable_groups_30672) * np.long(segmap_group_sizze_30671)),),
                                   (np.long(segmap_group_sizze_30671),))
        if synchronous:
          sync(self)
      binop_p_mem_36661 = mem_36656
    else:
      bounds_invalid_upwards_24798 = slt64(res_24770, np.int64(0))
      valid_24799 = not(bounds_invalid_upwards_24798)
      range_valid_c_24800 = True
      assert valid_24799, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:49:10-22\n   #3  bfastfinal.fut:32:11-58\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24770,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_30845 = self.sizes["main.segmap_group_size_30779"]
      segmap_usable_groups_30846 = sdiv_up64(binop_x_36655,
                                             segmap_group_sizze_30845)
      mem_36660 = opencl_alloc(self, bytes_36654, "mem_36660")
      if ((1 * (np.long(segmap_usable_groups_30846) * np.long(segmap_group_sizze_30845))) != 0):
        self.mainzisegmap_30776_var.set_args(self.global_failure,
                                             np.int64(N_24750),
                                             np.float32(freq_24756),
                                             np.int64(res_24770),
                                             mappingindices_mem_36651,
                                             mem_36660)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30776_var,
                                   ((np.long(segmap_usable_groups_30846) * np.long(segmap_group_sizze_30845)),),
                                   (np.long(segmap_group_sizze_30845),))
        if synchronous:
          sync(self)
      binop_p_mem_36661 = mem_36660
    x_24823 = (N_24750 * N_24750)
    y_24824 = (np.int64(2) * N_24750)
    x_24825 = (x_24823 + y_24824)
    x_24826 = (np.int64(1) + x_24825)
    y_24827 = (np.int64(1) + N_24750)
    zzero_24828 = (y_24827 == np.int64(0))
    nonzzero_24829 = not(zzero_24828)
    nonzzero_cert_24830 = True
    assert nonzzero_24829, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:38:32-56\n   #1  bfastfinal.fut:175:5-58\n   #2  bfastfinal.fut:170:1-176:32\n" % ("division by zero",))
    x_24831 = sdiv64(x_24826, y_24827)
    x_24832 = (x_24831 - N_24750)
    binop_p_24833 = (x_24832 - np.int64(1))
    res_24834 = sext_i64_i32(binop_p_24833)
    res_24835 = sitofp_i32_f32(res_24834)
    segmap_group_sizze_30928 = self.sizes["main.segmap_group_size_30907"]
    segmap_usable_groups_30929 = sdiv_up64(binop_x_36655,
                                           segmap_group_sizze_30928)
    mem_36664 = opencl_alloc(self, bytes_36654, "mem_36664")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_36664, np.int64(0),
                                                binop_p_mem_36661, np.int64(0),
                                                np.int64(1), N_24750, res_24770)
    mem_36668 = opencl_alloc(self, bytes_36654, "mem_36668")
    if ((1 * (np.long(segmap_usable_groups_30929) * np.long(segmap_group_sizze_30928))) != 0):
      self.mainzisegmap_30904_var.set_args(self.global_failure,
                                           np.int64(N_24750),
                                           np.int64(res_24770),
                                           np.float32(res_24835), mem_36664,
                                           mem_36668)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30904_var,
                                 ((np.long(segmap_usable_groups_30929) * np.long(segmap_group_sizze_30928)),),
                                 (np.long(segmap_group_sizze_30928),))
      if synchronous:
        sync(self)
    eq_x_y_24843 = (np.int64(0) == res_24770)
    p_and_eq_x_y_24844 = (cond_24767 and eq_x_y_24843)
    not_p_24845 = not(cond_24767)
    p_and_eq_x_y_24846 = (eq_x_y_24843 and not_p_24845)
    empty_slice_24847 = (p_and_eq_x_y_24844 or p_and_eq_x_y_24846)
    m_24848 = (res_24770 - np.int64(1))
    zzero_leq_i_p_m_t_s_24849 = sle64(np.int64(0), m_24848)
    i_p_m_t_s_leq_w_24850 = slt64(m_24848, res_24770)
    i_lte_j_24851 = sle64(np.int64(0), res_24770)
    y_24852 = (zzero_leq_i_p_m_t_s_24849 and i_p_m_t_s_leq_w_24850)
    y_24853 = (i_lte_j_24851 and y_24852)
    ok_or_empty_24854 = (empty_slice_24847 or y_24853)
    empty_slice_24855 = (res_24764 == np.int64(0))
    m_24856 = (res_24764 - np.int64(1))
    zzero_leq_i_p_m_t_s_24857 = sle64(np.int64(0), m_24856)
    i_p_m_t_s_leq_w_24858 = slt64(m_24856, N_24750)
    i_lte_j_24859 = sle64(np.int64(0), res_24764)
    y_24860 = (zzero_leq_i_p_m_t_s_24857 and i_p_m_t_s_leq_w_24858)
    y_24861 = (i_lte_j_24859 and y_24860)
    ok_or_empty_24862 = (empty_slice_24855 or y_24861)
    index_ok_24863 = (ok_or_empty_24854 and ok_or_empty_24862)
    index_certs_24864 = True
    assert index_ok_24863, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:41:15-23\n   #1  bfastfinal.fut:175:5-58\n   #2  bfastfinal.fut:170:1-176:32\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24764,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               res_24770,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24750,
                                                                                                                                                                               "]."))
    empty_slice_24866 = (res_24770 == np.int64(0))
    ok_or_empty_24867 = (y_24853 or empty_slice_24866)
    index_ok_24868 = (ok_or_empty_24862 and ok_or_empty_24867)
    index_certs_24869 = True
    assert index_ok_24868, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:42:15-24\n   #1  bfastfinal.fut:175:5-58\n   #2  bfastfinal.fut:170:1-176:32\n" % ("Index [:",
                                                                                                                                                                               res_24764,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_24750,
                                                                                                                                                                               "][",
                                                                                                                                                                               res_24770,
                                                                                                                                                                               "]."))
    empty_slice_24871 = (m_24751 == np.int64(0))
    m_24872 = (m_24751 - np.int64(1))
    zzero_leq_i_p_m_t_s_24873 = sle64(np.int64(0), m_24872)
    i_p_m_t_s_leq_w_24874 = slt64(m_24872, m_24751)
    i_lte_j_24875 = sle64(np.int64(0), m_24751)
    y_24876 = (zzero_leq_i_p_m_t_s_24873 and i_p_m_t_s_leq_w_24874)
    y_24877 = (i_lte_j_24875 and y_24876)
    ok_or_empty_24878 = (empty_slice_24871 or y_24877)
    index_ok_24879 = (ok_or_empty_24862 and ok_or_empty_24878)
    index_certs_24880 = True
    assert index_ok_24879, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:43:15-28\n   #1  bfastfinal.fut:175:5-58\n   #2  bfastfinal.fut:170:1-176:32\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24764,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_24751,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24750,
                                                                                                                                                                               "]."))
    suff_outer_par_30935 = (self.sizes["main.suff_outer_par_6"] <= m_24751)
    segmap_group_sizze_30961 = self.sizes["main.segmap_group_size_30939"]
    max_num_groups_37783 = self.sizes["main.segmap_num_groups_30941"]
    num_groups_30962 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24751,
                                                            segmap_group_sizze_30961),
                                                  sext_i32_i64(max_num_groups_37783))))
    nest_sizze_31137 = (m_24751 * res_24770)
    segmap_group_sizze_31138 = self.sizes["main.segmap_group_size_30986"]
    max_num_groups_37784 = self.sizes["main.segmap_num_groups_30988"]
    num_groups_31139 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_31137,
                                                            segmap_group_sizze_31138),
                                                  sext_i32_i64(max_num_groups_37784))))
    suff_outer_par_31143 = (self.sizes["main.suff_outer_par_7"] <= nest_sizze_31137)
    y_31162 = (res_24770 * res_24770)
    nest_sizze_31163 = (m_24751 * y_31162)
    segmap_group_sizze_31164 = self.sizes["main.segmap_group_size_31017"]
    suff_outer_par_31169 = (self.sizes["main.suff_outer_par_8"] <= nest_sizze_31163)
    nest_sizze_31189 = (res_24764 * nest_sizze_31163)
    segred_group_sizze_31190 = self.sizes["main.segred_group_size_31046"]
    max_num_groups_37785 = self.sizes["main.segred_num_groups_31048"]
    num_groups_31191 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_31189,
                                                            segred_group_sizze_31190),
                                                  sext_i32_i64(max_num_groups_37785))))
    binop_x_36670 = (m_24751 * N_24752)
    bytes_36669 = (np.int64(4) * binop_x_36670)
    bytes_36714 = (np.int64(4) * nest_sizze_31163)
    bytes_36673 = (np.int64(4) * y_31162)
    binop_x_36759 = (res_24770 * nest_sizze_31137)
    bytes_36757 = (np.int64(4) * binop_x_36759)
    bytes_36719 = (np.int64(4) * res_24770)
    num_threads_37705 = (segmap_group_sizze_30961 * num_groups_30962)
    total_sizze_37706 = (bytes_36673 * num_threads_37705)
    num_threads_37707 = (segmap_group_sizze_31138 * num_groups_31139)
    total_sizze_37708 = (bytes_36719 * num_threads_37707)
    local_memory_capacity_37878 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_37878)) and suff_outer_par_30935):
      mem_36671 = opencl_alloc(self, bytes_36669, "mem_36671")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36671, np.int64(0),
                                                  images_mem_36652, np.int64(0),
                                                  np.int64(1), N_24752, m_24751)
      mem_36717 = opencl_alloc(self, bytes_36714, "mem_36717")
      mem_36675 = opencl_alloc(self, total_sizze_37706, "mem_36675")
      if ((1 * (np.long(num_groups_30962) * np.long(segmap_group_sizze_30961))) != 0):
        self.mainzisegmap_30937_var.set_args(self.global_failure,
                                             np.int64(N_24750),
                                             np.int64(m_24751),
                                             np.int32(n_24755),
                                             np.int32(k2p2zq_24768),
                                             np.int64(res_24770),
                                             np.int64(num_groups_30962),
                                             binop_p_mem_36661, mem_36668,
                                             mem_36671, mem_36675, mem_36717)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30937_var,
                                   ((np.long(num_groups_30962) * np.long(segmap_group_sizze_30961)),),
                                   (np.long(segmap_group_sizze_30961),))
        if synchronous:
          sync(self)
      mem_36671 = None
      mem_36675 = None
      mem_36760 = opencl_alloc(self, bytes_36757, "mem_36760")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36760, np.int64(0),
                                                  mem_36717, np.int64(0),
                                                  np.int64(1), m_24751,
                                                  (res_24770 * res_24770))
      mem_36717 = None
      res_mem_36762 = mem_36760
    else:
      local_memory_capacity_37877 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_37877)) and suff_outer_par_31143):
        mem_36736 = opencl_alloc(self, bytes_36757, "mem_36736")
        mem_36720 = opencl_alloc(self, total_sizze_37708, "mem_36720")
        if ((1 * (np.long(num_groups_31139) * np.long(segmap_group_sizze_31138))) != 0):
          self.mainzisegmap_30983_var.set_args(self.global_failure,
                                               np.int64(m_24751),
                                               np.int64(N_24752),
                                               np.int32(n_24755),
                                               np.int32(k2p2zq_24768),
                                               np.int64(res_24770),
                                               np.int64(num_groups_31139),
                                               images_mem_36652, mem_36664,
                                               mem_36668, mem_36720, mem_36736)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_30983_var,
                                     ((np.long(num_groups_31139) * np.long(segmap_group_sizze_31138)),),
                                     (np.long(segmap_group_sizze_31138),))
          if synchronous:
            sync(self)
        mem_36720 = None
        mem_36754 = opencl_alloc(self, bytes_36757, "mem_36754")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_36754, np.int64(0),
                                                    mem_36736, np.int64(0),
                                                    np.int64(1),
                                                    (m_24751 * res_24770),
                                                    res_24770)
        mem_36736 = None
        res_mem_36756 = mem_36754
      else:
        segmap_usable_groups_31165 = sdiv_up64(nest_sizze_31163,
                                               segmap_group_sizze_31164)
        local_memory_capacity_37876 = self.max_local_memory
        if (sle64(np.int64(0),
                  sext_i32_i64(local_memory_capacity_37876)) and suff_outer_par_31169):
          mem_36741 = opencl_alloc(self, bytes_36757, "mem_36741")
          if ((1 * (np.long(segmap_usable_groups_31165) * np.long(segmap_group_sizze_31164))) != 0):
            self.mainzisegmap_31013_var.set_args(self.global_failure,
                                                 np.int64(m_24751),
                                                 np.int64(N_24752),
                                                 np.int32(n_24755),
                                                 np.int64(res_24770),
                                                 images_mem_36652, mem_36664,
                                                 mem_36668, mem_36741)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31013_var,
                                       ((np.long(segmap_usable_groups_31165) * np.long(segmap_group_sizze_31164)),),
                                       (np.long(segmap_group_sizze_31164),))
            if synchronous:
              sync(self)
          res_mem_36750 = mem_36741
        else:
          mem_36744 = opencl_alloc(self, bytes_36654, "mem_36744")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_36744, np.int64(0),
                                                      mem_36668, np.int64(0),
                                                      np.int64(1), res_24770,
                                                      N_24750)
          mem_36749 = opencl_alloc(self, bytes_36757, "mem_36749")
          if slt64((res_24764 * np.int64(2)), segred_group_sizze_31190):
            segment_sizze_nonzzero_37816 = smax64(np.int64(1), res_24764)
            num_threads_37817 = (num_groups_31191 * segred_group_sizze_31190)
            if ((1 * (np.long(num_groups_31191) * np.long(segred_group_sizze_31190))) != 0):
              self.mainzisegred_small_31052_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_31190))),
                                                         np.int64(N_24750),
                                                         np.int64(m_24751),
                                                         np.int64(N_24752),
                                                         np.int64(res_24764),
                                                         np.int64(res_24770),
                                                         np.int64(num_groups_31191),
                                                         images_mem_36652,
                                                         binop_p_mem_36661,
                                                         mem_36744, mem_36749,
                                                         np.int64(segment_sizze_nonzzero_37816))
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_small_31052_var,
                                         ((np.long(num_groups_31191) * np.long(segred_group_sizze_31190)),),
                                         (np.long(segred_group_sizze_31190),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_37837 = sdiv_up64(num_groups_31191,
                                                 smax64(np.int64(1),
                                                        ((m_24751 * res_24770) * res_24770)))
            elements_per_thread_37838 = sdiv_up64(res_24764,
                                                  (segred_group_sizze_31190 * groups_per_segment_37837))
            virt_num_groups_37839 = (groups_per_segment_37837 * ((m_24751 * res_24770) * res_24770))
            num_threads_37840 = (num_groups_31191 * segred_group_sizze_31190)
            threads_per_segment_37841 = (groups_per_segment_37837 * segred_group_sizze_31190)
            group_res_arr_mem_37842 = opencl_alloc(self,
                                                   (np.int32(4) * (segred_group_sizze_31190 * virt_num_groups_37839)),
                                                   "group_res_arr_mem_37842")
            mainzicounter_mem_37844 = self.mainzicounter_mem_37844
            if ((1 * (np.long(num_groups_31191) * np.long(segred_group_sizze_31190))) != 0):
              self.mainzisegred_large_31052_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.long(np.int32(1))),
                                                         cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_31190))),
                                                         np.int64(N_24750),
                                                         np.int64(N_24752),
                                                         np.int64(res_24764),
                                                         np.int64(res_24770),
                                                         np.int64(num_groups_31191),
                                                         images_mem_36652,
                                                         binop_p_mem_36661,
                                                         mem_36744, mem_36749,
                                                         np.int64(groups_per_segment_37837),
                                                         np.int64(elements_per_thread_37838),
                                                         np.int64(virt_num_groups_37839),
                                                         np.int64(threads_per_segment_37841),
                                                         group_res_arr_mem_37842,
                                                         mainzicounter_mem_37844)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_large_31052_var,
                                         ((np.long(num_groups_31191) * np.long(segred_group_sizze_31190)),),
                                         (np.long(segred_group_sizze_31190),))
              if synchronous:
                sync(self)
          mem_36744 = None
          res_mem_36750 = mem_36749
        res_mem_36756 = res_mem_36750
      res_mem_36762 = res_mem_36756
    m_24901 = (np.int64(2) * res_24770)
    nm_24902 = (res_24770 * m_24901)
    bounds_invalid_upwards_24903 = slt64(nm_24902, np.int64(0))
    valid_24904 = not(bounds_invalid_upwards_24903)
    range_valid_c_24905 = True
    assert valid_24904, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:77:21-27\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:175:5-58\n   #4  bfastfinal.fut:170:1-176:32\n" % ("Range ",
                                                                                                                                                                                                                                        np.int64(0),
                                                                                                                                                                                                                                        "..",
                                                                                                                                                                                                                                        np.int64(1),
                                                                                                                                                                                                                                        "..<",
                                                                                                                                                                                                                                        nm_24902,
                                                                                                                                                                                                                                        " is invalid."))
    zzero_24907 = (m_24901 == np.int64(0))
    nonzzero_24908 = not(zzero_24907)
    nonzzero_cert_24909 = True
    assert nonzzero_24908, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:72:41-47\n   #1  helpers.fut:72:14-77:28\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:175:5-58\n   #4  bfastfinal.fut:170:1-176:32\n" % ("division by zero",))
    res_24910 = sext_i64_i32(m_24901)
    loop_nonempty_24911 = slt32(np.int32(0), k2p2zq_24768)
    zzero_24912 = (res_24910 == np.int32(0))
    nonzzero_24913 = not(zzero_24912)
    loop_not_taken_24914 = not(loop_nonempty_24911)
    protect_assert_disj_24915 = (nonzzero_24913 or loop_not_taken_24914)
    nonzzero_cert_24916 = True
    assert protect_assert_disj_24915, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:59:43-49\n   #1  helpers.fut:59:16-65:32\n   #2  helpers.fut:78:15-53\n   #3  bfastfinal.fut:53:35-50\n   #4  bfastfinal.fut:175:5-58\n   #5  bfastfinal.fut:170:1-176:32\n" % ("division by zero",))
    y_31270 = smin64(res_24770, nm_24902)
    intra_avail_par_31271 = smin64(y_31162, y_31270)
    y_31272 = smax64(res_24770, nm_24902)
    computed_group_sizze_31214 = smax64(y_31162, y_31272)
    max_group_sizze_31405 = self.max_group_size
    fits_31406 = sle64(computed_group_sizze_31214, max_group_sizze_31405)
    suff_intra_par_31404 = (self.sizes["main.suff_intra_par_10"] <= intra_avail_par_31271)
    intra_suff_and_fits_31407 = (suff_intra_par_31404 and fits_31406)
    nest_sizze_31988 = (m_24751 * nm_24902)
    segmap_group_sizze_31989 = self.sizes["main.segmap_group_size_31952"]
    fits_32016 = sle64(nm_24902, max_group_sizze_31405)
    suff_intra_par_32018 = (self.sizes["main.suff_intra_par_14"] <= nm_24902)
    intra_suff_and_fits_32019 = (fits_32016 and suff_intra_par_32018)
    segmap_group_sizze_32055 = self.sizes["main.segmap_group_size_31860"]
    segmap_group_sizze_32071 = self.sizes["main.segmap_group_size_31793"]
    segmap_group_sizze_32105 = self.sizes["main.segmap_group_size_31739"]
    segmap_group_sizze_32140 = self.sizes["main.segmap_group_size_31521"]
    segmap_usable_groups_32056 = sdiv_up_safe64(m_24751,
                                                segmap_group_sizze_32055)
    segmap_usable_groups_32072 = sdiv_up_safe64(nest_sizze_31988,
                                                segmap_group_sizze_32071)
    segmap_usable_groups_32106 = sdiv_up_safe64(nest_sizze_31988,
                                                segmap_group_sizze_32105)
    bytes_36765 = (np.int64(4) * nm_24902)
    bytes_36792 = (np.int64(4) * nest_sizze_31988)
    local_memory_capacity_37943 = self.max_local_memory
    if (sle64(((bytes_36765 + bytes_36765) + bytes_36673),
              sext_i32_i64(local_memory_capacity_37943)) and intra_suff_and_fits_31407):
      mem_36790 = opencl_alloc(self, bytes_36757, "mem_36790")
      if ((1 * (np.long(m_24751) * np.long(computed_group_sizze_31214))) != 0):
        self.mainzisegmap_intragroup_31273_var.set_args(self.global_failure,
                                                        self.failure_is_an_option,
                                                        self.global_failure_args,
                                                        cl.LocalMemory(np.long(bytes_36673)),
                                                        cl.LocalMemory(np.long(bytes_36765)),
                                                        cl.LocalMemory(np.long(bytes_36765)),
                                                        np.int32(k2p2zq_24768),
                                                        np.int64(res_24770),
                                                        np.int64(m_24901),
                                                        np.int64(nm_24902),
                                                        np.int32(res_24910),
                                                        np.int64(computed_group_sizze_31214),
                                                        res_mem_36762,
                                                        mem_36790)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_31273_var,
                                   ((np.long(m_24751) * np.long(computed_group_sizze_31214)),),
                                   (np.long(computed_group_sizze_31214),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      res_mem_36845 = mem_36790
    else:
      segmap_usable_groups_31990 = sdiv_up64(nest_sizze_31988,
                                             segmap_group_sizze_31989)
      mem_36794 = opencl_alloc(self, bytes_36792, "mem_36794")
      if ((1 * (np.long(segmap_usable_groups_31990) * np.long(segmap_group_sizze_31989))) != 0):
        self.mainzisegmap_31949_var.set_args(self.global_failure,
                                             np.int64(m_24751),
                                             np.int64(res_24770),
                                             np.int64(m_24901),
                                             np.int64(nm_24902), res_mem_36762,
                                             mem_36794)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31949_var,
                                   ((np.long(segmap_usable_groups_31990) * np.long(segmap_group_sizze_31989)),),
                                   (np.long(segmap_group_sizze_31989),))
        if synchronous:
          sync(self)
      ctx_param_ext_36795 = m_24751
      ctx_param_ext_36796 = nm_24902
      ctx_param_ext_36797 = np.int64(0)
      ctx_param_ext_36798 = nm_24902
      ctx_param_ext_36799 = m_24751
      ctx_param_ext_36800 = np.int64(1)
      ctx_param_ext_36801 = nm_24902
      mem_param_36802 = mem_36794
      i_32004 = np.int32(0)
      one_39001 = np.int32(1)
      for counter_39000 in range(k2p2zq_24768):
        i_32006 = sext_i32_i64(i_32004)
        x_32007 = sle64(np.int64(0), i_32006)
        y_32008 = slt64(i_32006, nm_24902)
        bounds_check_32009 = (x_32007 and y_32008)
        index_certs_32010 = True
        assert bounds_check_32009, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:175:5-58\n   #4  bfastfinal.fut:170:1-176:32\n" % ("Index [",
                                                                                                                                                                                                                                         i_32006,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_24902,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_37903 = self.max_local_memory
        if intra_suff_and_fits_32019:
          res_ixfn_36824 = m_24751
        else:
          res_ixfn_36824 = ctx_param_ext_36799
        local_memory_capacity_37904 = self.max_local_memory
        if intra_suff_and_fits_32019:
          res_ixfn_36825 = nm_24902
        else:
          res_ixfn_36825 = ctx_param_ext_36801
        local_memory_capacity_37905 = self.max_local_memory
        if intra_suff_and_fits_32019:
          res_ixfn_36826 = m_24751
        else:
          res_ixfn_36826 = ctx_param_ext_36795
        local_memory_capacity_37906 = self.max_local_memory
        if intra_suff_and_fits_32019:
          res_ixfn_36827 = nm_24902
        else:
          res_ixfn_36827 = ctx_param_ext_36796
        local_memory_capacity_37907 = self.max_local_memory
        if intra_suff_and_fits_32019:
          res_ixfn_36828 = nm_24902
        else:
          res_ixfn_36828 = ctx_param_ext_36798
        local_memory_capacity_37908 = self.max_local_memory
        if intra_suff_and_fits_32019:
          res_ixfn_36829 = np.int64(1)
        else:
          res_ixfn_36829 = ctx_param_ext_36800
        local_memory_capacity_37909 = self.max_local_memory
        if intra_suff_and_fits_32019:
          res_ixfn_36830 = np.int64(0)
        else:
          res_ixfn_36830 = ctx_param_ext_36797
        local_memory_capacity_37937 = self.max_local_memory
        if ((sle64(np.int64(0),
                   sext_i32_i64(local_memory_capacity_37937)) and sle64(bytes_36765,
                                                                        sext_i32_i64(local_memory_capacity_37937))) and intra_suff_and_fits_32019):
          mem_36807 = opencl_alloc(self, bytes_36792, "mem_36807")
          group_sizze_37913 = self.sizes["main.group_size_37913"]
          num_groups_37914 = sdiv_up64((m_24751 * nm_24902), group_sizze_37913)
          if ((1 * (np.long(num_groups_37914) * np.long(group_sizze_37913))) != 0):
            self.mainzicopy_37910_var.set_args(np.int64(m_24751),
                                               np.int64(nm_24902),
                                               np.int64(ctx_param_ext_36797),
                                               np.int64(ctx_param_ext_36798),
                                               np.int64(ctx_param_ext_36800),
                                               mem_param_36802, mem_36807)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzicopy_37910_var,
                                       ((np.long(num_groups_37914) * np.long(group_sizze_37913)),),
                                       (np.long(group_sizze_37913),))
            if synchronous:
              sync(self)
          mem_36815 = opencl_alloc(self, bytes_36792, "mem_36815")
          if ((1 * (np.long(m_24751) * np.long(nm_24902))) != 0):
            self.mainzisegmap_intragroup_31617_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(bytes_36765)),
                                                            np.int64(m_24751),
                                                            np.int32(k2p2zq_24768),
                                                            np.int64(nm_24902),
                                                            np.int32(res_24910),
                                                            np.int32(i_32004),
                                                            np.int64(i_32006),
                                                            np.int64(ctx_param_ext_36797),
                                                            np.int64(ctx_param_ext_36798),
                                                            np.int64(ctx_param_ext_36800),
                                                            mem_param_36802,
                                                            mem_36807,
                                                            mem_36815)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegmap_intragroup_31617_var,
                                       ((np.long(m_24751) * np.long(nm_24902)),),
                                       (np.long(nm_24902),))
            if synchronous:
              sync(self)
          mem_36807 = None
          res_mem_36831 = mem_36815
        else:
          mem_36818 = opencl_alloc(self, m_24751, "mem_36818")
          if ((1 * (np.long(segmap_usable_groups_32056) * np.long(segmap_group_sizze_32055))) != 0):
            self.mainzisegmap_31858_var.set_args(self.global_failure,
                                                 np.int64(m_24751),
                                                 np.int64(i_32006),
                                                 np.int64(ctx_param_ext_36797),
                                                 np.int64(ctx_param_ext_36798),
                                                 np.int64(ctx_param_ext_36800),
                                                 mem_param_36802, mem_36818)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31858_var,
                                       ((np.long(segmap_usable_groups_32056) * np.long(segmap_group_sizze_32055)),),
                                       (np.long(segmap_group_sizze_32055),))
            if synchronous:
              sync(self)
          mem_36822 = opencl_alloc(self, bytes_36792, "mem_36822")
          if ((1 * (np.long(segmap_usable_groups_32072) * np.long(segmap_group_sizze_32071))) != 0):
            self.mainzisegmap_31790_var.set_args(self.global_failure,
                                                 np.int64(m_24751),
                                                 np.int32(k2p2zq_24768),
                                                 np.int64(nm_24902),
                                                 np.int32(res_24910),
                                                 np.int32(i_32004),
                                                 np.int64(i_32006),
                                                 np.int64(ctx_param_ext_36797),
                                                 np.int64(ctx_param_ext_36798),
                                                 np.int64(ctx_param_ext_36800),
                                                 mem_param_36802, mem_36818,
                                                 mem_36822)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31790_var,
                                       ((np.long(segmap_usable_groups_32072) * np.long(segmap_group_sizze_32071)),),
                                       (np.long(segmap_group_sizze_32071),))
            if synchronous:
              sync(self)
          mem_36818 = None
          if ((1 * (np.long(segmap_usable_groups_32106) * np.long(segmap_group_sizze_32105))) != 0):
            self.mainzisegmap_31736_var.set_args(self.global_failure,
                                                 np.int64(m_24751),
                                                 np.int64(nm_24902),
                                                 np.int64(ctx_param_ext_36797),
                                                 np.int64(ctx_param_ext_36798),
                                                 np.int64(ctx_param_ext_36800),
                                                 mem_param_36802, mem_36822)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31736_var,
                                       ((np.long(segmap_usable_groups_32106) * np.long(segmap_group_sizze_32105)),),
                                       (np.long(segmap_group_sizze_32105),))
            if synchronous:
              sync(self)
          mem_36822 = None
          res_mem_36831 = mem_param_36802
        ctx_param_ext_tmp_37894 = res_ixfn_36826
        ctx_param_ext_tmp_37895 = res_ixfn_36827
        ctx_param_ext_tmp_37896 = res_ixfn_36830
        ctx_param_ext_tmp_37897 = res_ixfn_36828
        ctx_param_ext_tmp_37898 = res_ixfn_36824
        ctx_param_ext_tmp_37899 = res_ixfn_36829
        ctx_param_ext_tmp_37900 = res_ixfn_36825
        mem_param_tmp_37901 = res_mem_36831
        ctx_param_ext_36795 = ctx_param_ext_tmp_37894
        ctx_param_ext_36796 = ctx_param_ext_tmp_37895
        ctx_param_ext_36797 = ctx_param_ext_tmp_37896
        ctx_param_ext_36798 = ctx_param_ext_tmp_37897
        ctx_param_ext_36799 = ctx_param_ext_tmp_37898
        ctx_param_ext_36800 = ctx_param_ext_tmp_37899
        ctx_param_ext_36801 = ctx_param_ext_tmp_37900
        mem_param_36802 = mem_param_tmp_37901
        i_32004 += one_39001
      res_r_ixfn_36832 = ctx_param_ext_36795
      res_r_ixfn_36833 = ctx_param_ext_36796
      res_r_ixfn_36834 = ctx_param_ext_36797
      res_r_ixfn_36835 = ctx_param_ext_36798
      res_r_ixfn_36836 = ctx_param_ext_36799
      res_r_ixfn_36837 = ctx_param_ext_36800
      res_r_ixfn_36838 = ctx_param_ext_36801
      res_r_mem_36839 = mem_param_36802
      mem_36794 = None
      segmap_usable_groups_32141 = sdiv_up64(nest_sizze_31163,
                                             segmap_group_sizze_32140)
      mem_36844 = opencl_alloc(self, bytes_36757, "mem_36844")
      if ((1 * (np.long(segmap_usable_groups_32141) * np.long(segmap_group_sizze_32140))) != 0):
        self.mainzisegmap_31517_var.set_args(self.global_failure,
                                             np.int64(m_24751),
                                             np.int64(res_24770),
                                             np.int64(m_24901),
                                             np.int64(res_r_ixfn_36834),
                                             np.int64(res_r_ixfn_36835),
                                             np.int64(res_r_ixfn_36837),
                                             res_r_mem_36839, mem_36844)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_31517_var,
                                   ((np.long(segmap_usable_groups_32141) * np.long(segmap_group_sizze_32140)),),
                                   (np.long(segmap_group_sizze_32140),))
        if synchronous:
          sync(self)
      res_r_mem_36839 = None
      res_mem_36845 = mem_36844
    res_mem_36762 = None
    suff_outer_par_32153 = (self.sizes["main.suff_outer_par_17"] <= m_24751)
    segmap_group_sizze_32175 = self.sizes["main.segmap_group_size_32157"]
    max_num_groups_37944 = self.sizes["main.segmap_num_groups_32159"]
    num_groups_32176 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24751,
                                                            segmap_group_sizze_32175),
                                                  sext_i32_i64(max_num_groups_37944))))
    suff_outer_par_32260 = (self.sizes["main.suff_outer_par_18"] <= nest_sizze_31137)
    nest_sizze_32276 = (res_24764 * nest_sizze_31137)
    segred_group_sizze_32277 = self.sizes["main.segred_group_size_32219"]
    max_num_groups_37945 = self.sizes["main.segred_num_groups_32221"]
    num_groups_32278 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32276,
                                                            segred_group_sizze_32277),
                                                  sext_i32_i64(max_num_groups_37945))))
    tile_sizze_35462 = self.sizes["main.tile_size_35461"]
    group_sizze_35463 = (tile_sizze_35462 * tile_sizze_35462)
    bytes_36864 = (np.int64(4) * nest_sizze_31137)
    bytes_36869 = (np.int64(4) * group_sizze_35463)
    binop_x_37578 = (np.int64(4) * tile_sizze_35462)
    sizze_37579 = (tile_sizze_35462 * binop_x_37578)
    num_threads_37718 = (segmap_group_sizze_32175 * num_groups_32176)
    total_sizze_37719 = (bytes_36719 * num_threads_37718)
    local_memory_capacity_38031 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38031)) and suff_outer_par_32153):
      mem_36848 = opencl_alloc(self, bytes_36669, "mem_36848")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36848, np.int64(0),
                                                  images_mem_36652, np.int64(0),
                                                  np.int64(1), N_24752, m_24751)
      mem_36866 = opencl_alloc(self, bytes_36864, "mem_36866")
      mem_36851 = opencl_alloc(self, total_sizze_37719, "mem_36851")
      if ((1 * (np.long(num_groups_32176) * np.long(segmap_group_sizze_32175))) != 0):
        self.mainzisegmap_32155_var.set_args(self.global_failure,
                                             np.int64(N_24750),
                                             np.int64(m_24751),
                                             np.int32(n_24755),
                                             np.int32(k2p2zq_24768),
                                             np.int64(res_24770),
                                             np.int64(num_groups_32176),
                                             binop_p_mem_36661, mem_36848,
                                             mem_36851, mem_36866)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32155_var,
                                   ((np.long(num_groups_32176) * np.long(segmap_group_sizze_32175)),),
                                   (np.long(segmap_group_sizze_32175),))
        if synchronous:
          sync(self)
      mem_36848 = None
      mem_36851 = None
      mem_36934 = opencl_alloc(self, bytes_36864, "mem_36934")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36934, np.int64(0),
                                                  mem_36866, np.int64(0),
                                                  np.int64(1), m_24751,
                                                  res_24770)
      mem_36866 = None
      res_mem_36936 = mem_36934
    else:
      local_memory_capacity_38030 = self.max_local_memory
      if (sle64((((bytes_36869 + bytes_36869) + bytes_36869) + bytes_36869),
                sext_i32_i64(local_memory_capacity_38030)) and suff_outer_par_32260):
        num_groups_x_35464 = sdiv_up64(m_24751, tile_sizze_35462)
        num_groups_y_35465 = sdiv_up64(res_24770, tile_sizze_35462)
        num_groups_top_35466 = (num_groups_x_35464 * num_groups_y_35465)
        num_whole_tiles_35483 = squot64(res_24764, tile_sizze_35462)
        residual_input_35633 = srem64(res_24764, tile_sizze_35462)
        cond_35634 = (residual_input_35633 == np.int64(0))
        mem_36926 = opencl_alloc(self, bytes_36864, "mem_36926")
        if ((1 * (np.long(num_groups_top_35466) * np.long(group_sizze_35463))) != 0):
          self.mainzisegmap_intragroup_35467_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(bytes_36869)),
                                                          cl.LocalMemory(np.long(bytes_36869)),
                                                          cl.LocalMemory(np.long(bytes_36869)),
                                                          cl.LocalMemory(np.long(bytes_36869)),
                                                          np.int64(m_24751),
                                                          np.int64(N_24752),
                                                          np.int64(res_24764),
                                                          np.int64(res_24770),
                                                          np.int64(num_groups_y_35465),
                                                          np.int64(num_whole_tiles_35483),
                                                          np.int64(residual_input_35633),
                                                          np.byte(cond_35634),
                                                          images_mem_36652,
                                                          mem_36664, mem_36926)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_35467_var,
                                     ((np.long(num_groups_top_35466) * np.long(group_sizze_35463)),),
                                     (np.long(group_sizze_35463),))
          if synchronous:
            sync(self)
        res_mem_36931 = mem_36926
      else:
        mem_36930 = opencl_alloc(self, bytes_36864, "mem_36930")
        if slt64((res_24764 * np.int64(2)), segred_group_sizze_32277):
          segment_sizze_nonzzero_37970 = smax64(np.int64(1), res_24764)
          num_threads_37971 = (num_groups_32278 * segred_group_sizze_32277)
          if ((1 * (np.long(num_groups_32278) * np.long(segred_group_sizze_32277))) != 0):
            self.mainzisegred_small_32225_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32277))),
                                                       np.int64(N_24750),
                                                       np.int64(m_24751),
                                                       np.int64(N_24752),
                                                       np.int64(res_24764),
                                                       np.int64(res_24770),
                                                       np.int64(num_groups_32278),
                                                       images_mem_36652,
                                                       binop_p_mem_36661,
                                                       mem_36930,
                                                       np.int64(segment_sizze_nonzzero_37970))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_32225_var,
                                       ((np.long(num_groups_32278) * np.long(segred_group_sizze_32277)),),
                                       (np.long(segred_group_sizze_32277),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_37991 = sdiv_up64(num_groups_32278,
                                               smax64(np.int64(1),
                                                      (m_24751 * res_24770)))
          elements_per_thread_37992 = sdiv_up64(res_24764,
                                                (segred_group_sizze_32277 * groups_per_segment_37991))
          virt_num_groups_37993 = (groups_per_segment_37991 * (m_24751 * res_24770))
          num_threads_37994 = (num_groups_32278 * segred_group_sizze_32277)
          threads_per_segment_37995 = (groups_per_segment_37991 * segred_group_sizze_32277)
          group_res_arr_mem_37996 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_32277 * virt_num_groups_37993)),
                                                 "group_res_arr_mem_37996")
          mainzicounter_mem_37998 = self.mainzicounter_mem_37998
          if ((1 * (np.long(num_groups_32278) * np.long(segred_group_sizze_32277))) != 0):
            self.mainzisegred_large_32225_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32277))),
                                                       np.int64(N_24750),
                                                       np.int64(N_24752),
                                                       np.int64(res_24764),
                                                       np.int64(res_24770),
                                                       np.int64(num_groups_32278),
                                                       images_mem_36652,
                                                       binop_p_mem_36661,
                                                       mem_36930,
                                                       np.int64(groups_per_segment_37991),
                                                       np.int64(elements_per_thread_37992),
                                                       np.int64(virt_num_groups_37993),
                                                       np.int64(threads_per_segment_37995),
                                                       group_res_arr_mem_37996,
                                                       mainzicounter_mem_37998)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_32225_var,
                                       ((np.long(num_groups_32278) * np.long(segred_group_sizze_32277)),),
                                       (np.long(segred_group_sizze_32277),))
            if synchronous:
              sync(self)
        res_mem_36931 = mem_36930
      res_mem_36936 = res_mem_36931
    binop_p_mem_36661 = None
    mem_36664 = None
    suff_outer_par_32294 = (self.sizes["main.suff_outer_par_19"] <= m_24751)
    segmap_group_sizze_32315 = self.sizes["main.segmap_group_size_32298"]
    max_num_groups_38032 = self.sizes["main.segmap_num_groups_32300"]
    num_groups_32316 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24751,
                                                            segmap_group_sizze_32315),
                                                  sext_i32_i64(max_num_groups_38032))))
    segmap_group_sizze_32391 = self.sizes["main.segmap_group_size_32335"]
    suff_outer_par_32395 = (self.sizes["main.suff_outer_par_20"] <= nest_sizze_31137)
    segred_group_sizze_32410 = self.sizes["main.segred_group_size_32356"]
    max_num_groups_38033 = self.sizes["main.segred_num_groups_32358"]
    num_groups_32411 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_36759,
                                                            segred_group_sizze_32410),
                                                  sext_i32_i64(max_num_groups_38033))))
    num_threads_37722 = (segmap_group_sizze_32315 * num_groups_32316)
    total_sizze_37723 = (bytes_36719 * num_threads_37722)
    local_memory_capacity_38112 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38112)) and suff_outer_par_32294):
      mem_36940 = opencl_alloc(self, bytes_36714, "mem_36940")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36940, np.int64(0),
                                                  res_mem_36845, np.int64(0),
                                                  np.int64(1),
                                                  (res_24770 * res_24770),
                                                  m_24751)
      mem_36943 = opencl_alloc(self, bytes_36864, "mem_36943")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36943, np.int64(0),
                                                  res_mem_36936, np.int64(0),
                                                  np.int64(1), res_24770,
                                                  m_24751)
      mem_36961 = opencl_alloc(self, bytes_36864, "mem_36961")
      mem_36946 = opencl_alloc(self, total_sizze_37723, "mem_36946")
      if ((1 * (np.long(num_groups_32316) * np.long(segmap_group_sizze_32315))) != 0):
        self.mainzisegmap_32296_var.set_args(self.global_failure,
                                             np.int64(m_24751),
                                             np.int32(k2p2zq_24768),
                                             np.int64(res_24770),
                                             np.int64(num_groups_32316),
                                             mem_36940, mem_36943, mem_36946,
                                             mem_36961)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32296_var,
                                   ((np.long(num_groups_32316) * np.long(segmap_group_sizze_32315)),),
                                   (np.long(segmap_group_sizze_32315),))
        if synchronous:
          sync(self)
      mem_36940 = None
      mem_36943 = None
      mem_36946 = None
      mem_36977 = opencl_alloc(self, bytes_36864, "mem_36977")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36977, np.int64(0),
                                                  mem_36961, np.int64(0),
                                                  np.int64(1), m_24751,
                                                  res_24770)
      mem_36961 = None
      res_mem_36979 = mem_36977
    else:
      segmap_usable_groups_32392 = sdiv_up64(nest_sizze_31137,
                                             segmap_group_sizze_32391)
      local_memory_capacity_38111 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_38111)) and suff_outer_par_32395):
        mem_36965 = opencl_alloc(self, bytes_36757, "mem_36965")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_36965, np.int64(0),
                                                    res_mem_36845, np.int64(0),
                                                    np.int64(1), res_24770,
                                                    (m_24751 * res_24770))
        mem_36969 = opencl_alloc(self, bytes_36864, "mem_36969")
        if ((1 * (np.long(segmap_usable_groups_32392) * np.long(segmap_group_sizze_32391))) != 0):
          self.mainzisegmap_32332_var.set_args(self.global_failure,
                                               np.int64(m_24751),
                                               np.int32(k2p2zq_24768),
                                               np.int64(res_24770),
                                               res_mem_36936, mem_36965,
                                               mem_36969)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32332_var,
                                     ((np.long(segmap_usable_groups_32392) * np.long(segmap_group_sizze_32391)),),
                                     (np.long(segmap_group_sizze_32391),))
          if synchronous:
            sync(self)
        mem_36965 = None
        res_mem_36974 = mem_36969
      else:
        mem_36973 = opencl_alloc(self, bytes_36864, "mem_36973")
        if slt64((res_24770 * np.int64(2)), segred_group_sizze_32410):
          segment_sizze_nonzzero_38051 = smax64(np.int64(1), res_24770)
          num_threads_38052 = (num_groups_32411 * segred_group_sizze_32410)
          if ((1 * (np.long(num_groups_32411) * np.long(segred_group_sizze_32410))) != 0):
            self.mainzisegred_small_32362_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32410))),
                                                       np.int64(m_24751),
                                                       np.int64(res_24770),
                                                       np.int64(num_groups_32411),
                                                       res_mem_36845,
                                                       res_mem_36936, mem_36973,
                                                       np.int64(segment_sizze_nonzzero_38051))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_32362_var,
                                       ((np.long(num_groups_32411) * np.long(segred_group_sizze_32410)),),
                                       (np.long(segred_group_sizze_32410),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38072 = sdiv_up64(num_groups_32411,
                                               smax64(np.int64(1),
                                                      (m_24751 * res_24770)))
          elements_per_thread_38073 = sdiv_up64(res_24770,
                                                (segred_group_sizze_32410 * groups_per_segment_38072))
          virt_num_groups_38074 = (groups_per_segment_38072 * (m_24751 * res_24770))
          num_threads_38075 = (num_groups_32411 * segred_group_sizze_32410)
          threads_per_segment_38076 = (groups_per_segment_38072 * segred_group_sizze_32410)
          group_res_arr_mem_38077 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_32410 * virt_num_groups_38074)),
                                                 "group_res_arr_mem_38077")
          mainzicounter_mem_38079 = self.mainzicounter_mem_38079
          if ((1 * (np.long(num_groups_32411) * np.long(segred_group_sizze_32410))) != 0):
            self.mainzisegred_large_32362_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32410))),
                                                       np.int64(res_24770),
                                                       np.int64(num_groups_32411),
                                                       res_mem_36845,
                                                       res_mem_36936, mem_36973,
                                                       np.int64(groups_per_segment_38072),
                                                       np.int64(elements_per_thread_38073),
                                                       np.int64(virt_num_groups_38074),
                                                       np.int64(threads_per_segment_38076),
                                                       group_res_arr_mem_38077,
                                                       mainzicounter_mem_38079)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_32362_var,
                                       ((np.long(num_groups_32411) * np.long(segred_group_sizze_32410)),),
                                       (np.long(segred_group_sizze_32410),))
            if synchronous:
              sync(self)
        res_mem_36974 = mem_36973
      res_mem_36979 = res_mem_36974
    res_mem_36845 = None
    res_mem_36936 = None
    suff_outer_par_32426 = (self.sizes["main.suff_outer_par_21"] <= m_24751)
    segmap_group_sizze_32446 = self.sizes["main.segmap_group_size_32430"]
    max_num_groups_38113 = self.sizes["main.segmap_num_groups_32432"]
    num_groups_32447 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24751,
                                                            segmap_group_sizze_32446),
                                                  sext_i32_i64(max_num_groups_38113))))
    comparatee_32522 = (N_24750 * m_24751)
    suff_outer_par_32523 = (self.sizes["main.suff_outer_par_22"] <= comparatee_32522)
    nest_sizze_32537 = (res_24770 * comparatee_32522)
    segred_group_sizze_32538 = self.sizes["main.segred_group_size_32486"]
    max_num_groups_38114 = self.sizes["main.segred_num_groups_32488"]
    num_groups_32539 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32537,
                                                            segred_group_sizze_32538),
                                                  sext_i32_i64(max_num_groups_38114))))
    tile_sizze_35784 = self.sizes["main.tile_size_35783"]
    group_sizze_35785 = (tile_sizze_35784 * tile_sizze_35784)
    bytes_36998 = (np.int64(4) * comparatee_32522)
    bytes_36984 = (np.int64(4) * N_24750)
    bytes_37006 = (np.int64(4) * group_sizze_35785)
    binop_x_37590 = (np.int64(4) * tile_sizze_35784)
    sizze_37591 = (tile_sizze_35784 * binop_x_37590)
    num_threads_37726 = (segmap_group_sizze_32446 * num_groups_32447)
    total_sizze_37727 = (bytes_36984 * num_threads_37726)
    local_memory_capacity_38200 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38200)) and suff_outer_par_32426):
      mem_36982 = opencl_alloc(self, bytes_36864, "mem_36982")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36982, np.int64(0),
                                                  res_mem_36979, np.int64(0),
                                                  np.int64(1), res_24770,
                                                  m_24751)
      mem_37000 = opencl_alloc(self, bytes_36998, "mem_37000")
      mem_36985 = opencl_alloc(self, total_sizze_37727, "mem_36985")
      if ((1 * (np.long(num_groups_32447) * np.long(segmap_group_sizze_32446))) != 0):
        self.mainzisegmap_32428_var.set_args(self.global_failure,
                                             np.int64(N_24750),
                                             np.int64(m_24751),
                                             np.int32(k2p2zq_24768),
                                             np.int64(res_24770),
                                             np.int64(num_groups_32447),
                                             mem_36668, mem_36982, mem_36985,
                                             mem_37000)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32428_var,
                                   ((np.long(num_groups_32447) * np.long(segmap_group_sizze_32446)),),
                                   (np.long(segmap_group_sizze_32446),))
        if synchronous:
          sync(self)
      mem_36982 = None
      mem_36985 = None
      mem_37071 = opencl_alloc(self, bytes_36998, "mem_37071")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37071, np.int64(0),
                                                  mem_37000, np.int64(0),
                                                  np.int64(1), m_24751, N_24750)
      mem_37000 = None
      res_mem_37073 = mem_37071
    else:
      local_memory_capacity_38199 = self.max_local_memory
      if (sle64((((bytes_37006 + bytes_37006) + bytes_37006) + bytes_37006),
                sext_i32_i64(local_memory_capacity_38199)) and suff_outer_par_32523):
        mem_37003 = opencl_alloc(self, bytes_36654, "mem_37003")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_37003, np.int64(0),
                                                    mem_36668, np.int64(0),
                                                    np.int64(1), res_24770,
                                                    N_24750)
        num_groups_x_35786 = sdiv_up64(m_24751, tile_sizze_35784)
        num_groups_y_35787 = sdiv_up64(N_24750, tile_sizze_35784)
        num_groups_top_35788 = (num_groups_x_35786 * num_groups_y_35787)
        num_whole_tiles_35805 = squot64(res_24770, tile_sizze_35784)
        residual_input_35949 = srem64(res_24770, tile_sizze_35784)
        cond_35950 = (residual_input_35949 == np.int64(0))
        mem_37063 = opencl_alloc(self, bytes_36998, "mem_37063")
        if ((1 * (np.long(num_groups_top_35788) * np.long(group_sizze_35785))) != 0):
          self.mainzisegmap_intragroup_35789_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(bytes_37006)),
                                                          cl.LocalMemory(np.long(bytes_37006)),
                                                          cl.LocalMemory(np.long(bytes_37006)),
                                                          cl.LocalMemory(np.long(bytes_37006)),
                                                          np.int64(N_24750),
                                                          np.int64(m_24751),
                                                          np.int64(res_24770),
                                                          np.int64(num_groups_y_35787),
                                                          np.int64(num_whole_tiles_35805),
                                                          np.int64(residual_input_35949),
                                                          np.byte(cond_35950),
                                                          res_mem_36979,
                                                          mem_37003, mem_37063)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_35789_var,
                                     ((np.long(num_groups_top_35788) * np.long(group_sizze_35785)),),
                                     (np.long(group_sizze_35785),))
          if synchronous:
            sync(self)
        mem_37003 = None
        res_mem_37068 = mem_37063
      else:
        mem_37067 = opencl_alloc(self, bytes_36998, "mem_37067")
        if slt64((res_24770 * np.int64(2)), segred_group_sizze_32538):
          segment_sizze_nonzzero_38139 = smax64(np.int64(1), res_24770)
          num_threads_38140 = (num_groups_32539 * segred_group_sizze_32538)
          if ((1 * (np.long(num_groups_32539) * np.long(segred_group_sizze_32538))) != 0):
            self.mainzisegred_small_32492_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32538))),
                                                       np.int64(N_24750),
                                                       np.int64(m_24751),
                                                       np.int64(res_24770),
                                                       np.int64(num_groups_32539),
                                                       mem_36668, res_mem_36979,
                                                       mem_37067,
                                                       np.int64(segment_sizze_nonzzero_38139))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_32492_var,
                                       ((np.long(num_groups_32539) * np.long(segred_group_sizze_32538)),),
                                       (np.long(segred_group_sizze_32538),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38160 = sdiv_up64(num_groups_32539,
                                               smax64(np.int64(1),
                                                      (m_24751 * N_24750)))
          elements_per_thread_38161 = sdiv_up64(res_24770,
                                                (segred_group_sizze_32538 * groups_per_segment_38160))
          virt_num_groups_38162 = (groups_per_segment_38160 * (m_24751 * N_24750))
          num_threads_38163 = (num_groups_32539 * segred_group_sizze_32538)
          threads_per_segment_38164 = (groups_per_segment_38160 * segred_group_sizze_32538)
          group_res_arr_mem_38165 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_32538 * virt_num_groups_38162)),
                                                 "group_res_arr_mem_38165")
          mainzicounter_mem_38167 = self.mainzicounter_mem_38167
          if ((1 * (np.long(num_groups_32539) * np.long(segred_group_sizze_32538))) != 0):
            self.mainzisegred_large_32492_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_32538))),
                                                       np.int64(N_24750),
                                                       np.int64(res_24770),
                                                       np.int64(num_groups_32539),
                                                       mem_36668, res_mem_36979,
                                                       mem_37067,
                                                       np.int64(groups_per_segment_38160),
                                                       np.int64(elements_per_thread_38161),
                                                       np.int64(virt_num_groups_38162),
                                                       np.int64(threads_per_segment_38164),
                                                       group_res_arr_mem_38165,
                                                       mainzicounter_mem_38167)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_32492_var,
                                       ((np.long(num_groups_32539) * np.long(segred_group_sizze_32538)),),
                                       (np.long(segred_group_sizze_32538),))
            if synchronous:
              sync(self)
        res_mem_37068 = mem_37067
      res_mem_37073 = res_mem_37068
    mem_36668 = None
    res_mem_36979 = None
    i_25017 = (N_24750 - np.int64(1))
    x_25018 = sle64(np.int64(0), i_25017)
    y_25019 = slt64(i_25017, N_24750)
    bounds_check_25020 = (x_25018 and y_25019)
    index_certs_25021 = True
    assert bounds_check_25020, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:80:30-91\n   #3  /prelude/soacs.fut:56:19-23\n   #4  /prelude/soacs.fut:56:3-37\n   #5  bfastfinal.fut:74:5-83:25\n   #6  bfastfinal.fut:175:5-58\n   #7  bfastfinal.fut:170:1-176:32\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_25017,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_24750,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_32668 = sle64(N_24750, max_group_sizze_31405)
    suff_intra_par_32666 = (self.sizes["main.suff_intra_par_25"] <= N_24750)
    intra_suff_and_fits_32669 = (suff_intra_par_32666 and fits_32668)
    segscan_group_sizze_32818 = self.sizes["main.segscan_group_size_32795"]
    max_num_groups_38201 = self.sizes["main.segscan_num_groups_32797"]
    num_groups_32819 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(comparatee_32522,
                                                            segscan_group_sizze_32818),
                                                  sext_i32_i64(max_num_groups_38201))))
    segmap_group_sizze_32838 = self.sizes["main.segmap_group_size_32786"]
    mem_37076 = opencl_alloc(self, bytes_36998, "mem_37076")
    self.futhark_builtinzhreplicate_f32(mem_37076, (m_24751 * N_24750), np.nan)
    mem_37079 = opencl_alloc(self, bytes_36998, "mem_37079")
    self.futhark_builtinzhreplicate_i32(mem_37079, (m_24751 * N_24750),
                                        np.int32(0))
    segmap_group_sizze_32874 = self.sizes["main.segmap_group_size_32711"]
    bytes_37091 = (np.int64(4) * m_24751)
    bytes_37082 = (np.int64(8) * N_24750)
    bytes_37100 = (np.int64(8) * comparatee_32522)
    local_memory_capacity_38303 = self.max_local_memory
    if (sle64((((bytes_37082 + bytes_36984) + bytes_36984) + bytes_36984),
              sext_i32_i64(local_memory_capacity_38303)) and intra_suff_and_fits_32669):
      mem_37092 = opencl_alloc(self, bytes_37091, "mem_37092")
      mem_37095 = opencl_alloc(self, bytes_36998, "mem_37095")
      mem_37098 = opencl_alloc(self, bytes_36998, "mem_37098")
      if ((1 * (np.long(m_24751) * np.long(N_24750))) != 0):
        self.mainzisegmap_intragroup_32591_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_36984)),
                                                        cl.LocalMemory(np.long(bytes_36984)),
                                                        cl.LocalMemory(np.long(bytes_36984)),
                                                        cl.LocalMemory(np.long(bytes_37082)),
                                                        np.int64(N_24750),
                                                        np.int64(N_24752),
                                                        np.int64(i_25017),
                                                        images_mem_36652,
                                                        res_mem_37073,
                                                        mem_37092, mem_37095,
                                                        mem_37098)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_32591_var,
                                   ((np.long(m_24751) * np.long(N_24750)),),
                                   (np.long(N_24750),))
        if synchronous:
          sync(self)
      res_mem_37110 = mem_37092
      res_mem_37111 = mem_37095
      res_mem_37112 = mem_37098
    else:
      mem_37102 = opencl_alloc(self, bytes_37100, "mem_37102")
      mem_37105 = opencl_alloc(self, bytes_36998, "mem_37105")
      if slt64(np.int64(0), (m_24751 * N_24750)):
        stage1_max_num_groups_38237 = self.max_group_size
        stage1_num_groups_38238 = smin64(stage1_max_num_groups_38237,
                                         num_groups_32819)
        num_threads_38239 = sext_i64_i32((stage1_num_groups_38238 * segscan_group_sizze_32818))
        if ((1 * (np.long(stage1_num_groups_38238) * np.long(segscan_group_sizze_32818))) != 0):
          self.mainziscan_stage1_32801_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(8) * segscan_group_sizze_32818)))),
                                                    np.int64(N_24750),
                                                    np.int64(m_24751),
                                                    np.int64(N_24752),
                                                    images_mem_36652,
                                                    res_mem_37073, mem_37102,
                                                    mem_37105,
                                                    np.int32(num_threads_38239))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage1_32801_var,
                                     ((np.long(stage1_num_groups_38238) * np.long(segscan_group_sizze_32818)),),
                                     (np.long(segscan_group_sizze_32818),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38238))) != 0):
          self.mainziscan_stage2_32801_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(8) * stage1_num_groups_38238)))),
                                                    np.int64(N_24750),
                                                    np.int64(m_24751),
                                                    mem_37102,
                                                    np.int64(stage1_num_groups_38238),
                                                    np.int32(num_threads_38239))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage2_32801_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_38238)),),
                                     (np.long(stage1_num_groups_38238),))
          if synchronous:
            sync(self)
        required_groups_38281 = sext_i64_i32(sdiv_up64((m_24751 * N_24750),
                                                       segscan_group_sizze_32818))
        if ((1 * (np.long(num_groups_32819) * np.long(segscan_group_sizze_32818))) != 0):
          self.mainziscan_stage3_32801_var.set_args(self.global_failure,
                                                    np.int64(N_24750),
                                                    np.int64(m_24751),
                                                    np.int64(num_groups_32819),
                                                    mem_37102,
                                                    np.int32(num_threads_38239),
                                                    np.int32(required_groups_38281))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage3_32801_var,
                                     ((np.long(num_groups_32819) * np.long(segscan_group_sizze_32818)),),
                                     (np.long(segscan_group_sizze_32818),))
          if synchronous:
            sync(self)
      segmap_usable_groups_32839 = sdiv_up64(m_24751, segmap_group_sizze_32838)
      mem_37108 = opencl_alloc(self, bytes_37091, "mem_37108")
      if ((1 * (np.long(segmap_usable_groups_32839) * np.long(segmap_group_sizze_32838))) != 0):
        self.mainzisegmap_32784_var.set_args(self.global_failure,
                                             np.int64(N_24750),
                                             np.int64(m_24751),
                                             np.int64(i_25017), mem_37102,
                                             mem_37108)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32784_var,
                                   ((np.long(segmap_usable_groups_32839) * np.long(segmap_group_sizze_32838)),),
                                   (np.long(segmap_group_sizze_32838),))
        if synchronous:
          sync(self)
      segmap_usable_groups_32875 = sdiv_up64(comparatee_32522,
                                             segmap_group_sizze_32874)
      if ((1 * (np.long(segmap_usable_groups_32875) * np.long(segmap_group_sizze_32874))) != 0):
        self.mainzisegmap_32708_var.set_args(self.global_failure,
                                             np.int64(N_24750),
                                             np.int64(m_24751), mem_37076,
                                             mem_37079, mem_37102, mem_37105)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_32708_var,
                                   ((np.long(segmap_usable_groups_32875) * np.long(segmap_group_sizze_32874)),),
                                   (np.long(segmap_group_sizze_32874),))
        if synchronous:
          sync(self)
      mem_37102 = None
      mem_37105 = None
      res_mem_37110 = mem_37108
      res_mem_37111 = mem_37076
      res_mem_37112 = mem_37079
    res_mem_37073 = None
    mem_37076 = None
    mem_37079 = None
    suff_outer_par_32923 = (self.sizes["main.suff_outer_par_29"] <= m_24751)
    fits_33001 = sle64(res_24764, max_group_sizze_31405)
    suff_intra_par_32999 = (self.sizes["main.suff_intra_par_30"] <= res_24764)
    intra_suff_and_fits_33002 = (suff_intra_par_32999 and fits_33001)
    segmap_group_sizze_32966 = self.sizes["main.segmap_group_size_32935"]
    nest_sizze_33089 = (m_24751 * res_24764)
    segred_group_sizze_33090 = self.sizes["main.segred_group_size_33073"]
    max_num_groups_38304 = self.sizes["main.segred_num_groups_33075"]
    num_groups_33091 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33089,
                                                            segred_group_sizze_33090),
                                                  sext_i32_i64(max_num_groups_38304))))
    segred_group_sizze_33104 = self.sizes["main.segred_group_size_33052"]
    max_num_groups_38305 = self.sizes["main.segred_num_groups_33054"]
    num_groups_33105 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33089,
                                                            segred_group_sizze_33104),
                                                  sext_i32_i64(max_num_groups_38305))))
    segmap_group_sizze_33120 = self.sizes["main.segmap_group_size_33037"]
    bytes_37121 = (np.int64(4) * segmap_group_sizze_32966)
    local_memory_capacity_38459 = self.max_local_memory
    if (sle64((bytes_37121 + bytes_37121),
              sext_i32_i64(local_memory_capacity_38459)) and suff_outer_par_32923):
      segmap_usable_groups_32967 = sdiv_up64(m_24751, segmap_group_sizze_32966)
      mem_37115 = opencl_alloc(self, bytes_36669, "mem_37115")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37115, np.int64(0),
                                                  images_mem_36652, np.int64(0),
                                                  np.int64(1), N_24752, m_24751)
      mem_37118 = opencl_alloc(self, bytes_36998, "mem_37118")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37118, np.int64(0),
                                                  res_mem_37111, np.int64(0),
                                                  np.int64(1), N_24750, m_24751)
      num_whole_tiles_36102 = squot64(res_24764, segmap_group_sizze_32966)
      residual_input_36223 = srem64(res_24764, segmap_group_sizze_32966)
      cond_36224 = (residual_input_36223 == np.int64(0))
      mem_37162 = opencl_alloc(self, bytes_37091, "mem_37162")
      mem_37164 = opencl_alloc(self, bytes_37091, "mem_37164")
      mem_37166 = opencl_alloc(self, bytes_37091, "mem_37166")
      if ((1 * (np.long(segmap_usable_groups_32967) * np.long(segmap_group_sizze_32966))) != 0):
        self.mainzisegmap_intragroup_36094_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_37121)),
                                                        cl.LocalMemory(np.long(bytes_37121)),
                                                        np.int64(m_24751),
                                                        np.int32(n_24755),
                                                        np.float32(hfrac_24757),
                                                        np.int64(res_24764),
                                                        np.int32(k2p2_24766),
                                                        np.int64(num_whole_tiles_36102),
                                                        np.int64(residual_input_36223),
                                                        np.byte(cond_36224),
                                                        mem_37115, mem_37118,
                                                        mem_37162, mem_37164,
                                                        mem_37166)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_36094_var,
                                   ((np.long(segmap_usable_groups_32967) * np.long(segmap_group_sizze_32966)),),
                                   (np.long(segmap_group_sizze_32966),))
        if synchronous:
          sync(self)
      mem_37115 = None
      mem_37118 = None
      res_mem_37190 = mem_37162
      res_mem_37191 = mem_37164
      res_mem_37192 = mem_37166
    else:
      local_memory_capacity_38458 = self.max_local_memory
      if (sle64(((np.int32(4) * res_24764) + (np.int32(4) * res_24764)),
                sext_i32_i64(local_memory_capacity_38458)) and intra_suff_and_fits_33002):
        mem_37171 = opencl_alloc(self, bytes_37091, "mem_37171")
        mem_37173 = opencl_alloc(self, bytes_37091, "mem_37173")
        mem_37175 = opencl_alloc(self, bytes_37091, "mem_37175")
        if ((1 * (np.long(m_24751) * np.long(res_24764))) != 0):
          self.mainzisegmap_intragroup_32931_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long((np.int32(4) * res_24764))),
                                                          cl.LocalMemory(np.long((np.int32(4) * res_24764))),
                                                          np.int64(N_24750),
                                                          np.int64(N_24752),
                                                          np.float32(hfrac_24757),
                                                          np.int64(res_24764),
                                                          np.int32(k2p2_24766),
                                                          images_mem_36652,
                                                          res_mem_37111,
                                                          mem_37171, mem_37173,
                                                          mem_37175)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_32931_var,
                                     ((np.long(m_24751) * np.long(res_24764)),),
                                     (np.long(res_24764),))
          if synchronous:
            sync(self)
        res_mem_37187 = mem_37171
        res_mem_37188 = mem_37173
        res_mem_37189 = mem_37175
      else:
        mem_37178 = opencl_alloc(self, bytes_37091, "mem_37178")
        if slt64((res_24764 * np.int64(2)), segred_group_sizze_33090):
          segment_sizze_nonzzero_38333 = smax64(np.int64(1), res_24764)
          num_threads_38334 = (num_groups_33091 * segred_group_sizze_33090)
          if ((1 * (np.long(num_groups_33091) * np.long(segred_group_sizze_33090))) != 0):
            self.mainzisegred_small_33079_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33090))),
                                                       np.int64(m_24751),
                                                       np.int64(N_24752),
                                                       np.int64(res_24764),
                                                       np.int64(num_groups_33091),
                                                       images_mem_36652,
                                                       mem_37178,
                                                       np.int64(segment_sizze_nonzzero_38333))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_33079_var,
                                       ((np.long(num_groups_33091) * np.long(segred_group_sizze_33090)),),
                                       (np.long(segred_group_sizze_33090),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38354 = sdiv_up64(num_groups_33091,
                                               smax64(np.int64(1), m_24751))
          elements_per_thread_38355 = sdiv_up64(res_24764,
                                                (segred_group_sizze_33090 * groups_per_segment_38354))
          virt_num_groups_38356 = (groups_per_segment_38354 * m_24751)
          num_threads_38357 = (num_groups_33091 * segred_group_sizze_33090)
          threads_per_segment_38358 = (groups_per_segment_38354 * segred_group_sizze_33090)
          group_res_arr_mem_38359 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_33090 * virt_num_groups_38356)),
                                                 "group_res_arr_mem_38359")
          mainzicounter_mem_38361 = self.mainzicounter_mem_38361
          if ((1 * (np.long(num_groups_33091) * np.long(segred_group_sizze_33090))) != 0):
            self.mainzisegred_large_33079_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33090))),
                                                       np.int64(N_24752),
                                                       np.int64(res_24764),
                                                       np.int64(num_groups_33091),
                                                       images_mem_36652,
                                                       mem_37178,
                                                       np.int64(groups_per_segment_38354),
                                                       np.int64(elements_per_thread_38355),
                                                       np.int64(virt_num_groups_38356),
                                                       np.int64(threads_per_segment_38358),
                                                       group_res_arr_mem_38359,
                                                       mainzicounter_mem_38361)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_33079_var,
                                       ((np.long(num_groups_33091) * np.long(segred_group_sizze_33090)),),
                                       (np.long(segred_group_sizze_33090),))
            if synchronous:
              sync(self)
        mem_37181 = opencl_alloc(self, bytes_37091, "mem_37181")
        if slt64((res_24764 * np.int64(2)), segred_group_sizze_33104):
          segment_sizze_nonzzero_38393 = smax64(np.int64(1), res_24764)
          num_threads_38394 = (num_groups_33105 * segred_group_sizze_33104)
          if ((1 * (np.long(num_groups_33105) * np.long(segred_group_sizze_33104))) != 0):
            self.mainzisegred_small_33058_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33104))),
                                                       np.int64(N_24750),
                                                       np.int64(m_24751),
                                                       np.int64(res_24764),
                                                       np.int64(num_groups_33105),
                                                       res_mem_37111, mem_37178,
                                                       mem_37181,
                                                       np.int64(segment_sizze_nonzzero_38393))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_33058_var,
                                       ((np.long(num_groups_33105) * np.long(segred_group_sizze_33104)),),
                                       (np.long(segred_group_sizze_33104),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38414 = sdiv_up64(num_groups_33105,
                                               smax64(np.int64(1), m_24751))
          elements_per_thread_38415 = sdiv_up64(res_24764,
                                                (segred_group_sizze_33104 * groups_per_segment_38414))
          virt_num_groups_38416 = (groups_per_segment_38414 * m_24751)
          num_threads_38417 = (num_groups_33105 * segred_group_sizze_33104)
          threads_per_segment_38418 = (groups_per_segment_38414 * segred_group_sizze_33104)
          group_res_arr_mem_38419 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_33104 * virt_num_groups_38416)),
                                                 "group_res_arr_mem_38419")
          mainzicounter_mem_38421 = self.mainzicounter_mem_38421
          if ((1 * (np.long(num_groups_33105) * np.long(segred_group_sizze_33104))) != 0):
            self.mainzisegred_large_33058_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33104))),
                                                       np.int64(N_24750),
                                                       np.int64(res_24764),
                                                       np.int64(num_groups_33105),
                                                       res_mem_37111, mem_37178,
                                                       mem_37181,
                                                       np.int64(groups_per_segment_38414),
                                                       np.int64(elements_per_thread_38415),
                                                       np.int64(virt_num_groups_38416),
                                                       np.int64(threads_per_segment_38418),
                                                       group_res_arr_mem_38419,
                                                       mainzicounter_mem_38421)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_33058_var,
                                       ((np.long(num_groups_33105) * np.long(segred_group_sizze_33104)),),
                                       (np.long(segred_group_sizze_33104),))
            if synchronous:
              sync(self)
        segmap_usable_groups_33121 = sdiv_up64(m_24751,
                                               segmap_group_sizze_33120)
        mem_37184 = opencl_alloc(self, bytes_37091, "mem_37184")
        mem_37186 = opencl_alloc(self, bytes_37091, "mem_37186")
        if ((1 * (np.long(segmap_usable_groups_33121) * np.long(segmap_group_sizze_33120))) != 0):
          self.mainzisegmap_33035_var.set_args(self.global_failure,
                                               np.int64(m_24751),
                                               np.float32(hfrac_24757),
                                               np.int32(k2p2_24766), mem_37178,
                                               mem_37181, mem_37184, mem_37186)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_33035_var,
                                     ((np.long(segmap_usable_groups_33121) * np.long(segmap_group_sizze_33120)),),
                                     (np.long(segmap_group_sizze_33120),))
          if synchronous:
            sync(self)
        mem_37181 = None
        res_mem_37187 = mem_37184
        res_mem_37188 = mem_37178
        res_mem_37189 = mem_37186
      res_mem_37190 = res_mem_37187
      res_mem_37191 = res_mem_37188
      res_mem_37192 = res_mem_37189
    segred_group_sizze_33141 = self.sizes["main.segred_group_size_33140"]
    max_num_groups_38460 = self.sizes["main.segred_num_groups_33142"]
    num_groups_33143 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24751,
                                                            segred_group_sizze_33141),
                                                  sext_i32_i64(max_num_groups_38460))))
    mem_37195 = opencl_alloc(self, np.int64(4), "mem_37195")
    mainzicounter_mem_38461 = self.mainzicounter_mem_38461
    group_res_arr_mem_38463 = opencl_alloc(self,
                                           (np.int32(4) * (segred_group_sizze_33141 * num_groups_33143)),
                                           "group_res_arr_mem_38463")
    num_threads_38465 = (num_groups_33143 * segred_group_sizze_33141)
    if ((1 * (np.long(num_groups_33143) * np.long(segred_group_sizze_33141))) != 0):
      self.mainzisegred_nonseg_33148_var.set_args(self.global_failure,
                                                  cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33141))),
                                                  cl.LocalMemory(np.long(np.int32(1))),
                                                  np.int64(m_24751),
                                                  np.int64(num_groups_33143),
                                                  res_mem_37190, mem_37195,
                                                  mainzicounter_mem_38461,
                                                  group_res_arr_mem_38463,
                                                  np.int64(num_threads_38465))
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegred_nonseg_33148_var,
                                 ((np.long(num_groups_33143) * np.long(segred_group_sizze_33141)),),
                                 (np.long(segred_group_sizze_33141),))
      if synchronous:
        sync(self)
    read_res_39008 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39008, mem_37195,
                    device_offset=(np.long(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    res_25107 = read_res_39008[0]
    mem_37195 = None
    res_25112 = sext_i32_i64(res_25107)
    suff_outer_par_33180 = (self.sizes["main.suff_outer_par_32"] <= m_24751)
    segmap_group_sizze_33203 = self.sizes["main.segmap_group_size_33184"]
    nest_sizze_33246 = (m_24751 * res_25112)
    segred_group_sizze_33247 = self.sizes["main.segred_group_size_33224"]
    max_num_groups_38491 = self.sizes["main.segred_num_groups_33226"]
    num_groups_33248 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33246,
                                                            segred_group_sizze_33247),
                                                  sext_i32_i64(max_num_groups_38491))))
    bytes_37198 = (np.int64(4) * segmap_group_sizze_33203)
    local_memory_capacity_38562 = self.max_local_memory
    if (sle64((bytes_37198 + bytes_37198),
              sext_i32_i64(local_memory_capacity_38562)) and suff_outer_par_33180):
      segmap_usable_groups_33204 = sdiv_up64(m_24751, segmap_group_sizze_33203)
      num_whole_tiles_36346 = squot64(res_25112, segmap_group_sizze_33203)
      residual_input_36445 = srem64(res_25112, segmap_group_sizze_33203)
      cond_36446 = (residual_input_36445 == np.int64(0))
      mem_37237 = opencl_alloc(self, bytes_37091, "mem_37237")
      if ((1 * (np.long(segmap_usable_groups_33204) * np.long(segmap_group_sizze_33203))) != 0):
        self.mainzisegmap_intragroup_36326_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_37198)),
                                                        cl.LocalMemory(np.long(bytes_37198)),
                                                        np.int64(N_24750),
                                                        np.int64(m_24751),
                                                        np.int64(res_25112),
                                                        np.int64(num_whole_tiles_36346),
                                                        np.int64(residual_input_36445),
                                                        np.byte(cond_36446),
                                                        res_mem_37111,
                                                        res_mem_37190,
                                                        res_mem_37191,
                                                        mem_37237)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_36326_var,
                                   ((np.long(segmap_usable_groups_33204) * np.long(segmap_group_sizze_33203)),),
                                   (np.long(segmap_group_sizze_33203),))
        if synchronous:
          sync(self)
      res_mem_37241 = mem_37237
    else:
      mem_37240 = opencl_alloc(self, bytes_37091, "mem_37240")
      if slt64((res_25112 * np.int64(2)), segred_group_sizze_33247):
        segment_sizze_nonzzero_38502 = smax64(np.int64(1), res_25112)
        num_threads_38503 = (num_groups_33248 * segred_group_sizze_33247)
        if ((1 * (np.long(num_groups_33248) * np.long(segred_group_sizze_33247))) != 0):
          self.mainzisegred_small_33230_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33247))),
                                                     np.int64(N_24750),
                                                     np.int64(m_24751),
                                                     np.int64(res_25112),
                                                     np.int64(num_groups_33248),
                                                     res_mem_37111,
                                                     res_mem_37190,
                                                     res_mem_37191, mem_37240,
                                                     np.int64(segment_sizze_nonzzero_38502))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_small_33230_var,
                                     ((np.long(num_groups_33248) * np.long(segred_group_sizze_33247)),),
                                     (np.long(segred_group_sizze_33247),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_38523 = sdiv_up64(num_groups_33248,
                                             smax64(np.int64(1), m_24751))
        elements_per_thread_38524 = sdiv_up64(res_25112,
                                              (segred_group_sizze_33247 * groups_per_segment_38523))
        virt_num_groups_38525 = (groups_per_segment_38523 * m_24751)
        num_threads_38526 = (num_groups_33248 * segred_group_sizze_33247)
        threads_per_segment_38527 = (groups_per_segment_38523 * segred_group_sizze_33247)
        group_res_arr_mem_38528 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_33247 * virt_num_groups_38525)),
                                               "group_res_arr_mem_38528")
        mainzicounter_mem_38530 = self.mainzicounter_mem_38530
        if ((1 * (np.long(num_groups_33248) * np.long(segred_group_sizze_33247))) != 0):
          self.mainzisegred_large_33230_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long(np.int32(1))),
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_33247))),
                                                     np.int64(N_24750),
                                                     np.int64(res_25112),
                                                     np.int64(num_groups_33248),
                                                     res_mem_37111,
                                                     res_mem_37190,
                                                     res_mem_37191, mem_37240,
                                                     np.int64(groups_per_segment_38523),
                                                     np.int64(elements_per_thread_38524),
                                                     np.int64(virt_num_groups_38525),
                                                     np.int64(threads_per_segment_38527),
                                                     group_res_arr_mem_38528,
                                                     mainzicounter_mem_38530)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_large_33230_var,
                                     ((np.long(num_groups_33248) * np.long(segred_group_sizze_33247)),),
                                     (np.long(segred_group_sizze_33247),))
          if synchronous:
            sync(self)
      res_mem_37241 = mem_37240
    iota32_arg_25134 = (N_24750 - res_24764)
    bounds_invalid_upwards_25135 = slt64(iota32_arg_25134, np.int64(0))
    valid_25136 = not(bounds_invalid_upwards_25135)
    range_valid_c_25137 = True
    assert valid_25136, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:113:22-35\n   #3  bfastfinal.fut:175:5-58\n   #4  bfastfinal.fut:170:1-176:32\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_25134,
                                                                                                                                                                                                                                      " is invalid."))
    x_25139 = (np.int32(1) + n_24755)
    index_certs_25140 = True
    assert bounds_check_25020, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:111:63-81\n   #1  bfastfinal.fut:109:15-113:36\n   #2  bfastfinal.fut:175:5-58\n   #3  bfastfinal.fut:170:1-176:32\n" % ("Index [",
                                                                                                                                                                                                                 i_25017,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_24750,
                                                                                                                                                                                                                 "]."))
    read_res_39010 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39010, mappingindices_mem_36651,
                    device_offset=(np.long(i_25017) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_25141 = read_res_39010[0]
    res_25142 = sitofp_i32_f32(r32_arg_25141)
    range_valid_c_25143 = True
    assert valid_25136, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:124:29-44\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:175:5-58\n   #6  bfastfinal.fut:170:1-176:32\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_25134,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_33325 = self.sizes["main.segmap_group_size_33308"]
    segmap_usable_groups_33326 = sdiv_up64(iota32_arg_25134,
                                           segmap_group_sizze_33325)
    bytes_37243 = (np.int64(4) * iota32_arg_25134)
    mem_37244 = opencl_alloc(self, bytes_37243, "mem_37244")
    mem_37246 = opencl_alloc(self, bytes_37243, "mem_37246")
    if ((1 * (np.long(segmap_usable_groups_33326) * np.long(segmap_group_sizze_33325))) != 0):
      self.mainzisegmap_33306_var.set_args(self.global_failure,
                                           np.float32(lam_24758),
                                           np.int64(iota32_arg_25134),
                                           np.int32(x_25139),
                                           np.float32(res_25142),
                                           mappingindices_mem_36651, mem_37244,
                                           mem_37246)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_33306_var,
                                 ((np.long(segmap_usable_groups_33326) * np.long(segmap_group_sizze_33325)),),
                                 (np.long(segmap_group_sizze_33325),))
      if synchronous:
        sync(self)
    mem_37244 = None
    cond_25159 = (iota32_arg_25134 == np.int64(0))
    if cond_25159:
      iters_25160 = np.int32(0)
    else:
      iters_25160 = np.int32(16)
    loop_nonempty_25161 = slt32(np.int32(0), iters_25160)
    i_25162 = (iota32_arg_25134 - np.int64(1))
    x_25163 = sle64(np.int64(0), i_25162)
    y_25164 = slt64(i_25162, iota32_arg_25134)
    bounds_check_25165 = (x_25163 and y_25164)
    loop_not_taken_25166 = not(loop_nonempty_25161)
    protect_assert_disj_25167 = (bounds_check_25165 or loop_not_taken_25166)
    index_certs_25168 = True
    assert protect_assert_disj_25167, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  lib/github.com/diku-dk/sorts/radix_sort.fut:25:24-35\n   #2  lib/github.com/diku-dk/sorts/radix_sort.fut:53:31-62\n   #3  lib/github.com/diku-dk/sorts/radix_sort.fut:104:6-36\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:138:29-143:72\n   #6  /prelude/functional.fut:9:42-44\n   #7  bfastfinal.fut:118:50-158:9\n   #8  bfastfinal.fut:175:5-58\n   #9  bfastfinal.fut:170:1-176:32\n" % ("Index [",
i_25162,
out of bounds for array of shape [",
iota32_arg_25134,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      "]."))
    suff_outer_par_33343 = (self.sizes["main.suff_outer_par_34"] <= m_24751)
    fits_33851 = sle64(iota32_arg_25134, max_group_sizze_31405)
    suff_intra_par_33849 = (self.sizes["main.suff_intra_par_35"] <= iota32_arg_25134)
    intra_suff_and_fits_33852 = (suff_intra_par_33849 and fits_33851)
    segmap_group_sizze_33614 = self.sizes["main.segmap_group_size_33381"]
    segmap_group_sizze_34875 = self.sizes["main.segmap_group_size_34855"]
    max_num_groups_38568 = self.sizes["main.segmap_num_groups_34857"]
    num_groups_34876 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24751,
                                                            segmap_group_sizze_34875),
                                                  sext_i32_i64(max_num_groups_38568))))
    nest_sizze_34897 = (m_24751 * iota32_arg_25134)
    segscan_group_sizze_34898 = self.sizes["main.segscan_group_size_34813"]
    max_num_groups_38569 = self.sizes["main.segscan_num_groups_34815"]
    num_groups_34899 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34897,
                                                            segscan_group_sizze_34898),
                                                  sext_i32_i64(max_num_groups_38569))))
    segred_group_sizze_34937 = self.sizes["main.segred_group_size_34759"]
    max_num_groups_38570 = self.sizes["main.segred_num_groups_34761"]
    num_groups_34938 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34897,
                                                            segred_group_sizze_34937),
                                                  sext_i32_i64(max_num_groups_38570))))
    segmap_group_sizze_34976 = self.sizes["main.segmap_group_size_34730"]
    segmap_group_sizze_35009 = self.sizes["main.segmap_group_size_34669"]
    suff_intra_par_35050 = (self.sizes["main.suff_intra_par_37"] <= iota32_arg_25134)
    intra_suff_and_fits_35051 = (fits_33851 and suff_intra_par_35050)
    segscan_group_sizze_35134 = self.sizes["main.segscan_group_size_34469"]
    max_num_groups_38571 = self.sizes["main.segscan_num_groups_34471"]
    num_groups_35135 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34897,
                                                            segscan_group_sizze_35134),
                                                  sext_i32_i64(max_num_groups_38571))))
    segmap_group_sizze_35203 = self.sizes["main.segmap_group_size_34419"]
    segmap_group_sizze_35240 = self.sizes["main.segmap_group_size_34092"]
    segmap_usable_groups_35204 = sdiv_up_safe64(nest_sizze_34897,
                                                segmap_group_sizze_35203)
    bytes_37267 = (np.int64(8) * iota32_arg_25134)
    bytes_37410 = (np.int64(4) * nest_sizze_34897)
    bytes_37463 = (np.int64(8) * nest_sizze_34897)
    double_buffer_sizze_37627 = (np.int64(4) * iota32_arg_25134)
    double_buffer_sizze_37631 = (np.int64(4) * iota32_arg_25134)
    local_memory_capacity_38956 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38956)) and suff_outer_par_33343):
      segmap_usable_groups_33615 = sdiv_up64(m_24751, segmap_group_sizze_33614)
      mem_37357 = opencl_alloc(self, bytes_37091, "mem_37357")
      mem_37359 = opencl_alloc(self, bytes_37091, "mem_37359")
      mem_37361 = opencl_alloc(self, bytes_37091, "mem_37361")
      num_threads_37743 = (segmap_group_sizze_33614 * segmap_usable_groups_33615)
      total_sizze_37744 = (bytes_37243 * num_threads_37743)
      mem_37249 = opencl_alloc(self, total_sizze_37744, "mem_37249")
      total_sizze_37745 = (bytes_37267 * num_threads_37743)
      mem_37268 = opencl_alloc(self, total_sizze_37745, "mem_37268")
      total_sizze_37746 = (bytes_37267 * num_threads_37743)
      mem_37270 = opencl_alloc(self, total_sizze_37746, "mem_37270")
      total_sizze_37747 = (bytes_37267 * num_threads_37743)
      mem_37272 = opencl_alloc(self, total_sizze_37747, "mem_37272")
      total_sizze_37748 = (bytes_37267 * num_threads_37743)
      mem_37274 = opencl_alloc(self, total_sizze_37748, "mem_37274")
      total_sizze_37749 = (bytes_37243 * num_threads_37743)
      mem_37276 = opencl_alloc(self, total_sizze_37749, "mem_37276")
      total_sizze_37750 = (bytes_37243 * num_threads_37743)
      mem_37338 = opencl_alloc(self, total_sizze_37750, "mem_37338")
      total_sizze_37751 = (double_buffer_sizze_37627 * num_threads_37743)
      double_buffer_mem_37625 = opencl_alloc(self, total_sizze_37751,
                                             "double_buffer_mem_37625")
      if ((1 * (np.long(segmap_usable_groups_33615) * np.long(segmap_group_sizze_33614))) != 0):
        self.mainzisegmap_33379_var.set_args(self.global_failure,
                                             self.failure_is_an_option,
                                             self.global_failure_args,
                                             np.int64(N_24750),
                                             np.int64(m_24751),
                                             np.int32(n_24755),
                                             np.int64(iota32_arg_25134),
                                             np.int32(iters_25160),
                                             np.int64(i_25162),
                                             np.int64(segmap_usable_groups_33615),
                                             res_mem_37110, res_mem_37111,
                                             res_mem_37112, res_mem_37190,
                                             res_mem_37191, res_mem_37192,
                                             res_mem_37241, mem_37246,
                                             mem_37249, mem_37268, mem_37270,
                                             mem_37272, mem_37274, mem_37276,
                                             mem_37338, mem_37357, mem_37359,
                                             mem_37361, double_buffer_mem_37625)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_33379_var,
                                   ((np.long(segmap_usable_groups_33615) * np.long(segmap_group_sizze_33614)),),
                                   (np.long(segmap_group_sizze_33614),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_37249 = None
      mem_37268 = None
      mem_37270 = None
      mem_37272 = None
      mem_37274 = None
      mem_37276 = None
      mem_37338 = None
      double_buffer_mem_37625 = None
      res_mem_37501 = mem_37357
      res_mem_37502 = mem_37359
      res_mem_37503 = mem_37361
    else:
      local_memory_capacity_38955 = self.max_local_memory
      if (sle64((((((((((((bytes_37243 + (np.int32(1) * iota32_arg_25134)) + (np.int32(4) * iota32_arg_25134)) + (np.int32(4) * iota32_arg_25134)) + bytes_37243) + bytes_37267) + bytes_37267) + bytes_37267) + bytes_37267) + bytes_37243) + double_buffer_sizze_37631) + bytes_37243),
                sext_i32_i64(local_memory_capacity_38955)) and intra_suff_and_fits_33852):
        mem_37399 = opencl_alloc(self, bytes_37091, "mem_37399")
        mem_37401 = opencl_alloc(self, bytes_37091, "mem_37401")
        mem_37403 = opencl_alloc(self, bytes_37091, "mem_37403")
        if ((1 * (np.long(m_24751) * np.long(iota32_arg_25134))) != 0):
          self.mainzisegmap_intragroup_33377_var.set_args(self.global_failure,
                                                          self.failure_is_an_option,
                                                          self.global_failure_args,
                                                          cl.LocalMemory(np.long(bytes_37243)),
                                                          cl.LocalMemory(np.long(double_buffer_sizze_37631)),
                                                          cl.LocalMemory(np.long(bytes_37243)),
                                                          cl.LocalMemory(np.long(bytes_37267)),
                                                          cl.LocalMemory(np.long(bytes_37267)),
                                                          cl.LocalMemory(np.long(bytes_37267)),
                                                          cl.LocalMemory(np.long(bytes_37267)),
                                                          cl.LocalMemory(np.long(bytes_37243)),
                                                          cl.LocalMemory(np.long((np.int32(4) * iota32_arg_25134))),
                                                          cl.LocalMemory(np.long((np.int32(4) * iota32_arg_25134))),
                                                          cl.LocalMemory(np.long((np.int32(1) * iota32_arg_25134))),
                                                          cl.LocalMemory(np.long(bytes_37243)),
                                                          np.int64(N_24750),
                                                          np.int32(n_24755),
                                                          np.int64(iota32_arg_25134),
                                                          np.int32(iters_25160),
                                                          np.int64(i_25162),
                                                          res_mem_37110,
                                                          res_mem_37111,
                                                          res_mem_37112,
                                                          res_mem_37190,
                                                          res_mem_37191,
                                                          res_mem_37192,
                                                          res_mem_37241,
                                                          mem_37246, mem_37399,
                                                          mem_37401, mem_37403)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_33377_var,
                                     ((np.long(m_24751) * np.long(iota32_arg_25134)),),
                                     (np.long(iota32_arg_25134),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        res_mem_37498 = mem_37399
        res_mem_37499 = mem_37401
        res_mem_37500 = mem_37403
      else:
        mem_37406 = opencl_alloc(self, bytes_37091, "mem_37406")
        mem_37408 = opencl_alloc(self, bytes_37091, "mem_37408")
        if ((1 * (np.long(num_groups_34876) * np.long(segmap_group_sizze_34875))) != 0):
          self.mainzisegmap_34853_var.set_args(self.global_failure,
                                               np.int64(m_24751),
                                               np.int64(num_groups_34876),
                                               res_mem_37110, res_mem_37191,
                                               res_mem_37192, mem_37406,
                                               mem_37408)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34853_var,
                                     ((np.long(num_groups_34876) * np.long(segmap_group_sizze_34875)),),
                                     (np.long(segmap_group_sizze_34875),))
          if synchronous:
            sync(self)
        mem_37412 = opencl_alloc(self, bytes_37410, "mem_37412")
        if slt64(np.int64(0), (m_24751 * iota32_arg_25134)):
          stage1_max_num_groups_38654 = self.max_group_size
          stage1_num_groups_38655 = smin64(stage1_max_num_groups_38654,
                                           num_groups_34899)
          num_threads_38656 = sext_i64_i32((stage1_num_groups_38655 * segscan_group_sizze_34898))
          if ((1 * (np.long(stage1_num_groups_38655) * np.long(segscan_group_sizze_34898))) != 0):
            self.mainziscan_stage1_34819_var.set_args(self.global_failure,
                                                      cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                    (np.int32(4) * segscan_group_sizze_34898)))),
                                                      np.int64(N_24750),
                                                      np.int64(m_24751),
                                                      np.int64(iota32_arg_25134),
                                                      res_mem_37111,
                                                      res_mem_37190,
                                                      res_mem_37191,
                                                      res_mem_37241, mem_37408,
                                                      mem_37412,
                                                      np.int32(num_threads_38656))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainziscan_stage1_34819_var,
                                       ((np.long(stage1_num_groups_38655) * np.long(segscan_group_sizze_34898)),),
                                       (np.long(segscan_group_sizze_34898),))
            if synchronous:
              sync(self)
          if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38655))) != 0):
            self.mainziscan_stage2_34819_var.set_args(self.global_failure,
                                                      cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                    (np.int32(4) * stage1_num_groups_38655)))),
                                                      np.int64(m_24751),
                                                      np.int64(iota32_arg_25134),
                                                      mem_37412,
                                                      np.int64(stage1_num_groups_38655),
                                                      np.int32(num_threads_38656))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainziscan_stage2_34819_var,
                                       ((np.long(np.int64(1)) * np.long(stage1_num_groups_38655)),),
                                       (np.long(stage1_num_groups_38655),))
            if synchronous:
              sync(self)
          required_groups_38698 = sext_i64_i32(sdiv_up64((m_24751 * iota32_arg_25134),
                                                         segscan_group_sizze_34898))
          if ((1 * (np.long(num_groups_34899) * np.long(segscan_group_sizze_34898))) != 0):
            self.mainziscan_stage3_34819_var.set_args(self.global_failure,
                                                      np.int64(m_24751),
                                                      np.int64(iota32_arg_25134),
                                                      np.int64(num_groups_34899),
                                                      mem_37412,
                                                      np.int32(num_threads_38656),
                                                      np.int32(required_groups_38698))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainziscan_stage3_34819_var,
                                       ((np.long(num_groups_34899) * np.long(segscan_group_sizze_34898)),),
                                       (np.long(segscan_group_sizze_34898),))
            if synchronous:
              sync(self)
        mem_37415 = opencl_alloc(self, m_24751, "mem_37415")
        mem_37417 = opencl_alloc(self, bytes_37091, "mem_37417")
        mem_37419 = opencl_alloc(self, bytes_37091, "mem_37419")
        if slt64((iota32_arg_25134 * np.int64(2)), segred_group_sizze_34937):
          segment_sizze_nonzzero_38710 = smax64(np.int64(1), iota32_arg_25134)
          num_threads_38711 = (num_groups_34938 * segred_group_sizze_34937)
          if ((1 * (np.long(num_groups_34938) * np.long(segred_group_sizze_34937))) != 0):
            self.mainzisegred_small_34765_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_34937))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_34937))),
                                                       cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_34937))),
                                                       np.int64(m_24751),
                                                       np.int64(iota32_arg_25134),
                                                       np.int64(num_groups_34938),
                                                       mem_37246, mem_37406,
                                                       mem_37408, mem_37412,
                                                       mem_37415, mem_37417,
                                                       mem_37419,
                                                       np.int64(segment_sizze_nonzzero_38710))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_34765_var,
                                       ((np.long(num_groups_34938) * np.long(segred_group_sizze_34937)),),
                                       (np.long(segred_group_sizze_34937),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38746 = sdiv_up64(num_groups_34938,
                                               smax64(np.int64(1), m_24751))
          elements_per_thread_38747 = sdiv_up64(iota32_arg_25134,
                                                (segred_group_sizze_34937 * groups_per_segment_38746))
          virt_num_groups_38748 = (groups_per_segment_38746 * m_24751)
          num_threads_38749 = (num_groups_34938 * segred_group_sizze_34937)
          threads_per_segment_38750 = (groups_per_segment_38746 * segred_group_sizze_34937)
          group_res_arr_mem_38751 = opencl_alloc(self,
                                                 (np.int32(1) * (segred_group_sizze_34937 * virt_num_groups_38748)),
                                                 "group_res_arr_mem_38751")
          group_res_arr_mem_38753 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_34937 * virt_num_groups_38748)),
                                                 "group_res_arr_mem_38753")
          group_res_arr_mem_38755 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_34937 * virt_num_groups_38748)),
                                                 "group_res_arr_mem_38755")
          mainzicounter_mem_38757 = self.mainzicounter_mem_38757
          if ((1 * (np.long(num_groups_34938) * np.long(segred_group_sizze_34937))) != 0):
            self.mainzisegred_large_34765_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_34937))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_34937))),
                                                       cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_34937))),
                                                       np.int64(iota32_arg_25134),
                                                       np.int64(num_groups_34938),
                                                       mem_37246, mem_37406,
                                                       mem_37408, mem_37412,
                                                       mem_37415, mem_37417,
                                                       mem_37419,
                                                       np.int64(groups_per_segment_38746),
                                                       np.int64(elements_per_thread_38747),
                                                       np.int64(virt_num_groups_38748),
                                                       group_res_arr_mem_38751,
                                                       group_res_arr_mem_38753,
                                                       group_res_arr_mem_38755,
                                                       mainzicounter_mem_38757)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_34765_var,
                                       ((np.long(num_groups_34938) * np.long(segred_group_sizze_34937)),),
                                       (np.long(segred_group_sizze_34937),))
            if synchronous:
              sync(self)
        mem_37406 = None
        mem_37412 = None
        segmap_usable_groups_34977 = sdiv_up64(m_24751,
                                               segmap_group_sizze_34976)
        mem_37422 = opencl_alloc(self, m_24751, "mem_37422")
        mem_37424 = opencl_alloc(self, bytes_37091, "mem_37424")
        mem_37426 = opencl_alloc(self, bytes_37091, "mem_37426")
        if ((1 * (np.long(segmap_usable_groups_34977) * np.long(segmap_group_sizze_34976))) != 0):
          self.mainzisegmap_34728_var.set_args(self.global_failure,
                                               np.int64(m_24751), mem_37408,
                                               mem_37415, mem_37417, mem_37419,
                                               mem_37422, mem_37424, mem_37426)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34728_var,
                                     ((np.long(segmap_usable_groups_34977) * np.long(segmap_group_sizze_34976)),),
                                     (np.long(segmap_group_sizze_34976),))
          if synchronous:
            sync(self)
        mem_37415 = None
        mem_37417 = None
        mem_37419 = None
        segmap_usable_groups_35010 = sdiv_up64(nest_sizze_34897,
                                               segmap_group_sizze_35009)
        mem_37430 = opencl_alloc(self, bytes_37410, "mem_37430")
        if ((1 * (np.long(segmap_usable_groups_35010) * np.long(segmap_group_sizze_35009))) != 0):
          self.mainzisegmap_34666_var.set_args(self.global_failure,
                                               self.failure_is_an_option,
                                               self.global_failure_args,
                                               np.int64(N_24750),
                                               np.int64(m_24751),
                                               np.int64(iota32_arg_25134),
                                               res_mem_37111, res_mem_37191,
                                               mem_37408, mem_37430)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34666_var,
                                     ((np.long(segmap_usable_groups_35010) * np.long(segmap_group_sizze_35009)),),
                                     (np.long(segmap_group_sizze_35009),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_param_37438 = mem_37430
        i_35037 = np.int32(0)
        one_39013 = np.int32(1)
        for counter_39012 in range(iters_25160):
          lifted_2_radix_sort_step_arg_35039 = (np.int32(2) * i_35037)
          lifted_0_get_bit_arg_35040 = (np.int32(1) + lifted_2_radix_sort_step_arg_35039)
          res_35041 = (lifted_0_get_bit_arg_35040 == np.int32(31))
          res_35042 = (lifted_2_radix_sort_step_arg_35039 == np.int32(31))
          local_memory_capacity_38949 = self.max_local_memory
          if (sle64((((((bytes_37267 + bytes_37267) + bytes_37267) + bytes_37267) + bytes_37243) + bytes_37243),
                    sext_i32_i64(local_memory_capacity_38949)) and intra_suff_and_fits_35051):
            mem_37443 = opencl_alloc(self, bytes_37410, "mem_37443")
            self.futhark_builtinzhgpu_map_transpose_f32(mem_37443, np.int64(0),
                                                        mem_param_37438,
                                                        np.int64(0),
                                                        np.int64(1),
                                                        iota32_arg_25134,
                                                        m_24751)
            mem_37461 = opencl_alloc(self, bytes_37410, "mem_37461")
            if ((1 * (np.long(m_24751) * np.long(iota32_arg_25134))) != 0):
              self.mainzisegmap_intragroup_34151_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.long(bytes_37243)),
                                                              cl.LocalMemory(np.long(bytes_37243)),
                                                              cl.LocalMemory(np.long(bytes_37267)),
                                                              cl.LocalMemory(np.long(bytes_37267)),
                                                              cl.LocalMemory(np.long(bytes_37267)),
                                                              cl.LocalMemory(np.long(bytes_37267)),
                                                              np.int64(m_24751),
                                                              np.int64(iota32_arg_25134),
                                                              np.int64(i_25162),
                                                              np.int32(lifted_2_radix_sort_step_arg_35039),
                                                              np.int32(lifted_0_get_bit_arg_35040),
                                                              np.byte(res_35041),
                                                              np.byte(res_35042),
                                                              mem_param_37438,
                                                              mem_37443,
                                                              mem_37461)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegmap_intragroup_34151_var,
                                         ((np.long(m_24751) * np.long(iota32_arg_25134)),),
                                         (np.long(iota32_arg_25134),))
              if synchronous:
                sync(self)
            mem_37443 = None
            res_mem_37482 = mem_37461
          else:
            mem_37465 = opencl_alloc(self, bytes_37463, "mem_37465")
            mem_37468 = opencl_alloc(self, bytes_37463, "mem_37468")
            mem_37471 = opencl_alloc(self, bytes_37463, "mem_37471")
            mem_37474 = opencl_alloc(self, bytes_37463, "mem_37474")
            mem_37477 = opencl_alloc(self, bytes_37410, "mem_37477")
            if slt64(np.int64(0), (m_24751 * iota32_arg_25134)):
              stage1_max_num_groups_38849 = self.max_group_size
              stage1_num_groups_38850 = smin64(stage1_max_num_groups_38849,
                                               num_groups_35135)
              num_threads_38851 = sext_i64_i32((stage1_num_groups_38850 * segscan_group_sizze_35134))
              if ((1 * (np.long(stage1_num_groups_38850) * np.long(segscan_group_sizze_35134))) != 0):
                self.mainziscan_stage1_34475_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35134)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35134)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35134)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * segscan_group_sizze_35134)))),
                                                          np.int64(m_24751),
                                                          np.int64(iota32_arg_25134),
                                                          np.int32(lifted_2_radix_sort_step_arg_35039),
                                                          np.int32(lifted_0_get_bit_arg_35040),
                                                          np.byte(res_35041),
                                                          np.byte(res_35042),
                                                          mem_param_37438,
                                                          mem_37465, mem_37468,
                                                          mem_37471, mem_37474,
                                                          mem_37477,
                                                          np.int32(num_threads_38851))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainziscan_stage1_34475_var,
                                           ((np.long(stage1_num_groups_38850) * np.long(segscan_group_sizze_35134)),),
                                           (np.long(segscan_group_sizze_35134),))
                if synchronous:
                  sync(self)
              if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38850))) != 0):
                self.mainziscan_stage2_34475_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38850)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38850)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38850)))),
                                                          cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                        (np.int32(8) * stage1_num_groups_38850)))),
                                                          np.int64(m_24751),
                                                          np.int64(iota32_arg_25134),
                                                          mem_37465, mem_37468,
                                                          mem_37471, mem_37474,
                                                          np.int64(stage1_num_groups_38850),
                                                          np.int32(num_threads_38851))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainziscan_stage2_34475_var,
                                           ((np.long(np.int64(1)) * np.long(stage1_num_groups_38850)),),
                                           (np.long(stage1_num_groups_38850),))
                if synchronous:
                  sync(self)
              required_groups_38932 = sext_i64_i32(sdiv_up64((m_24751 * iota32_arg_25134),
                                                             segscan_group_sizze_35134))
              if ((1 * (np.long(num_groups_35135) * np.long(segscan_group_sizze_35134))) != 0):
                self.mainziscan_stage3_34475_var.set_args(self.global_failure,
                                                          np.int64(m_24751),
                                                          np.int64(iota32_arg_25134),
                                                          np.int64(num_groups_35135),
                                                          mem_37465, mem_37468,
                                                          mem_37471, mem_37474,
                                                          np.int32(num_threads_38851),
                                                          np.int32(required_groups_38932))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainziscan_stage3_34475_var,
                                           ((np.long(num_groups_35135) * np.long(segscan_group_sizze_35134)),),
                                           (np.long(segscan_group_sizze_35134),))
                if synchronous:
                  sync(self)
            mem_37480 = opencl_alloc(self, bytes_37410, "mem_37480")
            if (((m_24751 * iota32_arg_25134) * np.int32(4)) != 0):
              cl.enqueue_copy(self.queue, mem_37480, mem_param_37438,
                              dest_offset=np.long(np.int64(0)),
                              src_offset=np.long(np.int64(0)),
                              byte_count=np.long(((m_24751 * iota32_arg_25134) * np.int32(4))))
            if synchronous:
              sync(self)
            if ((1 * (np.long(segmap_usable_groups_35204) * np.long(segmap_group_sizze_35203))) != 0):
              self.mainzisegmap_34416_var.set_args(self.global_failure,
                                                   np.int64(m_24751),
                                                   np.int64(iota32_arg_25134),
                                                   np.int64(i_25162),
                                                   mem_param_37438, mem_37465,
                                                   mem_37468, mem_37471,
                                                   mem_37474, mem_37477,
                                                   mem_37480)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegmap_34416_var,
                                         ((np.long(segmap_usable_groups_35204) * np.long(segmap_group_sizze_35203)),),
                                         (np.long(segmap_group_sizze_35203),))
              if synchronous:
                sync(self)
            mem_37465 = None
            mem_37468 = None
            mem_37471 = None
            mem_37474 = None
            mem_37477 = None
            res_mem_37482 = mem_37480
          mem_param_tmp_38818 = res_mem_37482
          mem_param_37438 = mem_param_tmp_38818
          i_35037 += one_39013
        res_r_mem_37492 = mem_param_37438
        mem_37430 = None
        segmap_usable_groups_35241 = sdiv_up64(m_24751,
                                               segmap_group_sizze_35240)
        mem_37495 = opencl_alloc(self, bytes_37091, "mem_37495")
        mem_37497 = opencl_alloc(self, bytes_37091, "mem_37497")
        if ((1 * (np.long(segmap_usable_groups_35241) * np.long(segmap_group_sizze_35240))) != 0):
          self.mainzisegmap_34090_var.set_args(self.global_failure,
                                               self.failure_is_an_option,
                                               self.global_failure_args,
                                               np.int64(N_24750),
                                               np.int64(m_24751),
                                               np.int32(n_24755),
                                               np.int64(iota32_arg_25134),
                                               res_mem_37112, res_mem_37191,
                                               mem_37408, mem_37422, mem_37424,
                                               res_r_mem_37492, mem_37495,
                                               mem_37497)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_34090_var,
                                     ((np.long(segmap_usable_groups_35241) * np.long(segmap_group_sizze_35240)),),
                                     (np.long(segmap_group_sizze_35240),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_37408 = None
        mem_37422 = None
        mem_37424 = None
        res_r_mem_37492 = None
        res_mem_37498 = mem_37495
        res_mem_37499 = mem_37426
        res_mem_37500 = mem_37497
      res_mem_37501 = res_mem_37498
      res_mem_37502 = res_mem_37499
      res_mem_37503 = res_mem_37500
    res_mem_37110 = None
    res_mem_37111 = None
    res_mem_37112 = None
    res_mem_37190 = None
    res_mem_37191 = None
    res_mem_37192 = None
    res_mem_37241 = None
    mem_37246 = None
    out_arrsizze_37763 = m_24751
    out_arrsizze_37765 = m_24751
    out_arrsizze_37767 = m_24751
    out_mem_37762 = res_mem_37501
    out_mem_37764 = res_mem_37502
    out_mem_37766 = res_mem_37503
    return (out_mem_37762, out_arrsizze_37763, out_mem_37764,
            out_arrsizze_37765, out_mem_37766, out_arrsizze_37767)
  def futhark_mainDetailed(self, mappingindices_mem_36651, images_mem_36652,
                           N_24013, m_24014, N_24015, trend_24016, k_24017,
                           n_24018, freq_24019, hfrac_24020, lam_24021):
    dim_match_24024 = (N_24013 == N_24015)
    empty_or_match_cert_24025 = True
    assert dim_match_24024, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:164:1-168:56\n" % ("function arguments of wrong shape",))
    res_24027 = sext_i32_i64(n_24018)
    x_24028 = (np.int32(2) * k_24017)
    k2p2_24029 = (np.int32(2) + x_24028)
    cond_24030 = slt32(np.int32(0), trend_24016)
    if cond_24030:
      k2p2zq_24031 = k2p2_24029
    else:
      res_24032 = (k2p2_24029 - np.int32(1))
      k2p2zq_24031 = res_24032
    res_24033 = sext_i32_i64(k2p2zq_24031)
    binop_x_36655 = (N_24013 * res_24033)
    bytes_36654 = (np.int64(4) * binop_x_36655)
    if cond_24030:
      bounds_invalid_upwards_24035 = slt64(res_24033, np.int64(0))
      valid_24036 = not(bounds_invalid_upwards_24035)
      range_valid_c_24037 = True
      assert valid_24036, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:31:11-60\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24033,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_25732 = self.sizes["mainDetailed.segmap_group_size_25662"]
      segmap_usable_groups_25733 = sdiv_up64(binop_x_36655,
                                             segmap_group_sizze_25732)
      mem_36656 = opencl_alloc(self, bytes_36654, "mem_36656")
      if ((1 * (np.long(segmap_usable_groups_25733) * np.long(segmap_group_sizze_25732))) != 0):
        self.mainDetailedzisegmap_25659_var.set_args(self.global_failure,
                                                     np.int64(N_24013),
                                                     np.float32(freq_24019),
                                                     np.int64(res_24033),
                                                     mappingindices_mem_36651,
                                                     mem_36656)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_25659_var,
                                   ((np.long(segmap_usable_groups_25733) * np.long(segmap_group_sizze_25732)),),
                                   (np.long(segmap_group_sizze_25732),))
        if synchronous:
          sync(self)
      binop_p_mem_36661 = mem_36656
    else:
      bounds_invalid_upwards_24061 = slt64(res_24033, np.int64(0))
      valid_24062 = not(bounds_invalid_upwards_24061)
      range_valid_c_24063 = True
      assert valid_24062, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:49:10-22\n   #3  bfastfinal.fut:32:11-58\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_24033,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_25906 = self.sizes["mainDetailed.segmap_group_size_25840"]
      segmap_usable_groups_25907 = sdiv_up64(binop_x_36655,
                                             segmap_group_sizze_25906)
      mem_36660 = opencl_alloc(self, bytes_36654, "mem_36660")
      if ((1 * (np.long(segmap_usable_groups_25907) * np.long(segmap_group_sizze_25906))) != 0):
        self.mainDetailedzisegmap_25837_var.set_args(self.global_failure,
                                                     np.int64(N_24013),
                                                     np.float32(freq_24019),
                                                     np.int64(res_24033),
                                                     mappingindices_mem_36651,
                                                     mem_36660)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_25837_var,
                                   ((np.long(segmap_usable_groups_25907) * np.long(segmap_group_sizze_25906)),),
                                   (np.long(segmap_group_sizze_25906),))
        if synchronous:
          sync(self)
      binop_p_mem_36661 = mem_36660
    x_24086 = (N_24013 * N_24013)
    y_24087 = (np.int64(2) * N_24013)
    x_24088 = (x_24086 + y_24087)
    x_24089 = (np.int64(1) + x_24088)
    y_24090 = (np.int64(1) + N_24013)
    zzero_24091 = (y_24090 == np.int64(0))
    nonzzero_24092 = not(zzero_24091)
    nonzzero_cert_24093 = True
    assert nonzzero_24092, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:38:32-56\n   #1  bfastfinal.fut:168:3-56\n   #2  bfastfinal.fut:164:1-168:56\n" % ("division by zero",))
    x_24094 = sdiv64(x_24089, y_24090)
    x_24095 = (x_24094 - N_24013)
    binop_p_24096 = (x_24095 - np.int64(1))
    res_24097 = sext_i64_i32(binop_p_24096)
    res_24098 = sitofp_i32_f32(res_24097)
    segmap_group_sizze_25989 = self.sizes["mainDetailed.segmap_group_size_25968"]
    segmap_usable_groups_25990 = sdiv_up64(binop_x_36655,
                                           segmap_group_sizze_25989)
    mem_36664 = opencl_alloc(self, bytes_36654, "mem_36664")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_36664, np.int64(0),
                                                binop_p_mem_36661, np.int64(0),
                                                np.int64(1), N_24013, res_24033)
    mem_36668 = opencl_alloc(self, bytes_36654, "mem_36668")
    if ((1 * (np.long(segmap_usable_groups_25990) * np.long(segmap_group_sizze_25989))) != 0):
      self.mainDetailedzisegmap_25965_var.set_args(self.global_failure,
                                                   np.int64(N_24013),
                                                   np.int64(res_24033),
                                                   np.float32(res_24098),
                                                   mem_36664, mem_36668)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_25965_var,
                                 ((np.long(segmap_usable_groups_25990) * np.long(segmap_group_sizze_25989)),),
                                 (np.long(segmap_group_sizze_25989),))
      if synchronous:
        sync(self)
    eq_x_y_24106 = (np.int64(0) == res_24033)
    p_and_eq_x_y_24107 = (cond_24030 and eq_x_y_24106)
    not_p_24108 = not(cond_24030)
    p_and_eq_x_y_24109 = (eq_x_y_24106 and not_p_24108)
    empty_slice_24110 = (p_and_eq_x_y_24107 or p_and_eq_x_y_24109)
    m_24111 = (res_24033 - np.int64(1))
    zzero_leq_i_p_m_t_s_24112 = sle64(np.int64(0), m_24111)
    i_p_m_t_s_leq_w_24113 = slt64(m_24111, res_24033)
    i_lte_j_24114 = sle64(np.int64(0), res_24033)
    y_24115 = (zzero_leq_i_p_m_t_s_24112 and i_p_m_t_s_leq_w_24113)
    y_24116 = (i_lte_j_24114 and y_24115)
    ok_or_empty_24117 = (empty_slice_24110 or y_24116)
    empty_slice_24118 = (res_24027 == np.int64(0))
    m_24119 = (res_24027 - np.int64(1))
    zzero_leq_i_p_m_t_s_24120 = sle64(np.int64(0), m_24119)
    i_p_m_t_s_leq_w_24121 = slt64(m_24119, N_24013)
    i_lte_j_24122 = sle64(np.int64(0), res_24027)
    y_24123 = (zzero_leq_i_p_m_t_s_24120 and i_p_m_t_s_leq_w_24121)
    y_24124 = (i_lte_j_24122 and y_24123)
    ok_or_empty_24125 = (empty_slice_24118 or y_24124)
    index_ok_24126 = (ok_or_empty_24117 and ok_or_empty_24125)
    index_certs_24127 = True
    assert index_ok_24126, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:41:15-23\n   #1  bfastfinal.fut:168:3-56\n   #2  bfastfinal.fut:164:1-168:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24027,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               res_24033,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24013,
                                                                                                                                                                               "]."))
    empty_slice_24129 = (res_24033 == np.int64(0))
    ok_or_empty_24130 = (y_24116 or empty_slice_24129)
    index_ok_24131 = (ok_or_empty_24125 and ok_or_empty_24130)
    index_certs_24132 = True
    assert index_ok_24131, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:42:15-24\n   #1  bfastfinal.fut:168:3-56\n   #2  bfastfinal.fut:164:1-168:56\n" % ("Index [:",
                                                                                                                                                                               res_24027,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_24013,
                                                                                                                                                                               "][",
                                                                                                                                                                               res_24033,
                                                                                                                                                                               "]."))
    empty_slice_24134 = (m_24014 == np.int64(0))
    m_24135 = (m_24014 - np.int64(1))
    zzero_leq_i_p_m_t_s_24136 = sle64(np.int64(0), m_24135)
    i_p_m_t_s_leq_w_24137 = slt64(m_24135, m_24014)
    i_lte_j_24138 = sle64(np.int64(0), m_24014)
    y_24139 = (zzero_leq_i_p_m_t_s_24136 and i_p_m_t_s_leq_w_24137)
    y_24140 = (i_lte_j_24138 and y_24139)
    ok_or_empty_24141 = (empty_slice_24134 or y_24140)
    index_ok_24142 = (ok_or_empty_24125 and ok_or_empty_24141)
    index_certs_24143 = True
    assert index_ok_24142, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:43:15-28\n   #1  bfastfinal.fut:168:3-56\n   #2  bfastfinal.fut:164:1-168:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_24027,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_24014,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_24013,
                                                                                                                                                                               "]."))
    suff_outer_par_25996 = (self.sizes["mainDetailed.suff_outer_par_6"] <= m_24014)
    segmap_group_sizze_26022 = self.sizes["mainDetailed.segmap_group_size_26000"]
    max_num_groups_37805 = self.sizes["mainDetailed.segmap_num_groups_26002"]
    num_groups_26023 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24014,
                                                            segmap_group_sizze_26022),
                                                  sext_i32_i64(max_num_groups_37805))))
    nest_sizze_26198 = (m_24014 * res_24033)
    segmap_group_sizze_26199 = self.sizes["mainDetailed.segmap_group_size_26047"]
    max_num_groups_37806 = self.sizes["mainDetailed.segmap_num_groups_26049"]
    num_groups_26200 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_26198,
                                                            segmap_group_sizze_26199),
                                                  sext_i32_i64(max_num_groups_37806))))
    suff_outer_par_26204 = (self.sizes["mainDetailed.suff_outer_par_7"] <= nest_sizze_26198)
    y_26223 = (res_24033 * res_24033)
    nest_sizze_26224 = (m_24014 * y_26223)
    segmap_group_sizze_26225 = self.sizes["mainDetailed.segmap_group_size_26078"]
    suff_outer_par_26230 = (self.sizes["mainDetailed.suff_outer_par_8"] <= nest_sizze_26224)
    nest_sizze_26250 = (res_24027 * nest_sizze_26224)
    segred_group_sizze_26251 = self.sizes["mainDetailed.segred_group_size_26107"]
    max_num_groups_37807 = self.sizes["mainDetailed.segred_num_groups_26109"]
    num_groups_26252 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_26250,
                                                            segred_group_sizze_26251),
                                                  sext_i32_i64(max_num_groups_37807))))
    binop_x_36670 = (m_24014 * N_24015)
    bytes_36669 = (np.int64(4) * binop_x_36670)
    bytes_36714 = (np.int64(4) * nest_sizze_26224)
    bytes_36673 = (np.int64(4) * y_26223)
    binop_x_36759 = (res_24033 * nest_sizze_26198)
    bytes_36757 = (np.int64(4) * binop_x_36759)
    bytes_36719 = (np.int64(4) * res_24033)
    num_threads_37641 = (segmap_group_sizze_26022 * num_groups_26023)
    total_sizze_37642 = (bytes_36673 * num_threads_37641)
    num_threads_37643 = (segmap_group_sizze_26199 * num_groups_26200)
    total_sizze_37644 = (bytes_36719 * num_threads_37643)
    local_memory_capacity_37900 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_37900)) and suff_outer_par_25996):
      mem_36671 = opencl_alloc(self, bytes_36669, "mem_36671")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36671, np.int64(0),
                                                  images_mem_36652, np.int64(0),
                                                  np.int64(1), N_24015, m_24014)
      mem_36717 = opencl_alloc(self, bytes_36714, "mem_36717")
      mem_36675 = opencl_alloc(self, total_sizze_37642, "mem_36675")
      if ((1 * (np.long(num_groups_26023) * np.long(segmap_group_sizze_26022))) != 0):
        self.mainDetailedzisegmap_25998_var.set_args(self.global_failure,
                                                     np.int64(N_24013),
                                                     np.int64(m_24014),
                                                     np.int32(n_24018),
                                                     np.int32(k2p2zq_24031),
                                                     np.int64(res_24033),
                                                     np.int64(num_groups_26023),
                                                     binop_p_mem_36661,
                                                     mem_36668, mem_36671,
                                                     mem_36675, mem_36717)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_25998_var,
                                   ((np.long(num_groups_26023) * np.long(segmap_group_sizze_26022)),),
                                   (np.long(segmap_group_sizze_26022),))
        if synchronous:
          sync(self)
      mem_36671 = None
      mem_36675 = None
      mem_36760 = opencl_alloc(self, bytes_36757, "mem_36760")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36760, np.int64(0),
                                                  mem_36717, np.int64(0),
                                                  np.int64(1), m_24014,
                                                  (res_24033 * res_24033))
      mem_36717 = None
      res_mem_36762 = mem_36760
    else:
      local_memory_capacity_37899 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_37899)) and suff_outer_par_26204):
        mem_36736 = opencl_alloc(self, bytes_36757, "mem_36736")
        mem_36720 = opencl_alloc(self, total_sizze_37644, "mem_36720")
        if ((1 * (np.long(num_groups_26200) * np.long(segmap_group_sizze_26199))) != 0):
          self.mainDetailedzisegmap_26044_var.set_args(self.global_failure,
                                                       np.int64(m_24014),
                                                       np.int64(N_24015),
                                                       np.int32(n_24018),
                                                       np.int32(k2p2zq_24031),
                                                       np.int64(res_24033),
                                                       np.int64(num_groups_26200),
                                                       images_mem_36652,
                                                       mem_36664, mem_36668,
                                                       mem_36720, mem_36736)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_26044_var,
                                     ((np.long(num_groups_26200) * np.long(segmap_group_sizze_26199)),),
                                     (np.long(segmap_group_sizze_26199),))
          if synchronous:
            sync(self)
        mem_36720 = None
        mem_36754 = opencl_alloc(self, bytes_36757, "mem_36754")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_36754, np.int64(0),
                                                    mem_36736, np.int64(0),
                                                    np.int64(1),
                                                    (m_24014 * res_24033),
                                                    res_24033)
        mem_36736 = None
        res_mem_36756 = mem_36754
      else:
        segmap_usable_groups_26226 = sdiv_up64(nest_sizze_26224,
                                               segmap_group_sizze_26225)
        local_memory_capacity_37898 = self.max_local_memory
        if (sle64(np.int64(0),
                  sext_i32_i64(local_memory_capacity_37898)) and suff_outer_par_26230):
          mem_36741 = opencl_alloc(self, bytes_36757, "mem_36741")
          if ((1 * (np.long(segmap_usable_groups_26226) * np.long(segmap_group_sizze_26225))) != 0):
            self.mainDetailedzisegmap_26074_var.set_args(self.global_failure,
                                                         np.int64(m_24014),
                                                         np.int64(N_24015),
                                                         np.int32(n_24018),
                                                         np.int64(res_24033),
                                                         images_mem_36652,
                                                         mem_36664, mem_36668,
                                                         mem_36741)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26074_var,
                                       ((np.long(segmap_usable_groups_26226) * np.long(segmap_group_sizze_26225)),),
                                       (np.long(segmap_group_sizze_26225),))
            if synchronous:
              sync(self)
          res_mem_36750 = mem_36741
        else:
          mem_36744 = opencl_alloc(self, bytes_36654, "mem_36744")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_36744, np.int64(0),
                                                      mem_36668, np.int64(0),
                                                      np.int64(1), res_24033,
                                                      N_24013)
          mem_36749 = opencl_alloc(self, bytes_36757, "mem_36749")
          if slt64((res_24027 * np.int64(2)), segred_group_sizze_26251):
            segment_sizze_nonzzero_37838 = smax64(np.int64(1), res_24027)
            num_threads_37839 = (num_groups_26252 * segred_group_sizze_26251)
            if ((1 * (np.long(num_groups_26252) * np.long(segred_group_sizze_26251))) != 0):
              self.mainDetailedzisegred_small_26113_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_26251))),
                                                                 np.int64(N_24013),
                                                                 np.int64(m_24014),
                                                                 np.int64(N_24015),
                                                                 np.int64(res_24027),
                                                                 np.int64(res_24033),
                                                                 np.int64(num_groups_26252),
                                                                 images_mem_36652,
                                                                 binop_p_mem_36661,
                                                                 mem_36744,
                                                                 mem_36749,
                                                                 np.int64(segment_sizze_nonzzero_37838))
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_small_26113_var,
                                         ((np.long(num_groups_26252) * np.long(segred_group_sizze_26251)),),
                                         (np.long(segred_group_sizze_26251),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_37859 = sdiv_up64(num_groups_26252,
                                                 smax64(np.int64(1),
                                                        ((m_24014 * res_24033) * res_24033)))
            elements_per_thread_37860 = sdiv_up64(res_24027,
                                                  (segred_group_sizze_26251 * groups_per_segment_37859))
            virt_num_groups_37861 = (groups_per_segment_37859 * ((m_24014 * res_24033) * res_24033))
            num_threads_37862 = (num_groups_26252 * segred_group_sizze_26251)
            threads_per_segment_37863 = (groups_per_segment_37859 * segred_group_sizze_26251)
            group_res_arr_mem_37864 = opencl_alloc(self,
                                                   (np.int32(4) * (segred_group_sizze_26251 * virt_num_groups_37861)),
                                                   "group_res_arr_mem_37864")
            mainDetailedzicounter_mem_37866 = self.mainDetailedzicounter_mem_37866
            if ((1 * (np.long(num_groups_26252) * np.long(segred_group_sizze_26251))) != 0):
              self.mainDetailedzisegred_large_26113_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.long(np.int32(1))),
                                                                 cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_26251))),
                                                                 np.int64(N_24013),
                                                                 np.int64(N_24015),
                                                                 np.int64(res_24027),
                                                                 np.int64(res_24033),
                                                                 np.int64(num_groups_26252),
                                                                 images_mem_36652,
                                                                 binop_p_mem_36661,
                                                                 mem_36744,
                                                                 mem_36749,
                                                                 np.int64(groups_per_segment_37859),
                                                                 np.int64(elements_per_thread_37860),
                                                                 np.int64(virt_num_groups_37861),
                                                                 np.int64(threads_per_segment_37863),
                                                                 group_res_arr_mem_37864,
                                                                 mainDetailedzicounter_mem_37866)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_large_26113_var,
                                         ((np.long(num_groups_26252) * np.long(segred_group_sizze_26251)),),
                                         (np.long(segred_group_sizze_26251),))
              if synchronous:
                sync(self)
          mem_36744 = None
          res_mem_36750 = mem_36749
        res_mem_36756 = res_mem_36750
      res_mem_36762 = res_mem_36756
    m_24164 = (np.int64(2) * res_24033)
    nm_24165 = (res_24033 * m_24164)
    bounds_invalid_upwards_24166 = slt64(nm_24165, np.int64(0))
    valid_24167 = not(bounds_invalid_upwards_24166)
    range_valid_c_24168 = True
    assert valid_24167, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:77:21-27\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:168:3-56\n   #4  bfastfinal.fut:164:1-168:56\n" % ("Range ",
                                                                                                                                                                                                                                        np.int64(0),
                                                                                                                                                                                                                                        "..",
                                                                                                                                                                                                                                        np.int64(1),
                                                                                                                                                                                                                                        "..<",
                                                                                                                                                                                                                                        nm_24165,
                                                                                                                                                                                                                                        " is invalid."))
    zzero_24170 = (m_24164 == np.int64(0))
    nonzzero_24171 = not(zzero_24170)
    nonzzero_cert_24172 = True
    assert nonzzero_24171, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:72:41-47\n   #1  helpers.fut:72:14-77:28\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:168:3-56\n   #4  bfastfinal.fut:164:1-168:56\n" % ("division by zero",))
    res_24173 = sext_i64_i32(m_24164)
    loop_nonempty_24174 = slt32(np.int32(0), k2p2zq_24031)
    zzero_24175 = (res_24173 == np.int32(0))
    nonzzero_24176 = not(zzero_24175)
    loop_not_taken_24177 = not(loop_nonempty_24174)
    protect_assert_disj_24178 = (nonzzero_24176 or loop_not_taken_24177)
    nonzzero_cert_24179 = True
    assert protect_assert_disj_24178, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:59:43-49\n   #1  helpers.fut:59:16-65:32\n   #2  helpers.fut:78:15-53\n   #3  bfastfinal.fut:53:35-50\n   #4  bfastfinal.fut:168:3-56\n   #5  bfastfinal.fut:164:1-168:56\n" % ("division by zero",))
    y_26331 = smin64(res_24033, nm_24165)
    intra_avail_par_26332 = smin64(y_26223, y_26331)
    y_26333 = smax64(res_24033, nm_24165)
    computed_group_sizze_26275 = smax64(y_26223, y_26333)
    max_group_sizze_26466 = self.max_group_size
    fits_26467 = sle64(computed_group_sizze_26275, max_group_sizze_26466)
    suff_intra_par_26465 = (self.sizes["mainDetailed.suff_intra_par_10"] <= intra_avail_par_26332)
    intra_suff_and_fits_26468 = (suff_intra_par_26465 and fits_26467)
    nest_sizze_27049 = (m_24014 * nm_24165)
    segmap_group_sizze_27050 = self.sizes["mainDetailed.segmap_group_size_27013"]
    fits_27077 = sle64(nm_24165, max_group_sizze_26466)
    suff_intra_par_27079 = (self.sizes["mainDetailed.suff_intra_par_14"] <= nm_24165)
    intra_suff_and_fits_27080 = (fits_27077 and suff_intra_par_27079)
    segmap_group_sizze_27116 = self.sizes["mainDetailed.segmap_group_size_26921"]
    segmap_group_sizze_27132 = self.sizes["mainDetailed.segmap_group_size_26854"]
    segmap_group_sizze_27166 = self.sizes["mainDetailed.segmap_group_size_26800"]
    segmap_group_sizze_27201 = self.sizes["mainDetailed.segmap_group_size_26582"]
    segmap_usable_groups_27117 = sdiv_up_safe64(m_24014,
                                                segmap_group_sizze_27116)
    segmap_usable_groups_27133 = sdiv_up_safe64(nest_sizze_27049,
                                                segmap_group_sizze_27132)
    segmap_usable_groups_27167 = sdiv_up_safe64(nest_sizze_27049,
                                                segmap_group_sizze_27166)
    bytes_36765 = (np.int64(4) * nm_24165)
    bytes_36792 = (np.int64(4) * nest_sizze_27049)
    local_memory_capacity_37965 = self.max_local_memory
    if (sle64(((bytes_36765 + bytes_36765) + bytes_36673),
              sext_i32_i64(local_memory_capacity_37965)) and intra_suff_and_fits_26468):
      mem_36790 = opencl_alloc(self, bytes_36757, "mem_36790")
      if ((1 * (np.long(m_24014) * np.long(computed_group_sizze_26275))) != 0):
        self.mainDetailedzisegmap_intragroup_26334_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.long(bytes_36673)),
                                                                cl.LocalMemory(np.long(bytes_36765)),
                                                                cl.LocalMemory(np.long(bytes_36765)),
                                                                np.int32(k2p2zq_24031),
                                                                np.int64(res_24033),
                                                                np.int64(m_24164),
                                                                np.int64(nm_24165),
                                                                np.int32(res_24173),
                                                                np.int64(computed_group_sizze_26275),
                                                                res_mem_36762,
                                                                mem_36790)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_26334_var,
                                   ((np.long(m_24014) * np.long(computed_group_sizze_26275)),),
                                   (np.long(computed_group_sizze_26275),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      res_mem_36845 = mem_36790
    else:
      segmap_usable_groups_27051 = sdiv_up64(nest_sizze_27049,
                                             segmap_group_sizze_27050)
      mem_36794 = opencl_alloc(self, bytes_36792, "mem_36794")
      if ((1 * (np.long(segmap_usable_groups_27051) * np.long(segmap_group_sizze_27050))) != 0):
        self.mainDetailedzisegmap_27010_var.set_args(self.global_failure,
                                                     np.int64(m_24014),
                                                     np.int64(res_24033),
                                                     np.int64(m_24164),
                                                     np.int64(nm_24165),
                                                     res_mem_36762, mem_36794)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27010_var,
                                   ((np.long(segmap_usable_groups_27051) * np.long(segmap_group_sizze_27050)),),
                                   (np.long(segmap_group_sizze_27050),))
        if synchronous:
          sync(self)
      ctx_param_ext_36795 = m_24014
      ctx_param_ext_36796 = nm_24165
      ctx_param_ext_36797 = np.int64(0)
      ctx_param_ext_36798 = nm_24165
      ctx_param_ext_36799 = m_24014
      ctx_param_ext_36800 = np.int64(1)
      ctx_param_ext_36801 = nm_24165
      mem_param_36802 = mem_36794
      i_27065 = np.int32(0)
      one_39016 = np.int32(1)
      for counter_39015 in range(k2p2zq_24031):
        i_27067 = sext_i32_i64(i_27065)
        x_27068 = sle64(np.int64(0), i_27067)
        y_27069 = slt64(i_27067, nm_24165)
        bounds_check_27070 = (x_27068 and y_27069)
        index_certs_27071 = True
        assert bounds_check_27070, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:168:3-56\n   #4  bfastfinal.fut:164:1-168:56\n" % ("Index [",
                                                                                                                                                                                                                                         i_27067,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_24165,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_37925 = self.max_local_memory
        if intra_suff_and_fits_27080:
          res_ixfn_36824 = m_24014
        else:
          res_ixfn_36824 = ctx_param_ext_36799
        local_memory_capacity_37926 = self.max_local_memory
        if intra_suff_and_fits_27080:
          res_ixfn_36825 = nm_24165
        else:
          res_ixfn_36825 = ctx_param_ext_36801
        local_memory_capacity_37927 = self.max_local_memory
        if intra_suff_and_fits_27080:
          res_ixfn_36826 = m_24014
        else:
          res_ixfn_36826 = ctx_param_ext_36795
        local_memory_capacity_37928 = self.max_local_memory
        if intra_suff_and_fits_27080:
          res_ixfn_36827 = nm_24165
        else:
          res_ixfn_36827 = ctx_param_ext_36796
        local_memory_capacity_37929 = self.max_local_memory
        if intra_suff_and_fits_27080:
          res_ixfn_36828 = nm_24165
        else:
          res_ixfn_36828 = ctx_param_ext_36798
        local_memory_capacity_37930 = self.max_local_memory
        if intra_suff_and_fits_27080:
          res_ixfn_36829 = np.int64(1)
        else:
          res_ixfn_36829 = ctx_param_ext_36800
        local_memory_capacity_37931 = self.max_local_memory
        if intra_suff_and_fits_27080:
          res_ixfn_36830 = np.int64(0)
        else:
          res_ixfn_36830 = ctx_param_ext_36797
        local_memory_capacity_37959 = self.max_local_memory
        if ((sle64(np.int64(0),
                   sext_i32_i64(local_memory_capacity_37959)) and sle64(bytes_36765,
                                                                        sext_i32_i64(local_memory_capacity_37959))) and intra_suff_and_fits_27080):
          mem_36807 = opencl_alloc(self, bytes_36792, "mem_36807")
          group_sizze_37935 = self.sizes["mainDetailed.group_size_37935"]
          num_groups_37936 = sdiv_up64((m_24014 * nm_24165), group_sizze_37935)
          if ((1 * (np.long(num_groups_37936) * np.long(group_sizze_37935))) != 0):
            self.mainDetailedzicopy_37932_var.set_args(np.int64(m_24014),
                                                       np.int64(nm_24165),
                                                       np.int64(ctx_param_ext_36797),
                                                       np.int64(ctx_param_ext_36798),
                                                       np.int64(ctx_param_ext_36800),
                                                       mem_param_36802,
                                                       mem_36807)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzicopy_37932_var,
                                       ((np.long(num_groups_37936) * np.long(group_sizze_37935)),),
                                       (np.long(group_sizze_37935),))
            if synchronous:
              sync(self)
          mem_36815 = opencl_alloc(self, bytes_36792, "mem_36815")
          if ((1 * (np.long(m_24014) * np.long(nm_24165))) != 0):
            self.mainDetailedzisegmap_intragroup_26678_var.set_args(self.global_failure,
                                                                    cl.LocalMemory(np.long(bytes_36765)),
                                                                    np.int64(m_24014),
                                                                    np.int32(k2p2zq_24031),
                                                                    np.int64(nm_24165),
                                                                    np.int32(res_24173),
                                                                    np.int32(i_27065),
                                                                    np.int64(i_27067),
                                                                    np.int64(ctx_param_ext_36797),
                                                                    np.int64(ctx_param_ext_36798),
                                                                    np.int64(ctx_param_ext_36800),
                                                                    mem_param_36802,
                                                                    mem_36807,
                                                                    mem_36815)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_intragroup_26678_var,
                                       ((np.long(m_24014) * np.long(nm_24165)),),
                                       (np.long(nm_24165),))
            if synchronous:
              sync(self)
          mem_36807 = None
          res_mem_36831 = mem_36815
        else:
          mem_36818 = opencl_alloc(self, m_24014, "mem_36818")
          if ((1 * (np.long(segmap_usable_groups_27117) * np.long(segmap_group_sizze_27116))) != 0):
            self.mainDetailedzisegmap_26919_var.set_args(self.global_failure,
                                                         np.int64(m_24014),
                                                         np.int64(i_27067),
                                                         np.int64(ctx_param_ext_36797),
                                                         np.int64(ctx_param_ext_36798),
                                                         np.int64(ctx_param_ext_36800),
                                                         mem_param_36802,
                                                         mem_36818)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26919_var,
                                       ((np.long(segmap_usable_groups_27117) * np.long(segmap_group_sizze_27116)),),
                                       (np.long(segmap_group_sizze_27116),))
            if synchronous:
              sync(self)
          mem_36822 = opencl_alloc(self, bytes_36792, "mem_36822")
          if ((1 * (np.long(segmap_usable_groups_27133) * np.long(segmap_group_sizze_27132))) != 0):
            self.mainDetailedzisegmap_26851_var.set_args(self.global_failure,
                                                         np.int64(m_24014),
                                                         np.int32(k2p2zq_24031),
                                                         np.int64(nm_24165),
                                                         np.int32(res_24173),
                                                         np.int32(i_27065),
                                                         np.int64(i_27067),
                                                         np.int64(ctx_param_ext_36797),
                                                         np.int64(ctx_param_ext_36798),
                                                         np.int64(ctx_param_ext_36800),
                                                         mem_param_36802,
                                                         mem_36818, mem_36822)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26851_var,
                                       ((np.long(segmap_usable_groups_27133) * np.long(segmap_group_sizze_27132)),),
                                       (np.long(segmap_group_sizze_27132),))
            if synchronous:
              sync(self)
          mem_36818 = None
          if ((1 * (np.long(segmap_usable_groups_27167) * np.long(segmap_group_sizze_27166))) != 0):
            self.mainDetailedzisegmap_26797_var.set_args(self.global_failure,
                                                         np.int64(m_24014),
                                                         np.int64(nm_24165),
                                                         np.int64(ctx_param_ext_36797),
                                                         np.int64(ctx_param_ext_36798),
                                                         np.int64(ctx_param_ext_36800),
                                                         mem_param_36802,
                                                         mem_36822)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_26797_var,
                                       ((np.long(segmap_usable_groups_27167) * np.long(segmap_group_sizze_27166)),),
                                       (np.long(segmap_group_sizze_27166),))
            if synchronous:
              sync(self)
          mem_36822 = None
          res_mem_36831 = mem_param_36802
        ctx_param_ext_tmp_37916 = res_ixfn_36826
        ctx_param_ext_tmp_37917 = res_ixfn_36827
        ctx_param_ext_tmp_37918 = res_ixfn_36830
        ctx_param_ext_tmp_37919 = res_ixfn_36828
        ctx_param_ext_tmp_37920 = res_ixfn_36824
        ctx_param_ext_tmp_37921 = res_ixfn_36829
        ctx_param_ext_tmp_37922 = res_ixfn_36825
        mem_param_tmp_37923 = res_mem_36831
        ctx_param_ext_36795 = ctx_param_ext_tmp_37916
        ctx_param_ext_36796 = ctx_param_ext_tmp_37917
        ctx_param_ext_36797 = ctx_param_ext_tmp_37918
        ctx_param_ext_36798 = ctx_param_ext_tmp_37919
        ctx_param_ext_36799 = ctx_param_ext_tmp_37920
        ctx_param_ext_36800 = ctx_param_ext_tmp_37921
        ctx_param_ext_36801 = ctx_param_ext_tmp_37922
        mem_param_36802 = mem_param_tmp_37923
        i_27065 += one_39016
      res_r_ixfn_36832 = ctx_param_ext_36795
      res_r_ixfn_36833 = ctx_param_ext_36796
      res_r_ixfn_36834 = ctx_param_ext_36797
      res_r_ixfn_36835 = ctx_param_ext_36798
      res_r_ixfn_36836 = ctx_param_ext_36799
      res_r_ixfn_36837 = ctx_param_ext_36800
      res_r_ixfn_36838 = ctx_param_ext_36801
      res_r_mem_36839 = mem_param_36802
      mem_36794 = None
      segmap_usable_groups_27202 = sdiv_up64(nest_sizze_26224,
                                             segmap_group_sizze_27201)
      mem_36844 = opencl_alloc(self, bytes_36757, "mem_36844")
      if ((1 * (np.long(segmap_usable_groups_27202) * np.long(segmap_group_sizze_27201))) != 0):
        self.mainDetailedzisegmap_26578_var.set_args(self.global_failure,
                                                     np.int64(m_24014),
                                                     np.int64(res_24033),
                                                     np.int64(m_24164),
                                                     np.int64(res_r_ixfn_36834),
                                                     np.int64(res_r_ixfn_36835),
                                                     np.int64(res_r_ixfn_36837),
                                                     res_r_mem_36839, mem_36844)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_26578_var,
                                   ((np.long(segmap_usable_groups_27202) * np.long(segmap_group_sizze_27201)),),
                                   (np.long(segmap_group_sizze_27201),))
        if synchronous:
          sync(self)
      res_r_mem_36839 = None
      res_mem_36845 = mem_36844
    res_mem_36762 = None
    suff_outer_par_27214 = (self.sizes["mainDetailed.suff_outer_par_17"] <= m_24014)
    segmap_group_sizze_27236 = self.sizes["mainDetailed.segmap_group_size_27218"]
    max_num_groups_37966 = self.sizes["mainDetailed.segmap_num_groups_27220"]
    num_groups_27237 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24014,
                                                            segmap_group_sizze_27236),
                                                  sext_i32_i64(max_num_groups_37966))))
    suff_outer_par_27321 = (self.sizes["mainDetailed.suff_outer_par_18"] <= nest_sizze_26198)
    nest_sizze_27337 = (res_24027 * nest_sizze_26198)
    segred_group_sizze_27338 = self.sizes["mainDetailed.segred_group_size_27280"]
    max_num_groups_37967 = self.sizes["mainDetailed.segred_num_groups_27282"]
    num_groups_27339 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27337,
                                                            segred_group_sizze_27338),
                                                  sext_i32_i64(max_num_groups_37967))))
    tile_sizze_35462 = self.sizes["mainDetailed.tile_size_35461"]
    group_sizze_35463 = (tile_sizze_35462 * tile_sizze_35462)
    bytes_36864 = (np.int64(4) * nest_sizze_26198)
    bytes_36869 = (np.int64(4) * group_sizze_35463)
    binop_x_37578 = (np.int64(4) * tile_sizze_35462)
    sizze_37579 = (tile_sizze_35462 * binop_x_37578)
    num_threads_37654 = (segmap_group_sizze_27236 * num_groups_27237)
    total_sizze_37655 = (bytes_36719 * num_threads_37654)
    local_memory_capacity_38053 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38053)) and suff_outer_par_27214):
      mem_36848 = opencl_alloc(self, bytes_36669, "mem_36848")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36848, np.int64(0),
                                                  images_mem_36652, np.int64(0),
                                                  np.int64(1), N_24015, m_24014)
      mem_36866 = opencl_alloc(self, bytes_36864, "mem_36866")
      mem_36851 = opencl_alloc(self, total_sizze_37655, "mem_36851")
      if ((1 * (np.long(num_groups_27237) * np.long(segmap_group_sizze_27236))) != 0):
        self.mainDetailedzisegmap_27216_var.set_args(self.global_failure,
                                                     np.int64(N_24013),
                                                     np.int64(m_24014),
                                                     np.int32(n_24018),
                                                     np.int32(k2p2zq_24031),
                                                     np.int64(res_24033),
                                                     np.int64(num_groups_27237),
                                                     binop_p_mem_36661,
                                                     mem_36848, mem_36851,
                                                     mem_36866)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27216_var,
                                   ((np.long(num_groups_27237) * np.long(segmap_group_sizze_27236)),),
                                   (np.long(segmap_group_sizze_27236),))
        if synchronous:
          sync(self)
      mem_36848 = None
      mem_36851 = None
      mem_36934 = opencl_alloc(self, bytes_36864, "mem_36934")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36934, np.int64(0),
                                                  mem_36866, np.int64(0),
                                                  np.int64(1), m_24014,
                                                  res_24033)
      mem_36866 = None
      res_mem_36936 = mem_36934
    else:
      local_memory_capacity_38052 = self.max_local_memory
      if (sle64((((bytes_36869 + bytes_36869) + bytes_36869) + bytes_36869),
                sext_i32_i64(local_memory_capacity_38052)) and suff_outer_par_27321):
        num_groups_x_35464 = sdiv_up64(m_24014, tile_sizze_35462)
        num_groups_y_35465 = sdiv_up64(res_24033, tile_sizze_35462)
        num_groups_top_35466 = (num_groups_x_35464 * num_groups_y_35465)
        num_whole_tiles_35483 = squot64(res_24027, tile_sizze_35462)
        residual_input_35633 = srem64(res_24027, tile_sizze_35462)
        cond_35634 = (residual_input_35633 == np.int64(0))
        mem_36926 = opencl_alloc(self, bytes_36864, "mem_36926")
        if ((1 * (np.long(num_groups_top_35466) * np.long(group_sizze_35463))) != 0):
          self.mainDetailedzisegmap_intragroup_35467_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(bytes_36869)),
                                                                  cl.LocalMemory(np.long(bytes_36869)),
                                                                  cl.LocalMemory(np.long(bytes_36869)),
                                                                  cl.LocalMemory(np.long(bytes_36869)),
                                                                  np.int64(m_24014),
                                                                  np.int64(N_24015),
                                                                  np.int64(res_24027),
                                                                  np.int64(res_24033),
                                                                  np.int64(num_groups_y_35465),
                                                                  np.int64(num_whole_tiles_35483),
                                                                  np.int64(residual_input_35633),
                                                                  np.byte(cond_35634),
                                                                  images_mem_36652,
                                                                  mem_36664,
                                                                  mem_36926)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_35467_var,
                                     ((np.long(num_groups_top_35466) * np.long(group_sizze_35463)),),
                                     (np.long(group_sizze_35463),))
          if synchronous:
            sync(self)
        res_mem_36931 = mem_36926
      else:
        mem_36930 = opencl_alloc(self, bytes_36864, "mem_36930")
        if slt64((res_24027 * np.int64(2)), segred_group_sizze_27338):
          segment_sizze_nonzzero_37992 = smax64(np.int64(1), res_24027)
          num_threads_37993 = (num_groups_27339 * segred_group_sizze_27338)
          if ((1 * (np.long(num_groups_27339) * np.long(segred_group_sizze_27338))) != 0):
            self.mainDetailedzisegred_small_27286_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27338))),
                                                               np.int64(N_24013),
                                                               np.int64(m_24014),
                                                               np.int64(N_24015),
                                                               np.int64(res_24027),
                                                               np.int64(res_24033),
                                                               np.int64(num_groups_27339),
                                                               images_mem_36652,
                                                               binop_p_mem_36661,
                                                               mem_36930,
                                                               np.int64(segment_sizze_nonzzero_37992))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_27286_var,
                                       ((np.long(num_groups_27339) * np.long(segred_group_sizze_27338)),),
                                       (np.long(segred_group_sizze_27338),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38013 = sdiv_up64(num_groups_27339,
                                               smax64(np.int64(1),
                                                      (m_24014 * res_24033)))
          elements_per_thread_38014 = sdiv_up64(res_24027,
                                                (segred_group_sizze_27338 * groups_per_segment_38013))
          virt_num_groups_38015 = (groups_per_segment_38013 * (m_24014 * res_24033))
          num_threads_38016 = (num_groups_27339 * segred_group_sizze_27338)
          threads_per_segment_38017 = (groups_per_segment_38013 * segred_group_sizze_27338)
          group_res_arr_mem_38018 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27338 * virt_num_groups_38015)),
                                                 "group_res_arr_mem_38018")
          mainDetailedzicounter_mem_38020 = self.mainDetailedzicounter_mem_38020
          if ((1 * (np.long(num_groups_27339) * np.long(segred_group_sizze_27338))) != 0):
            self.mainDetailedzisegred_large_27286_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27338))),
                                                               np.int64(N_24013),
                                                               np.int64(N_24015),
                                                               np.int64(res_24027),
                                                               np.int64(res_24033),
                                                               np.int64(num_groups_27339),
                                                               images_mem_36652,
                                                               binop_p_mem_36661,
                                                               mem_36930,
                                                               np.int64(groups_per_segment_38013),
                                                               np.int64(elements_per_thread_38014),
                                                               np.int64(virt_num_groups_38015),
                                                               np.int64(threads_per_segment_38017),
                                                               group_res_arr_mem_38018,
                                                               mainDetailedzicounter_mem_38020)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_27286_var,
                                       ((np.long(num_groups_27339) * np.long(segred_group_sizze_27338)),),
                                       (np.long(segred_group_sizze_27338),))
            if synchronous:
              sync(self)
        res_mem_36931 = mem_36930
      res_mem_36936 = res_mem_36931
    binop_p_mem_36661 = None
    mem_36664 = None
    suff_outer_par_27355 = (self.sizes["mainDetailed.suff_outer_par_19"] <= m_24014)
    segmap_group_sizze_27376 = self.sizes["mainDetailed.segmap_group_size_27359"]
    max_num_groups_38054 = self.sizes["mainDetailed.segmap_num_groups_27361"]
    num_groups_27377 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24014,
                                                            segmap_group_sizze_27376),
                                                  sext_i32_i64(max_num_groups_38054))))
    segmap_group_sizze_27452 = self.sizes["mainDetailed.segmap_group_size_27396"]
    suff_outer_par_27456 = (self.sizes["mainDetailed.suff_outer_par_20"] <= nest_sizze_26198)
    segred_group_sizze_27471 = self.sizes["mainDetailed.segred_group_size_27417"]
    max_num_groups_38055 = self.sizes["mainDetailed.segred_num_groups_27419"]
    num_groups_27472 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_36759,
                                                            segred_group_sizze_27471),
                                                  sext_i32_i64(max_num_groups_38055))))
    num_threads_37658 = (segmap_group_sizze_27376 * num_groups_27377)
    total_sizze_37659 = (bytes_36719 * num_threads_37658)
    local_memory_capacity_38134 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38134)) and suff_outer_par_27355):
      mem_36940 = opencl_alloc(self, bytes_36714, "mem_36940")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36940, np.int64(0),
                                                  res_mem_36845, np.int64(0),
                                                  np.int64(1),
                                                  (res_24033 * res_24033),
                                                  m_24014)
      mem_36943 = opencl_alloc(self, bytes_36864, "mem_36943")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36943, np.int64(0),
                                                  res_mem_36936, np.int64(0),
                                                  np.int64(1), res_24033,
                                                  m_24014)
      mem_36961 = opencl_alloc(self, bytes_36864, "mem_36961")
      mem_36946 = opencl_alloc(self, total_sizze_37659, "mem_36946")
      if ((1 * (np.long(num_groups_27377) * np.long(segmap_group_sizze_27376))) != 0):
        self.mainDetailedzisegmap_27357_var.set_args(self.global_failure,
                                                     np.int64(m_24014),
                                                     np.int32(k2p2zq_24031),
                                                     np.int64(res_24033),
                                                     np.int64(num_groups_27377),
                                                     mem_36940, mem_36943,
                                                     mem_36946, mem_36961)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27357_var,
                                   ((np.long(num_groups_27377) * np.long(segmap_group_sizze_27376)),),
                                   (np.long(segmap_group_sizze_27376),))
        if synchronous:
          sync(self)
      mem_36940 = None
      mem_36943 = None
      mem_36946 = None
      mem_36977 = opencl_alloc(self, bytes_36864, "mem_36977")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36977, np.int64(0),
                                                  mem_36961, np.int64(0),
                                                  np.int64(1), m_24014,
                                                  res_24033)
      mem_36961 = None
      res_mem_36979 = mem_36977
    else:
      segmap_usable_groups_27453 = sdiv_up64(nest_sizze_26198,
                                             segmap_group_sizze_27452)
      local_memory_capacity_38133 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_38133)) and suff_outer_par_27456):
        mem_36965 = opencl_alloc(self, bytes_36757, "mem_36965")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_36965, np.int64(0),
                                                    res_mem_36845, np.int64(0),
                                                    np.int64(1), res_24033,
                                                    (m_24014 * res_24033))
        mem_36969 = opencl_alloc(self, bytes_36864, "mem_36969")
        if ((1 * (np.long(segmap_usable_groups_27453) * np.long(segmap_group_sizze_27452))) != 0):
          self.mainDetailedzisegmap_27393_var.set_args(self.global_failure,
                                                       np.int64(m_24014),
                                                       np.int32(k2p2zq_24031),
                                                       np.int64(res_24033),
                                                       res_mem_36936, mem_36965,
                                                       mem_36969)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_27393_var,
                                     ((np.long(segmap_usable_groups_27453) * np.long(segmap_group_sizze_27452)),),
                                     (np.long(segmap_group_sizze_27452),))
          if synchronous:
            sync(self)
        mem_36965 = None
        res_mem_36974 = mem_36969
      else:
        mem_36973 = opencl_alloc(self, bytes_36864, "mem_36973")
        if slt64((res_24033 * np.int64(2)), segred_group_sizze_27471):
          segment_sizze_nonzzero_38073 = smax64(np.int64(1), res_24033)
          num_threads_38074 = (num_groups_27472 * segred_group_sizze_27471)
          if ((1 * (np.long(num_groups_27472) * np.long(segred_group_sizze_27471))) != 0):
            self.mainDetailedzisegred_small_27423_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27471))),
                                                               np.int64(m_24014),
                                                               np.int64(res_24033),
                                                               np.int64(num_groups_27472),
                                                               res_mem_36845,
                                                               res_mem_36936,
                                                               mem_36973,
                                                               np.int64(segment_sizze_nonzzero_38073))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_27423_var,
                                       ((np.long(num_groups_27472) * np.long(segred_group_sizze_27471)),),
                                       (np.long(segred_group_sizze_27471),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38094 = sdiv_up64(num_groups_27472,
                                               smax64(np.int64(1),
                                                      (m_24014 * res_24033)))
          elements_per_thread_38095 = sdiv_up64(res_24033,
                                                (segred_group_sizze_27471 * groups_per_segment_38094))
          virt_num_groups_38096 = (groups_per_segment_38094 * (m_24014 * res_24033))
          num_threads_38097 = (num_groups_27472 * segred_group_sizze_27471)
          threads_per_segment_38098 = (groups_per_segment_38094 * segred_group_sizze_27471)
          group_res_arr_mem_38099 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27471 * virt_num_groups_38096)),
                                                 "group_res_arr_mem_38099")
          mainDetailedzicounter_mem_38101 = self.mainDetailedzicounter_mem_38101
          if ((1 * (np.long(num_groups_27472) * np.long(segred_group_sizze_27471))) != 0):
            self.mainDetailedzisegred_large_27423_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27471))),
                                                               np.int64(res_24033),
                                                               np.int64(num_groups_27472),
                                                               res_mem_36845,
                                                               res_mem_36936,
                                                               mem_36973,
                                                               np.int64(groups_per_segment_38094),
                                                               np.int64(elements_per_thread_38095),
                                                               np.int64(virt_num_groups_38096),
                                                               np.int64(threads_per_segment_38098),
                                                               group_res_arr_mem_38099,
                                                               mainDetailedzicounter_mem_38101)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_27423_var,
                                       ((np.long(num_groups_27472) * np.long(segred_group_sizze_27471)),),
                                       (np.long(segred_group_sizze_27471),))
            if synchronous:
              sync(self)
        res_mem_36974 = mem_36973
      res_mem_36979 = res_mem_36974
    res_mem_36845 = None
    res_mem_36936 = None
    suff_outer_par_27487 = (self.sizes["mainDetailed.suff_outer_par_21"] <= m_24014)
    segmap_group_sizze_27507 = self.sizes["mainDetailed.segmap_group_size_27491"]
    max_num_groups_38135 = self.sizes["mainDetailed.segmap_num_groups_27493"]
    num_groups_27508 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24014,
                                                            segmap_group_sizze_27507),
                                                  sext_i32_i64(max_num_groups_38135))))
    comparatee_27583 = (N_24013 * m_24014)
    suff_outer_par_27584 = (self.sizes["mainDetailed.suff_outer_par_22"] <= comparatee_27583)
    nest_sizze_27598 = (res_24033 * comparatee_27583)
    segred_group_sizze_27599 = self.sizes["mainDetailed.segred_group_size_27547"]
    max_num_groups_38136 = self.sizes["mainDetailed.segred_num_groups_27549"]
    num_groups_27600 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27598,
                                                            segred_group_sizze_27599),
                                                  sext_i32_i64(max_num_groups_38136))))
    tile_sizze_35784 = self.sizes["mainDetailed.tile_size_35783"]
    group_sizze_35785 = (tile_sizze_35784 * tile_sizze_35784)
    bytes_36998 = (np.int64(4) * comparatee_27583)
    bytes_36984 = (np.int64(4) * N_24013)
    bytes_37006 = (np.int64(4) * group_sizze_35785)
    binop_x_37590 = (np.int64(4) * tile_sizze_35784)
    sizze_37591 = (tile_sizze_35784 * binop_x_37590)
    num_threads_37662 = (segmap_group_sizze_27507 * num_groups_27508)
    total_sizze_37663 = (bytes_36984 * num_threads_37662)
    local_memory_capacity_38222 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38222)) and suff_outer_par_27487):
      mem_36982 = opencl_alloc(self, bytes_36864, "mem_36982")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_36982, np.int64(0),
                                                  res_mem_36979, np.int64(0),
                                                  np.int64(1), res_24033,
                                                  m_24014)
      mem_37000 = opencl_alloc(self, bytes_36998, "mem_37000")
      mem_36985 = opencl_alloc(self, total_sizze_37663, "mem_36985")
      if ((1 * (np.long(num_groups_27508) * np.long(segmap_group_sizze_27507))) != 0):
        self.mainDetailedzisegmap_27489_var.set_args(self.global_failure,
                                                     np.int64(N_24013),
                                                     np.int64(m_24014),
                                                     np.int32(k2p2zq_24031),
                                                     np.int64(res_24033),
                                                     np.int64(num_groups_27508),
                                                     mem_36668, mem_36982,
                                                     mem_36985, mem_37000)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27489_var,
                                   ((np.long(num_groups_27508) * np.long(segmap_group_sizze_27507)),),
                                   (np.long(segmap_group_sizze_27507),))
        if synchronous:
          sync(self)
      mem_36982 = None
      mem_36985 = None
      mem_37071 = opencl_alloc(self, bytes_36998, "mem_37071")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37071, np.int64(0),
                                                  mem_37000, np.int64(0),
                                                  np.int64(1), m_24014, N_24013)
      mem_37000 = None
      res_mem_37073 = mem_37071
    else:
      local_memory_capacity_38221 = self.max_local_memory
      if (sle64((((bytes_37006 + bytes_37006) + bytes_37006) + bytes_37006),
                sext_i32_i64(local_memory_capacity_38221)) and suff_outer_par_27584):
        mem_37003 = opencl_alloc(self, bytes_36654, "mem_37003")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_37003, np.int64(0),
                                                    mem_36668, np.int64(0),
                                                    np.int64(1), res_24033,
                                                    N_24013)
        num_groups_x_35786 = sdiv_up64(m_24014, tile_sizze_35784)
        num_groups_y_35787 = sdiv_up64(N_24013, tile_sizze_35784)
        num_groups_top_35788 = (num_groups_x_35786 * num_groups_y_35787)
        num_whole_tiles_35805 = squot64(res_24033, tile_sizze_35784)
        residual_input_35949 = srem64(res_24033, tile_sizze_35784)
        cond_35950 = (residual_input_35949 == np.int64(0))
        mem_37063 = opencl_alloc(self, bytes_36998, "mem_37063")
        if ((1 * (np.long(num_groups_top_35788) * np.long(group_sizze_35785))) != 0):
          self.mainDetailedzisegmap_intragroup_35789_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(bytes_37006)),
                                                                  cl.LocalMemory(np.long(bytes_37006)),
                                                                  cl.LocalMemory(np.long(bytes_37006)),
                                                                  cl.LocalMemory(np.long(bytes_37006)),
                                                                  np.int64(N_24013),
                                                                  np.int64(m_24014),
                                                                  np.int64(res_24033),
                                                                  np.int64(num_groups_y_35787),
                                                                  np.int64(num_whole_tiles_35805),
                                                                  np.int64(residual_input_35949),
                                                                  np.byte(cond_35950),
                                                                  res_mem_36979,
                                                                  mem_37003,
                                                                  mem_37063)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_35789_var,
                                     ((np.long(num_groups_top_35788) * np.long(group_sizze_35785)),),
                                     (np.long(group_sizze_35785),))
          if synchronous:
            sync(self)
        mem_37003 = None
        res_mem_37068 = mem_37063
      else:
        mem_37067 = opencl_alloc(self, bytes_36998, "mem_37067")
        if slt64((res_24033 * np.int64(2)), segred_group_sizze_27599):
          segment_sizze_nonzzero_38161 = smax64(np.int64(1), res_24033)
          num_threads_38162 = (num_groups_27600 * segred_group_sizze_27599)
          if ((1 * (np.long(num_groups_27600) * np.long(segred_group_sizze_27599))) != 0):
            self.mainDetailedzisegred_small_27553_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27599))),
                                                               np.int64(N_24013),
                                                               np.int64(m_24014),
                                                               np.int64(res_24033),
                                                               np.int64(num_groups_27600),
                                                               mem_36668,
                                                               res_mem_36979,
                                                               mem_37067,
                                                               np.int64(segment_sizze_nonzzero_38161))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_27553_var,
                                       ((np.long(num_groups_27600) * np.long(segred_group_sizze_27599)),),
                                       (np.long(segred_group_sizze_27599),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38182 = sdiv_up64(num_groups_27600,
                                               smax64(np.int64(1),
                                                      (m_24014 * N_24013)))
          elements_per_thread_38183 = sdiv_up64(res_24033,
                                                (segred_group_sizze_27599 * groups_per_segment_38182))
          virt_num_groups_38184 = (groups_per_segment_38182 * (m_24014 * N_24013))
          num_threads_38185 = (num_groups_27600 * segred_group_sizze_27599)
          threads_per_segment_38186 = (groups_per_segment_38182 * segred_group_sizze_27599)
          group_res_arr_mem_38187 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27599 * virt_num_groups_38184)),
                                                 "group_res_arr_mem_38187")
          mainDetailedzicounter_mem_38189 = self.mainDetailedzicounter_mem_38189
          if ((1 * (np.long(num_groups_27600) * np.long(segred_group_sizze_27599))) != 0):
            self.mainDetailedzisegred_large_27553_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27599))),
                                                               np.int64(N_24013),
                                                               np.int64(res_24033),
                                                               np.int64(num_groups_27600),
                                                               mem_36668,
                                                               res_mem_36979,
                                                               mem_37067,
                                                               np.int64(groups_per_segment_38182),
                                                               np.int64(elements_per_thread_38183),
                                                               np.int64(virt_num_groups_38184),
                                                               np.int64(threads_per_segment_38186),
                                                               group_res_arr_mem_38187,
                                                               mainDetailedzicounter_mem_38189)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_27553_var,
                                       ((np.long(num_groups_27600) * np.long(segred_group_sizze_27599)),),
                                       (np.long(segred_group_sizze_27599),))
            if synchronous:
              sync(self)
        res_mem_37068 = mem_37067
      res_mem_37073 = res_mem_37068
    mem_36668 = None
    res_mem_36979 = None
    i_24280 = (N_24013 - np.int64(1))
    x_24281 = sle64(np.int64(0), i_24280)
    y_24282 = slt64(i_24280, N_24013)
    bounds_check_24283 = (x_24281 and y_24282)
    index_certs_24284 = True
    assert bounds_check_24283, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:80:30-91\n   #3  /prelude/soacs.fut:56:19-23\n   #4  /prelude/soacs.fut:56:3-37\n   #5  bfastfinal.fut:74:5-83:25\n   #6  bfastfinal.fut:168:3-56\n   #7  bfastfinal.fut:164:1-168:56\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_24280,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_24013,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_27729 = sle64(N_24013, max_group_sizze_26466)
    suff_intra_par_27727 = (self.sizes["mainDetailed.suff_intra_par_25"] <= N_24013)
    intra_suff_and_fits_27730 = (suff_intra_par_27727 and fits_27729)
    segscan_group_sizze_27879 = self.sizes["mainDetailed.segscan_group_size_27856"]
    max_num_groups_38223 = self.sizes["mainDetailed.segscan_num_groups_27858"]
    num_groups_27880 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(comparatee_27583,
                                                            segscan_group_sizze_27879),
                                                  sext_i32_i64(max_num_groups_38223))))
    segmap_group_sizze_27899 = self.sizes["mainDetailed.segmap_group_size_27847"]
    mem_37076 = opencl_alloc(self, bytes_36998, "mem_37076")
    self.futhark_builtinzhreplicate_f32(mem_37076, (m_24014 * N_24013), np.nan)
    mem_37079 = opencl_alloc(self, bytes_36998, "mem_37079")
    self.futhark_builtinzhreplicate_i32(mem_37079, (m_24014 * N_24013),
                                        np.int32(0))
    segmap_group_sizze_27935 = self.sizes["mainDetailed.segmap_group_size_27772"]
    bytes_37091 = (np.int64(4) * m_24014)
    bytes_37082 = (np.int64(8) * N_24013)
    bytes_37100 = (np.int64(8) * comparatee_27583)
    local_memory_capacity_38325 = self.max_local_memory
    if (sle64((((bytes_37082 + bytes_36984) + bytes_36984) + bytes_36984),
              sext_i32_i64(local_memory_capacity_38325)) and intra_suff_and_fits_27730):
      mem_37092 = opencl_alloc(self, bytes_37091, "mem_37092")
      mem_37095 = opencl_alloc(self, bytes_36998, "mem_37095")
      mem_37098 = opencl_alloc(self, bytes_36998, "mem_37098")
      if ((1 * (np.long(m_24014) * np.long(N_24013))) != 0):
        self.mainDetailedzisegmap_intragroup_27652_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_36984)),
                                                                cl.LocalMemory(np.long(bytes_36984)),
                                                                cl.LocalMemory(np.long(bytes_36984)),
                                                                cl.LocalMemory(np.long(bytes_37082)),
                                                                np.int64(N_24013),
                                                                np.int64(N_24015),
                                                                np.int64(i_24280),
                                                                images_mem_36652,
                                                                res_mem_37073,
                                                                mem_37092,
                                                                mem_37095,
                                                                mem_37098)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_27652_var,
                                   ((np.long(m_24014) * np.long(N_24013)),),
                                   (np.long(N_24013),))
        if synchronous:
          sync(self)
      res_mem_37110 = mem_37092
      res_mem_37111 = mem_37095
      res_mem_37112 = mem_37098
    else:
      mem_37102 = opencl_alloc(self, bytes_37100, "mem_37102")
      mem_37105 = opencl_alloc(self, bytes_36998, "mem_37105")
      if slt64(np.int64(0), (m_24014 * N_24013)):
        stage1_max_num_groups_38259 = self.max_group_size
        stage1_num_groups_38260 = smin64(stage1_max_num_groups_38259,
                                         num_groups_27880)
        num_threads_38261 = sext_i64_i32((stage1_num_groups_38260 * segscan_group_sizze_27879))
        if ((1 * (np.long(stage1_num_groups_38260) * np.long(segscan_group_sizze_27879))) != 0):
          self.mainDetailedziscan_stage1_27862_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(8) * segscan_group_sizze_27879)))),
                                                            np.int64(N_24013),
                                                            np.int64(m_24014),
                                                            np.int64(N_24015),
                                                            images_mem_36652,
                                                            res_mem_37073,
                                                            mem_37102,
                                                            mem_37105,
                                                            np.int32(num_threads_38261))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage1_27862_var,
                                     ((np.long(stage1_num_groups_38260) * np.long(segscan_group_sizze_27879)),),
                                     (np.long(segscan_group_sizze_27879),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38260))) != 0):
          self.mainDetailedziscan_stage2_27862_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(8) * stage1_num_groups_38260)))),
                                                            np.int64(N_24013),
                                                            np.int64(m_24014),
                                                            mem_37102,
                                                            np.int64(stage1_num_groups_38260),
                                                            np.int32(num_threads_38261))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage2_27862_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_38260)),),
                                     (np.long(stage1_num_groups_38260),))
          if synchronous:
            sync(self)
        required_groups_38303 = sext_i64_i32(sdiv_up64((m_24014 * N_24013),
                                                       segscan_group_sizze_27879))
        if ((1 * (np.long(num_groups_27880) * np.long(segscan_group_sizze_27879))) != 0):
          self.mainDetailedziscan_stage3_27862_var.set_args(self.global_failure,
                                                            np.int64(N_24013),
                                                            np.int64(m_24014),
                                                            np.int64(num_groups_27880),
                                                            mem_37102,
                                                            np.int32(num_threads_38261),
                                                            np.int32(required_groups_38303))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage3_27862_var,
                                     ((np.long(num_groups_27880) * np.long(segscan_group_sizze_27879)),),
                                     (np.long(segscan_group_sizze_27879),))
          if synchronous:
            sync(self)
      segmap_usable_groups_27900 = sdiv_up64(m_24014, segmap_group_sizze_27899)
      mem_37108 = opencl_alloc(self, bytes_37091, "mem_37108")
      if ((1 * (np.long(segmap_usable_groups_27900) * np.long(segmap_group_sizze_27899))) != 0):
        self.mainDetailedzisegmap_27845_var.set_args(self.global_failure,
                                                     np.int64(N_24013),
                                                     np.int64(m_24014),
                                                     np.int64(i_24280),
                                                     mem_37102, mem_37108)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27845_var,
                                   ((np.long(segmap_usable_groups_27900) * np.long(segmap_group_sizze_27899)),),
                                   (np.long(segmap_group_sizze_27899),))
        if synchronous:
          sync(self)
      segmap_usable_groups_27936 = sdiv_up64(comparatee_27583,
                                             segmap_group_sizze_27935)
      if ((1 * (np.long(segmap_usable_groups_27936) * np.long(segmap_group_sizze_27935))) != 0):
        self.mainDetailedzisegmap_27769_var.set_args(self.global_failure,
                                                     np.int64(N_24013),
                                                     np.int64(m_24014),
                                                     mem_37076, mem_37079,
                                                     mem_37102, mem_37105)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_27769_var,
                                   ((np.long(segmap_usable_groups_27936) * np.long(segmap_group_sizze_27935)),),
                                   (np.long(segmap_group_sizze_27935),))
        if synchronous:
          sync(self)
      mem_37102 = None
      mem_37105 = None
      res_mem_37110 = mem_37108
      res_mem_37111 = mem_37076
      res_mem_37112 = mem_37079
    mem_37076 = None
    mem_37079 = None
    suff_outer_par_27984 = (self.sizes["mainDetailed.suff_outer_par_29"] <= m_24014)
    fits_28062 = sle64(res_24027, max_group_sizze_26466)
    suff_intra_par_28060 = (self.sizes["mainDetailed.suff_intra_par_30"] <= res_24027)
    intra_suff_and_fits_28063 = (suff_intra_par_28060 and fits_28062)
    segmap_group_sizze_28027 = self.sizes["mainDetailed.segmap_group_size_27996"]
    nest_sizze_28150 = (m_24014 * res_24027)
    segred_group_sizze_28151 = self.sizes["mainDetailed.segred_group_size_28134"]
    max_num_groups_38326 = self.sizes["mainDetailed.segred_num_groups_28136"]
    num_groups_28152 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28150,
                                                            segred_group_sizze_28151),
                                                  sext_i32_i64(max_num_groups_38326))))
    segred_group_sizze_28165 = self.sizes["mainDetailed.segred_group_size_28113"]
    max_num_groups_38327 = self.sizes["mainDetailed.segred_num_groups_28115"]
    num_groups_28166 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28150,
                                                            segred_group_sizze_28165),
                                                  sext_i32_i64(max_num_groups_38327))))
    segmap_group_sizze_28181 = self.sizes["mainDetailed.segmap_group_size_28098"]
    bytes_37121 = (np.int64(4) * segmap_group_sizze_28027)
    local_memory_capacity_38481 = self.max_local_memory
    if (sle64((bytes_37121 + bytes_37121),
              sext_i32_i64(local_memory_capacity_38481)) and suff_outer_par_27984):
      segmap_usable_groups_28028 = sdiv_up64(m_24014, segmap_group_sizze_28027)
      mem_37115 = opencl_alloc(self, bytes_36669, "mem_37115")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37115, np.int64(0),
                                                  images_mem_36652, np.int64(0),
                                                  np.int64(1), N_24015, m_24014)
      mem_37118 = opencl_alloc(self, bytes_36998, "mem_37118")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37118, np.int64(0),
                                                  res_mem_37111, np.int64(0),
                                                  np.int64(1), N_24013, m_24014)
      num_whole_tiles_36102 = squot64(res_24027, segmap_group_sizze_28027)
      residual_input_36223 = srem64(res_24027, segmap_group_sizze_28027)
      cond_36224 = (residual_input_36223 == np.int64(0))
      mem_37162 = opencl_alloc(self, bytes_37091, "mem_37162")
      mem_37164 = opencl_alloc(self, bytes_37091, "mem_37164")
      mem_37166 = opencl_alloc(self, bytes_37091, "mem_37166")
      if ((1 * (np.long(segmap_usable_groups_28028) * np.long(segmap_group_sizze_28027))) != 0):
        self.mainDetailedzisegmap_intragroup_36094_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_37121)),
                                                                cl.LocalMemory(np.long(bytes_37121)),
                                                                np.int64(m_24014),
                                                                np.int32(n_24018),
                                                                np.float32(hfrac_24020),
                                                                np.int64(res_24027),
                                                                np.int32(k2p2_24029),
                                                                np.int64(num_whole_tiles_36102),
                                                                np.int64(residual_input_36223),
                                                                np.byte(cond_36224),
                                                                mem_37115,
                                                                mem_37118,
                                                                mem_37162,
                                                                mem_37164,
                                                                mem_37166)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_36094_var,
                                   ((np.long(segmap_usable_groups_28028) * np.long(segmap_group_sizze_28027)),),
                                   (np.long(segmap_group_sizze_28027),))
        if synchronous:
          sync(self)
      mem_37115 = None
      mem_37118 = None
      res_mem_37190 = mem_37162
      res_mem_37191 = mem_37164
      res_mem_37192 = mem_37166
    else:
      local_memory_capacity_38480 = self.max_local_memory
      if (sle64(((np.int32(4) * res_24027) + (np.int32(4) * res_24027)),
                sext_i32_i64(local_memory_capacity_38480)) and intra_suff_and_fits_28063):
        mem_37171 = opencl_alloc(self, bytes_37091, "mem_37171")
        mem_37173 = opencl_alloc(self, bytes_37091, "mem_37173")
        mem_37175 = opencl_alloc(self, bytes_37091, "mem_37175")
        if ((1 * (np.long(m_24014) * np.long(res_24027))) != 0):
          self.mainDetailedzisegmap_intragroup_27992_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long((np.int32(4) * res_24027))),
                                                                  cl.LocalMemory(np.long((np.int32(4) * res_24027))),
                                                                  np.int64(N_24013),
                                                                  np.int64(N_24015),
                                                                  np.float32(hfrac_24020),
                                                                  np.int64(res_24027),
                                                                  np.int32(k2p2_24029),
                                                                  images_mem_36652,
                                                                  res_mem_37111,
                                                                  mem_37171,
                                                                  mem_37173,
                                                                  mem_37175)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_27992_var,
                                     ((np.long(m_24014) * np.long(res_24027)),),
                                     (np.long(res_24027),))
          if synchronous:
            sync(self)
        res_mem_37187 = mem_37171
        res_mem_37188 = mem_37173
        res_mem_37189 = mem_37175
      else:
        mem_37178 = opencl_alloc(self, bytes_37091, "mem_37178")
        if slt64((res_24027 * np.int64(2)), segred_group_sizze_28151):
          segment_sizze_nonzzero_38355 = smax64(np.int64(1), res_24027)
          num_threads_38356 = (num_groups_28152 * segred_group_sizze_28151)
          if ((1 * (np.long(num_groups_28152) * np.long(segred_group_sizze_28151))) != 0):
            self.mainDetailedzisegred_small_28140_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28151))),
                                                               np.int64(m_24014),
                                                               np.int64(N_24015),
                                                               np.int64(res_24027),
                                                               np.int64(num_groups_28152),
                                                               images_mem_36652,
                                                               mem_37178,
                                                               np.int64(segment_sizze_nonzzero_38355))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_28140_var,
                                       ((np.long(num_groups_28152) * np.long(segred_group_sizze_28151)),),
                                       (np.long(segred_group_sizze_28151),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38376 = sdiv_up64(num_groups_28152,
                                               smax64(np.int64(1), m_24014))
          elements_per_thread_38377 = sdiv_up64(res_24027,
                                                (segred_group_sizze_28151 * groups_per_segment_38376))
          virt_num_groups_38378 = (groups_per_segment_38376 * m_24014)
          num_threads_38379 = (num_groups_28152 * segred_group_sizze_28151)
          threads_per_segment_38380 = (groups_per_segment_38376 * segred_group_sizze_28151)
          group_res_arr_mem_38381 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_28151 * virt_num_groups_38378)),
                                                 "group_res_arr_mem_38381")
          mainDetailedzicounter_mem_38383 = self.mainDetailedzicounter_mem_38383
          if ((1 * (np.long(num_groups_28152) * np.long(segred_group_sizze_28151))) != 0):
            self.mainDetailedzisegred_large_28140_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28151))),
                                                               np.int64(N_24015),
                                                               np.int64(res_24027),
                                                               np.int64(num_groups_28152),
                                                               images_mem_36652,
                                                               mem_37178,
                                                               np.int64(groups_per_segment_38376),
                                                               np.int64(elements_per_thread_38377),
                                                               np.int64(virt_num_groups_38378),
                                                               np.int64(threads_per_segment_38380),
                                                               group_res_arr_mem_38381,
                                                               mainDetailedzicounter_mem_38383)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_28140_var,
                                       ((np.long(num_groups_28152) * np.long(segred_group_sizze_28151)),),
                                       (np.long(segred_group_sizze_28151),))
            if synchronous:
              sync(self)
        mem_37181 = opencl_alloc(self, bytes_37091, "mem_37181")
        if slt64((res_24027 * np.int64(2)), segred_group_sizze_28165):
          segment_sizze_nonzzero_38415 = smax64(np.int64(1), res_24027)
          num_threads_38416 = (num_groups_28166 * segred_group_sizze_28165)
          if ((1 * (np.long(num_groups_28166) * np.long(segred_group_sizze_28165))) != 0):
            self.mainDetailedzisegred_small_28119_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28165))),
                                                               np.int64(N_24013),
                                                               np.int64(m_24014),
                                                               np.int64(res_24027),
                                                               np.int64(num_groups_28166),
                                                               res_mem_37111,
                                                               mem_37178,
                                                               mem_37181,
                                                               np.int64(segment_sizze_nonzzero_38415))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_28119_var,
                                       ((np.long(num_groups_28166) * np.long(segred_group_sizze_28165)),),
                                       (np.long(segred_group_sizze_28165),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38436 = sdiv_up64(num_groups_28166,
                                               smax64(np.int64(1), m_24014))
          elements_per_thread_38437 = sdiv_up64(res_24027,
                                                (segred_group_sizze_28165 * groups_per_segment_38436))
          virt_num_groups_38438 = (groups_per_segment_38436 * m_24014)
          num_threads_38439 = (num_groups_28166 * segred_group_sizze_28165)
          threads_per_segment_38440 = (groups_per_segment_38436 * segred_group_sizze_28165)
          group_res_arr_mem_38441 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_28165 * virt_num_groups_38438)),
                                                 "group_res_arr_mem_38441")
          mainDetailedzicounter_mem_38443 = self.mainDetailedzicounter_mem_38443
          if ((1 * (np.long(num_groups_28166) * np.long(segred_group_sizze_28165))) != 0):
            self.mainDetailedzisegred_large_28119_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28165))),
                                                               np.int64(N_24013),
                                                               np.int64(res_24027),
                                                               np.int64(num_groups_28166),
                                                               res_mem_37111,
                                                               mem_37178,
                                                               mem_37181,
                                                               np.int64(groups_per_segment_38436),
                                                               np.int64(elements_per_thread_38437),
                                                               np.int64(virt_num_groups_38438),
                                                               np.int64(threads_per_segment_38440),
                                                               group_res_arr_mem_38441,
                                                               mainDetailedzicounter_mem_38443)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_28119_var,
                                       ((np.long(num_groups_28166) * np.long(segred_group_sizze_28165)),),
                                       (np.long(segred_group_sizze_28165),))
            if synchronous:
              sync(self)
        segmap_usable_groups_28182 = sdiv_up64(m_24014,
                                               segmap_group_sizze_28181)
        mem_37184 = opencl_alloc(self, bytes_37091, "mem_37184")
        mem_37186 = opencl_alloc(self, bytes_37091, "mem_37186")
        if ((1 * (np.long(segmap_usable_groups_28182) * np.long(segmap_group_sizze_28181))) != 0):
          self.mainDetailedzisegmap_28096_var.set_args(self.global_failure,
                                                       np.int64(m_24014),
                                                       np.float32(hfrac_24020),
                                                       np.int32(k2p2_24029),
                                                       mem_37178, mem_37181,
                                                       mem_37184, mem_37186)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_28096_var,
                                     ((np.long(segmap_usable_groups_28182) * np.long(segmap_group_sizze_28181)),),
                                     (np.long(segmap_group_sizze_28181),))
          if synchronous:
            sync(self)
        mem_37181 = None
        res_mem_37187 = mem_37184
        res_mem_37188 = mem_37178
        res_mem_37189 = mem_37186
      res_mem_37190 = res_mem_37187
      res_mem_37191 = res_mem_37188
      res_mem_37192 = res_mem_37189
    segred_group_sizze_28202 = self.sizes["mainDetailed.segred_group_size_28201"]
    max_num_groups_38482 = self.sizes["mainDetailed.segred_num_groups_28203"]
    num_groups_28204 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24014,
                                                            segred_group_sizze_28202),
                                                  sext_i32_i64(max_num_groups_38482))))
    mem_37195 = opencl_alloc(self, np.int64(4), "mem_37195")
    mainDetailedzicounter_mem_38483 = self.mainDetailedzicounter_mem_38483
    group_res_arr_mem_38485 = opencl_alloc(self,
                                           (np.int32(4) * (segred_group_sizze_28202 * num_groups_28204)),
                                           "group_res_arr_mem_38485")
    num_threads_38487 = (num_groups_28204 * segred_group_sizze_28202)
    if ((1 * (np.long(num_groups_28204) * np.long(segred_group_sizze_28202))) != 0):
      self.mainDetailedzisegred_nonseg_28209_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28202))),
                                                          cl.LocalMemory(np.long(np.int32(1))),
                                                          np.int64(m_24014),
                                                          np.int64(num_groups_28204),
                                                          res_mem_37190,
                                                          mem_37195,
                                                          mainDetailedzicounter_mem_38483,
                                                          group_res_arr_mem_38485,
                                                          np.int64(num_threads_38487))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegred_nonseg_28209_var,
                                 ((np.long(num_groups_28204) * np.long(segred_group_sizze_28202)),),
                                 (np.long(segred_group_sizze_28202),))
      if synchronous:
        sync(self)
    read_res_39023 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39023, mem_37195,
                    device_offset=(np.long(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    res_24370 = read_res_39023[0]
    mem_37195 = None
    res_24375 = sext_i32_i64(res_24370)
    suff_outer_par_28241 = (self.sizes["mainDetailed.suff_outer_par_32"] <= m_24014)
    segmap_group_sizze_28264 = self.sizes["mainDetailed.segmap_group_size_28245"]
    nest_sizze_28307 = (m_24014 * res_24375)
    segred_group_sizze_28308 = self.sizes["mainDetailed.segred_group_size_28285"]
    max_num_groups_38513 = self.sizes["mainDetailed.segred_num_groups_28287"]
    num_groups_28309 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28307,
                                                            segred_group_sizze_28308),
                                                  sext_i32_i64(max_num_groups_38513))))
    bytes_37198 = (np.int64(4) * segmap_group_sizze_28264)
    local_memory_capacity_38584 = self.max_local_memory
    if (sle64((bytes_37198 + bytes_37198),
              sext_i32_i64(local_memory_capacity_38584)) and suff_outer_par_28241):
      segmap_usable_groups_28265 = sdiv_up64(m_24014, segmap_group_sizze_28264)
      num_whole_tiles_36346 = squot64(res_24375, segmap_group_sizze_28264)
      residual_input_36445 = srem64(res_24375, segmap_group_sizze_28264)
      cond_36446 = (residual_input_36445 == np.int64(0))
      mem_37237 = opencl_alloc(self, bytes_37091, "mem_37237")
      if ((1 * (np.long(segmap_usable_groups_28265) * np.long(segmap_group_sizze_28264))) != 0):
        self.mainDetailedzisegmap_intragroup_36326_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_37198)),
                                                                cl.LocalMemory(np.long(bytes_37198)),
                                                                np.int64(N_24013),
                                                                np.int64(m_24014),
                                                                np.int64(res_24375),
                                                                np.int64(num_whole_tiles_36346),
                                                                np.int64(residual_input_36445),
                                                                np.byte(cond_36446),
                                                                res_mem_37111,
                                                                res_mem_37190,
                                                                res_mem_37191,
                                                                mem_37237)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_36326_var,
                                   ((np.long(segmap_usable_groups_28265) * np.long(segmap_group_sizze_28264)),),
                                   (np.long(segmap_group_sizze_28264),))
        if synchronous:
          sync(self)
      res_mem_37241 = mem_37237
    else:
      mem_37240 = opencl_alloc(self, bytes_37091, "mem_37240")
      if slt64((res_24375 * np.int64(2)), segred_group_sizze_28308):
        segment_sizze_nonzzero_38524 = smax64(np.int64(1), res_24375)
        num_threads_38525 = (num_groups_28309 * segred_group_sizze_28308)
        if ((1 * (np.long(num_groups_28309) * np.long(segred_group_sizze_28308))) != 0):
          self.mainDetailedzisegred_small_28291_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28308))),
                                                             np.int64(N_24013),
                                                             np.int64(m_24014),
                                                             np.int64(res_24375),
                                                             np.int64(num_groups_28309),
                                                             res_mem_37111,
                                                             res_mem_37190,
                                                             res_mem_37191,
                                                             mem_37240,
                                                             np.int64(segment_sizze_nonzzero_38524))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_small_28291_var,
                                     ((np.long(num_groups_28309) * np.long(segred_group_sizze_28308)),),
                                     (np.long(segred_group_sizze_28308),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_38545 = sdiv_up64(num_groups_28309,
                                             smax64(np.int64(1), m_24014))
        elements_per_thread_38546 = sdiv_up64(res_24375,
                                              (segred_group_sizze_28308 * groups_per_segment_38545))
        virt_num_groups_38547 = (groups_per_segment_38545 * m_24014)
        num_threads_38548 = (num_groups_28309 * segred_group_sizze_28308)
        threads_per_segment_38549 = (groups_per_segment_38545 * segred_group_sizze_28308)
        group_res_arr_mem_38550 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_28308 * virt_num_groups_38547)),
                                               "group_res_arr_mem_38550")
        mainDetailedzicounter_mem_38552 = self.mainDetailedzicounter_mem_38552
        if ((1 * (np.long(num_groups_28309) * np.long(segred_group_sizze_28308))) != 0):
          self.mainDetailedzisegred_large_28291_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long(np.int32(1))),
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28308))),
                                                             np.int64(N_24013),
                                                             np.int64(res_24375),
                                                             np.int64(num_groups_28309),
                                                             res_mem_37111,
                                                             res_mem_37190,
                                                             res_mem_37191,
                                                             mem_37240,
                                                             np.int64(groups_per_segment_38545),
                                                             np.int64(elements_per_thread_38546),
                                                             np.int64(virt_num_groups_38547),
                                                             np.int64(threads_per_segment_38549),
                                                             group_res_arr_mem_38550,
                                                             mainDetailedzicounter_mem_38552)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_large_28291_var,
                                     ((np.long(num_groups_28309) * np.long(segred_group_sizze_28308)),),
                                     (np.long(segred_group_sizze_28308),))
          if synchronous:
            sync(self)
      res_mem_37241 = mem_37240
    iota32_arg_24397 = (N_24013 - res_24027)
    bounds_invalid_upwards_24398 = slt64(iota32_arg_24397, np.int64(0))
    valid_24399 = not(bounds_invalid_upwards_24398)
    range_valid_c_24400 = True
    assert valid_24399, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:113:22-35\n   #3  bfastfinal.fut:168:3-56\n   #4  bfastfinal.fut:164:1-168:56\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_24397,
                                                                                                                                                                                                                                      " is invalid."))
    x_24402 = (np.int32(1) + n_24018)
    index_certs_24403 = True
    assert bounds_check_24283, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:111:63-81\n   #1  bfastfinal.fut:109:15-113:36\n   #2  bfastfinal.fut:168:3-56\n   #3  bfastfinal.fut:164:1-168:56\n" % ("Index [",
                                                                                                                                                                                                                 i_24280,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_24013,
                                                                                                                                                                                                                 "]."))
    read_res_39025 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_39025, mappingindices_mem_36651,
                    device_offset=(np.long(i_24280) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_24404 = read_res_39025[0]
    res_24405 = sitofp_i32_f32(r32_arg_24404)
    range_valid_c_24406 = True
    assert valid_24399, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:124:29-44\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:118:50-158:9\n   #5  bfastfinal.fut:168:3-56\n   #6  bfastfinal.fut:164:1-168:56\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_24397,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_28386 = self.sizes["mainDetailed.segmap_group_size_28369"]
    segmap_usable_groups_28387 = sdiv_up64(iota32_arg_24397,
                                           segmap_group_sizze_28386)
    bytes_37243 = (np.int64(4) * iota32_arg_24397)
    mem_37244 = opencl_alloc(self, bytes_37243, "mem_37244")
    mem_37246 = opencl_alloc(self, bytes_37243, "mem_37246")
    if ((1 * (np.long(segmap_usable_groups_28387) * np.long(segmap_group_sizze_28386))) != 0):
      self.mainDetailedzisegmap_28367_var.set_args(self.global_failure,
                                                   np.float32(lam_24021),
                                                   np.int64(iota32_arg_24397),
                                                   np.int32(x_24402),
                                                   np.float32(res_24405),
                                                   mappingindices_mem_36651,
                                                   mem_37244, mem_37246)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_28367_var,
                                 ((np.long(segmap_usable_groups_28387) * np.long(segmap_group_sizze_28386)),),
                                 (np.long(segmap_group_sizze_28386),))
      if synchronous:
        sync(self)
    mem_37244 = None
    cond_24422 = (iota32_arg_24397 == np.int64(0))
    if cond_24422:
      iters_24423 = np.int32(0)
    else:
      iters_24423 = np.int32(16)
    loop_nonempty_24424 = slt32(np.int32(0), iters_24423)
    i_24425 = (iota32_arg_24397 - np.int64(1))
    x_24426 = sle64(np.int64(0), i_24425)
    y_24427 = slt64(i_24425, iota32_arg_24397)
    bounds_check_24428 = (x_24426 and y_24427)
    loop_not_taken_24429 = not(loop_nonempty_24424)
    protect_assert_disj_24430 = (bounds_check_24428 or loop_not_taken_24429)
    index_certs_24431 = True
    assert protect_assert_disj_24430, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  lib/github.com/diku-dk/sorts/radix_sort.fut:25:24-35\n   #2  lib/github.com/diku-dk/sorts/radix_sort.fut:53:31-62\n   #3  lib/github.com/diku-dk/sorts/radix_sort.fut:104:6-36\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:138:29-143:72\n   #6  /prelude/functional.fut:9:42-44\n   #7  bfastfinal.fut:118:50-158:9\n   #8  bfastfinal.fut:168:3-56\n   #9  bfastfinal.fut:164:1-168:56\n" % ("Index [",
i_24425,
out of bounds for array of shape [",
iota32_arg_24397,

    suff_outer_par_28404 = (self.sizes["mainDetailed.suff_outer_par_34"] <= m_24014)
    fits_28945 = sle64(iota32_arg_24397, max_group_sizze_26466)
    suff_intra_par_28943 = (self.sizes["mainDetailed.suff_intra_par_35"] <= iota32_arg_24397)
    intra_suff_and_fits_28946 = (suff_intra_par_28943 and fits_28945)
    segmap_group_sizze_28692 = self.sizes["mainDetailed.segmap_group_size_28444"]
    max_num_groups_38590 = self.sizes["mainDetailed.segmap_num_groups_28446"]
    num_groups_28693 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24014,
                                                            segmap_group_sizze_28692),
                                                  sext_i32_i64(max_num_groups_38590))))
    segmap_group_sizze_30045 = self.sizes["mainDetailed.segmap_group_size_30025"]
    max_num_groups_38591 = self.sizes["mainDetailed.segmap_num_groups_30027"]
    num_groups_30046 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_24014,
                                                            segmap_group_sizze_30045),
                                                  sext_i32_i64(max_num_groups_38591))))
    nest_sizze_30067 = (m_24014 * iota32_arg_24397)
    segscan_group_sizze_30068 = self.sizes["mainDetailed.segscan_group_size_29983"]
    max_num_groups_38592 = self.sizes["mainDetailed.segscan_num_groups_29985"]
    num_groups_30069 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30067,
                                                            segscan_group_sizze_30068),
                                                  sext_i32_i64(max_num_groups_38592))))
    segred_group_sizze_30107 = self.sizes["mainDetailed.segred_group_size_29929"]
    max_num_groups_38593 = self.sizes["mainDetailed.segred_num_groups_29931"]
    num_groups_30108 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30067,
                                                            segred_group_sizze_30107),
                                                  sext_i32_i64(max_num_groups_38593))))
    segmap_group_sizze_30147 = self.sizes["mainDetailed.segmap_group_size_29903"]
    segmap_group_sizze_30170 = self.sizes["mainDetailed.segmap_group_size_29888"]
    segmap_group_sizze_30186 = self.sizes["mainDetailed.segmap_group_size_29830"]
    suff_intra_par_30227 = (self.sizes["mainDetailed.suff_intra_par_38"] <= iota32_arg_24397)
    intra_suff_and_fits_30228 = (fits_28945 and suff_intra_par_30227)
    segscan_group_sizze_30311 = self.sizes["mainDetailed.segscan_group_size_29630"]
    max_num_groups_38594 = self.sizes["mainDetailed.segscan_num_groups_29632"]
    num_groups_30312 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30067,
                                                            segscan_group_sizze_30311),
                                                  sext_i32_i64(max_num_groups_38594))))
    segmap_group_sizze_30380 = self.sizes["mainDetailed.segmap_group_size_29580"]
    segmap_group_sizze_30417 = self.sizes["mainDetailed.segmap_group_size_29253"]
    bytes_37247 = (np.int64(4) * nest_sizze_30067)
    mem_37249 = opencl_alloc(self, bytes_37247, "mem_37249")
    self.futhark_builtinzhreplicate_f32(mem_37249, (m_24014 * iota32_arg_24397),
                                        np.nan)
    segmap_group_sizze_30482 = self.sizes["mainDetailed.segmap_group_size_29201"]
    segmap_usable_groups_30381 = sdiv_up_safe64(nest_sizze_30067,
                                                segmap_group_sizze_30380)
    bytes_37284 = (np.int64(8) * iota32_arg_24397)
    bytes_37515 = (np.int64(8) * nest_sizze_30067)
    double_buffer_sizze_37627 = (np.int64(4) * iota32_arg_24397)
    double_buffer_sizze_37631 = (np.int64(4) * iota32_arg_24397)
    num_threads_37679 = (segmap_group_sizze_28692 * num_groups_28693)
    total_sizze_37680 = (bytes_37243 * num_threads_37679)
    total_sizze_37681 = (bytes_37243 * num_threads_37679)
    total_sizze_37682 = (bytes_37284 * num_threads_37679)
    total_sizze_37683 = (bytes_37284 * num_threads_37679)
    total_sizze_37684 = (bytes_37284 * num_threads_37679)
    total_sizze_37685 = (bytes_37284 * num_threads_37679)
    total_sizze_37686 = (bytes_37243 * num_threads_37679)
    total_sizze_37687 = (bytes_37243 * num_threads_37679)
    total_sizze_37688 = (bytes_37243 * num_threads_37679)
    total_sizze_37689 = (double_buffer_sizze_37627 * num_threads_37679)
    local_memory_capacity_38998 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_38998)) and suff_outer_par_28404):
      mem_37389 = opencl_alloc(self, bytes_37247, "mem_37389")
      mem_37392 = opencl_alloc(self, bytes_37247, "mem_37392")
      mem_37394 = opencl_alloc(self, bytes_37091, "mem_37394")
      mem_37396 = opencl_alloc(self, bytes_37091, "mem_37396")
      mem_37398 = opencl_alloc(self, bytes_37091, "mem_37398")
      mem_37252 = opencl_alloc(self, total_sizze_37680, "mem_37252")
      mem_37266 = opencl_alloc(self, total_sizze_37681, "mem_37266")
      mem_37285 = opencl_alloc(self, total_sizze_37682, "mem_37285")
      mem_37287 = opencl_alloc(self, total_sizze_37683, "mem_37287")
      mem_37289 = opencl_alloc(self, total_sizze_37684, "mem_37289")
      mem_37291 = opencl_alloc(self, total_sizze_37685, "mem_37291")
      mem_37293 = opencl_alloc(self, total_sizze_37686, "mem_37293")
      mem_37355 = opencl_alloc(self, total_sizze_37687, "mem_37355")
      mem_37374 = opencl_alloc(self, total_sizze_37688, "mem_37374")
      double_buffer_mem_37625 = opencl_alloc(self, total_sizze_37689,
                                             "double_buffer_mem_37625")
      if ((1 * (np.long(num_groups_28693) * np.long(segmap_group_sizze_28692))) != 0):
        self.mainDetailedzisegmap_28442_var.set_args(self.global_failure,
                                                     self.failure_is_an_option,
                                                     self.global_failure_args,
                                                     np.int64(N_24013),
                                                     np.int64(m_24014),
                                                     np.int32(n_24018),
                                                     np.int64(iota32_arg_24397),
                                                     np.int32(iters_24423),
                                                     np.int64(i_24425),
                                                     np.int64(num_groups_28693),
                                                     res_mem_37110,
                                                     res_mem_37111,
                                                     res_mem_37112,
                                                     res_mem_37190,
                                                     res_mem_37191,
                                                     res_mem_37192,
                                                     res_mem_37241, mem_37246,
                                                     mem_37252, mem_37266,
                                                     mem_37285, mem_37287,
                                                     mem_37289, mem_37291,
                                                     mem_37293, mem_37355,
                                                     mem_37374, mem_37389,
                                                     mem_37392, mem_37394,
                                                     mem_37396, mem_37398,
                                                     double_buffer_mem_37625)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_28442_var,
                                   ((np.long(num_groups_28693) * np.long(segmap_group_sizze_28692)),),
                                   (np.long(segmap_group_sizze_28692),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_37252 = None
      mem_37266 = None
      mem_37285 = None
      mem_37287 = None
      mem_37289 = None
      mem_37291 = None
      mem_37293 = None
      mem_37355 = None
      mem_37374 = None
      double_buffer_mem_37625 = None
      mem_37558 = opencl_alloc(self, bytes_37247, "mem_37558")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37558, np.int64(0),
                                                  mem_37389, np.int64(0),
                                                  np.int64(1), m_24014,
                                                  iota32_arg_24397)
      mem_37389 = None
      mem_37562 = opencl_alloc(self, bytes_37247, "mem_37562")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_37562, np.int64(0),
                                                  mem_37392, np.int64(0),
                                                  np.int64(1), m_24014,
                                                  iota32_arg_24397)
      mem_37392 = None
      res_mem_37564 = mem_37558
      res_mem_37565 = mem_37562
      res_mem_37566 = mem_37394
      res_mem_37567 = mem_37396
      res_mem_37568 = mem_37398
    else:
      local_memory_capacity_38997 = self.max_local_memory
      if (sle64((((((((((((((bytes_37243 + bytes_37243) + (np.int32(1) * iota32_arg_24397)) + (np.int32(4) * iota32_arg_24397)) + (np.int32(4) * iota32_arg_24397)) + bytes_37243) + bytes_37284) + bytes_37284) + bytes_37284) + bytes_37284) + bytes_37243) + double_buffer_sizze_37631) + bytes_37243) + bytes_37243),
                sext_i32_i64(local_memory_capacity_38997)) and intra_suff_and_fits_28946):
        mem_37442 = opencl_alloc(self, bytes_37247, "mem_37442")
        mem_37445 = opencl_alloc(self, bytes_37247, "mem_37445")
        mem_37447 = opencl_alloc(self, bytes_37091, "mem_37447")
        mem_37449 = opencl_alloc(self, bytes_37091, "mem_37449")
        mem_37451 = opencl_alloc(self, bytes_37091, "mem_37451")
        if ((1 * (np.long(m_24014) * np.long(iota32_arg_24397))) != 0):
          self.mainDetailedzisegmap_intragroup_28440_var.set_args(self.global_failure,
                                                                  self.failure_is_an_option,
                                                                  self.global_failure_args,
                                                                  cl.LocalMemory(np.long(bytes_37243)),
                                                                  cl.LocalMemory(np.long(bytes_37243)),
                                                                  cl.LocalMemory(np.long(double_buffer_sizze_37631)),
                                                                  cl.LocalMemory(np.long(bytes_37243)),
                                                                  cl.LocalMemory(np.long(bytes_37284)),
                                                                  cl.LocalMemory(np.long(bytes_37284)),
                                                                  cl.LocalMemory(np.long(bytes_37284)),
                                                                  cl.LocalMemory(np.long(bytes_37284)),
                                                                  cl.LocalMemory(np.long(bytes_37243)),
                                                                  cl.LocalMemory(np.long((np.int32(4) * iota32_arg_24397))),
                                                                  cl.LocalMemory(np.long((np.int32(4) * iota32_arg_24397))),
                                                                  cl.LocalMemory(np.long((np.int32(1) * iota32_arg_24397))),
                                                                  cl.LocalMemory(np.long(bytes_37243)),
                                                                  cl.LocalMemory(np.long(bytes_37243)),
                                                                  np.int64(N_24013),
                                                                  np.int32(n_24018),
                                                                  np.int64(iota32_arg_24397),
                                                                  np.int32(iters_24423),
                                                                  np.int64(i_24425),
                                                                  res_mem_37110,
                                                                  res_mem_37111,
                                                                  res_mem_37112,
                                                                  res_mem_37190,
                                                                  res_mem_37191,
                                                                  res_mem_37192,
                                                                  res_mem_37241,
                                                                  mem_37246,
                                                                  mem_37442,
                                                                  mem_37445,
                                                                  mem_37447,
                                                                  mem_37449,
                                                                  mem_37451)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_28440_var,
                                     ((np.long(m_24014) * np.long(iota32_arg_24397)),),
                                     (np.long(iota32_arg_24397),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        res_mem_37551 = mem_37442
        res_mem_37552 = mem_37445
        res_mem_37553 = mem_37447
        res_mem_37554 = mem_37449
        res_mem_37555 = mem_37451
      else:
        mem_37454 = opencl_alloc(self, bytes_37091, "mem_37454")
        mem_37456 = opencl_alloc(self, bytes_37091, "mem_37456")
        if ((1 * (np.long(num_groups_30046) * np.long(segmap_group_sizze_30045))) != 0):
          self.mainDetailedzisegmap_30023_var.set_args(self.global_failure,
                                                       np.int64(m_24014),
                                                       np.int64(num_groups_30046),
                                                       res_mem_37110,
                                                       res_mem_37191,
                                                       res_mem_37192, mem_37454,
                                                       mem_37456)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_30023_var,
                                     ((np.long(num_groups_30046) * np.long(segmap_group_sizze_30045)),),
                                     (np.long(segmap_group_sizze_30045),))
          if synchronous:
            sync(self)
        mem_37460 = opencl_alloc(self, bytes_37247, "mem_37460")
        if slt64(np.int64(0), (m_24014 * iota32_arg_24397)):
          stage1_max_num_groups_38686 = self.max_group_size
          stage1_num_groups_38687 = smin64(stage1_max_num_groups_38686,
                                           num_groups_30069)
          num_threads_38688 = sext_i64_i32((stage1_num_groups_38687 * segscan_group_sizze_30068))
          if ((1 * (np.long(stage1_num_groups_38687) * np.long(segscan_group_sizze_30068))) != 0):
            self.mainDetailedziscan_stage1_29989_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                            (np.int32(4) * segscan_group_sizze_30068)))),
                                                              np.int64(N_24013),
                                                              np.int64(m_24014),
                                                              np.int64(iota32_arg_24397),
                                                              res_mem_37111,
                                                              res_mem_37190,
                                                              res_mem_37191,
                                                              res_mem_37241,
                                                              mem_37456,
                                                              mem_37460,
                                                              np.int32(num_threads_38688))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage1_29989_var,
                                       ((np.long(stage1_num_groups_38687) * np.long(segscan_group_sizze_30068)),),
                                       (np.long(segscan_group_sizze_30068),))
            if synchronous:
              sync(self)
          if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38687))) != 0):
            self.mainDetailedziscan_stage2_29989_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                            (np.int32(4) * stage1_num_groups_38687)))),
                                                              np.int64(m_24014),
                                                              np.int64(iota32_arg_24397),
                                                              mem_37460,
                                                              np.int64(stage1_num_groups_38687),
                                                              np.int32(num_threads_38688))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage2_29989_var,
                                       ((np.long(np.int64(1)) * np.long(stage1_num_groups_38687)),),
                                       (np.long(stage1_num_groups_38687),))
            if synchronous:
              sync(self)
          required_groups_38730 = sext_i64_i32(sdiv_up64((m_24014 * iota32_arg_24397),
                                                         segscan_group_sizze_30068))
          if ((1 * (np.long(num_groups_30069) * np.long(segscan_group_sizze_30068))) != 0):
            self.mainDetailedziscan_stage3_29989_var.set_args(self.global_failure,
                                                              np.int64(m_24014),
                                                              np.int64(iota32_arg_24397),
                                                              np.int64(num_groups_30069),
                                                              mem_37460,
                                                              np.int32(num_threads_38688),
                                                              np.int32(required_groups_38730))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage3_29989_var,
                                       ((np.long(num_groups_30069) * np.long(segscan_group_sizze_30068)),),
                                       (np.long(segscan_group_sizze_30068),))
            if synchronous:
              sync(self)
        mem_37463 = opencl_alloc(self, m_24014, "mem_37463")
        mem_37465 = opencl_alloc(self, bytes_37091, "mem_37465")
        mem_37467 = opencl_alloc(self, bytes_37091, "mem_37467")
        mem_37470 = opencl_alloc(self, bytes_37247, "mem_37470")
        if slt64((iota32_arg_24397 * np.int64(2)), segred_group_sizze_30107):
          segment_sizze_nonzzero_38742 = smax64(np.int64(1), iota32_arg_24397)
          num_threads_38743 = (num_groups_30108 * segred_group_sizze_30107)
          if ((1 * (np.long(num_groups_30108) * np.long(segred_group_sizze_30107))) != 0):
            self.mainDetailedzisegred_small_29935_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30107))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30107))),
                                                               cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_30107))),
                                                               np.int64(m_24014),
                                                               np.int64(iota32_arg_24397),
                                                               np.int64(num_groups_30108),
                                                               mem_37246,
                                                               mem_37454,
                                                               mem_37456,
                                                               mem_37460,
                                                               mem_37463,
                                                               mem_37465,
                                                               mem_37467,
                                                               mem_37470,
                                                               np.int64(segment_sizze_nonzzero_38742))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_29935_var,
                                       ((np.long(num_groups_30108) * np.long(segred_group_sizze_30107)),),
                                       (np.long(segred_group_sizze_30107),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_38778 = sdiv_up64(num_groups_30108,
                                               smax64(np.int64(1), m_24014))
          elements_per_thread_38779 = sdiv_up64(iota32_arg_24397,
                                                (segred_group_sizze_30107 * groups_per_segment_38778))
          virt_num_groups_38780 = (groups_per_segment_38778 * m_24014)
          num_threads_38781 = (num_groups_30108 * segred_group_sizze_30107)
          threads_per_segment_38782 = (groups_per_segment_38778 * segred_group_sizze_30107)
          group_res_arr_mem_38783 = opencl_alloc(self,
                                                 (np.int32(1) * (segred_group_sizze_30107 * virt_num_groups_38780)),
                                                 "group_res_arr_mem_38783")
          group_res_arr_mem_38785 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_30107 * virt_num_groups_38780)),
                                                 "group_res_arr_mem_38785")
          group_res_arr_mem_38787 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_30107 * virt_num_groups_38780)),
                                                 "group_res_arr_mem_38787")
          mainDetailedzicounter_mem_38789 = self.mainDetailedzicounter_mem_38789
          if ((1 * (np.long(num_groups_30108) * np.long(segred_group_sizze_30107))) != 0):
            self.mainDetailedzisegred_large_29935_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30107))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_30107))),
                                                               cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_30107))),
                                                               np.int64(iota32_arg_24397),
                                                               np.int64(num_groups_30108),
                                                               mem_37246,
                                                               mem_37454,
                                                               mem_37456,
                                                               mem_37460,
                                                               mem_37463,
                                                               mem_37465,
                                                               mem_37467,
                                                               mem_37470,
                                                               np.int64(groups_per_segment_38778),
                                                               np.int64(elements_per_thread_38779),
                                                               np.int64(virt_num_groups_38780),
                                                               group_res_arr_mem_38783,
                                                               group_res_arr_mem_38785,
                                                               group_res_arr_mem_38787,
                                                               mainDetailedzicounter_mem_38789)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_29935_var,
                                       ((np.long(num_groups_30108) * np.long(segred_group_sizze_30107)),),
                                       (np.long(segred_group_sizze_30107),))
            if synchronous:
              sync(self)
        mem_37454 = None
        mem_37460 = None
        segmap_usable_groups_30148 = sdiv_up64(m_24014,
                                               segmap_group_sizze_30147)
        mem_37473 = opencl_alloc(self, m_24014, "mem_37473")
        mem_37475 = opencl_alloc(self, bytes_37091, "mem_37475")
        if ((1 * (np.long(segmap_usable_groups_30148) * np.long(segmap_group_sizze_30147))) != 0):
          self.mainDetailedzisegmap_29901_var.set_args(self.global_failure,
                                                       np.int64(m_24014),
                                                       mem_37463, mem_37465,
                                                       mem_37473, mem_37475)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29901_var,
                                     ((np.long(segmap_usable_groups_30148) * np.long(segmap_group_sizze_30147)),),
                                     (np.long(segmap_group_sizze_30147),))
          if synchronous:
            sync(self)
        mem_37463 = None
        mem_37465 = None
        segmap_usable_groups_30171 = sdiv_up64(m_24014,
                                               segmap_group_sizze_30170)
        mem_37478 = opencl_alloc(self, bytes_37091, "mem_37478")
        if ((1 * (np.long(segmap_usable_groups_30171) * np.long(segmap_group_sizze_30170))) != 0):
          self.mainDetailedzisegmap_29886_var.set_args(self.global_failure,
                                                       np.int64(m_24014),
                                                       mem_37456, mem_37467,
                                                       mem_37478)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29886_var,
                                     ((np.long(segmap_usable_groups_30171) * np.long(segmap_group_sizze_30170)),),
                                     (np.long(segmap_group_sizze_30170),))
          if synchronous:
            sync(self)
        mem_37467 = None
        segmap_usable_groups_30187 = sdiv_up64(nest_sizze_30067,
                                               segmap_group_sizze_30186)
        mem_37482 = opencl_alloc(self, bytes_37247, "mem_37482")
        if ((1 * (np.long(segmap_usable_groups_30187) * np.long(segmap_group_sizze_30186))) != 0):
          self.mainDetailedzisegmap_29827_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       np.int64(N_24013),
                                                       np.int64(m_24014),
                                                       np.int64(iota32_arg_24397),
                                                       res_mem_37111,
                                                       res_mem_37191, mem_37456,
                                                       mem_37482)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29827_var,
                                     ((np.long(segmap_usable_groups_30187) * np.long(segmap_group_sizze_30186)),),
                                     (np.long(segmap_group_sizze_30186),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_param_37490 = mem_37482
        i_30214 = np.int32(0)
        one_39028 = np.int32(1)
        for counter_39027 in range(iters_24423):
          lifted_2_radix_sort_step_arg_30216 = (np.int32(2) * i_30214)
          lifted_0_get_bit_arg_30217 = (np.int32(1) + lifted_2_radix_sort_step_arg_30216)
          res_30218 = (lifted_0_get_bit_arg_30217 == np.int32(31))
          res_30219 = (lifted_2_radix_sort_step_arg_30216 == np.int32(31))
          local_memory_capacity_38986 = self.max_local_memory
          if (sle64((((((bytes_37284 + bytes_37284) + bytes_37284) + bytes_37284) + bytes_37243) + bytes_37243),
                    sext_i32_i64(local_memory_capacity_38986)) and intra_suff_and_fits_30228):
            mem_37495 = opencl_alloc(self, bytes_37247, "mem_37495")
            self.futhark_builtinzhgpu_map_transpose_f32(mem_37495, np.int64(0),
                                                        mem_param_37490,
                                                        np.int64(0),
                                                        np.int64(1),
                                                        iota32_arg_24397,
                                                        m_24014)
            mem_37513 = opencl_alloc(self, bytes_37247, "mem_37513")
            if ((1 * (np.long(m_24014) * np.long(iota32_arg_24397))) != 0):
              self.mainDetailedzisegmap_intragroup_29312_var.set_args(self.global_failure,
                                                                      cl.LocalMemory(np.long(bytes_37243)),
                                                                      cl.LocalMemory(np.long(bytes_37243)),
                                                                      cl.LocalMemory(np.long(bytes_37284)),
                                                                      cl.LocalMemory(np.long(bytes_37284)),
                                                                      cl.LocalMemory(np.long(bytes_37284)),
                                                                      cl.LocalMemory(np.long(bytes_37284)),
                                                                      np.int64(m_24014),
                                                                      np.int64(iota32_arg_24397),
                                                                      np.int64(i_24425),
                                                                      np.int32(lifted_2_radix_sort_step_arg_30216),
                                                                      np.int32(lifted_0_get_bit_arg_30217),
                                                                      np.byte(res_30218),
                                                                      np.byte(res_30219),
                                                                      mem_param_37490,
                                                                      mem_37495,
                                                                      mem_37513)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegmap_intragroup_29312_var,
                                         ((np.long(m_24014) * np.long(iota32_arg_24397)),),
                                         (np.long(iota32_arg_24397),))
              if synchronous:
                sync(self)
            mem_37495 = None
            res_mem_37534 = mem_37513
          else:
            mem_37517 = opencl_alloc(self, bytes_37515, "mem_37517")
            mem_37520 = opencl_alloc(self, bytes_37515, "mem_37520")
            mem_37523 = opencl_alloc(self, bytes_37515, "mem_37523")
            mem_37526 = opencl_alloc(self, bytes_37515, "mem_37526")
            mem_37529 = opencl_alloc(self, bytes_37247, "mem_37529")
            if slt64(np.int64(0), (m_24014 * iota32_arg_24397)):
              stage1_max_num_groups_38886 = self.max_group_size
              stage1_num_groups_38887 = smin64(stage1_max_num_groups_38886,
                                               num_groups_30312)
              num_threads_38888 = sext_i64_i32((stage1_num_groups_38887 * segscan_group_sizze_30311))
              if ((1 * (np.long(stage1_num_groups_38887) * np.long(segscan_group_sizze_30311))) != 0):
                self.mainDetailedziscan_stage1_29636_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30311)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30311)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30311)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * segscan_group_sizze_30311)))),
                                                                  np.int64(m_24014),
                                                                  np.int64(iota32_arg_24397),
                                                                  np.int32(lifted_2_radix_sort_step_arg_30216),
                                                                  np.int32(lifted_0_get_bit_arg_30217),
                                                                  np.byte(res_30218),
                                                                  np.byte(res_30219),
                                                                  mem_param_37490,
                                                                  mem_37517,
                                                                  mem_37520,
                                                                  mem_37523,
                                                                  mem_37526,
                                                                  mem_37529,
                                                                  np.int32(num_threads_38888))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainDetailedziscan_stage1_29636_var,
                                           ((np.long(stage1_num_groups_38887) * np.long(segscan_group_sizze_30311)),),
                                           (np.long(segscan_group_sizze_30311),))
                if synchronous:
                  sync(self)
              if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_38887))) != 0):
                self.mainDetailedziscan_stage2_29636_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38887)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38887)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38887)))),
                                                                  cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                                (np.int32(8) * stage1_num_groups_38887)))),
                                                                  np.int64(m_24014),
                                                                  np.int64(iota32_arg_24397),
                                                                  mem_37517,
                                                                  mem_37520,
                                                                  mem_37523,
                                                                  mem_37526,
                                                                  np.int64(stage1_num_groups_38887),
                                                                  np.int32(num_threads_38888))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainDetailedziscan_stage2_29636_var,
                                           ((np.long(np.int64(1)) * np.long(stage1_num_groups_38887)),),
                                           (np.long(stage1_num_groups_38887),))
                if synchronous:
                  sync(self)
              required_groups_38969 = sext_i64_i32(sdiv_up64((m_24014 * iota32_arg_24397),
                                                             segscan_group_sizze_30311))
              if ((1 * (np.long(num_groups_30312) * np.long(segscan_group_sizze_30311))) != 0):
                self.mainDetailedziscan_stage3_29636_var.set_args(self.global_failure,
                                                                  np.int64(m_24014),
                                                                  np.int64(iota32_arg_24397),
                                                                  np.int64(num_groups_30312),
                                                                  mem_37517,
                                                                  mem_37520,
                                                                  mem_37523,
                                                                  mem_37526,
                                                                  np.int32(num_threads_38888),
                                                                  np.int32(required_groups_38969))
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.mainDetailedziscan_stage3_29636_var,
                                           ((np.long(num_groups_30312) * np.long(segscan_group_sizze_30311)),),
                                           (np.long(segscan_group_sizze_30311),))
                if synchronous:
                  sync(self)
            mem_37532 = opencl_alloc(self, bytes_37247, "mem_37532")
            if (((m_24014 * iota32_arg_24397) * np.int32(4)) != 0):
              cl.enqueue_copy(self.queue, mem_37532, mem_param_37490,
                              dest_offset=np.long(np.int64(0)),
                              src_offset=np.long(np.int64(0)),
                              byte_count=np.long(((m_24014 * iota32_arg_24397) * np.int32(4))))
            if synchronous:
              sync(self)
            if ((1 * (np.long(segmap_usable_groups_30381) * np.long(segmap_group_sizze_30380))) != 0):
              self.mainDetailedzisegmap_29577_var.set_args(self.global_failure,
                                                           np.int64(m_24014),
                                                           np.int64(iota32_arg_24397),
                                                           np.int64(i_24425),
                                                           mem_param_37490,
                                                           mem_37517, mem_37520,
                                                           mem_37523, mem_37526,
                                                           mem_37529, mem_37532)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegmap_29577_var,
                                         ((np.long(segmap_usable_groups_30381) * np.long(segmap_group_sizze_30380)),),
                                         (np.long(segmap_group_sizze_30380),))
              if synchronous:
                sync(self)
            mem_37517 = None
            mem_37520 = None
            mem_37523 = None
            mem_37526 = None
            mem_37529 = None
            res_mem_37534 = mem_37532
          mem_param_tmp_38855 = res_mem_37534
          mem_param_37490 = mem_param_tmp_38855
          i_30214 += one_39028
        res_r_mem_37544 = mem_param_37490
        mem_37482 = None
        segmap_usable_groups_30418 = sdiv_up64(m_24014,
                                               segmap_group_sizze_30417)
        mem_37547 = opencl_alloc(self, bytes_37091, "mem_37547")
        mem_37549 = opencl_alloc(self, bytes_37091, "mem_37549")
        if ((1 * (np.long(segmap_usable_groups_30418) * np.long(segmap_group_sizze_30417))) != 0):
          self.mainDetailedzisegmap_29251_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       np.int64(N_24013),
                                                       np.int64(m_24014),
                                                       np.int32(n_24018),
                                                       np.int64(iota32_arg_24397),
                                                       res_mem_37112,
                                                       res_mem_37191, mem_37456,
                                                       mem_37473, mem_37475,
                                                       res_r_mem_37544,
                                                       mem_37547, mem_37549)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29251_var,
                                     ((np.long(segmap_usable_groups_30418) * np.long(segmap_group_sizze_30417)),),
                                     (np.long(segmap_group_sizze_30417),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_37473 = None
        mem_37475 = None
        res_r_mem_37544 = None
        segmap_usable_groups_30483 = sdiv_up64(nest_sizze_30067,
                                               segmap_group_sizze_30482)
        if ((1 * (np.long(segmap_usable_groups_30483) * np.long(segmap_group_sizze_30482))) != 0):
          self.mainDetailedzisegmap_29198_var.set_args(self.global_failure,
                                                       np.int64(N_24013),
                                                       np.int64(m_24014),
                                                       np.int32(n_24018),
                                                       np.int64(iota32_arg_24397),
                                                       res_mem_37112,
                                                       res_mem_37191, mem_37249,
                                                       mem_37456, mem_37470)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_29198_var,
                                     ((np.long(segmap_usable_groups_30483) * np.long(segmap_group_sizze_30482)),),
                                     (np.long(segmap_group_sizze_30482),))
          if synchronous:
            sync(self)
        mem_37456 = None
        res_mem_37551 = mem_37249
        res_mem_37552 = mem_37470
        res_mem_37553 = mem_37547
        res_mem_37554 = mem_37478
        res_mem_37555 = mem_37549
      res_mem_37564 = res_mem_37551
      res_mem_37565 = res_mem_37552
      res_mem_37566 = res_mem_37553
      res_mem_37567 = res_mem_37554
      res_mem_37568 = res_mem_37555
    res_mem_37112 = None
    res_mem_37190 = None
    mem_37249 = None
    out_arrsizze_37763 = m_24014
    out_arrsizze_37765 = m_24014
    out_arrsizze_37767 = m_24014
    out_arrsizze_37769 = m_24014
    out_arrsizze_37771 = m_24014
    out_arrsizze_37772 = iota32_arg_24397
    out_arrsizze_37774 = m_24014
    out_arrsizze_37775 = iota32_arg_24397
    out_arrsizze_37777 = iota32_arg_24397
    out_arrsizze_37779 = m_24014
    out_arrsizze_37781 = m_24014
    out_arrsizze_37783 = m_24014
    out_arrsizze_37785 = m_24014
    out_arrsizze_37786 = N_24013
    out_arrsizze_37788 = m_24014
    out_arrsizze_37789 = N_24013
    out_mem_37762 = res_mem_37241
    out_mem_37764 = res_mem_37110
    out_mem_37766 = res_mem_37191
    out_mem_37768 = res_mem_37192
    out_mem_37770 = res_mem_37564
    out_mem_37773 = res_mem_37565
    out_mem_37776 = mem_37246
    out_mem_37778 = res_mem_37566
    out_mem_37780 = res_mem_37567
    out_mem_37782 = res_mem_37568
    out_mem_37784 = res_mem_37111
    out_mem_37787 = res_mem_37073
    return (out_mem_37762, out_arrsizze_37763, out_mem_37764,
            out_arrsizze_37765, out_mem_37766, out_arrsizze_37767,
            out_mem_37768, out_arrsizze_37769, out_mem_37770,
            out_arrsizze_37771, out_arrsizze_37772, out_mem_37773,
            out_arrsizze_37774, out_arrsizze_37775, out_mem_37776,
            out_arrsizze_37777, out_mem_37778, out_arrsizze_37779,
            out_mem_37780, out_arrsizze_37781, out_mem_37782,
            out_arrsizze_37783, out_mem_37784, out_arrsizze_37785,
            out_arrsizze_37786, out_mem_37787, out_arrsizze_37788,
            out_arrsizze_37789)
  def futhark_remove_nans(self, images_mem_36651, m_23999, n_24000, p_24001,
                          nan_value_24002):
    y_25559 = (n_24000 * p_24001)
    nest_sizze_25560 = (m_23999 * y_25559)
    segmap_group_sizze_25561 = self.sizes["remove_nans.segmap_group_size_25504"]
    segmap_usable_groups_25562 = sdiv_up64(nest_sizze_25560,
                                           segmap_group_sizze_25561)
    binop_x_36654 = (m_23999 * n_24000)
    binop_x_36655 = (p_24001 * binop_x_36654)
    bytes_36653 = (np.int64(4) * binop_x_36655)
    mem_36656 = opencl_alloc(self, bytes_36653, "mem_36656")
    if ((1 * (np.long(segmap_usable_groups_25562) * np.long(segmap_group_sizze_25561))) != 0):
      self.remove_nanszisegmap_25500_var.set_args(self.global_failure,
                                                  np.int64(m_23999),
                                                  np.int64(n_24000),
                                                  np.int64(p_24001),
                                                  np.int16(nan_value_24002),
                                                  images_mem_36651, mem_36656)
      cl.enqueue_nd_range_kernel(self.queue, self.remove_nanszisegmap_25500_var,
                                 ((np.long(segmap_usable_groups_25562) * np.long(segmap_group_sizze_25561)),),
                                 (np.long(segmap_group_sizze_25561),))
      if synchronous:
        sync(self)
    out_arrsizze_37763 = m_23999
    out_arrsizze_37764 = n_24000
    out_arrsizze_37765 = p_24001
    out_mem_37762 = mem_36656
    return (out_mem_37762, out_arrsizze_37763, out_arrsizze_37764,
            out_arrsizze_37765)
  def futhark_reshapeTransp(self, images_mem_36651, m_23992, n_23993, p_23994):
    flatten_to_arg_23996 = (n_23993 * p_23994)
    binop_x_36653 = (m_23992 * flatten_to_arg_23996)
    bytes_36652 = (np.int64(4) * binop_x_36653)
    mem_36654 = opencl_alloc(self, bytes_36652, "mem_36654")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_36654, np.int64(0),
                                                images_mem_36651, np.int64(0),
                                                np.int64(1),
                                                flatten_to_arg_23996, m_23992)
    out_arrsizze_37763 = flatten_to_arg_23996
    out_arrsizze_37764 = m_23992
    out_mem_37762 = mem_36654
    return (out_mem_37762, out_arrsizze_37763, out_arrsizze_37764)
  def main(self, trend_24753_ext, k_24754_ext, n_24755_ext, freq_24756_ext,
           hfrac_24757_ext, lam_24758_ext, mappingindices_mem_36651_ext,
           images_mem_36652_ext):
    try:
      trend_24753 = np.int32(ct.c_int32(trend_24753_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_24753_ext),
                                                                                                                            trend_24753_ext))
    try:
      k_24754 = np.int32(ct.c_int32(k_24754_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_24754_ext),
                                                                                                                            k_24754_ext))
    try:
      n_24755 = np.int32(ct.c_int32(n_24755_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_24755_ext),
                                                                                                                            n_24755_ext))
    try:
      freq_24756 = np.float32(ct.c_float(freq_24756_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_24756_ext),
                                                                                                                            freq_24756_ext))
    try:
      hfrac_24757 = np.float32(ct.c_float(hfrac_24757_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_24757_ext),
                                                                                                                            hfrac_24757_ext))
    try:
      lam_24758 = np.float32(ct.c_float(lam_24758_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_24758_ext),
                                                                                                                            lam_24758_ext))
    try:
      assert ((type(mappingindices_mem_36651_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_36651_ext.dtype == np.int32)), "Parameter has unexpected type"
      N_24750 = np.int64(mappingindices_mem_36651_ext.shape[0])
      if (type(mappingindices_mem_36651_ext) == cl.array.Array):
        mappingindices_mem_36651 = mappingindices_mem_36651_ext.data
      else:
        mappingindices_mem_36651 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_36651_ext.nbytes),
                                                "mappingindices_mem_36651")
        if (np.int64(mappingindices_mem_36651_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_36651,
                          normaliseArray(mappingindices_mem_36651_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_36651_ext),
                                                                                                                            mappingindices_mem_36651_ext))
    try:
      assert ((type(images_mem_36652_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36652_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_24751 = np.int64(images_mem_36652_ext.shape[0])
      N_24752 = np.int64(images_mem_36652_ext.shape[1])
      if (type(images_mem_36652_ext) == cl.array.Array):
        images_mem_36652 = images_mem_36652_ext.data
      else:
        images_mem_36652 = opencl_alloc(self,
                                        np.int64(images_mem_36652_ext.nbytes),
                                        "images_mem_36652")
        if (np.int64(images_mem_36652_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36652,
                          normaliseArray(images_mem_36652_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_36652_ext),
                                                                                                                            images_mem_36652_ext))
    (out_mem_37762, out_arrsizze_37763, out_mem_37764, out_arrsizze_37765,
     out_mem_37766,
     out_arrsizze_37767) = self.futhark_main(mappingindices_mem_36651,
                                             images_mem_36652, N_24750, m_24751,
                                             N_24752, trend_24753, k_24754,
                                             n_24755, freq_24756, hfrac_24757,
                                             lam_24758)
    sync(self)
    return (cl.array.Array(self.queue, (out_arrsizze_37763,), ct.c_int32,
                           data=out_mem_37762), cl.array.Array(self.queue,
                                                               (out_arrsizze_37765,),
                                                               ct.c_float,
                                                               data=out_mem_37764),
            cl.array.Array(self.queue, (out_arrsizze_37767,), ct.c_float,
                           data=out_mem_37766))
  def mainDetailed(self, trend_24016_ext, k_24017_ext, n_24018_ext,
                   freq_24019_ext, hfrac_24020_ext, lam_24021_ext,
                   mappingindices_mem_36651_ext, images_mem_36652_ext):
    try:
      trend_24016 = np.int32(ct.c_int32(trend_24016_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_24016_ext),
                                                                                                                            trend_24016_ext))
    try:
      k_24017 = np.int32(ct.c_int32(k_24017_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_24017_ext),
                                                                                                                            k_24017_ext))
    try:
      n_24018 = np.int32(ct.c_int32(n_24018_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_24018_ext),
                                                                                                                            n_24018_ext))
    try:
      freq_24019 = np.float32(ct.c_float(freq_24019_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_24019_ext),
                                                                                                                            freq_24019_ext))
    try:
      hfrac_24020 = np.float32(ct.c_float(hfrac_24020_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_24020_ext),
                                                                                                                            hfrac_24020_ext))
    try:
      lam_24021 = np.float32(ct.c_float(lam_24021_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_24021_ext),
                                                                                                                            lam_24021_ext))
    try:
      assert ((type(mappingindices_mem_36651_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_36651_ext.dtype == np.int32)), "Parameter has unexpected type"
      N_24013 = np.int64(mappingindices_mem_36651_ext.shape[0])
      if (type(mappingindices_mem_36651_ext) == cl.array.Array):
        mappingindices_mem_36651 = mappingindices_mem_36651_ext.data
      else:
        mappingindices_mem_36651 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_36651_ext.nbytes),
                                                "mappingindices_mem_36651")
        if (np.int64(mappingindices_mem_36651_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_36651,
                          normaliseArray(mappingindices_mem_36651_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_36651_ext),
                                                                                                                            mappingindices_mem_36651_ext))
    try:
      assert ((type(images_mem_36652_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36652_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_24014 = np.int64(images_mem_36652_ext.shape[0])
      N_24015 = np.int64(images_mem_36652_ext.shape[1])
      if (type(images_mem_36652_ext) == cl.array.Array):
        images_mem_36652 = images_mem_36652_ext.data
      else:
        images_mem_36652 = opencl_alloc(self,
                                        np.int64(images_mem_36652_ext.nbytes),
                                        "images_mem_36652")
        if (np.int64(images_mem_36652_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36652,
                          normaliseArray(images_mem_36652_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_36652_ext),
                                                                                                                            images_mem_36652_ext))
    (out_mem_37762, out_arrsizze_37763, out_mem_37764, out_arrsizze_37765,
     out_mem_37766, out_arrsizze_37767, out_mem_37768, out_arrsizze_37769,
     out_mem_37770, out_arrsizze_37771, out_arrsizze_37772, out_mem_37773,
     out_arrsizze_37774, out_arrsizze_37775, out_mem_37776, out_arrsizze_37777,
     out_mem_37778, out_arrsizze_37779, out_mem_37780, out_arrsizze_37781,
     out_mem_37782, out_arrsizze_37783, out_mem_37784, out_arrsizze_37785,
     out_arrsizze_37786, out_mem_37787, out_arrsizze_37788,
     out_arrsizze_37789) = self.futhark_mainDetailed(mappingindices_mem_36651,
                                                     images_mem_36652, N_24013,
                                                     m_24014, N_24015,
                                                     trend_24016, k_24017,
                                                     n_24018, freq_24019,
                                                     hfrac_24020, lam_24021)
    sync(self)
    return (cl.array.Array(self.queue, (out_arrsizze_37763,), ct.c_float,
                           data=out_mem_37762), cl.array.Array(self.queue,
                                                               (out_arrsizze_37765,),
                                                               ct.c_int32,
                                                               data=out_mem_37764),
            cl.array.Array(self.queue, (out_arrsizze_37767,), ct.c_int32,
                           data=out_mem_37766), cl.array.Array(self.queue,
                                                               (out_arrsizze_37769,),
                                                               ct.c_float,
                                                               data=out_mem_37768),
            cl.array.Array(self.queue, (out_arrsizze_37771, out_arrsizze_37772),
                           ct.c_float, data=out_mem_37770),
            cl.array.Array(self.queue, (out_arrsizze_37774, out_arrsizze_37775),
                           ct.c_float, data=out_mem_37773),
            cl.array.Array(self.queue, (out_arrsizze_37777,), ct.c_float,
                           data=out_mem_37776), cl.array.Array(self.queue,
                                                               (out_arrsizze_37779,),
                                                               ct.c_int32,
                                                               data=out_mem_37778),
            cl.array.Array(self.queue, (out_arrsizze_37781,), ct.c_float,
                           data=out_mem_37780), cl.array.Array(self.queue,
                                                               (out_arrsizze_37783,),
                                                               ct.c_float,
                                                               data=out_mem_37782),
            cl.array.Array(self.queue, (out_arrsizze_37785, out_arrsizze_37786),
                           ct.c_float, data=out_mem_37784),
            cl.array.Array(self.queue, (out_arrsizze_37788, out_arrsizze_37789),
                           ct.c_float, data=out_mem_37787))
  def remove_nans(self, nan_value_24002_ext, images_mem_36651_ext):
    try:
      nan_value_24002 = np.int16(ct.c_int16(nan_value_24002_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i16",
                                                                                                                            type(nan_value_24002_ext),
                                                                                                                            nan_value_24002_ext))
    try:
      assert ((type(images_mem_36651_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36651_ext.dtype == np.int16)), "Parameter has unexpected type"
      m_23999 = np.int64(images_mem_36651_ext.shape[0])
      n_24000 = np.int64(images_mem_36651_ext.shape[1])
      p_24001 = np.int64(images_mem_36651_ext.shape[2])
      if (type(images_mem_36651_ext) == cl.array.Array):
        images_mem_36651 = images_mem_36651_ext.data
      else:
        images_mem_36651 = opencl_alloc(self,
                                        np.int64(images_mem_36651_ext.nbytes),
                                        "images_mem_36651")
        if (np.int64(images_mem_36651_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36651,
                          normaliseArray(images_mem_36651_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]i16",
                                                                                                                            type(images_mem_36651_ext),
                                                                                                                            images_mem_36651_ext))
    (out_mem_37762, out_arrsizze_37763, out_arrsizze_37764,
     out_arrsizze_37765) = self.futhark_remove_nans(images_mem_36651, m_23999,
                                                    n_24000, p_24001,
                                                    nan_value_24002)
    sync(self)
    return cl.array.Array(self.queue, (out_arrsizze_37763, out_arrsizze_37764,
                                       out_arrsizze_37765), ct.c_float,
                          data=out_mem_37762)
  def reshapeTransp(self, images_mem_36651_ext):
    try:
      assert ((type(images_mem_36651_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_36651_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_23992 = np.int64(images_mem_36651_ext.shape[0])
      n_23993 = np.int64(images_mem_36651_ext.shape[1])
      p_23994 = np.int64(images_mem_36651_ext.shape[2])
      if (type(images_mem_36651_ext) == cl.array.Array):
        images_mem_36651 = images_mem_36651_ext.data
      else:
        images_mem_36651 = opencl_alloc(self,
                                        np.int64(images_mem_36651_ext.nbytes),
                                        "images_mem_36651")
        if (np.int64(images_mem_36651_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_36651,
                          normaliseArray(images_mem_36651_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]f32",
                                                                                                                            type(images_mem_36651_ext),
                                                                                                                            images_mem_36651_ext))
    (out_mem_37762, out_arrsizze_37763,
     out_arrsizze_37764) = self.futhark_reshapeTransp(images_mem_36651, m_23992,
                                                      n_23993, p_23994)
    sync(self)
    return cl.array.Array(self.queue, (out_arrsizze_37763, out_arrsizze_37764),
                          ct.c_float, data=out_mem_37762)